import packages from "../../../../../../database/database/packages.json";
import packages_web from "../../../../../../database/database/web.json";
import packages_gui from "../../../../../../database/database/gui.json";
import packages_games from "../../../../../../database/database/games.json";
import type { Repo } from "@types";
import { convert2markdown } from "@functions";
static const package_database: Repo[] = [
  ...packages,
  ...packages_web,
  ...packages_games,
  ...packages_gui,
];
$ const repoPromise: Promise<Repo> = new Promise(async (resolve, reject) => {
  const repositories = [...package_database];
  const { repo_from, user_name, repo_name } = $global.params;
  const repoPath = `${user_name}/${repo_name}`;

  let repository;

  if (repo_from === "github") {
    // GitHub repos (no repo_from attribute)
    repository = repositories.find(
      (repo) => repo.full_name === repoPath && repo.repo_from === "github",
    );
  } else if (repo_from === "gitlab") {
    // GitLab repos
    repository = repositories.find(
      (repo) => repo.full_name === repoPath && repo.repo_from === "gitlab",
    );
  } else if (repo_from === "codeberg") {
    // Codeberg repos
    repository = repositories.find(
      (repo) => repo.full_name === repoPath && repo.repo_from === "codeberg",
    );
  } else {
    return reject("Error: Invalid repo_from value");
  }

  if (!repository) {
    return reject("/404");
  }

  const compressedRepo: Repo = {
    content_is_correct: true,
    name: repository.name,
    full_name: repository.full_name,
    readme_content: await convert2markdown(repository.readme_content),
    created_at: repository.created_at,
    description: repository.description,
    tags_url: repository.tags_url,
    open_issues: repository.open_issues,
    license: repository.license,
    stargazers_count: repository.stargazers_count,
    forks_count: repository.forks_count,
    watchers_count: repository.watchers_count,
    topics: repository.topics,
    avatar_url: repository.avatar_url,
    dependencies: repository.dependencies,
    dependents: repository.dependents,
    size: repository.size,
    fork: repository.fork,
    repo_from: repo_from,
    has_build_zig: repository.has_build_zig,
    has_build_zig_zon: repository.has_build_zig_zon,
    updated_at: repository.updated_at,
    default_branch: repository.default_branch,
    zig_minimum_version: repository.zig_minimum_version,
  };
  resolve(compressedRepo);
});

await(repoPromise) client-reorder timeout=100000000
  @placeholder
    div.flex.items-center.justify-center.min-h-screen
      div.animate-pulse.text-xl -- Loading...

  @then|repo|
    div class="min-h-screen p-2 sm:p-4 md:p-6 lg:p-8"
      if(repo.content_is_correct)
        <!-- Package Card -->
        custom_card [
          section="special-package"
          Card_Details=repo
          repo_from=repo.repo_from
        ]

        div class="mt-4 sm:mt-8 space-y-4 sm:space-y-8"
          <!-- Dependencies Section -->
          if(repo.dependencies && repo.dependencies?.length > 0)
            div class="bg-slate-800 rounded-lg sm:rounded-xl p-3 sm:p-6 shadow-lg sm:shadow-xl"
              h2 class="text-xl sm:text-2xl font-bold mb-3 sm:mb-4 text-white border-b border-slate-600 pb-2"
                -- Dependencies
              div class="grid gap-3 sm:gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
                for|dependency| of=repo.dependencies
                  if(dependency)
                    div class="bg-slate-700 rounded-lg p-3 sm:p-4 hover:bg-slate-600 transition-all duration-300 transform hover:scale-102"
                      div class="space-y-2 sm:space-y-3"
                        div class="flex items-center space-x-2 text-sm sm:text-base"
                          span.text-emerald-400.font-medium -- Name
                          span.text-white
                            --
                            ${dependency.type !== "remote" ? "./" : ""}${dependency.name}
                            --
                        div.space-y-1
                          div class="text-sky-400 font-medium text-sm sm:text-base"
                            -- URL
                          a [
                            href=dependency.url
                            target="_blank"
                            class="text-white hover:text-sky-300 text-xs sm:text-sm break-all"
                          ]
                            -- ${dependency.url}
                        div.space-y-1
                          div class="text-purple-400 font-medium text-sm sm:text-base"
                            -- Tag URL
                          a [
                            href=dependency.tar_url
                            target="_blank"
                            class="text-white hover:text-purple-300 text-xs sm:text-sm break-all"
                          ]
                            -- ${dependency.tar_url}
                        div.flex.items-center.space-x-2
                          span class="text-amber-400 font-medium text-sm sm:text-base"
                            -- Commit
                          code class="bg-slate-800 px-2 py-1 rounded text-xs sm:text-sm font-mono"
                            -- ${dependency.commit}
          <!-- Dependents Section -->
          if(repo.dependents && repo.dependents?.length > 0)
            div class="bg-slate-800 rounded-lg sm:rounded-xl p-3 sm:p-6 shadow-lg sm:shadow-xl"
              h2 class="text-xl sm:text-2xl font-bold mb-3 sm:mb-4 text-white border-b border-slate-600 pb-2"
                -- Dependents
              div class="grid gap-3 sm:gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
                for|dependent| of=repo.dependents
                  div class="bg-slate-700 rounded-lg p-3 sm:p-4 hover:bg-slate-600 transition-all duration-300 transform hover:scale-102"
                    a [
                      href=dependent
                      class="text-white hover:text-sky-300 text-sm sm:text-base break-all"
                    ]
                      -- ${dependent}
          <!-- README Section -->
          div class="bg-slate-800 rounded-lg sm:rounded-xl p-3 sm:p-6 shadow-lg sm:shadow-xl"
            h2 class="text-xl sm:text-2xl font-bold mb-3 sm:mb-4 text-white border-b border-slate-600 pb-2"
              -- README
            div class="prose prose-invert max-w-none readmeDiv prose-sm sm:prose-base"
              -- $!{repo.readme_content}
      else
        h1 class="text-3xl sm:text-4xl text-center text-red-500" -- 404!
  @catch|_|
    h1 class="text-3xl sm:text-4xl text-center text-red-500" -- 404!

script type="module"
  --
  import { highlightElements as e } from "https://cdn.jsdelivr.net/npm/zilite@0.0.25";
  import { zig as n } from "https://cdn.jsdelivr.net/npm/zilite@0.0.25/src/language/zig.js";
  import { bash as i } from "https://cdn.jsdelivr.net/npm/zilite@0.0.25/src/language/bash.js";
  import { diff as t } from "https://cdn.jsdelivr.net/npm/zilite@0.0.25/src/language/diff.js";
  e(n, "language-zig");
  e(i, "language-bash");
  e(i, "language-console");
  e(i, "language-sh");
  e(t, "language-diff");
  --

style {
  @import url("https://cdn.jsdelivr.net/npm/zilite@0.0.25/src/styles/darkMode.css");

  :root {
    --content-width: 100%;
    --max-content-width: 1400px;
  }

  .readmeDiv {
    img {
      max-width: 100%;
      height: auto;
      border-radius: 0.375rem;
    }

    pre {
      overflow-x: auto;
      padding: 0.75rem;
      margin: 0.5rem 0;
      border-radius: 0.375rem;
      font-size: 0.875rem;
      line-height: 1.5;
      -webkit-overflow-scrolling: touch;
    }
  }

  .prose-sm {
    font-size: 0.875rem;

    code {
      font-size: 0.75rem;
    }

    pre {
      font-size: 0.75rem;
    }
  }

  @media (max-width: 640px) {
    .p-2 {
      padding: 0.5rem;
    }

    .space-y-2 > * + * {
      margin-top: 0.5rem;
    }

    .break-all {
      word-break: break-all;
    }
  }
}
