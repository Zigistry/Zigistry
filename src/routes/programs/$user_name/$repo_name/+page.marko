import database from "@database";
import type { Repo, Dependency } from "@types";
import { convert2markdown } from "@functions";
import zon2json from "z2j";
$ const repoPromise: Promise<{
  compressedRepo: Repo;
}> = new Promise(async (resolve, reject) => {
  const { user_name, repo_name } = $global.params;
  const repoPath = `${user_name}/${repo_name}`;
  var repository: Repo | undefined = database.programs.find(
    (repo) => repo.full_name === repoPath,
  );
  if (!repository) {
    return reject("/404");
  }

  var zig_version = "unknown";
  const dependencies: Dependency[] | undefined = [];
  if (repository.has_build_zig_zon) {
    const url = `https://raw.githubusercontent.com/${repository.full_name}/master/build.zig.zon`;
    const res = await fetch(url);
    var zonData = await res.text();
    var zonAsJsonData = zon2json(zonData);

    try {
      const json_parsed = JSON.parse(zonAsJsonData); // No need for await here

      if ("minimum_zig_version" in json_parsed)
        zig_version = json_parsed.minimum_zig_version;

      // Check if 'dependencies' exists in the parsed JSON first
      if ("dependencies" in json_parsed) {
        const deps: {
          [name: string]: {
            url: string | undefined;
            path: string | undefined;
            hash: string | undefined;
          };
        } = json_parsed.dependencies;

        // Iterate over the dependencies and handle them
        for (const [name, dep] of Object.entries(deps)) {
          if (dep.url && dep.hash) {
            dependencies.push({
              name,
              source: "remote",
              location: dep.url,
            });
          } else {
            dependencies.push({
              name,
              source: "relative",
              location: dep.path ? dep.path : "",
            });
          }
        }
      }
    } catch (_) {}
  }

  const compressedRepo: Repo = {
    contentIsCorrect: true,
    name: repository.name,
    full_name: repository.full_name,
    readme_content: await convert2markdown(repository.readme_content),
    created_at: repository.created_at,
    description: repository.description,
    tags_url: repository.tags_url,
    open_issues: repository.open_issues,
    archived: repository.archived ? true : false,
    license: repository.license,
    stargazers_count: repository.stargazers_count,
    forks_count: repository.forks_count,
    watchers_count: repository.watchers_count,
    topics: repository.topics,
    avatar_url: repository.avatar_url,
    dependencies: dependencies,
    size: repository.size,
    fork: repository.fork,
    berg: repository.berg,
    gitlab: repository.gitlab,
    has_build_zig: repository.has_build_zig,
    has_build_zig_zon: repository.has_build_zig_zon,
    updated_at: repository.updated_at,
  };
  resolve({ compressedRepo: compressedRepo });
});

await(repoPromise) client-reorder timeout=100000000
  @placeholder
    <!-- Displays while promise is pending -->
    label
      -- Loadingâ€¦
      progress

  @then|repo|
    div.p-5
      if(repo.compressedRepo.contentIsCorrect)
        custom_card section="special-program" Card_Details=repo.compressedRepo
        div class="mb-4 border-b border-gray-200 dark:border-gray-700"
          ul#default-tab [
            class="flex flex-wrap -mb-px text-sm font-medium text-center"
            data-tabs-toggle="#default-tab-content"
            role="tablist"
          ]
            li.me-2 role="presentation"
              button.inline-block.p-4.border-b-2.rounded-t-lg#profile-tab [
                data-tabs-target="#profile"
                type="button"
                role="tab"
                aria-controls="profile"
                aria-selected="false"
              ]
                -- Readme
            li.me-2 role="presentation"
              button#dashboard-tab [
                class="inline-block p-4 border-b-2 rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300"
                data-tabs-target="#dashboard"
                type="button"
                role="tab"
                aria-controls="dashboard"
                aria-selected="false"
              ]
                -- Dependencies
        div#default-tab-content
          div#profile [
            class="hidden p-4 rounded-lg bg-gray-50 dark:bg-gray-800"
            role="tabpanel"
            aria-labelledby="profile-tab"
          ]
            div class="text-sm text-gray-500 dark:text-gray-400 readmeDiv"
              -- $!{repo.compressedRepo.readme_content}
          div#dashboard class="" role="tabpanel" aria-labelledby="dashboard-tab"
            div class=""
              if(
                repo.compressedRepo.dependencies &&
                repo.compressedRepo.dependencies?.length > 0
              )
                for|dependency| of=(repo.compressedRepo.dependencies)
                  div.bg-slate-700.w-full.p-2.rounded-lg.mb-4.text-xl
                    --
                    ${dependency.source !== "remote" ? "./" : ""}${dependency.name}
                    --
              else
                h1 -- No dependencies found
      else
        h1 -- 404!
  @catch|_|
    h1 -- 404!

style {
  @import url("https://cdn.jsdelivr.net/npm/zilite@0.0.25/src/styles/darkMode.css");
}
