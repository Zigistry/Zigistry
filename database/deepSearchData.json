{"jedisct1/libsodium":"a modern, portable, easy to use crypto library. 404 not found","zigzap/zap":"blazingly fast backends in zig  zap  blazingly fast backends in zig httpsgithubcomzigzapzapactionsworkflowsbuildcurrentzigymlbadgesvg httpsgithubcomzigzapzapactionsworkflowsmastercheckymlbadgesvg discordhttpsimgshieldsiodiscord1107835896356675706labelchatlogodiscordstyleplastichttpsdiscordggjqaan6ubyj zap is the zighttpsziglangorg replacement for the rest apis i used to write in pythonhttpspythonorg with flaskhttpsflaskpalletsprojectscom and mongodbhttpswwwmongodbcom etc it can be considered to be a microframework for web applications what i needed as a replacement was a blazingly fast and robust http server that i could use with zig and i chose to wrap the superb evented networking c library faciliohttpsfacilio zap wraps and patches facilio  the c web application frameworkhttpsfacilio  zap is fast robust and stable after having used zap in production for a year i can confidently assert that it proved to be   blazingly fast    extremely robust  exactly the goals i set out to achieve  faq  q what version of zig does zap support  zap uses the latest stable zig release 0130 so you dont have to keep up with frequent breaking changes its an lts feature  q can zap build with zigs master branch  see the zigmaster branch an example of how to use it is herehttpsgithubcomzigzaphellomaster please note that the zigmaster branch is not the official master branch of zap be aware that i dont provide buildzigzon snippets or tagged releases for it for the time being if you know what you are doing that shouldnt stop you from using it with zig master though  q where is the api documentation  docs are a work in progress you can check them out herehttpszigzaporgzap  run zig build rundocserver to serve them locally  q does zap work on windows  no this is due to the underlying facilio c library future versions of facilio might support windows but there is no timeline yet your best options on windows are wsl2 or a docker container  q does zap support tls  https  yes zap supports using the systems openssl see the httpsexampleshttpshttpszig example and make sure to build with the dopenssl flag or the environment variable zapuseopenssltrue  openssl  true in dependent projects buildzig bdependencyzap   zapuseopenssltrue zig build https  zig build dopenssltrue https  heres what works i recommend checking out endpointbased examples for more realistic use cases most of the examples are super stripped down to only include whats necessary to show a feature note to see api docs run zig build rundocserver to specify a custom port and docs dir zig build docserver  zigoutbindocserver port8989 docspathtodocs  super easy build process zaps buildzig now uses the new zig package manager for its cdependencies no git submodules anymore  tested on linux and macos arm m1  helloexampleshellohellozig welcomes you with some static html  routesexamplesroutesrouteszig a super easy example dispatching on the http path note the dispatch in the example is a superbasic diystyle dispatch see endpointbased examples for more realistic use cases  serveexamplesserveservezig the traditional static web server with optional dynamic request handling  sendfileexamplessendfilesendfilezig simple example of how to send a file honoring compression headers etc  bindataformpostexamplesbindataformpostbindataformpostzig example to receive binary files via form post  hellojsonexampleshellojsonhellojsonzig serves you json dependent on http path  endpointexamplesendpoint a simple json rest api example featuring a users endpoint for performing putdeletegetpost operations and listing users together with a simple frontend to play with it also introduces a stop endpoint that shuts down zap so memory leak detection can be performed in main  check out how mainzigexamplesendpointmainzig uses zigs awesome generalpurposeallocator to report memory leaks when zap is shut down the stopendpointexamplesendpointstopendpointzig just stops zap when receiving a request on the stop route  mustacheexamplesmustachemustachezig a simple example using mustachehttpsmustachegithubio templating  endpoint authenticationexamplesendpointauthendpointauthzig a simple authenticated endpoint read more about authentication heredocauthenticationmd  http parametersexampleshttpparamshttpparamszig a simple example sending itself query parameters of all supported types  cookiesexamplescookiescookieszig a simple example sending itself a cookie and responding with a session cookie  websocketsexampleswebsockets a simple websockets chat for the browser  usernamepassword session authenticationexamplesuserpasssessionauth a convenience authenticator that redirects unauthenticated requests to a login page and sends cookies containing session tokens based on usernamepassword pairs received via post request  middleware supportexamplesmiddlewaremiddlewarezig chain together request handlers in middleware style provide custom context structs totally typesafe using zigceptiondoczigceptionmd if you come from go this might appeal to you  middleware with endpoint supportexamplesmiddlewarewithendpointmiddlewarewithendpointzig same as the example above but this time we use an endpoint at the end of the chain by wrapping it via zapmiddlewareendpointhandler mixing endpoints in your middleware chain allows for usage of zaps authenticated endpoints and your custom endpoints since endpoints use a simpler api you have to use rsetusercontext and rgetusercontext with the request if you want to access the middleware context from a wrapped endpoint since this mechanism uses an anyopaque pointer underneath to not break the endpoint api it is less typesafe than zapmiddlewares use of contexts  per request contextssrczapzigl102  with the introduction of setusercontext and getusercontext you can of course use those two in projects that dont use zapendpoint or zapmiddleware too if you really really absolutely dont find another way to solve your context problem we recommend using a zapendpoint inside of a struct that can provide all the context you need ","jedisct1/minisign":"a dead simple tool to sign files and verify digital signatures. codeql scanhttpsgithubcomjedisct1minisignworkflowscodeql20scanbadgesvg  minisign minisign is a dead simple tool to sign files and verify signatures for more information please refer to the minisign documentationhttpsjedisct1githubiominisign tarballs and precompiled binaries can be verified with the following public key rwqf6lrcga9i53mlyeco4izt51tgppvwucnsch1cbm0qtaln73y7gfo3  compilation  installation  building with zig dependencies  libsodiumhttpslibsodiumorg optional  zighttpsziglangorg compilation with libsodium dynamically linked libsodium will need to be installed on the system for the command to run  zig build doptimizereleasesmall compilation with libsodium statically linked libsodium will only be needed for compilation  zig build doptimizereleasesmall dstatic compilation without libsodium no dependencies required  zig build doptimizereleasesmall dwithoutlibsodium the resulting binary can be found in zigoutbinminisign in all these examples releasefast can be replaced with releasesmall to favor speed over size  building with cmake and gcc or clang dependencies  libsodiumhttpslibsodiumorg required  cmake  pkgconfig  gcc or clang compilation  mkdir build  cd build  cmake   make  make install alternative configuration for static binaries  cmake d staticlibsodium1  or  cmake d buildstaticexecutables1   prebuilt packages minisign is also available in homebrew  brew install minisign minisign is also available in scoop on windows  scoop install minisign minisign is also available in chocolatey on windows  choco install minisign minisign is also available with docker  docker run i rm jedisct1minisign for example verifying a signature using the docker image can be done with  docker run v minisign e homeminisign w minisign  it rm jedisct1minisign  vm filetoverify p minisignpub the image can be verified with the following cosign public key text begin public key mfkwewyhkozizj0caqyikozizj0daqcdqgaexjzwrlc6c58w7zzmqnx6mugty99c oqtdtjecix9lf9hebs1j1fzzhrdrhv4otqcq0jtw9pxnrsszlk1fbke5w end public key   additional tools libraries and implementations  minizignhttpsgithubcomjedisct1zigminisign is a compact implementation in zig that can also use sshencoded keys  minisignmischttpsgithubcomjaybrownminisignmisc is a very nice set of workflows and scripts for macos to verify and sign files with minisign  gominisignhttpsgithubcomjedisct1gominisign is a small module in go to verify minisign signatures  rustminisignhttpsgithubcomjedisct1rustminisign is a minisign library written in pure rust that can be embedded in other applications  rsign2httpsgithubcomjedisct1rsign2 is a reimplementation of the commandline tool in rust  minisign gohttpsgithubcomaeadminisign is a rewrite of minisign in the go language it reimplements the cli but can also be used as a library  minisignverifyhttpsgithubcomjedisct1rustminisignverify is a small rust crate to verify minisign signatures  minisignnethttpsgithubcombitbeansminisignnet is a net library to handle and create minisign signatures  minisignhttpsgithubcomchmdiederichsminisign a javascript implementation  webassembly implementations of rsign2httpswapmiopackagejedisct1rsign2 and minisignclihttpswapmiopackagejedisct1minisign are available on wapm  minisignphphttpsgithubcomsoatokminisignphp is a php implementation  pyminisignhttpsgithubcomx13apyminisign is a python implementation  minisignhttpshexdocspmminisignminisignhtml is an elixir implementation verification only  signature determinism this implementation uses deterministic signatures unless libsodium was compiled with the ed25519nondeterministic macro defined this adds random noise to the computation of eddsa nonces other implementations can choose to use nondeterministic signatures by default they will remain fully interoperable with implementations using deterministic signatures ","capy-ui/capy":"💻build one codebase and get native ui on windows, linux and web a hrefhttpscapyuiorg p aligncenter picture source mediapreferscolorscheme dark srcsethttpscapyuiorgimgcapybig2darkpng img srchttpscapyuiorgimgcapybig2png altcapy ui height200px picture p a as of now capy is not ready for use in production as im still making breaking changes capy targets zig version 0140dev19113bf89f55c  2024100mach nominated zig versionshttpsmachengineorgdocsnominatedzig  it doesnt work on zig 0130  code coveragehttpsimgshieldsiocodecovcgithubcapyuicapystyleforthebadgehttpsappcodecovioghcapyuicapy mpl20 licensehttpsimgshieldsiogithublicensecapyuicapystyleforthebadgehttpsgithubcomcapyuicapyblobmasterlicense the glorius software in actionhttpsrawgithubusercontentcomzenith391bottomzigguimaingithubscreenshotpng  introduction capy is a gui library for zig it is mainly intended for creating applications using native controls from the operating system capy is a declarative ui library aiming to be easy to write for and versatile it has been made with the goal to empower standalone ui applications integration in games or any other rendering process is a nongoal  features  use zig for frontend and backend  accessibility compatibility with almost all accessibility tools  crossplatform  uses the target os toolkit  crosscompilable from any platform to any other platform  tiny executables  every examplehttpsgithubcomcapyuicapytreemasterexampless size  2mb which is smaller than hello world in go  getting started if youre starting a new project simply clone capytemplatehttpsgithubcomcapyuicapytemplate and follow build instructions otherwise or for more information please look in the docshttpscapyuiorgdocsgettingstartedinstallation you can ask questions and receive updates on the capyui matrix channelhttpsmatrixtocapyuimatrixorg  usage a simple application using capy zig const capy  importcapy const std  importstd pub usingnamespace capycrossplatform pub fn main void  try capyinit var window  try capywindowinit try windowset capycolumn spacing  10    have 10px spacing between each columns element capyrow spacing  5    have 5px spacing between each rows element capybutton label  save onclick  ptrcastbuttonclicked  capybutton label  run onclick  ptrcastbuttonclicked    expanded means the widget will take all the space it can  in the parent container capyexpanded capytextarea text  hello world     windowsetpreferredsize800 600 windowshow capyruneventloop  fn buttonclickedbutton capybutton void  stdloginfoyou clicked the button with text s buttongetlabel   it is easy to add something like a button or a text area the example can already be used to notice a widgets parameters are usually enclosed in anonymous structs  label  save  you can also see that simply wrapping a widget with capyexpanded   will tell it to take all the space it can  contributing contributing can be as simple as opening an issue and detailling what bug you encountered or what feature you wish to have if you want to help the project more directly you can fork the project and then create a pull request  supported platforms a platform is considered supported only if it can be built to from every other os legends   working and can be crosscompile from all platforms supported by zig   experimental   planned  desktop  windows x8664  windows i386  macos m1  macos x8664  linux x8664  linux i386  linux aarch64 pinephone pinebook  freebsd x8664  mobile  android  ios  web  webassembly note as theres no official gui library for linux gtk 4 has been chosen as it is the one that works and can be configured on the most distros its also the reason libadwaita wont be adopted as its meant for gnome and gnome only by disallowing styling and integration with other des  supported components for now not every platform supports the same components so heres a list of the ones that are supported  win32macosgtkandroidwasm  button  canvas  checkbox  dropdown  image  label  menu  navigation  navigationsidebar  scrollable  slider  tabs  textarea  textfield  window  ","zigembeddedgroup/microzig":"unified abstraction layer and hal for several microcontrollers  microzig logodesignlogotextautosvg chathttpsimgshieldsiodiscord824493524413710336svglogodiscordhttpsdiscordggshuwykk38x downloadshttpsimgshieldsiobadgezigpackagedownloadbluehttpsdownloadsmicrozigtech continuous integrationhttpsgithubcomzigembeddedgroupmicrozigactionsworkflowsbuildymlbadgesvghttpsgithubcomzigembeddedgroupmicrozigactionsworkflowsbuildyml  note this is in development breaks in the api are bound to happen  what version of zig to use zig 0140  getting started with microzig  i want to use microzig important you may not have to clone the whole repository to get started microzig uses a monorepo architecture but provides a lot of different packages if you just want to get started head over to downloadsmicrozigtechhttpsdownloadsmicrozigtech and download an example for the chip family you desire microzigs version listed here match the zig versions assoicated with them so version 120 match zig 120 if you dont see the zig version here you will have to clone the repo to get started we support several chip families like the rp2 family by raspberrypi foundationhttpswwwraspberrypicomproductsrp2040 stm32 by stmicroelectronicshttpswwwstcomcontentstcomenhtml and many others unpack the example and run zig build in the resulting example folder gives you zigoutfirmware which contains the resulting files right now you gotta figure out how to flash the mcu yourself but as people say google is your friend but you can also ask for help on our discord serverhttpsdiscordggshuwykk38x  i want to contribute to microzig please see the project pagehttpsgithubcomorgszigembeddedgroupprojects1views1 its used as a place to brainstorm and organize work in zeg there will be issues marked as good first issue or drafts for larger ideas that need scopingbreaking ground on more words on contribution and development on microzig are further down belowdeveloping  introduction this repo contains the infrastructure for getting started in an embedded zig project it gets you to main specifically it offers  a single easytouse builder function that  generates your linker script  sets up packages and startup code  generalized interfaces for common devices such as uart  device drivers for interacting with external hardware  an uncomplicated method to define xrefinterruptsinterrupts  design for microzig internals please see the design documentdocsdesignmd  repository structure  build contains the build components of microzig  core contains the shared components of microzig  port contains all official board support package  examples contains examples that can be used with the board support packages  tools contains tooling to work on microzig itself so deployment testing   design contains images and logos  versioning scheme microzig versions are tightly locked with zig versions the general scheme is zigversioncommitcount so the microzig versions will look really similar to zigs versions but with our own commit abbreviations and counters as microzig sticks to tagged zig releases zigversion will show to which zig version the microzig build is compatible consider the version 0110abcdef123 means that this microzig version has a commit starting with abcdef which was the 123rd commit of the version that is compatible with zig 0110 ","hejsil/zig-clap":"command line argument parsing library  readmemd is autogenerated please edit examplereadmemdtemplate instead   zigclap a simple and easy to use command line argument parser library for zig  installation developers tend to either use  the latest tagged release of zig  the latest build of zigs master branch depending on which developer you are you need to run different zig fetch commands sh  version of zigclap that works with a tagged release of zig  replace replace me with the version of zigclap that you want to use  see httpsgithubcomhejsilzigclapreleases zig fetch save httpsgithubcomhejsilzigclaparchiverefstagsreplace metargz  version of zigclap that works with latest build of zigs master branch zig fetch save githttpsgithubcomhejsilzigclap  then add the following to buildzig zig const clap  bdependencyclap  exerootmoduleaddimportclap clapmoduleclap   features  short arguments a  chaining abc where a and b does not take values  multiple specifications are tallied eg v v  long arguments long  supports both passing values using spacing and  a 100 a100  short args also support passing values with no spacing or  a100  this all works with chaining ba 100 ba100 ba100  supports options that can be specified multiple times e 1 e 2 e 3  print help message from parameter specification  parse help message to parameter specification  api reference automatically generated api reference for the project can be found at httpshejsilgithubiozigclap note that zig autodoc is in beta the website may be broken or incomplete  examples  clapparse the simplest way to use this library is to just call the clapparse function zig pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit  first we specify what parameters our program can take  we can use parseparamscomptime to parse a string into an array of paramhelp const params  comptime clapparseparamscomptime h help display this help and exit n number usize an option parameter which takes a value s string str an option parameter which can be specified multiple times str    initialize our diagnostics which can be used for reporting useful errors  this is optional you can also pass  to clapparse if you dont  care about the extra information diagnostics provides var diag  clapdiagnostic var res  clapparseclaphelp params clapparsersdefault  diagnostic  diag allocator  gpaallocator  catch err   report useful error and exit diagreportstdiogetstderrwriter err catch  return err  defer resdeinit if resargshelp  0 stddebugprinthelpn  if resargsnumber n stddebugprintnumber  n n for resargsstring s stddebugprintstring  sn s for respositionals0 pos stddebugprintsn pos  const clap  importclap const std  importstd  the result will contain an args field and a positionals field args will have one field for each nonpositional parameter of your program the name of the field will be the longest name of the parameter positionals will be a tuple with one field for each positional parameter the fields in args and postionals are typed the type is based on the name of the value the parameter takes since number takes a usize the field resargsnumber has the type usize note that this is only the case because clapparsersdefault has a field called usize which contains a parser that returns usize you can pass in something other than clapparsersdefault if you want some other mapping zig pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit  first we specify what parameters our program can take  we can use parseparamscomptime to parse a string into an array of paramhelp const params  comptime clapparseparamscomptime h help display this help and exit n number int an option parameter which takes a value a answer answer an option parameter which takes an enum s string str an option parameter which can be specified multiple times file    declare our own parsers which are used to map the argument strings to other  types const yesno  enum  yes no  const parsers  comptime  str  clapparsersstring file  clapparsersstring int  clapparsersintusize 10 answer  clapparsersenumerationyesno  var diag  clapdiagnostic var res  clapparseclaphelp params parsers  diagnostic  diag allocator  gpaallocator  the assignment separator can be configured number1 and number1 is now  allowed assignmentseparators    catch err  diagreportstdiogetstderrwriter err catch  return err  defer resdeinit if resargshelp  0 stddebugprinthelpn  if resargsnumber n stddebugprintnumber  n n if resargsanswer a stddebugprintanswer  sn tagnamea for resargsstring s stddebugprintstring  sn s for respositionals0 pos stddebugprintsn pos  const clap  importclap const std  importstd   subcommands there is an option for clapparse and clapparseex called terminatingpositional it allows for users of clap to implement subcommands in their cli application zig  these are our subcommands const subcommands  enum  help math  const mainparsers   command  clapparsersenumerationsubcommands   the parameters for main parameters for the subcommands are specified further down const mainparams  clapparseparamscomptime h help display this help and exit command    to pass around arguments returned by clap clapresult and clapresultex can be used to  get the return type of clapparse and clapparseex const mainargs  clapresultexclaphelp mainparams mainparsers pub fn main void  var gpastate  stdheapgeneralpurposeallocator const gpa  gpastateallocator defer   gpastatedeinit var iter  try stdprocessargiteratorinitwithallocatorgpa ","not-nik/raylib-zig":"manually tweaked, auto-generated raylib bindings for zig. https://github.com/raysan5/raylib logohttpsgithubcomnotnikraylibzigrawdevellogologopng  raylibzig manually tweaked autogenerated raylibhttpsgithubcomraysan5raylib bindings for zig bindings tested on raylib version 56dev and zig 0140 thanks to all the contributorshttpsgithubcomnotnikraylibziggraphscontributors for their help with this binding  example zig const rl  importraylib pub fn main anyerrorvoid   initialization  const screenwidth  800 const screenheight  450 rlinitwindowscreenwidth screenheight raylibzig core example  basic window defer rlclosewindow  close window and opengl context rlsettargetfps60  set our game to run at 60 framespersecond   main game loop while rlwindowshouldclose   detect window close button or esc key  update   todo update your variables here   draw  rlbegindrawing defer rlenddrawing rlclearbackgroundwhite rldrawtextcongrats you created your first window 190 200 20 lightgray      building the examples to build all available examples simply zig build examples to list available examples run zig build help if you want to run an example say basicwindow run zig build basicwindow  building and using  using raylibzigs template  execute projectsetupsh projectname this will create a folder with the name specified  you can copy that folder anywhere you want and edit the source  run zig build run at any time to test your project  in an existing project eg created with zig init download and add raylibzig as a dependency by running the following command in your project root  zig fetch save githttpsgithubcomnotnikraylibzigdevel  then add raylibzig as a dependency and import its modules and artifact in your buildzig zig const raylibdep  bdependencyraylibzig  target  target optimize  optimize  const raylib  raylibdepmoduleraylib  main raylib module const raygui  raylibdepmoduleraygui  raygui module const raylibartifact  raylibdepartifactraylib  raylib c library  now add the modules and artifact to your target as you would normally zig exelinklibraryraylibartifact exerootmoduleaddimportraylib raylib exerootmoduleaddimportraygui raygui  if you additionally want to support web as a platform with emscripten you will need to use emcczig by importing raylibzigs build script with const rlz  importraylibzig and then accessing its functions with rlzemcc refer to raylibzigs project template on how to use them  passing build options raylib allows customisations of certain parts of its build process such as choosing an opengl version building as a shared library or not including certain modules you can optionally pass these options to raylibzig dependency like so zig const raylibdep  bdependencyraylibzig  target  target optimize  optimize shared  true  build raylib as a shared library openglversion  rlzopenglversiongl21  use opengl 21 requires importing raylibzigs build script    defining feature macros raylib lets the user enable and disable options for different features loading different file formats for images fonts 3d models and audio linkage variants you can specify these options for your raylibzig build by defining the corresponding c macro before you link with it eg zig raylibartifactdefinecmacrosupportfileformatjpg null   exporting for web to export your project for the web first install emsdk once emsdk is installed set it up by running emsdk install latest find the folder where its installed and run zig build dtargetwasm32emscripten sysroot path to emsdkupstreamemscripten once that is finished the exported project should be located at zigouthtmlout  when is the binding updated i plan on updating it every mayor release 25 30 etc keep in mind these are technically header files so any implementation stuff should be updatable with some hacks on your side  what needs to be done  done set up a proper package build and a build script for the examples  port all the examples  member functionsinitialisers ","kristoff-it/superhtml":"html language server & templating language library  superhtml html language server and templating language library  html language server the super cli tool offers syntax checking and autoformatting features for html files the tool can be used either directly for example by running it on save or through a lsp client implementation   superhtml usage superhtml command options commands check check documents for syntax errors interface i print a superhtml templates interface fmt format documents lsp start the super lsp help show this menu and exit version print supers version and exit general options help h print command specific usage  warning superhtml currently only supports utf8encoded html and assumes html5 compliance eg doesnt support xhtml regardless of what you define the doctype to be  diagnostics githubvscodepng this language server is stricter than the html spec whenever it would prevent potential human errors from being reported as an example html allows for closing some tags implicitly for example the following snippet is correct html html ul li one li two ul  this will still be reported as an error by superhtml because otherwise the following snippet would have to be considered correct while its most probably a typo html liitemli   autoformatting githubvscodeautoformatgif the autoformatter has two main ways of interacting with it in order to request for horizontal  vertical alignment 1 adding  removing whitespace between the start tag of an element and its content 2 adding  removing whitespace between the last attribute of a start tag and the closing   example of rule 1 before html div pfoopdiv  after html div pfoop div   reverse before html divpfoop div  after html divpfoopdiv   example of rule 2 before html div foobar styleverylongstring  foo div  after html div foobar styleverylongstring  foo div   reverse before html div foobar styleverylongstring foo div  after html div foobar styleverylongstring foo div   editor support  vscode install the super html vscode extensionhttpsmarketplacevisualstudiocomitemsitemnameloriscrosuper  neovim 1 download a prebuilt version of superhtml from the releases section or build it yourself 2 put superhtml in your path 3 configure superhtml for your chosen lsp   neovim builtinhttpsneovimiodocuserlsphtmlvimlspstart lua vimapinvimcreateautocmdfiletype  pattern   html shtml htm  callback  function vimlspstart name  superhtml cmd   superhtml lsp  rootdir  vimfsdirnamevimfsfindgit  upward  true 1  end     lspzerohttpsgithubcomvonheikemenlspzeronvim lua local lsp  requirelspzero requirelspconfigconfigssuperhtml   defaultconfig   name  superhtml cmd  superhtml lsp filetypes  html shtml htm rootdir  requirelspconfigutilrootpatterngit   lspconfiguresuperhtml forcesetup  true   helix in versions later than 2407 superhtml is supported out of the box simply add executable to your path for 2407 and earlier add to your confighelixlanguagestoml toml languageserversuperhtmllsp command  superhtml args  lsp language name  html scope  sourcehtml roots   filetypes  html languageservers   superhtmllsp   see httpshelixeditorcom for more information on how to add new language servers  flow controlhttpsgithubcomneurocyteflow already defaults to using superhtml just add the executable to your path  vim vim should be able to parse the errors that superhtml check path this means that you can use make and the quickfix window to check for syntax errors set the makeprg to the following in your vimrc   for any html file a makecr action will populate the quickfix menu autocmd filetype html setlocal makeprgsuperhtml check   if you want to use gqmotion to format sections or the whole buffer with gggqg autocmd filetype html setlocal formatprgsuperhtml fmt stdin   zed see weethetsuperhtmlzedhttpsgithubcomweethetsuperhtmlzed  other editors follow your editor specific instructions on how to define a new language server for a given language  file format also feel free to contribute more specific instructions to this readme  add files under the editors subdirectory  templating language library superhtml is also a html templating language more on that soon  contributing superhtml tracks the latest zig release 0130 at the moment of writing  contributing to the html parser  lsp contributing to the html parser and lsp doesnt require you to be familiar with the templating language basically limiting the scope of what you have to worry about to  srcclizig  srccli  srchtml in particular you will care about srchtmltokenizerzig and srchtmlastzig you can run zig test srchtmlastzig to run parser unit tests without needing to worry the rest of the project running zig build will compile the super cli tool allowing you to also then test the lsp behavior directly from your favorite editor the lsp will log in your cache directory so you can tail f cachesupersuperlog to see what happens with the lsp ","karlseguin/http.zig":"an http/1.1 server for zig 404 not found","jetzig-framework/jetzig":"jetzig is a web framework written in zig cihttpsgithubcomjetzigframeworkjetzigactionsworkflowsciymlbadgesvghttpsgithubcomjetzigframeworkjetzigactionsworkflowsciyml jetzig logodemopublicjetzigpng jetzig is a web framework written in 100 pure zighttpsziglangorg lizard for linux os x windows and any os that can compile zig code official website jetzigdevhttpswwwjetzigdev jetzig aims to provide a rich set of userfriendly tools for building modern web applications quickly see the checklist below join us on discord  httpsdiscordggeufqssz7x6httpsdiscordggeufqssz7x6 if you are interested in jetzig you will probably find these tools interesting too  zaphttpsgithubcomzigzapzap  httpzighttpsgithubcomkarlseguinhttpzig jetzigs backend  tokamakhttpsgithubcomcztomsiktokamak  zigrouterhttpsgithubcomcloudefzigrouter  zigwebuihttpsgithubcomwebuidevzigwebui  ztshttpsgithubcomzigster64zts  zinehttpsgithubcomkristoffitzine  zinchttpsgithubcomzondevzinc  zuihttpsgithubcomthienpowzui  checklist  whitecheckmark file systembased routing with slug matching  whitecheckmark html and json response inferred from extension andor accept header  whitecheckmark jsoncompatible response data builder  whitecheckmark html templating see zmplhttpsgithubcomjetzigframeworkzmpl  whitecheckmark perrequest arena allocator  whitecheckmark sessions  whitecheckmark cookies  whitecheckmark error handling  whitecheckmark static content from public directory  whitecheckmark requestresponse headers  whitecheckmark stack trace output on error  whitecheckmark static content generation  whitecheckmark paramjson payload parsingabstracting  whitecheckmark static content parameter definitions  whitecheckmark middleware interface  whitecheckmark mime type inference  whitecheckmark email delivery  whitecheckmark background jobs  whitecheckmark generalpurpose cache  whitecheckmark development server autoreload  whitecheckmark testing helpers for testing http requestsresponses  whitecheckmark customnonconventional routes  whitecheckmark database integration  x environment configurations developmentproductionetc  x email receipt via sendgridaws sesetc  license mitlicense  contributors  zackary housendhttpsgithubcomz1fire  andreas sthrkhttpsgithubcomtrundle  karl seguinhttpsgithubcomkarlseguin  bob farrellhttpsgithubcombobf ","rockorager/libvaxis":"a modern tui library written in zig  libvaxis  it begins with them but ends with me their son vaxis  vaxis demo gifvaxisgif libvaxis does not use terminfo support for vt features is detected through terminal queries vaxis uses zig 0140  features libvaxis supports all major platforms macos windows linuxbsdand other unixlikes  rgb  hyperlinkshttpsgistgithubcomegmontkobeb114294efbcd5adb1944c9f3cb5feda osc 8  bracketed paste  kitty keyboard protocolhttpsswkovidgoyalnetkittykeyboardprotocol  fancy underlineshttpsswkovidgoyalnetkittyunderlines undercurl etc  mouse shapes osc 22  system clipboard osc 52  system notifications osc 9  system notifications osc 777  synchronized output mode 2026  unicode corehttpsgithubcomcontourterminalterminalunicodecore mode 2027  color mode updates mode 2031  inband resize reportshttpsgistgithubcomrockoragere695fb2924d36b2bcf1fff4a3704bd83 mode 2048  images kitty graphics protocolhttpsswkovidgoyalnetkittygraphicsprotocol  explicit widthhttpsgithubcomkovidgoyalkittyblobmasterdocstextsizingprotocolrst width modifiers only  usage documentationhttpsrockoragergithubiolibvaxisvaxisvaxis the library provides both a low level api suitable for making applications of any sort as well as a higher level framework the low level api is suitable for making applications of any type providing your own event loop and gives you full control over each cell on the screen the high level api called vxfw vaxis framework provides a flutterlike style of api the framework provides an application runtime which handles the event loop focus management mouse handling and more several widgets are provided and custom widgets are easy to build this api is most likely what you want to use for typical tui applications  vxfw vaxis framework lets build a simple button counter application this example can be run using the command zig build example dexamplecounter the below application has full mouse support the button and mouse shape will change style on hover on click and has enough logic to cancel a press if the release does not occur over the button try it click the button move the mouse off the button and release all of this logic is baked into the base button widget zig const std  importstd const vaxis  importvaxis const vxfw  vaxisvxfw  our main application state const model  struct   state of the counter count u32  0  the button this widget is stateful and must live between frames button vxfwbutton  helper function to return a vxfwwidget struct pub fn widgetself model vxfwwidget  return  userdata  self eventhandler  modeltypeerasedeventhandler drawfn  modeltypeeraseddrawfn    this function will be called from the vxfw runtime fn typeerasedeventhandlerptr anyopaque ctx vxfweventcontext event vxfwevent anyerrorvoid  const self model  ptrcastaligncastptr switch event   the root widget is always sent an init event as the first event users of the  library can also send this event to other widgets they create if they need to do  some initialization init  return ctxrequestfocusselfbuttonwidget keypress  key  if keymatchesc  ctrl  true   ctxquit  true return    we can request a specific widget gets focus in this case we always want to focus  our button having focus means that key events will be sent up the widget tree to  the focused widget and then bubble back down the tree to the root users can tell  the runtime the event was handled and the capture or bubble phase will stop focusin  return ctxrequestfocusselfbuttonwidget else      this function is called from the vxfw runtime it will be called on a regular interval and  only when any event handler has marked the redraw flag in eventcontext as true by  explicitly requiring setting the redraw flag vxfw can prevent excessive redraws for events  which dont change state ie mouse motion unhandled key events etc fn typeeraseddrawfnptr anyopaque ctx vxfwdrawcontext stdmemallocatorerrorvxfwsurface  const self model  ptrcastaligncastptr  the drawcontext is inspired from flutter each widget will receive a minimum and maximum  constraint the minimum constraint will always be set even if it is set to 0x0 the  maximum constraint can have null width andor height  meaning there is no constraint in  that direction and the widget should take up as much space as it needs by calling size  on the max we assert that it has some constrained size this is always the case for  the root widget  the maximum size will always be the size of the terminal screen const maxsize  ctxmaxsize  the drawcontext also contains an arena allocator that can be used for each frame the  lifetime of this allocation is until the next time we draw a frame this is useful for  temporary allocations such as the one below we have an integer we want to print as text  we can safely allocate this with the ctx arena since we only need it for this frame const counttext  try stdfmtallocprintctxarena d selfcount const text vxfwtext   text  counttext   each widget returns a surface from its draw function a surface contains the rectangular  area of the widget as well as some information about the surface or widget can we focus  it does it handle the mouse   it does not contain the location it should be within its parent only the parent can set  this via a subsurface here we will return a surface for the root widget model which  has two subsurfaces one for the text and one for the button a subsurface is a surface  with an offset and a zindex  the offset can be negative this lets a parent draw a  child and place it within itself const textchild vxfwsubsurface   origin   row  0 col  0  surface  try textdrawctx  const buttonchild vxfwsubsurface   origin   row  2 col  0  surface  try selfbuttondrawctxwithconstraints ctxmin  here we explicitly set a new maximum size constraint for the butto","kristoff-it/zine":"fast, scalable, flexible static site generator (ssg) h1 aligncenterzineh1 h3 aligncenteremfast scalable flexible static site generator ssgemh3 p aligncenterzine is pronounced like in a hrefhttpsenwikipediaorgwikizinefanemzineemaap  development status alpha stage its strongly recommended to first try zine out on a small project to get a feeling of the limits of the current implementation  getting started go to httpszinessgio to get started  development it is recommended to develop zine against a site project eg kristoffitzinessgiohttpsgithubcomkristoffitzinessgio by running zig build on the project and setting the zine dependency to a local checkout in buildzigzon zinessgiobuildzigzon zig  name  zine sample site version  000 dependencies   zine   path  zine   paths     two flags that are going to help you develop zine  ddebug builds zine in debug mode which means faster rebuilds and enabling debug logging  dlogfoo enables logging only for the specified scope can be passed multiple times to enable more than one scope see at the top of each component what is the scope name in a declaration that looks like this zineservermainzig zig const log  stdlogscopedserver  supersrcsitterzig zig const log  stdlogscopedsitter  ","judofyr/spice":"fine-grained parallelism with sub-nanosecond overhead in zig  spice parallelism with subnanosecond overhead time to calculate sum of binary tree of 100m nodes with spicebenchspicetreesum100msvg spice uses heartbeat schedulinghb to accomplish extremely efficient parallelism in zig  subnanosecond overhead turning your function into a parallelismenabled function adds less than a nanosecond of overhead  contentionfree threads will never compete ie spin over the same work adding more threads to the system will not make your program any slower but the extra threads might be completely idle since theres nothing useful to do update september 2024 chilihttpsgithubcomdragostischili is a rust port of the ideas presented here check it out the benchmark in the figure above summing over the nodes in a binary tree is typically one of the worst cases for parallelism frameworks the actual operation is extremely fast so any sort of overhead will have a measurable impact heres the exact same benchmark in rayonrayon an excellent library in rust for doing parallelism both implementations follow the same forkjoin api which gives code that is very easy to read and reason about none of the findings here would surprise anyone who deeply knows rayon and there are ways of getting better performance out of rayon by using different techniques this comes at cost of the code becoming more complicated andor behaving subpar on different types of input the purpose of this benchmark is to not discourage use of rayon on the contrary but rather demonstrate that it is possible to have both simple code and good parallelism see issue 5httpsgithubcomjudofyrspiceissues5 for a longer discussion time to calculate sum of binary tree of 100m nodes with rayonbenchrayontreesum100msvg the overhead here is roughly 15 ns from 748 ns to 2299 ns which means that at 4 threads were back to the sequential performance  just using four times as much cpu luckily we are able to get linear speedup in terms of threads initially these benchmarks were ran on a c4standard16 instance in google cloud with 16 cores rayon itself shows a nice 14x speedup from 2299 ns to 164 ns at 16 threads but compared to the baseline this ends up only being 45x due to the overhead in comparison spice scales slightly worse it only got 11x speedup when going from 1 to 16 threads however due its low overhead this is also essentially the speedup compared to the baseline its not entirely clear why the zig baseline implementation is twice as fast as the rust implementation the compiled assembly godboltrustvszig show that rust saves five registers on the stack while zig only saves three but why for the purpose of this benchmark it shouldnt matter since were only comparing against the baseline of each language it becomes even more interesting if were summing the nodes of a much smaller tree time to calculate sum of binary tree of 1000 nodes with rayonbenchrayontreesum1000svg in this scenario we have a very short duration of our program the baseline implementation takes a few microseconds in total to run for some reason the overhead is a bit higher 19 ns but more concerningly we see that performance becomes worse the more threads were adding at 32 threads its in total 60 times slower in this case were using 32 threads on a machine which only has 16 cores its not given that we would see the same slowdown for a machine with 32 cores nonetheless this scaling behavior is concerning the conventional wisdom for parallelism therefore ends up being its not worth it unless you have enough work to parallelize the example above is typically presented as a bad fit for parallelism this is understandable and pragmatic but in practice it makes it a lot more difficult to actually parallelize your code  what exactly is enough work you might need to do a lot of benchmarking with different types of input to understand this  it might be difficult to detect how much work a certain input does for instance in our binary tree we dont know the full size of it theres no obvious way for us to say if the tree is small enough dont run the parallelized code since by only looking at the root we dont the size of it  as weve seen the potential slowdown can be extreme what if 90 of your workload is like this  as your program evolves and your code does more or less things the definition of enough work will also naturally change the goal of spice is for you to never have to worry about your program becoming slower by making it parallel if youre looking to maximize the performance you should of course do elaborate benchmarking but generally with spice you can add parallelism and there will be practically no overhead the last example of summing over 1000 nodes behaves as follows in spice time to calculate sum of binary tree of 1000 nodes with spicebenchspicetreesum1000svg whats happening here is that its discovering that the duration is too short so none of the multithreading kicks in all the extra threads here are sleeping giving the cores time to execute other programs spice is primarily a research project read along to learn more about it but if youre considering using it in production you should be aware of its many limitationslimitations see the benchbench directory for more details about these specific benchmarks  table of contents  using spiceusingspice  workstealing and its inefficienciesworkstealinganditsinefficiencies  implementation detailsimplementationdetails  optimizing for static dispatchoptimizingforstaticdispatch  lowoverhead heartbeating signalinglowoverheadheartbeatingsignaling  global mutex is fine when theres no contentionglobalmutexisfinewhentheresnocontention  branchfree doublylinked listbranchfreedoublylinkedlist  minimizing the stack usageminimizingthestackusage  passing values around in registerspassingvaluesaroundinregisters  benchmarksbenchmarks  acknowledgmentsacknowledgments  limitationslimitations  faqfaq  using spice the following example demonstrates how spice works zig const spice  importspice  1 add task as a parameter fn sumt spicetask node const node i64  var res i64  nodeval if nodeleft leftchild  if noderight rightchild  var fut  spicefutureconst node i64init  3 call fork to set up work for another thread futforkt sum rightchild  4 do some work yourself res  tcalli64 sum leftchild if futjoint val   5 wait for the other thread to complete the work ","orhun/linuxwave":"generate music from the entropy of linux 🐧🎵  linuxwave  p aligncenter img srchttpsgithubcomorhunlinuxwaveblobmainassetsdemogif altdemo a hrefhttpsgithubcomorhunlinuxwavereleasesimg srchttpsimgshieldsiogithubvreleaseorhunlinuxwavestyleflatamplabelcolor1d1d1dampcolor424242amplogogithubamplogocolorwhite altgithub releasea a hrefhttpscodecovioghorhunlinuxwaveimg srchttpsimgshieldsiocodecovcghorhunlinuxwavestyleflatamplabelcolor1d1d1dampcolor424242amplogocodecovamplogocolorwhite altcoveragea a hrefhttpsgithubcomorhunlinuxwaveactionsqueryworkflow3a22continuousintegration22img srchttpsimgshieldsiogithubactionsworkflowstatusorhunlinuxwaveciymlbranchmainampstyleflatamplabelcolor1d1d1dampcolor424242amplogogithub20actionsamplogocolorwhite altcontinuous integrationa a hrefhttpsgithubcomorhunlinuxwaveactionsqueryworkflow3a22continuousdeployment22img srchttpsimgshieldsiogithubactionsworkflowstatusorhunlinuxwavecdymlstyleflatamplabelcolor1d1d1dampcolor424242amplogogithub20actionsamplogocolorwhiteamplabeldeploy altcontinuous deploymenta a hrefhttpshubdockercomrorhunpgpgtuiimg srchttpsimgshieldsiogithubactionsworkflowstatusorhunlinuxwavedockerymlstyleflatamplabelcolor1d1d1dampcolor424242amplabeldockeramplogodockeramplogocolorwhite altdocker buildsa a hrefhttpsorhundevlinuxwavedocsimg srchttpsimgshieldsiogithubactionsworkflowstatusorhunlinuxwavepagesymlstyleflatamplabelcolor1d1d1dampcolor424242amplogozigamplogocolorwhiteamplabeldocs altdocumentationa p aligncenter a hrefhttpswwwyoutubecomwatchvslieuvdmo8mstrongclick here to watch the demostrongabr a hrefhttpsopenspotifycomtrack0chxcdjs6wknl8iu71k7yplisten to linuxwave on spotifya p p details summarytable of contentssummary  vimmarkdowntoc gfm   motivation motivation  installation installation  build from sourcebuildfromsource  prerequisitesprerequisites  instructionsinstructions  binary releasesbinaryreleases  arch linuxarchlinux  void linuxvoidlinux  dockerdocker  imagesimages  usageusage  buildingbuilding  examples examples  presets presets  usage usage  scalescale  notenote  raterate  channelschannels  formatformat  volumevolume  durationduration  inputinput  outputoutput  funding funding  contributing contributing  license license  copyright copyright  vimmarkdowntoc  details  motivation   bash one liner  compose music from entropy in devurandomhttpswebarchiveorgweb20230122184930httpsblogrobertelderorgbashonelinercomposemusic  music from devurandomhttpsnewsycombinatorcomitemid11238247  installation   build from source  prerequisites  zighttpsziglangorgdownload 014  instructions 1 clone the repository sh git clone httpsgithubcomorhunlinuxwave  cd linuxwave  2 build sh zig build releasesafe  binary will be located at zigoutbinlinuxwave you can also run the binary directly via zig build run if you want to use linuxwave in your zig project as a package the api documentation is available herehttpsorhundevlinuxwavedocs  binary releases see the available binaries for different targets from the releases pagehttpsgithubcomorhunlinuxwavereleases they are automated via continuous deploymentgithubworkflowscdyml workflow release tarballs are signed with the following pgp key 0xc0701e98290d90b8httpskeyserverubuntucompkslookupsearch0xc0701e98290d90b8opvindex  arch linux linuxwave can be installed from the community repositoryhttpsarchlinuxorgpackagescommunityx8664linuxwave using pacmanhttpswikiarchlinuxorgtitlepacman sh pacman s linuxwave   void linux linuxwave can be installed from official void linux package repository sh xbpsinstall linuxwave   docker  images docker builds are automatedgithubworkflowsdockeryml and images are available in the following registries  docker hubhttpshubdockercomrorhunplinuxwave  github container registryhttpsgithubcomorhunlinuxwavepkgscontainerlinuxwave  usage the following command can be used to generate outputwav in the current working directory sh docker run rm v pwdapp orhunplinuxwavetaglatest   building custom docker images can be built from the dockerfiledockerfile sh docker build t linuxwave    examples  default read random data from devurandom to generate a 20second music composition in the a4 scale and save it to outputwav sh linuxwave  or play it directly with mpvhttpsmpvio without saving sh linuxwave o   mpv   to use the a minor blues scale sh linuxwave s 0356710 n 220 o blueswav  read from an arbitrary file and turn it into a 10second music composition in the c major scale sh linuxwave i buildzig n 26163 d 10 o musicwav  read from stdin via giving  as input sh cat readmemd  linuxwave i   write to stdout via giving  as output  linuxwave o   outputwav   presets  generate a calming music with a sample rate of 2000 hz and a 32bit littleendian signed integer format sh linuxwave r 2000 f s32le o calmwav  generate a chiptune music with a sample rate of 44100 hz stereo 2channel output and 8bit unsigned integer format sh linuxwave r 44100 f u8 c 2 o chiptunewav  generate a boss stage music with the volume of 65 sh linuxwave s 071 n 60 v 65 o bosswav  generate a spooky lowfidelity music with a sample rate of 1000 hz 4channel output sh linuxwave s 0153 n 100 r 1000 v 55 c 4 o spookymanorwav  feel free to submit a pull requestcontributingmd to show off your preset here also see this discussionhttpsgithubcomorhunlinuxwavediscussions1 for browsing the music generated by our community  usage   options s scale scale sets the musical scale default 0235781012 n note hz sets the frequency of the note default 440 a4 r rate hz sets the sample rate default 24000 c channels num sets the number of channels default 1 f format format sets ","zigimg/zigimg":"zig library for reading and writing different image formats  zig image library  this is a work in progress library to create process read and write different image formats with zighttpsziglangorg programming language  licensehttpsimgshieldsiogithublicensezigimgzigimg issuehttpsimgshieldsiogithubissuesrawzigimgzigimgstyleflat commithttpsimgshieldsiogithublastcommitzigimgzigimg cihttpsgithubcomzigimgzigimgworkflowscibadgesvg  join our discordhttpsdiscordappcomapiguilds1161009516771549374widgetpngstylebanner2httpsdiscordggtygeeuegnk   install  build  this library uses zig nominated 2024110machhttpsmachengineorgaboutnominatedzig to install using ziguphttpsgithubcommarler8997zigup  sh zigup 0140dev2577271452d22    use zigimg in your project  how to add to your project   as a submodule  1 clone this repository or add as a submodule 1 add to your buildzig  pub fn buildb stdbuild void  exerootmoduleaddanonymousmodulezigimg  rootsourcefile  bpathzigimgzig      through the package manager  1 run this command in your project folder to add zigimg to your buildzigzon  sh zig fetch save githttpsgithubcomzigimgzigimggit   2 get the module in your buildzig file  zig const zigimgdependency  bdependencyzigimg  target  target optimize  optimize   exerootmoduleaddimportzigimg zigimgdependencymodulezigimg   after you are done setting up you can look at the user guide below   test suite  to run the test suite checkout the test suitehttpsgithubcomzigimgtestsuite and run  1 checkout zigimg 1 go back one folder and checkout the test suitehttpsgithubcomzigimgtestsuite  1 run the tests with zig build  zig build test    supported image formats   image format  read  write      anim       bmp   partial   partial   farbfeld       gif       ico       iff       jpeg       pam       pbm       pcx       pgm   partial   partial   png     partial   ppm   partial   partial   qoi       tga       tiff       xbm       xpm        bmp  bitmap   version 4 bmp  version 5 bmp  24bit rgb read  write  32bit rgba read  write  doesnt support any compression   gif  graphics interchange format   support gif87a and gif89a  support animated gif with netscape application extension for looping information  supports interlaced  supports tiled and layered images used to achieve pseudo true color and more  the plain text extension is not supported   iff  interchangefileformat   supports 18 bit 24 bit ham68 ehb ilbm files  supports uncompressed byterun 1  2 atari compressed ilbm files  supports pbm deluxe paint dos encoded files  supports acbm amiga basic files  color cycle chunks are ignored  mask is not supported skipped   pam  portable arbitrary map  currently this only supports a subset of pams where  the tuple type is official see man 5 pam or easily inferred and by extension depth is 4 or less  all the images in a sequence have the same dimensions and maxval it is technically possible to support animations with different maxvals and tuple types as each animationframe has its own pixelstorage however this is likely not expected by users of the library  grayscale  grayscale with alpha  rgb555  rgb24 and rgba32  bgr24 and bgra32  rgb48 and rgba64   pbm  portable bitmap format   everything is supported   pcx  zsoft picture exchange format   support monochrome 4 color 16 color and 256 color indexed images  support 24bit rgb images   pgm  portable graymap format   support 8bit and 16bit grayscale images  16bit ascii grayscale loading not tested   png  portable network graphics   support all pixel formats supported by png grayscale grayscalealpha indexed truecolor truecolor with alpha in 8bit or 16bit  support the mininal chunks in order to decode the image  not all images in png test suite is covered but should be good enough for now   ppm  portable pixmap format   support 24bit rgb 8bit per channel  missing 48bit rgb 16bit per channel   qoi  quite ok image format   imported from httpsgithubcommasterq32zigqoi with blessing of the author   tga  truevision tga format   supports uncompressed and compressed 8bit grayscale indexed with 16bit and 24bit colormap truecolor with 16bitrgb555 24bit or 32bit bit depth  supports reading version 1 and version 2  supports writing version 2   supported pixel formats   indexed 1bpp bit per pixel 2bpp 4bpp 8bpp 16bpp  grayscale 1bpp 2bpp 4bpp 8bpp 16bpp 8bpp with alpha 16bpp with alpha  truecolor rgb332 rgb555 rgb565 rgb24 8bit per channel rgba32 8bit per channel bgr555 bgr24 8bit per channel bgra32 8bit per channel rgb48 16bit per channel rgba64 16bit per channel  float 32bit float rgba this is the neutral format   user guide   design philosophy  zigimg offers color and image functionality the library is designed around either using the convenient image or imageunmanaged struct that can read and write image formats no matter the format  or you can also use the image format directly in case you want to extract more data from the image format so if you find that image does not give you the information that you need from a png or other format you can use the png format albeit with a more manual api that image hide from you   image vs imageunmanaged  image bundle a memory allocator and imageunmanaged does not similar to stdarraylist and stdarraylistunmanaged in zig standard library for all the examples we are going to use image but it is similar with imageunmanaged    read an image  it is pretty straightforward to read an image using the image struct   from a file  you ","ikskuh/zig-network":"a smallest-common-subset of socket functions for crossplatform networking, tcp & udp  zig network abstraction small network abstraction layer around tcp  udp  features  implements the minimal api surface for basic networking  makes crossplatform abstractions  supports blocking and nonblocking io via selectpoll  udp multicast support  usage  use with the package manager buildzigzon zig  name  appname version  000 dependencies   network   url  httpsgithubcommasterq32zignetworkarchivecommithashheretargz hash  hashgoeshere     to aquire the hash please remove the line containing hash the compiler will then tell you which line to put back buildzig zig exeaddmodulenetwork bdependencynetwork modulenetwork   usage example zig const network  importnetwork test connect to an echo server  try networkinit defer networkdeinit const sock  try networkconnecttohoststdheappageallocator tcpbincom 4242 tcp defer sockclose const msg  hi from socketn try sockwriterwriteallmsg var buf 128u8  undefined stddebugprintecho  buf0try sockreaderreadallbuf0msglen   see asynczigexamplesasynczig for a more complete example on how to use asynchronous io to make a small tcp server  run examples build all examples bash  zig build examples  build a specific example bash  zig build syncexamples  to test an example eg echo bash  zigoutbinecho 3000  in another terminal bash  nc localhost 3000 hello hello how are you how are you   notes on windows receive and send function calls are asynchronous and cooperate with the standard library event loop when iomode  evented is set in the root file of your program other calls connect listen accept etc are blocking ","webui-dev/zig-webui":"use any web browser or webview as gui, with zig in the backend and modern web technologies in the frontend, all in a lightweight portable library. div aligncenter logohttpsrawgithubusercontentcomwebuidevwebuilogomainwebuizigpng  webui zig v250beta2  buildstatus httpsimgshieldsiogithubactionsworkflowstatuswebuidevgowebuiciymlbranchmainstyleforthebadgelogovlabelcolor414868logocolorc0caf5  lastcommit httpsimgshieldsiogithublastcommitwebuidevzigwebuistyleforthebadgelogogithublogocolorc0caf5labelcolor414868  releaseversion httpsimgshieldsiogithubvtagwebuidevgowebuistyleforthebadgelogowebtreeslogocolorc0caf5labelcolor414868color7664c6  license httpsimgshieldsiogithublicensewebuidevzigwebuistyleforthebadgelogoopensourcehardwarelabellicenselogocolorc0caf5labelcolor414868color8c73cc  buildstatushttpsgithubcomwebuidevgowebuiactionsquerybranch3amain  lastcommithttpsgithubcomwebuidevzigwebuipulse  releaseversionhttpsgithubcomwebuidevgowebuireleaseslatest  licensehttpsgithubcomwebuidevzigwebuiblobmainlicense  use any web browser or webview as gui with zig in the backend and modern web technologies in the frontend all in a lightweight portable library screenshothttpsrawgithubusercontentcomwebuidevwebuilogomainscreenshotpng div  features  portable needs only a web browser or a webview at runtime  one header file  lightweight few kb library  small memory footprint  fast binary communication protocol  multiplatform  multibrowser  using private profile for safety  crossplatform webview  api documentation  httpswebuidevgithubiozigwebuihttpswebuidevgithubiozigwebui  httpswebuimedocs25httpswebuimedocs25  examples there are several examples for newbies they are in the examples directory you can use zig build help to view all buildable examples like zig build runminimal this will build and run the minimal example  installation  note for 0130 and previous version please use tag 250beta2  zig 0140  nightly  to be honest i dont recommend using the nightly version because the api of the build system is not yet stable which means that there may be problems with not being able to build after nightly is updated 1 add to buildzigzon sh  it is recommended to replace the following branch with commit id zig fetch save httpsgithubcomwebuidevzigwebuiarchivemaintargz  of course you can also use githttps to fetch this package  2 config buildzig add this zig  to standardize development maybe you should use lazydependency instead of dependency  more info to see httpsziglangorgdownload0120releasenoteshtmltoclazydependencies const zigwebui  bdependencyzigwebui  target  target optimize  optimize enabletls  false  whether enable tls support isstatic  true  whether static link   add module exerootmoduleaddimportwebui zigwebuimodulewebui   it is not recommended to dynamically link libraries under windows which may cause some symbol duplication problems  see this issue httpsgithubcomziglangzigissues15107  windows without console for hide console window you can set exesubsystem  windows  ui  the web technologies borislav stanimirovhttpsibobbg discusses using html5 in the web browser as gui at the c conference 2019 youtubehttpswwwyoutubecomwatchvbbbczd4cuxg  div aligncenter a hrefhttpswwwyoutubecomwatchvbbbczd4cuxgimg srchttpsimgyoutubecomvibbbczd4cuxg0jpg altembrace modern technology using html 5 for gui in c  borislav stanimirov  cppcon 2019a div  div aligncenter cppconhttpsgithubcomwebuidevwebuiassets343115834e830caa4ca044ff825f7cd6d94083c8 div web application ui design is not just about how a product looks but how it works using web technologies in your ui makes your product modern and professional and a welldesigned web application will help you make a solid first impression on potential customers great web application design also assists you in nurturing leads and increasing conversions in addition it makes navigating and using your web app easier for your users  why use web browsers todays web browsers have everything a modern ui needs web browsers are very sophisticated and optimized therefore using it as a gui will be an excellent choice while old legacy gui lib is complex and outdated a webviewbased app is still an option however a webview needs a huge sdk to build and many dependencies to run and it can only provide some features like a real web browser that is why webui uses real web browsers to give you full features of comprehensive web technologies while keeping your software lightweight and portable  how does it work div aligncenter diagramhttpsgithubcomttytmwebuiassets34311583dbde35733161421e925c392a39f45ab3 div think of webui like a webview controller but instead of embedding the webview controller in your program which makes the final program big in size and nonportable as it needs the webview runtimes instead by using webui you use a tiny staticdynamic library to run any installed web browser and use it as gui which makes your program small fast and portable all it needs is a web browser  runtime dependencies comparison   tauri  webview  qt  webui            runtime dependencies on windows  webview2  qtcore qtgui qtwidgets  a web browser   runtime dependencies on linux  gtk3 webkitgtk  qtcore qtgui qtwidgets  a web browser   runtime dependencies on macos  cocoa webkit  qtcore qtgui qtwidgets  a web browser   supported web browsers  browser  windows  macos  linux            mozilla firefox         google chrome         microsoft edge         chromium         yandex         brave         vivaldi         epic      not available   ","hejsil/mecha":"a parser combinator library for zig  mecha a parser combinator library for the zighttpsziglangorg programming language time to make your own parser mech zig const mecha  importmecha const std  importstd const rgb  struct  r u8 g u8 b u8  fn tobytev u4 u8  return asu8 v  0x10  v  const hex1  mechaintu4  parsesign  false base  16 maxdigits  1 maptobyte const hex2  mechaintu8  parsesign  false base  16 maxdigits  2  const rgb1  mechamanynhex1 3 mapmechatostructrgb const rgb2  mechamanynhex2 3 mapmechatostructrgb const rgb  mechacombine mechaasciichardiscard mechaoneof rgb2 rgb1   test rgb  const testing  stdtesting const allocator  testingallocator const a  try rgbparseallocator aabbccvalueok try testingexpectequalasu8 0xaa ar try testingexpectequalasu8 0xbb ag try testingexpectequalasu8 0xcc ab const b  try rgbparseallocator abcvalueok try testingexpectequalasu8 0xaa br try testingexpectequalasu8 0xbb bg try testingexpectequalasu8 0xcc bb const c  try rgbparseallocator 000000valueok try testingexpectequalasu8 0 cr try testingexpectequalasu8 0 cg try testingexpectequalasu8 0 cb const d  try rgbparseallocator 000valueok try testingexpectequalasu8 0 dr try testingexpectequalasu8 0 dg try testingexpectequalasu8 0 db   ","natecraddock/zf":"a commandline fuzzy finder and zig module designed for filtering filepaths  zf shield showing current tests statushttpsgithubcomnatecraddockzfactionsworkflowstestsymlbadgesvghttpsgithubcomnatecraddockzfactionsworkflowstestsyml packaging statushttpsrepologyorgbadgetinyreposzfsvghttpsrepologyorgprojectzfversions zf is a fuzzy finder that excels at filtering filepaths  because filenames are usually uniquehttpsnathancraddockcombloginsearchofabetterfinderdatacollection matches on filenames are prioritized  when the query resembles a file path zf uses heuristics for a more accurate matchstrictpathmatching the goal of zf is to be more accurate than other fuzzy finders when filtering filepaths but it also functions as a generalpurpose fuzzy finder zf is also available as an allocationfree library for fuzzy filtering see the docs for more infohttpsgithubcomnatecraddockzfblobmaindoclibmd try zf onlinehttpsnathancraddockcomzfplayground  demo httpsuserimagesgithubusercontentcom7967463225198950a6ab568f644f40a1b202c12a35aeaed8mp4  features  fuzzy matching algorithm designed for file paths  refine search results with whitespace separated query terms  smartcase case insensitive unless the query contains uppercase letters  multiselect to output multiple selected lines  preview window  zig and c libraries for the zf ranking algorithm  docs  usage documentationhttpsgithubcomnatecraddockzfblobmaindoczfmd  library documentationhttpsgithubcomnatecraddockzfblobmaindoclibmd  why use zf zf was designed knowing that a frequent use case for fuzzy finders is filtering filepaths it also works great for any arbitrary string but it is especially good at filtering filepaths with precision specifically  matches on filenames are prioritized over filepath matches  matches on the beginning of a word are prioritized over matches in the middle of a word  nonsequential character matches are penalized  strict path matching offers even more precision here are some concrete examples  filename priority the query is matched first on the filename and then on the path if the filename doesnt match this example comes from blenders source code and was my original inspiration for designing zf text  make gnumakefile sourceblendermakesdnadnagenfileh sourceblendermakesdnainterndnagenfilec sourceblendermakesrnainternrnacachefilec sourceblendermakesdnadnacurveprofiletypesh  fzf and fzy both rank sourceblendermakesdnadnagenfileh first in the results with gnumakefile 10 items down the list  spaceseparated tokens but not every filename is unique sometimes there are codebases where there are many files with the same or similar names like an initpy in python or c and h file pairs in c in zf each space separated query term is used to narrow down the results imagine searching for an initpy file in a python project text  init initpy uiinitpy datainitpy configinitpy  at this point you can either move the selection down with kdbdownkbd or cn to find configinitpy or you can add a new token to the query string text  init c configinitpy  treating the query string as a sequence of tokens makes filtering more efficient  strict path matching this feature is a do what i mean feature more easily used than explained when the query looks like a path contains at least one path separator strict path matching is enabled path segments are the portions of a path delimited by path separators foobar has segments foo and bar with strict path matching the path segments of the query token must not span across path segments in the candidate as an example the query foo would match foobar but not foobar because the characters foo must appear in a single path segment this is useful for narrowing down results when you know the exact path structure of your files with the following paths  appmodelsfoobarbazrb appmodelsfoobarbazrb appmodelsfoobarbazrb appmonstersdungeonfoobarbazrb  strict path matching ensures that the intended path structure is found   amfbbaz appmodelsfoobarbazrb  in other fuzzy finders the string appmonstersdungeonfoobarbazrb is also included in the results strict path matching prevents this because there is a slash between onstersdungeon and nothing in the query matches the dungeon segment to end strict path matching just add a space to start a new query token  installation  arch linux an aur packagehttpsaurarchlinuxorgpackageszf is available  void linux install from official repository  sudo xbpsinstall zf   macos install with homebrew  brew install zf   nix  nixenv install zf   binaries each releasehttpsgithubcomnatecraddockzfreleaseslatest has binaries attached for macos and linux  building from source for compatibility with system package managers zf targets the latest stable release of zig  git clone httpsgithubcomnatecraddockzf cd zf zig build doptimizereleasesafe summary all  the executable will be created in zigoutbinzf for debug builds omit doptimizereleasesafe  integrations would you like to use zf in an editor try one of the following plugins  zfvimhttpsgithubcomratfactorzfvim zf integrated with vim for fuzzy file finding similar to fzfvim  telescopezfnativenvimhttpsgithubcomnatecraddocktelescopezfnativenvim a neovim telescopehttpsgithubcomnvimtelescopetelescopenvim extension to override the default lua sorter with zf  contributing i am open to contributions of all kinds but be aware that i want to keep zf small and easy to maintain ","tardy-org/zzz":"a framework for writing performant and reliable networked services.  zzz zzz logodocsimgzzzpng  installing compatible zig version 0140 compatible tardyhttpsgithubcomtardyorgtardy version v030 latest release 030  zig fetch save githttpsgithubcomtardyorgzzzv030  you can then add the dependency in your buildzig file zig const zzz  bdependencyzzz  target  target optimize  optimize modulezzz exerootmoduleaddimportzzz   zzz zzz is a framework for writing performant and reliable networked services in zig it supports both http and https zzz currently supports linux mac and windows linux is currently the recommended target for deployments  important  zzz is currently alpha software and there is still a lot changing at a fairly quick pace and certain places where things are less polished it focuses on modularity and portability allowing you to swap in your own implementations for various things consumers can provide an async implementation allowing for maximum flexibility this allows for use in standard servers as well as embeddedbare metal domains for more information look here 1 getting starteddocsgettingstartedmd 2 httpsdocshttpsmd  optimization zzz is very fast through a combination of methods such as allocation at start up and avoiding thread contention we are able to extract tons of performance out of a fairly simple implementation zzz is quite robust currently but is still early stage software its currently been running in production serving my sitehttpsmukigg with the recent migration to tardyhttpsgithubcomtardyorgtardy zzz is about as fast as gnet the fastest plaintext http server according to techempowerhttpswwwtechempowercombenchmarkshwphtestplaintextsectiondatar22 while consuming only 22 of the memory that gnet requires benchmark request per secdocsbenchmarkreqpersecccx6324png raw datadocsbenchmarkrequestccx6324csv benchmark peak memorydocsbenchmarkpeakmemoryccx6324png raw datadocsbenchmarkmemoryccx6324csv on the ccx63 instance on hetzner with 2000 max connections we are 709 faster than zaphttpsgithubcomzigzapzap and 838 faster than httpzighttpsgithubcomkarlseguinhttpzig we also utilize less memory using only 3 of the memory used by zap and 16 of the memory used by httpzig zzz can be configured to utilize minimal memory while remaining performant the provided minram example only uses 256 kb  features  built on top of tardyhttpsgithubcomtardyorgtardy an asynchronous runtime  modular asynchronous implementationhttpsmukiggpostmodularasync  iouring for linux  510  epoll for linux  2545  kqueue for bsd  mac  poll for linux mac and windows  layered router including middleware  single and multithreaded support  tls using secsockhttpsgithubcomtardyorgsecsock  memory pooling for minimal allocations  contribution unless you explicitly state otherwise any contribution intentionally submitted for inclusion in zzz by you shall be licensed as mpl20 without any additional terms or conditions ","ziglibs/zgl":"zig opengl wrapper  zgl  zig opengl bindings this library provides a thin typesafe binding for opengl  example zig  use classic opengl flavour var vao  glcreatevertexarray defer gldeletevertexarrayvao  use object oriented flavour var vertexbuffer  glbuffercreate defer vertexbufferdelete   installation add zgl to your buildzigzon with the following command zig fetch save httpsgithubcomziglibszglarchivecommithashtargz replace commithash with the latest commit or tagged release then add the following to your buildzig zig const zgl  bdependencyzgl  target  target optimize  optimize  exerootmoduleaddimportzgl zglmodulezgl  then import it with const gl  importzgl and build as normal with zig build  development philosophy this library is developed incrementally that means that functions and other things will be included ondemand and not just for the sake of completeness if you think a function is missing fork the library implement the missing function similar to the other functions and make a pull request issues that request implementation of missing functions will be closed immediatly  generated bindings this library includes opengl 45 bindings generated by zigopenglhttpsgithubcommasterq32zigopengl bindings for a different version may be substituted by replacing bindingzigsrcbindingzig ","floooh/sokol-zig":"zig bindings for the sokol headers (https://github.com/floooh/sokol) buildhttpsgithubcomflooohsokolzigactionsworkflowsmainymlbadgesvghttpsgithubcomflooohsokolzigactionsworkflowsmainymldocshttpsgithubcomflooohsokolzigactionsworkflowsdocsymlbadgesvghttpsgithubcomflooohsokolzigactionsworkflowsdocsyml autogenerated zig bindings for the sokol headershttpsgithubcomflooohsokol autogenerated docshttpsflooohgithubiosokolzigdocs wip for zig version 0140 in case of breaking changes in zig the bindings might fall behind please dont hesitate to ping me via a github issue or even better provide a pr  support for stable zig versions is in branches eg zig0120 those versions are frozen in time though related projects  pacmanzighttpsgithubcomflooohpacmanzig  chipz emulatorshttpsgithubcomflooohchipz  dear imgui sample projecthttpsgithubcomflooohsokolzigimguisample  building the samples supported platforms are windows macos linux with x11 and web on linux install the following packages libglu1mesadev mesacommondev xorgdev libasounddev or generally the dev packages required for x11 gl and alsa development to build the platformnative samples sh  just build zig build  build and run samples zig build runclear zig build runtriangle zig build runquad zig build runbufferoffsets zig build runcube zig build runnoninterleaved zig build runtexcube zig build runoffscreen zig build runinstancing zig build runmrt zig build runsaudio zig build runsgl zig build runsglcontext zig build runsglpoints zig build rundebugtext zig build rundebugtextprint zig build rundebugtextuserfont zig build runshapes  also run zig build l to get a list of build targets by default the backend 3d api will be selected based on the target platform  macos metal  windows d3d11  linux gl to force the gl backend on macos or windows build with dgltrue   zig build dgltrue runclear  the clear sample prints the selected backend to the terminal  sokolzig  zig build dgltrue runclear backend sokolgfxbackendglcore33  for the websamples run sh zig build dtargetwasm32emscripten  or to build and run one of the samples zig build runclear dtargetwasm32emscripten   when building with target wasm32emscripten for the first time the build script will install and activate the emscripten sdk into the zig package cache for the latest sdk version there is currently no build system functionality to update or delete the emscripten sdk after this first install the current workaround is to delete the global zig cache run zig env to see where the zig cache resides improving the emscripten sdk integration with the zig build system is planned for the future  how to integrate sokolzig into your project add a buildzigzon file to your project which has at least a sokol dependency zig  name  myproject version  010 paths   src buildzig buildzigzon  dependencies   sokol   url  githttpsgithubcomflooohsokolziggitcommithash hash  contenthash     the easiest way to populate or update the sokol dependency is to run this on the cmdline  zig fetch savesokol githttpsgithubcomflooohsokolziggit  this will automatically use the latest sokolzig commit for a nativeonly project a buildzig file looks entirely vanilla zig const std  importstd const build  stdbuild const optimizemode  stdbuiltinoptimizemode pub fn buildb build void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const depsokol  bdependencysokol  target  target optimize  optimize  const hello  baddexecutable name  hello target  target optimize  optimize rootsourcefile  bpathsrchellozig  hellorootmoduleaddimportsokol depsokolmodulesokol binstallartifacthello const run  baddrunartifacthello bsteprun run hellodependonrunstep   if you also want to run on the web via dtargetwasm32emscripten the web platform build must look special because emscripten must be used for linking and to run the build result in a browser a special run step must be created such a hybrid build script might look like this copied straight from pacmanzighttpsgithubcomflooohpacmanzig zig const std  importstd const build  stdbuild const optimizemode  stdbuiltinoptimizemode const sokol  importsokol pub fn buildb build void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const depsokol  bdependencysokol  target  target optimize  optimize   special case handling for native vs web build if targetresultcpuarchiswasm  try buildwebb target optimize depsokol  else  try buildnativeb target optimize depsokol    this is the regular build for all native platforms nothing surprising here fn buildnativeb build target buildresolvedtarget optimize optimizemode depsokol builddependency void  const pacman  baddexecutable name  pacman target  target optimize  optimize rootsourcefile  bpathsrcpacmanzig  pacmanrootmoduleaddimportsokol depsokolmodulesokol binstallartifactpacman const run  baddrunartifactpacman bsteprun run pacmandependonrunstep   for web builds the zig code needs to be built into a library and linked with the emscripten linker fn buildwebb build target buildresolvedtarget optimize optimizemode depsokol builddependency void  const pacman  baddstaticlibrary name  pacman target  target optimize  optimize rootsourcefile  bpathsrcpacmanzig  pacmanrootmoduleaddimportsokol depsokolmodulesokol  create a build step which invokes the emscripten linker const emsdk  depsokolbuilderdependencyemsdk  const linkstep  try sokolemlinkstepb  libmain  pacman target  target optimize  optimize emsdk  emsdk usewebgl2  true useemmalloc  true usefilesystem  false shellfilepath  depsokolpathsrcsokolwebshellhtml   and a special run step to start the web build output via emrun const run  sokolemrunstepb  name  pacman emsdk  emsdk  run","ikskuh/sdl.zig":"a shallow wrapper around sdl that provides object api and error handling  sdlzig a zig package that provides you with the means to link sdl2 to your project as well as a ziginfused header implementation allows you to not have the sdl2 headers on your system and still compile for sdl2 and a shallow wrapper around the sdl apis that allow a more zigstyle coding with zig error handling and tagged unions  getting started  linking sdl2 to your project this is an example buildzig that will link the sdl2 library to your project zig const std  importstd const sdl  importsdl  replace with the actual name in your buildzigzon pub fn buildb stdbuild void   determine compilation target const target  bstandardtargetoptions  create a new instance of the sdl2 sdk  specifiy dependency name explicitly if necessary use sdl by default const sdk  sdlinitb   create executable for our example const demobasic  baddexecutable name  demobasic rootsourcefile  bpathmygamezig target  target  sdklinkdemobasic dynamic sdllibrarysdl2  link sdl2 as a shared library  add sdl2 package that exposes the sdl2 api like sdlinit or sdlcreatewindow demobasicrootmoduleaddimportsdl2 sdkgetnativemodule  install the executable into the prefix when invoking zig build binstallartifactdemobasic    using the native api this package exposes the sdl2 api as defined in the sdl headers use this to create a normal sdl2 program zig const std  importstd const sdl  importsdl2  add this package by using sdkgetnativemodule pub fn main void  if sdlsdlinitsdlsdlinitvideo  sdlsdlinitevents  sdlsdlinitaudio  0 sdlpanic defer sdlsdlquit var window  sdlsdlcreatewindow sdl2 native demo sdlsdlwindowposcentered sdlsdlwindowposcentered 640 480 sdlsdlwindowshown  orelse sdlpanic defer   sdlsdldestroywindowwindow var renderer  sdlsdlcreaterendererwindow 1 sdlsdlrendereraccelerated orelse sdlpanic defer   sdlsdldestroyrendererrenderer mainloop while true  var ev sdlsdlevent  undefined while sdlsdlpolleventev  0  ifevtype  sdlsdlquit break mainloop    sdlsdlsetrenderdrawcolorrenderer 0xf7 0xa4 0x1d 0xff   sdlsdlrenderclearrenderer sdlsdlrenderpresentrenderer   fn sdlpanic noreturn  const str  as0const u8 sdlsdlgeterror orelse unknown error panicstdmemslicetostr 0    using the wrapper api this package also exposes the sdl2 api with a more zigstyle api use this if you want a more convenient zig experience note this api is experimental and might change in the future zig const std  importstd const sdl  importsdl2  created in buildzig by using exerootmoduleaddimportsdl2 sdkgetwrappermodule pub fn main void  try sdlinit video  true events  true audio  true  defer sdlquit var window  try sdlcreatewindow sdl2 wrapper demo  centered     centered    640 480  vis  shown   defer windowdestroy var renderer  try sdlcreaterendererwindow null  accelerated  true  defer rendererdestroy mainloop while true  while sdlpollevent ev  switch ev  quit  break mainloop else     try renderersetcolorrgb0xf7 0xa4 0x1d try rendererclear rendererpresent     buildzig api zig  just call sdkinitb  to obtain a handle to the sdk  use sdl as dependency name by default const sdk  this  creates a instance of the sdk and initializes internal steps  initialize once use everywhere in your build function   const sdkoption  struct   depname const u8  sdl  maybeconfigpath const u8  null  maybesdlttfconfigpath const u8  null   pub fn initb build opt sdkoption sdk  returns a module with the raw sdl api with proper argument types but no functionallogical changes  for a more ziggy feeling  this is similar to the c import result pub fn getnativemodulesdk sdk buildmodule  returns a module with the raw sdl api with proper argument types but no functionallogical changes  for a more ziggy feeling with vulkan support the vulkan module provided by vulkanzig must be  provided as an argument  this is similar to the c import result pub fn getnativemodulevulkansdk sdk vulkan buildmodule buildmodule  returns the smart wrapper for the sdl api contains convenient zig types tagged unions and so on pub fn getwrappermodulesdk sdk buildmodule  returns the smart wrapper with vulkan support the vulkan module provided by vulkanzig must be  provided as an argument pub fn getwrappermodulevulkansdk sdk vulkan buildmodule buildmodule  links sdl2 or sdl2ttf to the given exe and adds required installs if necessary  important the target of the exe must already be set otherwise the sdk will do the wrong thing pub fn linksdk sdk exe buildstepcompile linkage stdbuiltinlinkmode comptime library library void   dependencies all of those are dependencies for the target platform not for your host zig will runbuild the same on all source platforms  windows for windows you need to fetch the correct dev libraries from the sdl download pagehttpswwwlibsdlorgdownload20php it is recommended to use the mingw versions if you dont require msvc compatibility  macos right now crosscompiling for macos isnt possible on a mac install sdl2 via brew  linux if you are crosscompiling no dependencies exist the build sdk compiles a libsdl2so stub which is used for linking if you compile to your target platform you require sdl2 to be installed via your os package manager  support matrix this project tries to provide you the best possible development experience for sdl2 thus this project supports the maximum amount of crosscompilation targets for sdl2 the following table documents this the rows document the target whereas the columns are the build host   windows x8664  windows i386  linux x8664  macos x8664  macos aarch64    i386windowsgnu       ","karlseguin/websocket.zig":"a websocket implementation for zig 404 not found","ikskuh/zigandroidtemplate":"this repository contains a example on how to create a minimal android app in zig.  android apps in zig project bannerdesignlogopng this repository contains multiple examples of creating a minimal android app in zig  examples there are 4 different examples the examples have no dependencies on c code except for the android libraries so they can be considered pure zig apps to select which example to build and run pass the example flag eg dexampleegl valid values for the example flag are egl minimal textview and invocationhandler were running a ci that will verify the build for windows macos and linux cihttpsgithubcommasterq32zigandroidtemplateactionsworkflowsmainciymlbadgesvghttpsgithubcommasterq32zigandroidtemplateactionsworkflowsmainciyml  minimal examplesminimal includes just enough code to get the app running  egl examplesegl initializes opengl and renders a color cycle touchscreen events will activate a sine wave synth and be displayed as small circles beneath the fingers that will fade as soon as no event for the same finger will happen again the code contains some commented examples on how to interface with the jni to use advanced features of the anativeactivity  textview examplestextview creates a textview component with androids builtin ui to display hello world  invocationhandler examplesinvocationhandler builds on the textview example it shows how to pass a callback to the jni by creating a button component that reacts to being pressed  presentation there is a fosdem talkhttpsfosdemorg2021scheduleeventzigandroid you can watch here  mp4 videohttpsvideofosdemorg2021dzigzigandroidmp4  webm videohttpsvideofosdemorg2021dzigzigandroidwebm since the time of recording zigandroidtemplate has changed in some major ways  whats missing  configuration management example  saveload app state example  requirements  build you need the android sdkhttpsdeveloperandroidcomstudiocommandtools installed together with the android ndkhttpsdeveloperandroidcomndk you also need adbhttpsdeveloperandroidcomstudiocommandlineadb and a java sdk installed required for jarsigner now you need to generate yourself a keystore to sign your apps for debugging purposes the build script contains a helper just invoke zig build keystore to generate yourself a debug keystore that can be used with later build invocations note that the build file might ask you to configure some paths do as requested and just run the build again it should work then if all of the above is done you should be able to build the app by running zig build there are convenience options with zig build push installs the app on a connected phone and zig build run which installs then runs the app  quick start install the sdkmanagerhttpsdeveloperandroidcomstudiocommandlinesdkmanager and invoke the following command line   android platforms for your target android version  min version android 5 sdkmanager install platformsandroid21  you can install other versions as well  remember to set it like zig build dandroidandroid99 sdkmanager install buildtools3301 sdkmanager install ndk2518937393 zig build keystore install run  this should build an apk and install it on your connected phone if possible  getting started check out the buildzigbuildzig to see how to build a new android app the examplesexamples folder has multiple examples for making minimal android apps  credits huge thanks to cnlohrhttpsgithubcomcnlohr to create rawdrawandroidhttpsgithubcomcnlohrrawdrawandroid and making this project possible ","kristoff-it/ziggy":"a data serialization language for expressing clear api messages, config files, etc.  ziggy a data serialization language for expressing clear api messages config files etc  status alpha using ziggy now means participating in its development  at a glance zig id  uuid time  1710085168 payload  command  do  actionclearchat sender  kristoffit roles  admin mod extra   agent mozilla50 os linuxx64     value types ziggy values can be of the following types  bytes  x1b1000h gang multiline  numbers 123000 123 0xffffff 0o755 0b010101  null null  bool true false  custom literals date20201201 v100 foobar  array 1 2 3  struct  fixed  schema  named  for  unions of structs   map  custom keys   documentation see the official website httpsziggylangio  development in order to build with nix using the correct dependencies please keep updated the depsnixdepsnix file every time the buildzigzonbuildzigzon is changed in order to do so use bash nix run updatedeps  ","cztomsik/tokamak":"server-side framework for zig, relying heavily on dependency injection.  tokamak tokamak is a serverside framework for zig built around httpzighttpsgithubcomkarlseguinhttpzig and a simple dependency injection container note that it is not designed to be used alone but with a reverse proxy in front of it like nginx or cloudfront which will handle ssl caching sanitization etc   recent changes   wip multimodule support crossmodule initializers providers overrides   switched to httpzighttpsgithubcomkarlseguinhttpzig for improved  performance over stdhttp   implemented hierarchical and introspectable routes   added basic swagger support   added tkstaticdir for serving entire directories  getting started simple things should be easy to do zig const std  importstd const tk  importtokamak const routes const tkroute   get hello  fn hello const u8  return hello  pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer   gpadeinit var server  try tkserverinitallocator routes  listen   port  8080   try serverstart    dependency injection the framework is built around the concept of dependency injection this means that your handler function can take any number of parameters and the framework will try to provide them for you notable types you can inject are  stdmemallocator requestscoped arena allocator  tkrequest current request including headers body reader etc  tkresponse current response with methods to send data set headers etc  tkinjector the injector itself see below  and everything you provide yourself for example you can easily write a handler function which will create a string on the fly and return it to the client without any tight coupling to the server or the requestresponse types zig fn helloallocator stdmemallocator const u8  return stdfmtallocprintallocator hello  stdtimetimestamp   if you return any other type than const u8 the framework will try to serialize it to json zig fn hello hellores  return  message  hello    if you need a more finegrained control over the response you can inject a tkresponse and use its methods directly  but this will of course make your code tightly coupled to respective types  and it should be avoided if possible zig fn hellores tkresponse void  try resjson message  hello      custom dependencies you can also provide your own global dependencies by passing your own tkinjector to the server zig pub fn main void  var db  try sqliteopenmydb var cx   db  var server  try tkserverinitallocator routes  injector  tkinjectorinitcx null port  8080  try serverstart    middleware while tokamak doesnt have expressstyle middleware it achieves the same functionality through nested routes since routes can be nested and the prefix path and method fields are optional you can create powerful middleware patterns heres how to create a simple logging middleware zig fn loggerchildren const route tkroute  const h  struct  fn handleloggerctx context anyerrorvoid  logdebugs s  tagnamectxreqmethod ctxrequrl  return ctxnext   return  handler  hhandlelogger children  children   const routes  const tkroute   logger get hello    middleware handlers receive a context and return anyerrorvoid they can perform preprocessing logging authentication etc and then call ctxnext to continue to the next handler in the chain  requestscoped dependencies since zig doesnt have closures you cant capture variables from the outer scope instead tokamak allows you to add requestscoped dependencies that will be available to downstream handlers zig fn authctx context anyerrorvoid  const db  ctxinjectorgetdb const token  try jwtparsectxreqgetheaderauthorization const user  dbfinduser tokenid catch null return ctxnextscoped user     note middleware handlers need to use ctxinjectorgett to access  dependencies manually as they dont support the automatic dependency  injection syntax  routing tokamak includes an expressinspired router that supports path parameters and wildcards it can handle up to 16 path parameters and uses the  character for wildcards zig const tk  importtokamak const routes const tkroute   get hello  fndeps gethelloname helloname  fndeps name gethellonameage hellonameage  fndeps name age gethello hellowildcard  fndeps posthello hellopost  fndeps body post0hello hellopost0  fndeps    for more organized routing use the routeroutert method with a dsllike struct zig const routes const tkroute   tklogger get tksendhello  classic expressstyle routing groupapi  routerapi   structured routing with a module senderrornotfound  const api  struct  pub fn get  const u8  return hello  pub fn get nameallocator stdmemallocator name const u8 const u8  return stdfmtallocprintallocator hello s name     error handling tokamak handles errors gracefully by automatically serializing them to json zig fn hello void   this will send a 500 response with error todo return errortodo    static files serve static files easily with builtin helpers zig const routes const tkroute   get tkstaticfilestaticindexhtml   serve entire directories zig const routes const tkroute   tkstaticdirpublic    use with wildcard routes for more flexibility zig const routes const tkroute   tkgetassets tkstaticdirassets  index  null    if you want to embed some files into the binary you can specify such paths to the tokamak module in your buildzig file zig const embed const const u8   staticindexhtml  const tokamak  bdependencytokamak  embed  embed  exerootmoduleaddimporttokamak tokamakmoduletokamak  in this case only the files listed in the embed array will be embedded into the binary and any other files will be served from the filesystem  mime types the framework will try t","natecraddock/ziglua":"zig bindings for the lua c api 404 not found","karlseguin/pg.zig":"native postgresql driver / client for zig 404 not found","malcolmstill/zware":"zig webassembly runtime engine h1 aligncenterzwareh1 div aligncenter img srchttpsgithubcommalcolmstillwebassemblylogoblobmasterdisticonwebassemblyicon128pxpng altwebassembly logo a purpleblue square containing the uppercase letters w a the square has a semicirclular notch on the top edge in the middle  br  strongzig webassembly runtime enginestrong div  about zware is a library for executing webassembly embedded in zighttpsziglangorg programs  example from examplesfib zig const std  importstd const zware  importzware const store  zwarestore const module  zwaremodule const instance  zwareinstance const generalpurposeallocator  stdheapgeneralpurposeallocator var gpa  generalpurposeallocator pub fn main void  defer   gpadeinit const alloc  gpaallocator const bytes  embedfilefibwasm var store  storeinitalloc defer storedeinit var module  moduleinitalloc bytes defer moduledeinit try moduledecode var instance  instanceinitalloc store module try instanceinstantiate defer instancedeinit const n  39 var in  1u64n var out  1u640 try instanceinvokefib in0 out0  const result i32  bitcastasu32 truncateout0 stddebugprintfib  n  n result     requirements  compiletime  zig 012 master  runtime  none zig generates static binaries bash  zware gitmaster  ldd fib not a dynamic executable   goals  embed webassembly programs in other zig programs  be fast enough to be useful  status  the project is very much alpha quality  webassembly 20 supported apart from the vector  simd support which is wip  the webassembly official testsuite passes not including simd tests  partial wasi support  running tests use zig build help to see all the test targets heres a summary of the important ones sh zig build test  run all the tests includes unittest and testsuite zig build unittest  run the library unittests zig build testsuite  run all the testsuite tests zig build testname  run the name testsuite test ie testtype   does it run doom yes yes it doeshttpsgithubcommalcolmstillzwaredoom httpsgithubcommalcolmstillzwareassets2567177c9acdcb269e7495fb3f189cf6b807a43 ","freref/fancy-cat":"pdf reader for terminal emulators using the kitty image protocol h1 p aligncenter  brfancycat h1 p aligncenter pdf viewer for terminals using the kitty image protocol br  p p demohttpsgithubcomuserattachmentsassetsb1edc9d23b1f437d9b48c196d22fcbbd  usage sh fancycat pathtopdf optionalpagenumber   commands fancycat uses a modal interface similar to neovim there are two modes view mode and command mode to enter command mode you type  by default this can be changed in the config file  available commands  pagenumber  jump to the specified page number  q  quit the application  configuration fancycat can be configured through a json config file located at configfancycatconfigjson the file is automatically created on the first run with default settings the default configjson can be found heresrcconfigconfigjson and documentation on the config options can be found heredocsconfigmd  installation fancycat is available in the following repositories packaging statushttpsrepologyorgbadgeverticalallreposfancycatsvgcolumns3headerfancycathttpsrepologyorgprojectfancycatversions  nix available as a nix package herehttpsgithubcomfrereffancycatnix  build instructions  requirements  zig version 0140  terminal emulator with the kitty image protocol eg kitty ghostty wezterm etc  build 1 fetch submodules  git submodule update init recursive  2 build the project sh zig build releasesmall   note  there is a known issuehttpsgithubcomfrereffancycatissues18 with some processors if the build fails on step 710 with the error llvm error do not know how to expand the result of this operator then try the command below instead   sh  zig build dcpuskylake releasesmall   3 install sh  add to your path  linux mv zigoutbinfancycat localbin  macos mv zigoutbinfancycat usrlocalbin   run sh zig build run  pathtopdf optionalpagenumber   features   filewatch hotreload   runtime config   custom keymappings   modal interface   commands   colorize mode darkmode   status bar   page navigation zoom prev next etc  license agpl30orlaterhttpsspdxorglicensesagpl30orlaterhtml  contributing contributions are welcome ","tinyvg/sdk":"tinyvg software development kit  tinyvg software development kit this sdk enables you to work with the tinyvghttpstinyvgtech vector graphics format  contents  native library c abi  zig package  command line tooling  offline rendering tvg  tga  format conversion svg  tvg  tvgt  building the sdk is implemented with zighttpsziglangorg 0110 and dotnet 6httpsdotnetmicrosoftcomenus to build the sdk except svg2tvgt do this shsession userhost sdk zig build userhost sdk  this will then produce the folders zigcache for temporary files and zigout which contains the sdk files for your current platform to build svg2tvgt go into the folder srctoolssvg2tvgt and do this shsession userhost sdk cd srctoolssvg2tvgt userhost svg2tvgt dotnet build msbuild version 1732561848881 for net determining projects to restore all projects are uptodate for restore svg2tvgt  mntsrctoolssvg2tvgtbindebugnet60svg2tvgtdll build succeeded 0 warnings 0 errors time elapsed 00000069 userhost svg2tvgt  this will then produce srctoolssvg2tvgtbindebugnet50svg2tvgt or exe if you are on windows ","kubkon/bold":"bold: the bold linker  bold  the bold linker  bold used to be emerald but due to time constraints and other commitments i am unable to develop and maintain the other drivers  emerald now lives in another repo  kubkonemeraldoldhttpsgithubcomkubkonemeraldold bold is a dropin replacement for apple system linker ld written fully in zig it is on par with the llvm lld linker faster than the legacy apple ld linker but slower than the rewritten apple ld linker some benchmark results between the linkers when linking stage3zig compiler which includes linking llvm statically sh  hyperfine boldsh ldsh ldlegacysh lldsh benchmark 1 boldsh time mean   1088 s  0018 s user 3174 s system 1004 s range min  max 1039 s  1104 s 10 runs benchmark 2 ldsh time mean   4918 ms  195 ms user 18915 ms system 3047 ms range min  max 4581 ms  5099 ms 10 runs benchmark 3 ldlegacysh time mean   2132 s  0013 s user 3242 s system 0256 s range min  max 2104 s  2150 s 10 runs benchmark 4 lldsh time mean   1160 s  0021 s user 1329 s system 0247 s range min  max 1133 s  1208 s 10 runs summary ldsh ran 221  010 times faster than boldsh 236  010 times faster than lldsh 433  017 times faster than ldlegacysh  in the results  boldsh calls bold with all the required inputs and flags  ldsh calls the rewritten apple linker  ldlegacysh calls ld ldclassic the legacy apple linker  lldsh calls llvm lld linker tldr bold is currently directly competing with llvm lld but behind the apple ld linker  quick start guide  building you will need zig 0130 in your path you can download it from herehttpsziglangorgdownload   zig build doptimizereleasefast  you can then pass it to your system cc compiler with b or fuseld flag note that the latter is supported mainlyonly by clang   cat eof  helloc include stdioh int main  fprintfstderr hello worldn return 0  eof  using clang  clang helloc fuseldbold  using gcc  gcc helloc bpathtobold   testing if youd like to run unit and endtoend tests run the tests like youd normally do for any other zig project   zig build test   contributing you are welcome to contribute to this repo ","arwalk/zig-protobuf":"a protobuf 3 implementation for zig.  zigprotobuf   welcome this is an implementation of google protocol buffers version 3 in zig protocol buffers is a serialization protocol so systems from any programming language or platform can exchange data reliably protobufs strength lies in a generic codec paired with userdefined messages that will define the true nature of the data encoded messages are usually mapped to a native languages structureclass definition thanks to a languagespecific generator associated with an implementation zigs compiletime evaluation becomes extremely strong and useful in this context because the structure a message has to be known beforehand the generic codec can leverage informations at compile time of the message and its nature this allows optimizations that are hard to get as easily in any other language as zig can mix compiletime informations with runtimeonly data to optimize the encoding and decoding code paths  state of the implementation this repository so far only aims at implementing protocol buffers version 3httpsdevelopersgooglecomprotocolbuffersdocsproto3simple the latest version of the zig compiler used for this project is 0130 this project is currently able to handle all scalar types for encoding decoding and generation through the plugin  branches there are 2 branches you can use for your development  master is the branch with current developments working with the latest stable release of zig  zigmaster is a branch that merges the developments in master but works with the latestish master version of zig  how to use 1 add protobuf to your buildzigzon sh zig fetch save githttpsgithubcomarwalkzigprotobufv200  1 use the protobuf module in your buildzigs build function add the dependency as module before binstallartifactexe zig pub fn buildb stdbuild void   first create a build for the dependency const protobufdep  bdependencyprotobuf  target  target optimize  optimize   and lastly use the dependency as a module exerootmoduleaddimportprotobuf protobufdepmoduleprotobuf    generating zig files out of proto definitions you can do this programatically as a compilation step for your application the following snippet shows how to create a zig build genproto command for your project zig const protobuf  importprotobuf pub fn buildb stdbuild void   first create a build for the dependency const protobufdep  bdependencyprotobuf  target  target optimize  optimize   const genproto  bstepgenproto generates zig files from protocol buffer definitions const protocstep  protobufrunprotocstepcreateb protobufdepbuilder target   out directory for the generated zig files destinationdirectory  bpathsrcproto sourcefiles   protocolallproto  includedirectories    genprotodependonprotocstepstep   if youre really bored you can buy me a coffe here kofihttpskoficomimggithubbuttonsmsvghttpskoficomn4n7vms4f ","ikskuh/zig-args":"simple-to-use argument parser with struct-based config  zig argument parser simpletouse argument parser with structbased config  features  automatic option generation from a config struct  familiar look  feel  everything after the first  is assumed to be a positional argument  a single  is interpreted as a positional argument which can be used as the stdinstdout file placeholder  short options with no argument can be combined into a single argument dfe  long options can use either optionvalue or option value syntax use option if you need  as a long option argument  verbs subcommands with verb specific options nonverb specific global options can come before or after the verb on the command line nonverb option arguments are processed before determining verb see demoverbzig  integrated support for primitive types  all integer types signed  unsigned  floating point types  booleans takes optional argument if no argument given the bool is set otherwise one of yes true y no false n is interpreted  strings  enumerations  use in your project add the dependency in your buildzigzon by running the following command bash zig fetch saveargs githttpsgithubcomikskuhzigargsmaster  add it to your exe in buildzig zig exerootmoduleaddimportargs bdependencyargs  target  target optimize  optimize moduleargs  then you can import it from your code zig const argsparser  importargs   example zig const options  argsparserparseforcurrentprocessstruct   this declares long options for double hyphen output const u8  null withoffset bool  false withhexdump bool  false intermixsource bool  false numberofbytes i32  null signednumber i64  null unsignednumber u64  null mode enum  default special slow fast   default  this declares shorthand options for single hyphen pub const shorthands   s  intermixsource b  withhexdump o  withoffset o  output   argsallocator print catch return 1 defer optionsdeinit stddebugprintexecutable name sn optionsexecutablename stddebugprintparsed optionsn  inline for stdmetafieldstypeofoptionsoptions fld  stddebugprintts  anyn  fldname fieldoptionsoptions fldname   stddebugprintparsed positionalsn  for optionspositionals arg  stddebugprinttsn arg    versions  branch masterhttpsgithubcomikskuhzigargstreemaster tracks zig master  branch 013xhttpsgithubcomikskuhzigargstreezig013x tracks zig 0130  tag 090httpsgithubcomikskuhzigargstreezig090 tracks zig 090 ","ziglibs/known-folders":"provides access to well-known folders across several operating systems  zig known folders project  design goals  minimal api surface  provide the user with an option to either obtain a directory handle or a path name  keep to folders that are available on all operating systems  api zig pub const knownfolder  enum  home documents pictures music videos desktop downloads public fonts appmenu cache roamingconfiguration localconfiguration globalconfiguration data runtime executabledir  pub const error  error parseerror outofmemory  pub const knownfolderconfig  struct  xdgforcedefault bool  false xdgonmac bool  false   returns a directory handle or if the folder does not exist null pub fn openallocator stdmemallocator folder knownfolder args stdfsdiropenoptions stdfsdiropenerror  errorstdfsdir  returns the path to the folder or if the folder does not exist null pub fn getpathallocator stdmemallocator folder knownfolder errorconst u8   installation  note  the minimum supported zig version is 0140dev34456c3cbb0c8 initialize a zig build project if you havent already bash zig init  add the knownfolders package to your buildzigzon bash zig fetch save githttpsgithubcomziglibsknownfoldersgit  you can then import knownfolders in your buildzig with zig const knownfolders  bdependencyknownfolders moduleknownfolders const exe  baddexecutable  this adds the knownfolders module to the executable which can then be imported with importknownfolders exerootmoduleaddimportknownfolders knownfolders   configuration in your root file add something like this to configure knownfolders zig pub const knownfoldersconfig   xdgonmac  true   ","godot-zig/godot-zig":"zig bindings for godot 4  godotzig a wip zig bindings for godot 4 features are being gradually added to meet the needs of a demo game bugs and missing features are expected until a stable version finally released issue report feature request and pull request are all welcome  prerequisites 1 zig 013 2 godot 43  usage see exampleshttpsgithubcomgodotziggodotzigexamples for reference  code sample  const std  importstd const godot  importgodot const vec2  godotvector2 const self  this const base  godotcontrol pub usingnamespace base base base sprite godotsprite2d pub fn entertreeself self void  if godotenginegetsingletoniseditorhint return var normalbtn  godotinitbutton selfaddchildnormalbtn false godotnodeinternalmodedisabled normalbtnsetpositionvec2new100 20 false normalbtnsetsizevec2new100 50 false normalbtnsettextpress me var togglebtn  godotinitcheckbox selfaddchildtogglebtn false godotnodeinternalmodedisabled togglebtnsetpositionvec2new320 20 false togglebtnsetsizevec2new100 50 false togglebtnsettexttoggle me godotconnecttogglebtn toggled self ontoggled godotconnectnormalbtn pressed self onpressed const resourceloader  godotresourceloadergetsingleton const resname  godotstringinitfromlatin1charsrestextureslogopng const texture  resourceloaderloadresname  godotresourceloadercachemodereuse if texture tex  defer   godotunreferencetex selfsprite  godotinitsprite2d selfspritesettexturetex selfspritesetpositionvec2new400 300 selfspritesetscalevec2new06 06 selfaddchildselfsprite false godotnodeinternalmodedisabled   pub fn exittreeself self void    self  pub fn onpressedself self void    self stddebugprintonpressed n   pub fn ontoggledself self toggledon bool void    self stddebugprintontoggled anyn toggledon   ","allyourcodebase/ffmpeg":"ffmpeg zig package  ffmpeg packaged for zig this is a fork of ffmpeghttpsffmpegorg packaged for zig unnecessary files have been deleted and the build system has been replaced with buildzig there are no system dependencies the only thing required to build this package is zighttpsziglangorgdownload zig api bindings are also provided via the av module see docexamples for api usage examples  differences from upstream  only a single static library is produced there is no option to create a dynamic library  the ffmpeg command line tool is not provided perhaps this could be added if desired  documentation tests and tools are not provided  this package enables everything supported by the target it does not expose configuration options to choose the set of supported codecs and formats  the set of external library integrations is fixed  external libraries included  x libmp3lame  x libvorbis  x libogg more can be added as desired  update process these are the instructions to update this package when a new ffmpeg version is released upstream 1 merge the new tag into main and resolve all conflicts by replacing the conflicting files with the files from upstream 2 find libavcodec libavdevice libavfilter libavformat libavutil libswscale libswresample type f name asm o name c o name s  edit to omit files ending in templatec or tablegenc  sort the list  update the allsources list in buildzig 3 inspect the git diff to keep some of the source files commented out like they were before some handy filtering rules apply  l prefix means linuxonly  w prefix means windowsonly 4 run configure prefixhomelocalffmpeg disabledoc disablehtmlpages disablemanpages disablepodpages disabletxtpages disableprograms enablelibmp3lame enablelibvorbis disableshared enablestatic against upstream and diff the generated configh file to the one generated by this build script apply appropriate changes to buildzig 5 update these files which are generated by the upstream configure script  configcomponentsh  libavfilterfilterlistc  libavcodeccodeclistc  libavcodecparserlistc  libavcodecbsflistc  libavformatdemuxerlistc  libavformatmuxerlistc  libavdeviceindevlistc  libavdeviceoutdevlistc  libavformatprotocollistc 6 update the headers list in buildzig based on what files are present in homelocalffmpeginclude ","fabioarnold/nanovg-zig":"a small anti-aliased hardware-accelerated vector graphics library nanovg  zig version  this is a rewrite of the original nanovg libraryhttpsgithubcommemononennanovg using the zig programming languagehttpsziglangorg nanovg is a small antialiased hardwareaccelerated vector graphics library it has a lean api modeled after the html5 canvas api it is aimed to be a practical and fun toolset for building scalable user interfaces or any other real time visualizations  screenshot screenshot of some text rendered with the example programexamplesscreenshot01pngrawtrue  examples theres a webassembly example using webgl which you can immediately try here httpsfabioarnoldgithubionanovgzig the source for this example can be found in examplewasmzigexamplesexamplewasmzig and can be built by running zig build dtargetwasm32freestanding a native crossplatform example using glfwhttpsglfworg can be found in exampleglfwzigexamplesexampleglfwzig and can be built and run with zig build run it requires glfw to be installed on windows vcpkghttpsgithubcommicrosoftvcpkg is an additional requirement for an example on how to use nanovgzig in your projects buildzig you can take a look at httpsgithubcomfabioarnoldminipixelblobmainbuildzig  features  basic shapes rect rounded rect ellipse arc  arbitrary paths of bezier curves with holes  arbitrary stackbased 2d transforms  strokes with different types of caps and joins  fills with gradient support  types of gradients linear box useful for shadows radial  text with automatic linebreaks and blurring  images as pattern for fills and strokes  features exclusive to the zig version  clip paths  image blurring usage  the nanovg api is modeled loosely on the html5 canvas api if you know canvas youre up to speed with nanovg in no time  creating a drawing context the drawing context is created using a backendspecific initialization function if youre using the opengl backend the context is created as follows zig const nvg  importnanovg  var vg  try nvgglinitallocator  debug  true  defer vgdeinit  the second parameter defines options for creating the renderer  antialias means that the renderer adjusts the geometry to include antialiasing if youre using msaa you can omit this option to be default initialized as false  stencilstrokes means that the render uses better quality rendering for overlapping strokes the quality is mostly visible on wider strokes if you want speed you can omit this option to be default initialized as false currently there is an opengl backend for nanovg nanovgglzigsrcnanovgglzig for opengl 20 and webgl webgl is automatically chosen when targeting webassembly theres an interface called params defined in internalzigsrcinternalzig which can be implemented by additional backends note the render target youre rendering to must have a stencil buffer  drawing shapes with nanovg drawing a simple shape using nanovg consists of four steps 1 begin a new shape 2 define the path to draw 3 set fill or stroke 4 and finally fill or stroke the path zig vgbeginpath vgrect100100 12030 vgfillcolornvgrgba2551920255 vgfill  calling beginpath will clear any existing paths and start drawing from a blank slate there are a number of functions to define the path to draw such as rectangle rounded rectangle and ellipse or you can use the common moveto lineto bezierto and arcto api to compose a path stepbystep  understanding composite paths because of the way the rendering backend is built in nanovg drawing a composite path  that is a path consisting of multiple paths defining holes and fills  is a bit more involved nanovg uses the evenodd filling rule and by default the paths are wound in counterclockwise order keep that in mind when drawing using the lowlevel drawing api in order to wind one of the predefined shapes as a hole you should call pathwindingnvgwindingsolidityhole or pathwindingcw after defining the path zig vgbeginpath vgrect100100 12030 vgcircle120120 5 vgpathwindingcw  mark circle as a hole vgfillcolornvgrgba2551920255 vgfill   building a program with nanovgzig heres how to integrate nanovgzig into your zig project 1 add the library as a dependency run the following command in your project directory to fetch and save nanovgzig as a dependency bash zig fetch save githttpsgithubcomfabioarnoldnanovgziggit  2 import the library in your buildzig file add the following code snippet to your buildzig file this creates a dependency on nanovgzig and imports the nanovg module into your executable zig const nanovgzig  bdependencynanovgzig  target  target optimize  optimize  exerootmoduleaddimportnanovg nanovgzigmodulenanovg  replace exe with your target executable 3 link against opengl nanovgzig relies on opengl for rendering you must manually link against opengl in your buildzig file the buildzigbuildzig file in the repository demonstrates how to do this 4 use nanovg in your code you can now import and use the nanovg module in your zig source files zig const nvg  importnanovg  refer to the creating a drawing context and drawing shapes with nanovg sections above for examples of how to use the nanovg api  api reference see nanovgzigsrcnanovgzig for an api reference  projects using nanovgzig  minipixel by fabioarnoldhttpsgithubcomfabioarnoldminipixel  snake by fabioarnoldhttpsfabioarnolditchiosnake  license the original library and this rewrite are licensed under the zlib licenselicensetxt fonts used in the examples  roboto licensed under apache licensehttpwwwapacheorglicenseslicense20  entypo licensed under cc bysa 40  noto emoji licensed under sil open font license version 11httpscriptssilorgcmsscriptspagephpsiteidnrsiidofl  links uses stbtruetypehttpnothingsorg for font rendering uses stbimagehttpnothingsorg for image loading ","akarpovskii/tuile":"a cross-platform text ui (tui) library in zig a namereadmetopa  contributorscontributorsshieldcontributorsurl forksforksshieldforksurl stargazersstarsshieldstarsurl issuesissuesshieldissuesurl mit licenselicenseshieldlicenseurl linkedinlinkedinshieldlinkedinurl br    project logo  div aligncenter a hrefhttpsgithubcomakarpovskiituile img srcimageslogopng altlogo width80 height80 a h3 aligncentertuileh3 p aligncenter a text user interface library for zig br  breaking changes are possible br  a hrefhttpsgithubcomakarpovskiituilestrongexplore the docs stronga br  br  a hrefhttpsgithubcomakarpovskiituiletreemainexamplesview examplesa  a hrefhttpsgithubcomakarpovskiituileissuesnewlabelsbugtemplatebugreportmdreport buga  a hrefhttpsgithubcomakarpovskiituileissuesnewlabelsenhancementtemplatefeaturerequestmdrequest featurea p div  table of contents  details summarytable of contentssummary ol li a hrefabouttheprojectabout the projecta li li a hrefgettingstartedgetting starteda ul lia hrefprerequisitesprerequisitesali lia hrefinstallationinstallationali ul li lia hrefusageusageali lia hrefcrosscompilationcrosscompilationali lia hrefroadmaproadmapali lia hrefcontributingcontributingali lia hreflicenselicenseali lia hrefcontactcontactali lia hrefacknowledgmentsacknowledgmentsali ol details  about the project   about the project tuile is a text user interface library written in zig tuile uses crosstermdocsbackendsmdcrossterm backend by default which works on all unix and windows terminals and supports crosscompilation powered by buildcrabhttpsgithubcomakarpovskiibuildcrab see backendsdocsbackendsmd for the list of supported backends or file a feature requesthttpsgithubcomakarpovskiituileissuesnewlabelsenhancementtemplatefeaturerequestmd if you want to have another one added demo vhs recordingexamplesimagesdemopng checkout the other examples hereexamples p alignrighta hrefreadmetopback to topap  getting started   getting started  prerequisites  zig 0120  nondefault backendsdocsbackendsmd may have additional requirements  installation 1 add dependency to your buildzigzon sh zig fetch save httpsgithubcomakarpovskiituilearchiverefstagsv013targz  2 import tuile in buildzig zig const tuile  bdependencytuile  exerootmoduleaddimporttuile tuilemoduletuile  p alignrighta hrefreadmetopback to topap  usage examples   usage zig const tuile  importtuile pub fn main void  var tui  try tuiletuileinit defer tuideinit try tuiadd tuileblock  border  tuileborderall bordertype  rounded layout   flex  1   tuilelabel text  hello world    try tuirun   you can find more examples in the examples folderexamples p alignrighta hrefreadmetopback to topap  crosscompilation   crosscompilation to compile an application that uses tuile for another target just add dtargetdesired target when building your app and make sure to forward it to tuile  buildzig zig const target  bstandardtargetoptions const tuile  bdependencytuile  target  target   p alignrighta hrefreadmetopback to topap  roadmap   roadmap in no particular order    documentation    grid layout    windows and dialogs    menu bar    more widgets see the open issuesissuesurl for a full list of proposed features and known issues p alignrighta hrefreadmetopback to topap  contributing   contributing if you have a suggestion that would make this better please fork the repo and create a pull request you can also simply open an issue with the tag enhancement dont forget to give the project a star thanks 1 fork the project 2 create your feature branch git checkout b featureamazingfeature 3 commit your changes git commit m add some amazing feature 4 push to the branch git push origin featureamazingfeature 5 open a pull request p alignrighta hrefreadmetopback to topap  license   license distributed under the mit license see licenselicenseurl for more information p alignrighta hrefreadmetopback to topap  acknowledgments   acknowledgments  bestreadmetemplatehttpsgithubcomothneildrewbestreadmetemplate p alignrighta hrefreadmetopback to topap  markdown links  images   httpswwwmarkdownguideorgbasicsyntaxreferencestylelinks  contributorsshield httpsimgshieldsiogithubcontributorsakarpovskiituilesvgstyleforthebadge contributorsurl httpsgithubcomakarpovskiituilegraphscontributors forksshield httpsimgshieldsiogithubforksakarpovskiituilesvgstyleforthebadge forksurl httpsgithubcomakarpovskiituilenetworkmembers starsshield httpsimgshieldsiogithubstarsakarpovskiituilesvgstyleforthebadge starsurl httpsgithubcomakarpovskiituilestargazers issuesshield httpsimgshieldsiogithubissuesakarpovskiituilesvgstyleforthebadge issuesurl httpsgithubcomakarpovskiituileissues licenseshield httpsimgshieldsiogithublicenseakarpovskiituilesvgstyleforthebadge licenseurl httpsgithubcomakarpovskiituileblobmasterlicensetxt examplesurl httpsgithubcomakarpovskiituiletreemainexamples linkedinshield httpsimgshieldsiobadgelinkedinblacksvgstyleforthebadgelogolinkedincolorb555 linkedinurl httpslinkedincominakarpovskii productscreenshot imagesscreenshotpng ","ikskuh/lola":"lola is a small programming language meant to be embedded into games.  lola programming language lola logodesignlogopng lola is a small programming language meant to be embedded into games to be programmed by the players the compiler and runtime are implemented in zig and c  short example js var list   hello world  fortext in list  printtext   you can find more examples in the examplesexampleslola folder  why lola when there is x lola isnt meant to be your next best daytoday scripting language its design is focused on embedding the language in environments where the users wantneedshould write some small scripts like games or scriptable applications in most script languages you as a script host dont have control over the execution time of the scripts youre executing lola protects you against programming errors like endless loops and such  controlled execution environment every script invocation gets a limit of instructions it might execute when either this limit is reached or the script yields for other reasons asynchronous functions the execution is returned to the host this means you can execute the following script in parallel to your application main loop without blocking your application and without requiring complex multithreading setups js var timer  0 whiletrue  printscript running for  timer  seconds timer  1 sleep10    native asynchronous design lola features both synchronous and asynchronous host functions synchronous host function calls are shortlived and will be executed inplace asynchronous functions in contrast will be executed multiple times until they yield a value when they dont yield a value control will be returned to the script host this script will not exhaust the instruction limit but will only increment the counter then return control back to the host js var counter  0 whiletrue  counter  1 yield   this behaviour can be utilized to wait for certain events in the host environment for example to react to key presses a script could look like this js whiletrue  var input  waitforkey ifinput     printspace was pressed    note that the current implementation is not threadsafe but requires to use the limited execution for running scripts in parallel  native rpc design lola also allows executing multiple scripts on the same environment meaning that you can easily create crossscript communications js  script a var buffer function setval  buffer  val  function get  return val   script b  getbuffer returns a object referencing a environment for script a var buffer  getbuffer buffersethello world  script c  getbuffer returns a object referencing a environment for script a var buffer  getbuffer printbuffer contains  bufferget  with a fitting network stack and library this can even be utilized crosscomputer this example implements a small chat client and server that could work with lola rpc capabilities js  chat client implementation var server  connectlolarpcrandomprojectsnetchat ifserver  void  printcould not connect to chat server exit1  whiletrue  var list  servergetmessagesgetuser formsg in list  print  msg   print  var msg  readline ifmsg  void break ifmsg   continue serversendgetuser msg   js  chat server implementation var messages  createdictionary function senduser msg  forother in messagesgetkeys  ifother  user  var log  messagesgetother iflog  void  log  log   user     msg   else  log    messagessetother log    function getmessagesuser  var log  messagesgetuser iflog  void  messagessetuser  return log  else  return      serializable state as lola has no reference semantics except for objects it is easy to understand and learn it is also simple in its implementation and does not require a complex garbage collector or advanced programming knowledge each lola value can be serializeddeserialized into a sequence of bytes only exception are object handles those require some special attention so saving the current state of a environmentvm to disk and loading it at a later point is a firstclass supported use case this is especially useful for games where it is favourable to save your script state into a save game as well without having any drawbacks  simple error handling lola provides little to no inlanguage error handling as its not designed to be robust against user programming errors each error is passed to the host as a panic so it can show the user that there was an error like outofmemory or typemismatch inlanguage error handling is based on the dynamic typing functions that allow inlanguage error handling just return void instead of a actual return value or truefalse for success or failure this allows simple error checking like this js var string  readfiledemodata ifstring  void  printfile contained  string   this design decision was made with the idea in mind that most lola programmers wont write the next best security critical software but just do a quick hack in game to reach their next item unlock  smart compiler as lola isnt the most complex language the compiler can support the programmer even though the language has fully dynamic typing the compiler can do some type checking at compile time already js  warning possible type mismatch detected expected numberstringarray found boolean ifa  true    right now this is only used for validating expressions but it is planned to extend this behaviour to annotate variables as well so even more type errors can be found during compile time note that this is a fairly new feature it does not catch all your type mismatches but can prevent the obvious ones  starting points to get familiar with lola you can check out these starting points  documentationdocumentationreadmemd  lola examplesexampleslolareadmemd  script host examplesexampleshost when you want to contribute to the compiler check out the following documents  source codesrc  bison grammarsrclibrarycompilergrammaryy  flex tokenizersrclibrarycompileryyl  issue listhttpsgithubcommasterq32lolaissues  visual studio code extension if you want syntax highlighting in vscode you can install the lolavscodehttpsgithubcommasterq32lolavscode extension right now its not published in the gallery so to install the extension you have to sideload it see the vscode documentation for thishttpsvscodedocsreadthedocsioenstableextensionsinstallextension  building  continous integration bui","karlseguin/zul":"zig utility library 404 not found","ziglibs/zlm":"zig linear mathemathics  zlm zig linear mathemathics library current provides the following types  vec2  vec3  vec4  mat2  mat3  mat4 the library is currently built around the opengl coordinate system and is fully generic on the basic data type  example zig const math  importzlm  use this namespace to get access to a vec3 with f16 fields instead of f32 const mathf16  mathspecializeonf16  accelerate the given velocity v by a over t fn acceleratev mathvec3 a mathvec3 t f32 mathvec3  return vaddascalet   ","zigcc/zig-course":"zig 语言圣经：简单、快速地学习 zig, zig chinese tutorial, learn zig simply and quickly  zig   zig is a generalpurpose programming language and toolchain for maintaining robust optimal and reusable software   zig     zig   vitepress vitepress  markdown httpsvitepressdevzhguidemarkdown   fork      pull request   review   github action  sh bun i   bun dev   bun format   prettier zig fmt  autocorrect  bun run build   bun run preview     note   bun  autocorrect bun format  note   bunjshttpsbunsh nodejs    lockfilehttpsbunshdocsinstalllockfile  git  bun  diff  ","octopus-foundation/gremlin.zig":"a zero-dependency google protocol buffers implementation in pure zig. single allocation encode and lazy decode  gremlin a zerodependency google protocol buffers implementation in pure zig no protoc required  installation  setup single command setup bash zig fetch save httpsgithubcomoctopusfoundationgremlinzigarchiverefstags000targz  this command will 1 download gremlin 2 add it to your buildzigzon 3 generate the correct dependency hash in your buildzig zig const std  importstd const protogenstep  importgremlinprotogenstep pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption  get the parser dependency const gremlindep  bdependencygremlin  target  target optimize  optimize modulegremlin  generate zig code from proto files  this will process all proto files in the proto directory  and output generated zig code to srcgen const protobuf  protogenstepcreate b  protosources  bpathproto  directory containing proto files target  bpathsrcgen  output directory for generated zig code    create binary const exe  baddexecutable name  example rootsourcefile  bpathsrcmainzig target  target optimize  optimize   add the parser module exerootmoduleaddimportgremlin gremlindep exestepdependonprotobufstep binstallartifactexe    features  zero dependencies  pure zig implementation no protoc required  compatible with protocol buffers version 2 and 3  simple integration with zig build system  single allocation for serialization including complex recursive messages  lazy parsing  parses only required complex fields  tested with zig 0140dev  generated code see the complete working example in the exampleexample folder given a protobuf definition protobuf syntax  proto3 message user  string name  1 uint64 id  2 repeated string tags  10   gremlin will generate equivalent zig code see exampleprotozigexamplesrcgenexampleprotozig zig const std  importstd const gremlin  importgremlin  wire numbers for fields const userwire  struct  const namewire gremlinprotowirenumber  1 const idwire gremlinprotowirenumber  2 const tagswire gremlinprotowirenumber  10   message struct pub const user  struct  name const u8  null id u64  0 tags const const u8  null  calculate size for allocation pub fn calcprotobufsizeself const user usize     encode to new buffer pub fn encodeself const user allocator stdmemallocator gremlinerrorconst u8     encode to existing buffer pub fn encodetoself const user target gremlinwriter void      reader for lazy parsing pub const userreader  struct  allocator stdmemallocator buf gremlinreader name const u8  null id u64  0 tags stdarraylistconst u8  null pub fn initallocator stdmemallocator src const u8 gremlinerroruserreader    pub fn deinitself const userreader void     accessor methods pub inline fn getnameself const userreader const u8    pub inline fn getidself const userreader u64    pub fn gettagsself const userreader const const u8     ","castholm/sdl":"sdl ported to the zig build system   2024 carl stholm spdxlicenseidentifier mit   sdl ported to the zig build system this is a port of sdlhttpslibsdlorg to the zig build system packaged for the zig package manager  usage requires zig 0140 or 0150dev master sh zig fetch save githttpsgithubcomcastholmsdlgit  zig const sdldep  bdependencysdl  target  target optimize  optimize preferredlinkmode  static  or dynamic  const sdllib  sdldepartifactsdl3 const sdltestlib  sdldepartifactsdl3test  example projects using this sdl package  castholmzigexamplesbreakouthttpsgithubcomcastholmzigexamplestreemasterbreakout  castholmzigexamplessnakehttpsgithubcomcastholmzigexamplestreemastersnake  supported targets target  hostwindowslinuxmacos  x8664windowsgnu aarch64windowsgnu x8664linuxgnu aarch64linuxgnu x8664macosnone aarch64macosnone legend   supported   supported but requires external sdks   experimental   not supported  windows building for x8664 windows from any host system works out of the box aarch64 windows support is experimental and not yet actively tested  linux building for x8664 linux from any host system works out of the box aarch64 linux support is experimental and not yet actively tested the castholmsdllinuxdepshttpsgithubcomcastholmsdllinuxdeps package provides supplementary headers and source files required for compiling for linux  macos building for x8664 or aarch64 macos requires xcode 141 or later to be installed on the host system when building for nonnative targets for example for x8664 from an aarch64 mac you must provide a path to the macos sdk via sysroot this path can be obtained by running xcrun sdk macosx showsdkpath sh macossdkpathxcrun sdk macosx showsdkpath zig build dtargetx8664macosnone sysroot macossdkpath  crosscompiling for macos from windows or linux host systems is not supported because the xcode and apple sdks agreementhttpswwwapplecomlegalsladocsxcodepdf explicitly prohibits using macos sdk files from nonapplebranded computers or devices  license this repository is reusecomplianthttpsreusesoftware the effective spdx license expression for the repository as a whole is  bsd3clause or gpl30 or hidapi and apache20 and bsd3clause and cc010 and hidapi and hpndsellvariant and mit and sunpro and zlib  this is identical to the upstream sdl repository just expressed in more explicit terms copyright notices and license texts have been reproduced in licensetxtlicensetxt for your convenience ","alexnask/interface.zig":"dynamic dispatch for zig made easy  zig interfaces easy solution for all your zig dynamic dispatch needs   features  fully decoupled interfaces and implementations  control over the storageownership of interface objects  comptime support including comptimeonly interfaces  async function partial support blocking on 4621httpsgithubcomziglangzigissues4621  optional function support  support for manually written vtables   example  zig  const interface  importinterfacezig const interface  interfaceinterface const selftype  interfaceselftype   let us create a reader interface  we wrap it in our own struct to make function calls more natural const reader  struct  pub const readerror  error  couldnotread   const iface  interfacestruct    our interface requires a single non optional nonconst read function read fn selftype buf u8 readerrorusize   interfacestoragenonowning  this is a non owning interface similar to rust dyn traits  iface iface   wrap the interfaces init since the interface is non owning it requires no allocator argument pub fn initimplptr var reader  return  iface  try ifaceinitimplptr     wrap the read function call pub fn readself reader buf u8 readerrorusize  return selfifacecallread buf    define additional nondynamic functions pub fn readallself self buf u8 readerrorusize  var index usize  0 while index  buflen  const partialamt  try selfreadbufferindex if partialamt  0 return index index  partialamt  return index     lets create an example reader const examplereader  struct  state u8   note that this reader cannot return an error the return type  of our implementation functions only needs to coerce to the  interfaces function return type pub fn readself examplereader buf u8 usize  for buf c  c  selfstate  return buflen    test use our reader interface  var examplereader  examplereader state42   var reader  readerinitexamplereader  var buf 100u8  undefined   readerreadbuf catch unreachable     see exampleszig for more examples ","ikskuh/zero-graphics":"application framework based on opengl es 2.0. runs on desktop machines, android phones and the web  zero graphics a very minimal opengl es 20 library for zig opens you a window and lets you draw things comes with a pixelperfect 2d renderer and maybe some day even with a bit of a 3d api logodesignlogopng  features  multiplatform support  desktop linux macos windows   webassembly  android  pixel perfect 2d rendering  primitives line rectangle triangle   text  ttf fonts  textures  basic 3d rendering  multimesh models with flat textures  zigstyle immediatemode user interface  proper dpi scaling support in renderer  project status  ci the ci coverage currently looks like this    windows  macos  linux            desktop         webassembly         android         zeroinit         zeroconvert        status nightly buildhttpsgithubcommasterq32zerographicsactionsworkflowsnightlyymlbadgesvghttpsgithubcommasterq32zerographicsactionsworkflowsnightlyyml  previews workinprogress but works quite well already there is one big projecthttpsgithubcomdunstwolkecore depending on it and is used as a realworld application driver behind zero graphics preview screenshot for sdl2documentationscreen01png preview screenshot in firefoxhttpsmq32depublic7207fdc86224d69a7af0e8289c6b7a687c757cf8png  project goals  basic framework    support the following platforms  x wasm  x create opengl es 20 context  x input mouse  x input keyboard    linux desktop  x create opengl es 20 context  x input mouse    input keyboard    windows desktop not tested but should work via sdl2    android  x create opengl es 20 context  x input mouse    input keyboard  x create an opengl es 20 context  x provide input events  x single pointer motion finger or mouse  x single click event finger mouse    text input for keyboard utf8 encoded  x provide window events  x resize  x close  x provide access to the underlying backend    allow creation of singlefile applications    single executable for easy distribution    embedded resources  2d rendering library    pixel perfect drawing of  x lines  x rectangles    images  x basic copy full texture to rectangle    copy portion of texture atlas rendering  x ttf font rendering via stbttfhttpsgithubcomnothingsstb  x image loading via zigimghttpsgithubcomzigimgzigimg    stack basednested scissoring  3d rendering library    tool based on assimp to convert models into loadable format  x static geometry    dynamicanimated geometry    blender export script  x draw static geometry    draw animated geometry    skinning based on skeletons    axis and camera aligned billboards    basic particles    tiny builtin pipeline with    shadow mapping    planar reflections    water reflections  dependencies  desktop  sdl2httpswwwlibsdlorg  web  js glue codewwwzerographicsjs  root pagewwwapplicationztt  android  android sdk  android ndk  android build tools  openjdk  some other tools  building  running this project uses submoduleshttpsgitscmcombookenv2gittoolssubmodules so to get started clone the repo with submodules recursively shsession usercomputer work git clone httpsgithubcommasterq32zerographics recursesubmodules  or if you already cloned the repository shsession usercomputer work git clone httpsgithubcommasterq32zerographics usercomputer work cd zerographics usercomputer zerographics git submodule update init recursive   desktop pc requires sdl2 to be installed shsession usercomputer zerographics zig build run  a window should open with the application in fullscreen the following environment variables can control how zerographics behaves  zerogfullscreen is y for forced fullscreen or n for forced window mode  zerogresizeable is y for forced resizable window  zerogdpi is a number specifying the pixel density  webwasm version includes a teeny tiny web server for debugging shsession usercomputer zerographics zig build install runwasm  now visit http1270018000demoapplicationhtm to see the demo  android connect your phone first and install both a jdk as well as the android sdk with ndk included the zerographics build system will tell you if it couldnt autodetect the sdk paths shsession usercomputer zerographics zig build denableandroid runapp  the app should now be installed and started on your phone  documentation  getting started to create a new project build this repository with zig build first then use the tool zeroinit from zigoutbin to initialize a new project shsession felixdenkplattev2  mkdir game felixdenkplattev2  cd game felixdenkplattev2 game pathtozerographicszigoutbinzeroinit symlink  initialize via symlink quickest option use zeroinit h to see all options felixdenkplattev2 game ls src vendor buildzig felixdenkplattev2 game zig build felixdenkplattev2 game zig build run infosdl sdl video driver x11 infosdl render resolution 1280720 infosdl virtual resolution 1280720 infodemo opengl version opengl es 32 mesa 2123 infodemo opengl vendor amd infodemo opengl renderer amd radeontm vega 10 graphics raven drm 3410 513191 llvm 1201 infodemo opengl glsl opengl es glsl es 320 infozerographics shader compiler other shader stats sgprs 16 vgprs 8 code size 212 lds 0 scratch 0 max waves 10 spilled sgprs 0 spilled vgprs 0 privmem vgprs 0 infozerographics shader compiler other shader stats sgprs 16 vgprs 8 code size 40 lds 0 scratch 0 max waves 10 spilled sgprs 0 spilled vgprs 0 privmem vgprs 0 infozerographics shader compiler other shader stats sgprs 8 vgprs 24 code size 52 lds 0 scratch 0 max waves 10 spilled sgprs 0 spilled vgprs 0 privmem vgprs 0 infozerographics shader compiler other shader stats sgprs 8 vgprs 24 code size 24 lds 0 scratch 0 max waves 10 spilled sgprs 0 spilled vgprs 0 privmem vgprs 0 infozerographics shader compiler other shader stats sgprs 8 vgprs 8 code size 60 lds 0 scratch 0 max waves 10 spilled sgprs 0 spilled vgprs 0 privmem vgprs 0 infozerographics shader compiler other shader stats sgprs 16 vgprs 20 code size 392 lds 0 scratch 0 max ","hexops-graveyard/mach-gpu-dawn":"google's dawn webgpu implementation, cross-compiled with zig into a single static library  deprecated this project has been deprecated and is no longer maintained rationale httpsgithubcomhexopsmachissues1166 ","jetzig-framework/zmpl":"zmpl is a templating language written in zig zmpl logopubliczmplpng zmpl is a templating language for zighttpsziglangorg lizard  use zig code directly in templates for control flow  simple and intuitive dsl for building flexible jsoncompatible data objects  compiles to zig code for syntax and type validation  used by the jetzighttpsgithubcomjetzigframeworkjetzig web framework  documentation visit the jetzig documentationhttpsjetzigdevdocumentationhtml page to see detailed zmpl documentation with usage examples  syntax highlighting  vimhttpsgithubcomjetzigframeworkzmplvim  vscodehttpsgithubcomz1firezmplsyntaxhighlightingvscode by zackary housendhttpsgithubcomz1fire  example see srctemplatessrctemplates for more examples  template zig  zig mode for template logic  zig  if stdmemeqlu8 zmpl is simple zmpl   is   simple  spanzmpl is simplespan    easy data lookup syntax  divemail useremaildiv divtoken authtokendiv  partials  partial examplepartial  partials with positional args  partial mailtouseremail welcome to jetzig  partials with keyword args  partial mailtoemail useremail subject welcome to jetzig  partials with slots  partial mailtoemail useremail subject welcome to jetzig  a hrefhttpsexamplecomauthauthtokensign ina a hrefhttpsexamplecomunsubscribeauthtokenunsubscribea  markdown   builtin markdown support  jetzigdevhttpswwwjetzigdev    mailto partial zig args email zmplvalue subject const u8 a hrefmailtoemailsubjectsubjectemaila zig  for slots 0 slot slotindex  div classslotslotindexslotdiv     output html html  zig mode for template logic  spanzmpl is simplespan  easy data lookup syntax  divemail userexamplecomdiv divtoken abc123456defdiv  partials  spanan example partialspan  partials with positional args  a hrefmailtouserexamplecomsubjectwelcome to jetziguserexamplecoma  partials with keyword args  a hrefmailtouserexamplecomsubjectwelcome to jetziguserexamplecoma  partials with slots  a hrefmailtouserexamplecomsubjectwelcome to jetziguserexamplecoma div classslot0a hrefhttpsexamplecomauthabc123456defsign inadiv div classslot1a hrefhttpsexamplecomunsubscribeabc123456defunsubscribeadiv divh1builtin markdown supporth1 ullia hrefhttpswwwjetzigdevjetzigdevaliuldiv   example usage default template path is srctemplates use dzmpltemplatespath to set an alternative relative or absolute path render receives four arguments  data a pointer to a zmpldata used by references to look up template data  context a type defining some predefined data that is passed to every template context must be the same type passed to every template but its structure is arbitrary  context a value of type context containing specific values available as context within every template  options template render options zig pub const renderoptions  struct   specify a layout to wrap the rendered content within in the template layout use  zmplcontent to render the inner content layout manifesttemplate  null   zig const std  importstd const zmpl  importzmpl const context  struct  foo const u8  default  const context  context foo  bar  test readme example  var data  zmpldatainitstdtestingallocator defer datadeinit var body  try dataobject var user  try dataobject var auth  try dataobject try userputemail datastringuserexamplecom try authputtoken datastringabc123456def try bodyputuser user try bodyputauth auth if zmplfindexample template  const output  try templaterenderdata context context  defer stdtestingallocatorfreeoutput try stdtestingexpectequalstrings  zig mode for template logic   spanzmpl is simplespan    easy data lookup syntax  divemail userexamplecomdiv divtoken abc123456defdiv   partials  spanan example partialspan  partials with positional args  a hrefmailtouserexamplecomsubjectwelcome to jetziguserexamplecoma  partials with keyword args  a hrefmailtouserexamplecomsubjectwelcome to jetziguserexamplecoma  partials with slots  a hrefmailtouserexamplecomsubjectwelcome to jetziguserexamplecoma  div classslot0a hrefhttpsexamplecomauthabc123456defsign inadiv  div classslot1a hrefhttpsexamplecomunsubscribeabc123456defunsubscribeadiv  divh1builtin markdown supporth1 ullia hrefhttpswwwjetzigdevjetzigdevaliuldiv  output  else  try stdtestingexpectfalse     license mitlicense  credits templhttpsgithubcomahtempl  inspiration for template layout ","tardy-org/tardy":"an asynchronous runtime for writing applications and services. supports io_uring, epoll, kqueue, and poll for i/o.   tardy tardy def delaying or delayed beyond the right or expected time late is an asynchronous runtime for writing applications and services in zig most of the code for this project originated in zzzhttpsgithubcomtardyorgzzz a performance oriented networking framework  tardy utilizes the latest asynchronous apis while minimizing allocations  tardy natively supports linux mac bsd and windows  tardy is configurable allowing you to optimize the runtime for your specific usecase discordhttpsimgshieldsiodiscord1294761432922980392logodiscordhttpsdiscordggfp9xb7wgpk  summary tardy is a threadlocal io driven runtime for zig providing the core implementation for asynchronous libraries and services  perthread runtime isolation for minimal contention  native async io iouring epoll kqueue poll etc  asynchronous sockets and files  coroutines internally called frames  installing compatible zig version 0140 latest release 030  zig fetch save githttpsgithubcomtardyorgtardyv030  you can then add the dependency in your buildzig file zig const tardy  bdependencytardy  target  target optimize  optimize moduletardy exerootmoduleaddimporttardy   example a basic multithreaded tcp echo server zig const std  importstd const log  stdlogscopedtardyexampleecho const pool  importtardypool const runtime  importtardyruntime const task  importtardytask const tardy  importtardytardyauto const cross  importtardycross const socket  importtardysocket const timer  importtardytimer const acceptresult  importtardyacceptresult const recvresult  importtardyrecvresult const sendresult  importtardysendresult fn echoframert runtime server const socket void  const socket  try serveracceptrt defer socketcloseblocking  you can use the standard zig readerwriter if you want const reader  socketreaderrt const writer  socketwriterrt logdebug d  accepted socket   stdtimemillitimestamp socketaddr   try rtspawn rt server  echoframe 1024  16 var buffer 1024u8  undefined while true  const recvlength  readerreadbuffer catch e  logerrfailed to recv on socket   e return  writerwriteallbuffer0recvlength catch e  logerrfailed to send on socket   e return  logdebugechoed s buffer0recvlength   pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer   gpadeinit  tardy by default is   multithreaded   unbounded in terms of spawnable tasks var tardy  try tardyinitallocator  defer tardydeinit const server  try socketinit tcp   host  127001 port  9862   try serverbind try serverlisten256 try tardyentry server struct  fn startrt runtime tcpserver const socket void  try rtspawn rt tcpserver  echoframe 1024  1024  4  start    there exist a lot more examples highlighting a variety of use cases and features herehttpsgithubcomtardyorgtardytreemainexamples for an example of tardy in use you can check out any of the projects in the ecosystemecosystem  ecosystem  zzzhttpsgithubcomtardyorgzzz a framework for writing performant and reliable networked services  secsockhttpsgithubcomtardyorgsecsock async tls for the tardy socket  contribution we use nix flakes for managing the development environment nix flakes provide a reproducible declarative approach to managing dependencies and development tools  prerequisites  install nixhttpsnixosorgdownload bash sh curl l httpsnixosorgnixinstall daemon   enable flake supporthttpsnixoswikiwikiflakes in your nix config confignixnixconf experimentalfeatures  nixcommand flakes  getting started 1 clone this repository bash git clone httpsgithubcomtardyorgtardygit cd tardy  2 enter the development environment bash nix develop  this will provide you with a shell that contains all of the necessary tools and dependencies for development once you are inside of the development shell you can update the development dependencies by 1 modifying the flakenix 2 running nix flake update 3 committing both the flakenix and the flakelock  license unless you explicitly state otherwise any contribution intentionally submitted for inclusion in tardy by you shall be licensed as mpl20 without any additional terms or conditions ","cryptocode/zigfsm":"a finite state machine library for zig img alignright width160 height160 srchttpsuserimagesgithubusercontentcom349464421522228959c8adb22a22d4bcea5133486ca28bdd5png zigfsm is a finite state machinehttpsenwikipediaorgwikifinitestatemachine library for zig this library supports zig 012x 013 014 as well as zig master last test was on zig version 0140dev3470711b0fef5 use the zigfsm main branch to compile with zig master use the appropriate zigversion tag to target a zig version not compatible with the main branch tested on linux macos freebsd and windows  table of contents  featuresfeatures  motivationmotivation  using zigfsmusingzigfsm  buildingbuilding  importing the libraryimportingthelibrary  learning from the testslearningfromthetests  creating a state machine typecreatingastatemachinetype  making an instancemakinganinstance  adding state transitionsaddingstatetransitions  optionally defining eventsoptionallydefiningevents  defining transitions and events at the same timedefiningtransitionsandeventsatthesametime  defining transitions and events as a tabledefiningtransitionsandeventsasatable  changing statechangingstate  probing the current stateprobingthecurrentstate  inspecting what transition happenedinspectingwhattransitionhappened  valid states iteratorvalidstatesiterator  importing state machinesimportingstatemachines  transition handlerstransitionhandlers  canceling transitionscancelingtransitions  features  never allocates  works at both comptime and runtime  fast transition validation  compact memory representation  state machines can export themselves to the graphviz dot format  defined programmatically or by importing graphviz or libfsm text even at compile time  imported state machines can autogenerate state and event enums  optional event listeners can add functionality and cancel transitions  pushdown automaton wrappers are easy to write see gamestate example in testszig  comprehensive test coverage which also serves as examples  motivation using an fsm library may have some benefits over handwritten state machines  many realworld processes algorithms and protocols have rigorously defined state machines available these can be imported directly or programmatically into zigfsm  can lead to significant simplification of code as transition rules are explicitly stated in one place contrast this with the brittleness of manually checking and documenting which states can follow a certain state when a certain event happens  an invalid state transition is an immediate error with useful contextual information  you get visualization for free which is helpful during development debugging and as documentation  using zigfsm before diving into code its worth repeating that zigfsm state machines can generate their own diagram as well as import them this can be immensely helpful when working on your state machines as you get a simple visualization of all transitions and events obviously the diagrams can be used as part of your documentation as well heres the diagram from the csv parser test as generated by the library csvhttpsuserimagesgithubusercontentcom349464421501140198dc15ab135b9463198b4976dbb1217c3png diagrams can be exported to any writer using exportgraphviz which accepts statemachineexportoptions to change style and layout a png can be produced using the following command dot tpng csvgv o csvpng  building to build test and benchmark  zig build doptimizereleasefast zig build test zig build benchmark  the benchmark always runs under releasefast  importing the library add zigfsm as a zig package to your zon file or simply import mainzig directly if vendoring heres how to update your zon file using the latest commit of zigfsm bash zig fetch save githttpsgithubcomcryptocodezigfsm  next update your buildzig to add zigfsm as an import for example zig exerootmoduleaddimportzigfsm bdependencyzigfsm modulezigfsm  now you can import zigfsm from any zig file zig  this example implements a simple moore machine a threelevel intensity lightswitch const std  importstd const zigfsm  importzigfsm pub fn main void   a state machine type is defined using state enums and optionally event enums  an event takes the state machine from one state to another but you can also switch to  other states without using events   state and event enums can be explicit enum types comptime generated enums or  anonymous enums like in this example   if you dont want to use events simply pass null to the second argument  we also define what state is the initial one in this case off var fsm  zigfsmstatemachineenum  off dim medium bright  enum  click  offinit  there are many ways to define transitions and optionally events including importing  from graphviz in this example we use a simple api to add events and transitions try fsmaddeventandtransitionclick off dim try fsmaddeventandtransitionclick dim medium try fsmaddeventandtransitionclick medium bright try fsmaddeventandtransitionclick bright off stddebugassertfsmiscurrentlyoff  do a full cycle off  dim  medium  bright  off   try fsmdoclick   try fsmdoclick   try fsmdoclick   try fsmdoclick  make sure were in the expected state stddebugassertfsmiscurrentlyoff stddebugassertfsmcantransitiontodim    learning from the tests a good way to learn zigfsm is to study the testshttpsgithubcomcryptocodezigfsmblobmainsrctestszig file this file contains a number of selfcontained tests that also demonstrates various aspects of the library  creating a state machine type a state machine type is defined using state enums and optionally event enums here we create an fsm for a button that can be clicked to flip between on and off states the initial state is off zig const state  enum  on off  const event  enum  click  const fsm  zigfsmstatemachinestate event off  if you dont need events simply pass null zig const fsm  zigfsmstatemachinestate null off   making an instance now that we have a state machine type lets create an instance with an initial state  zig var fsm  fsminit  if you dont need to reference the state machine type you can define the type and get an instance like this zig var fsm  zigfsmstatemachinestate event offinit  you can also pass anonymo","arnau478/hevi":"hex viewer div aligncenter h1 aligncenterhevih1 h3a hex viewerh3 div ci statushttpsgithubcomarnau478heviactionsworkflowsciymlbadgesvg example imagewebexamplepng  what is hevi hevi pronounced like heavy is a hex viewer just like xxd or hexdump  features  parsers hevi can parse things like elf or pe files and give you syntaxhighlighting parser examplewebparserpng  custom color palettes you can specify custom color palettes color palettes can use standard ansi colors or truecolor  usage the command should be used as hevi file flags the flags are described belowflags  flags  flags  description        hhelp  show a help message   vversion  show version information   colornocolor  enable or disable colored output   lowercaseuppercase  toggle between lowercase and uppercase hex   sizenosize  enable or disable the line showing the size at the end   offsetnooffset  enable or disable showing the offset   asciinoascii  enable or disable ascii interpretation   skiplinesnoskiplines  enable or disable skipping of identical lines   raw  raw format disables most features   showpalette  show the current color palette in a table   parser  specify the parser to use for a list use hevi help   environment variables the nocolor variable is supported and disables color see httpsnocolororg printing note that it can be overwritten by an explicit color  config file the config file is a ziggyhttpsziggylangio file the following fields are available zig color bool uppercase bool showsize bool showoffset bool showascii bool skiplines bool raw bool palette palette  all fields are optional note for the palette field you must specify all styles  example config zig color  true skiplines  false palette  palette normal  coloryellow normalalt  coloryellowdim normalaccent  coloryellowbrightblackbold c1  colorred c1alt  colorreddim c1accent  colorredbrightblackbold c2  colorgreen c2alt  colorgreendim c2accent  colorgreenbrightblackbold c3  colorblue c3alt  colorbluedim c3accent  colorbluebrightblackbold c4  colorcyan c4alt  colorcyandim c4accent  colorcyanbrightblackbold c5  colormagenta c5alt  colormagentadim c5accent  colormagentabrightblackbold    location the config file is located at  os  path        linux macos freebsd openbsd netbsd  xdgconfighomeheviconfigziggy or if the env doesnt exist homeconfigheviconfigziggy   windows  appdataheviconfigziggy   other  not supported no config file will be read   precedence hevi has a precedence for configuration and it is 1 flags 2 environment variables 3 config file 4 defaults  about it is written in zighttpsgithubcomziglangzig in an attempt to simplify hex viewers  installation  some linux package managers if your package manager is in the following list and preferably in green you can simply install it from there packaging statushttpsrepologyorgbadgeverticalallreposhevisvghttpsrepologyorgprojectheviversions  homebrew you can install hevihttpsformulaebrewshformulahevi with brewhttpsbrewsh sh  brew install hevi   nix there is a nix flake you can use you can also try hevi without installing it sh  nix shell githubarnau478hevi   other platforms you can download a binary from the releaseshttpsgithubcomarnau478hevireleases page you can also clone the repository and compile it with zig build  contribute contributions are welcome even if you dont want to write code you can help a lot creating new issues or testing this software  license see licenselicense spdxlicenseidentifier gpl30orlater license gpl30orlaterhttpsimgshieldsiobadgelicensegpl30orlaterbluesvghttpsspdxorglicensesgpl30orlaterhtml ","ikskuh/zig-qoi":"quite ok image format encoder/decoder written in zig  zigqoi a implementation of the quite ok image formathttpsqoiformatorg for zig this implementation conforms to the qoi specificationhttpsqoiformatorgqoispecificationpdf designlogopng  api add srcqoizig to your zig project as a package zig pub const decodeerror  error outofmemory invaliddata endofstream  pub const encodeerror  error outofmemory   simple api pub fn isqoibytes const u8 bool pub fn decodebufferallocator stdmemallocator buffer const u8 decodeerrorimage pub fn decodestreamallocator stdmemallocator reader anytype image pub fn encodebufferallocator stdmemallocator image constimage encodeerroru8 pub fn encodestreamimage constimage writer anytype void  streaming api pub fn encoderwriter anytype encodertypeofwriter pub fn encodercomptime writer type type  return struct  writer writer pub fn resetself self void pub fn flushself self encodeerror  writererrorvoid pub fn pushself self pixel color encodeerror  writererrorvoid   pub const colorrun  struct  color color length usize  pub fn decoderreader anytype decodertypeofreader pub fn decodercomptime reader type type  return struct  reader reader pub fn fetchself self readererrorcolorrun     implementation status everything specified in httpsgithubcomphoboslabqoiissues37 is implemented and accessible via the api  performance on my machine amd ryzen 7 3700u i did a small benchmark with decoding benchzig which will decode zeroqoi  build mode  qoi bytes  raw bytes  encoding time  decoding time              debug  75024 byte  1048576 byte  14439ms  7061ms   releasesmall  75024 byte  1048576 byte  1888ms  1499ms   releasesafe  75024 byte  1048576 byte  1392ms  512706us   releasefast  75024 byte  1048576 byte  1186ms  456762us  this means that this implementation is roughly able to decode 21 gbs raw texture data and is considered fast enough for now if you find some performance improvements feel free to pr it running perf on the benchmark compiled with releasefast showed that the implementation is quite optimal for the cpu utilizing it to 100 and executing up to 3 instructions per cycle on my machine shconsole felixdenkplattev2 zigqoi perf stat zigoutbinqoibench benchmark 40674096 encoding time for 1048576  75024 bytes 1019ms benchmark 40674096 decoding time for 75024  1048576 bytes 419223us performance counter stats for zigoutbinqoibench 966511 msec taskclocku  0997 cpus utilized 0 contextswitchesu  0000 ksec 0 cpumigrationsu  0000 ksec 21066 pagefaultsu  0002 msec 29757225002 cyclesu  3079 ghz 8333 317453390 stalledcyclesfrontendu  107 frontend cycles idle 8333 515819113 stalledcyclesbackendu  173 backend cycles idle 8332 83377885642 instructionsu  280 insn per cycle  001 stalled cycles per insn 8336 18947655057 branchesu  1960417 msec 8331 193594708 branchmissesu  102 of all branches 8335 9693303129 seconds time elapsed 9553127000 seconds user 0112001000 seconds sys  also running the benchmark datasethttpsqoiformatorgbenchmark of the original author it yielded the following datadatabenchmarkcsv  number of total images 1351 average png compression 1857 average qoi compression 2270 average compression rate mbs 43831 mbs minimal compression rate mbs 2706 mbs maximum compression rate mbs 139015 mbs average decompression rate mbs 112846 mbs maximum decompression rate mbs 3977 mbs maximum deompression rate mbs 1330720 mbs  see also the original analysis on google docshttpsdocsgooglecomspreadsheetsd1gutm4a2txfzxeb6mrwbcmfidju3s2ivs3omsoo4qedituspsharing  contribution run the test suite like this shconsole userhost zigqoi zig build test all 5 tests passed  run the benchmark like this shconsole userhost zigqoi zig build benchmark benchmark 40964096 encoding time for 1048576  67076 bytes 16649ms benchmark 40954096 decoding time for 67076  1048576 bytes 5681ms  to run the benchmark for batch files run this shconsole userhost zigqoi zig build install  zigoutbinqoibenchfiles foldera folderb  file name width height total raw bytes total png bytes png compression total qoi bytes qoi compression qoi to png decode time ns encode time ns datazeropng 512 512 1048576 80591 008 67076 006 08323013782501221 5628360 14499346 total sum 0 0 1048576 80591 008 67076 006 08323013782501221 5628360 14499346  pass as many folders you like to the benchmarking tool it will render a csv file on the stderr ","ziglibs/s2s":"a zig binary serialization format.  struct to stream  stream to struct a zig binary serialization format and library project logodesignlogopng  features  convert nearly any zig runtime datatype to binary data and back  computes a stream signature that prevents deserialization of invalid data  no support for graph like structures everything is considered to be tree data unsupported types  all comptime only types  unbound pointers c pointers pointer to many  volatile pointers  untagged or external unions  opaque types  function pointers  frames  api the library itself provides only some apis as most of the serialization process is not configurable zig  serializes the given value t into the stream   stream is a instance of stdiowriter   t is the type to serialize   value is the instance to serialize fn serializestream anytype comptime t type value t streamerrorvoid  deserializes a value of type t from the stream   stream is a instance of stdioreader   t is the type to deserialize fn deserializestream anytype comptime t type streamerror  errorunexpecteddataendofstreamt  deserializes a value of type t from the stream   stream is a instance of stdioreader   t is the type to deserialize   allocator is an allocator require to allocate slices and pointers  result must be freed by using free fn deserializeallocstream anytype comptime t type allocator stdmemallocator streamerror  error unexpecteddata outofmemoryendofstream t  releases all memory allocated by deserializealloc   allocator is the allocator passed to deserializealloc   t is the type that was passed to deserializealloc   value is the value that was returned by deserializealloc fn freeallocator stdmemallocator comptime t type value t void   usage and development  adding the library just add the s2szig as a package to your zig project it has no external dependencies  running the test suite shsession userhost s2s zig test s2szig all 3 tests passed userhost s2s   project status most of the serializationdeserialization is implemented for the trivial case pointersslices with nonstandard alignment arent properly supported yet ","batiati/mustache-zig":"logic-less templates for zig 404 not found","alexnask/ctregex.zig":"compile time regular expressions in zig  zig compile time regular expressions generating fast code since 2020  features  comptime regular expression compilation  comptime and runtime matching  utf8 utf16le ascii codepoint array support  captures with named name support         n min minmax  d s character classes  todo  faster generated code using dfas when possible  search findall etc  more character classes  more features backreferences etc  example zig test runtime matching  setevalbranchquota1250  the encoding is utf8 by default you can use ascii utf16le codepoint here instead if try matchtestdefabc encoding  utf8 abc res  stddebugwarntest  1 n  rescapturetest rescaptures1    test comptime matching  setevalbranchquota2700 if comptime try matchtestdefabc  abc res  compileerrortest   rescapturetest   1   rescaptures1    see testszig for more examples small benchmark with ctregex pcre2httpsgistgithubcomalexnaskc537360ae0163863564fba6e660f442b ","karlseguin/log.zig":"a structured logger for zig 404 not found","karlseguin/zuckdb.zig":"a duckdb driver for zig 404 not found","00jciv00/cova":"commands, options, values, arguments. a simple yet robust cross-platform command line argument parsing library for zig. covaiconv2 1httpsgithubcom00jciv00covaassets680876320b485f6bddf4477296eb899d4606f9cc  commands  options  values  arguments a simple yet robust crossplatform command line argument parsing library for zig static badgehttpsimgshieldsiobadgev013stableorangelogoziglogocolororangelabelziglabelcolororangehttpsziglangorgdownload static badgehttpsimgshieldsiobadgev0101bbluelogogithublabelreleasehttpsgithubcom00jciv00covareleasestagv0101beta github commit activityhttpsimgshieldsiogithubcommitsdifference00jciv00covabasev0101headmainlogogithublabelcommits20v0110bhttpsgithubcom00jciv00covacommitsmain static badgehttpsimgshieldsiobadgemitsilverlabellicensehttpsgithubcom00jciv00covablobmainlicense   overview command option value cova is based on the idea that arguments will fall into one of three types commands options or values these types are assembled into a single command struct which is then used to parse argument tokens whether youre looking for simple argument parsing or want to create something as complex as the iphttpswwwman7orglinuxmanpagesman8ip8html or githttpswwwman7orglinuxmanpagesman1git1html commands cova makes it easy  get started quickly  quick start guidehttpsgithubcom00jciv00covawikigettingstarted  full wiki guidehttpsgithubcom00jciv00covawiki  api docshttps00jciv00githubiocova  quick example logger examplehttpsgithubcom00jciv00covablobmainexamplesloggerzig shell logger loglevel info   set up a command zig   pub const commandt  covacommandcustom pub const setupcmd  commandt name  logger description  a small demo of using the log level enum as an option examples   logger loglevel info  opts    name  loglevel description  an option using the loglevel enum longname  loglevel mandatory  true val  commandtvaluetoftypeloglevel  name  loglevelval description   this value will handle the enum       parse the command zig pub fn main void    var maincmd  try setupcmdinitalloc  defer maincmddeinit var argsiter  try covaargiteratorgenericinitalloc defer argsiterdeinit covaparseargsargsiter commandt maincmd stdout  catch err switch err  errorusagehelpcalled   else  return err      use the data zig   const mainopts  try maincmdgetopts const loglvlopt  mainoptsgetloglevel const loglvl  loglvloptvalgetasloglevel catch  logerrthe provided log level was invalid  return  loginfoprovided log level s  tagnameloglvl     features  comptime setupcomptimesetup runtime useruntimeuse  cova is designed to have argument types set up at compile time so they can be validated during each compilation thus providing you with immediate feedback  once validated argument types are initialized to memory for runtime use where end user argument tokens are parsed then made ready to be analyzed by your code  buildtime bonusesbuildtimebonuses cova also provides a simple build step to generate help docs tab completion scripts and argument templates at buildtime  simple design  all argument tokens are parsed to argument types commands options or values  options  flags and values  positional arguments  these argument types can be created from or converted to your structs unions and functions along with their corresponding fields and parameters  default arguments such as usage and help can be automatically added to all commands easily  this design allows for infinitely nestable commands options and values in a way thats simple to parse analyze and use in your projects  multiplatform tested across common architectures of linux mac and windows  granular robust customization  posix complianthttpswwwgnuorgsoftwarelibcmanualhtmlnodeargumentsyntaxhtml by default with plenty of ways to configure to whatever standard youd like  posix command option optionstring standalone value subcmd i 42 bool  windows yourcommand stringoption value fileoption userfilepath  cova offers deep customization through the argument types and several config structs these customizations all provide simple and predictable defaults allowing you to only configure what you need  and much morehttpsgithubcom00jciv00covawikifeaturelist  usage cova makes it easy to set up your argument types at comptime and use the input provided by your end users at runtime  comptime setup there are two main ways to set up your argument types you can either convert existing zig types within your project or create them manually you can even mix and match these techniques to get the best of both details summarycode examplesummary zig const std  importstd const cova  importcova pub const commandt  covacommandbase pub const optiont  commandtoptiont pub const valuet  commandtvaluet  the root command for your program pub const setupcmd commandt   name  basicapp description  a basic user management application designed to highlight key features of the cova library cmdgroups   interact view  subcmds    a sub command created from converting a struct named user  usage ex basicapp new f bruce l wayne a 40 p 555 555 5555 a  1007 mountain drive gotham true commandtfromuser  cmdname  new cmddescription  add a new user cmdgroup  interact subdescriptions    isadmin add this user as an admin   firstname users first name   lastname users last name   age users age   phone users phone    address users address     a sub command created from a function named open  usage ex basicapp open userscsv commandtfromtypeofopen  cmdname  open cmddescription  open or create a users file cmdgroup  interact   a manually created sub command sa","saltzm/async_io_uring":"an event loop in zig using io_uring and coroutines  overview asynciouring is an event loop that wraps the iouring library with coroutines support it supports all iouring operations with the intentional exception of pollupdate in addition it allows  adding timeouts to operations  manual cancellation of operations  writing custom operations for advanced use cases it is currently functionally complete though there are a few todos marked in the source related to polishing the api its not used in production anywhere currently see srcasynciouringzig for full api documentation see the examples directory for an echo client and server that use the event loop  if you need this for some reason please create an issue  warning the main branch of asynciouring will follow changes to zigs master branch to stay uptodate with changes to the iouring api among others see the tagged releases of asynciouring that are marked to work with specific stable versions of zig eg release v010 works with zig 091  table of contents  backgroundbackground  goalsgoals  installationinstallation  example usageexampleusage  echo clientechoclient  operation timeoutsoperationcancellation  operation cancellationoperationcancellation   background as an overview for the unfamiliar iouring is a newish linux kernel feature that allows users to enqueue requests to perform syscalls into a submission queue eg a request to read from a socket and then submit the submission queue to the kernel for processing when requests from the submission queue have been satisfied the result is placed onto completion queue by the kernel the user is able to either poll the kernel for completion queue results or block until results are available zigs iouring library provides a convenient interface to the kernels iouring functionality the user of iouring however still has to manually deal with submitting requests to the kernel and retrieving events from the completion queue which can be tedious this library wraps the iouring library by adding an event loop that handles request submission and completion and provides an interface for each syscall that uses zigs async functionality to suspend execution of the calling code until the syscall has been completed this lets the user write code that looks like blocking code while still allowing for concurrency even within a single thread  goals  minimal wraps the iouring library in the most lightweight way possible this means it still uses the iouring data structures in many places like for completion queue entries there are no additional internal data structures other than the submission queue and completion queue used by the iouring library this means theres no heap allocation it also relies entirely on kernel functionality for timeouts and cancellation  complete you should be able to do anything with this that you could do with iouring  easy to use because of the use of coroutines code written with this library looks almost identical to blocking code in addition operation timeouts and cancellation support is integrated into the api for all operations  performant the library does no heap allocation and theres minimal additional logic on top of suspendresume  installation this library integrates with the zigmodhttpsgithubcomnektrozigmod package manager if youve installed zigmod you can add a line like the following to your rootdependencies in the zigmod file of your project and run zigmod fetch yml rootdependencies    src git httpsgithubcomsaltzmasynciouringgit  youll then be able to include asynciouringzig by doing something like zig const io  importasynciouring  the examples directory is structured roughly as you might structure a project that uses asynciouring with a working zigmod file and buildzig that can serve as examples youll also need a linux kernel version that supports all of the iouring features youd like to use all testing was done on version 5130  example usage  echo client jumping right into a realistic example the following is a snippet of code from the echo client in the examples directory zig const io  importasynciouring pub fn runclientring asynciouring void   make a data structure that lets us do async file io with the same  syntax as stddebugprint var writer  try asyncwriterinitring stdiogetstderrhandle  address of the echo server const address  try netaddressparseip4127001 3131  open a socket for connecting to the server const server  try ossocketaddressanyfamily ossockstream  ossockcloexec 0 defer    ringcloseserver null null catch  stdosexit1    connect to the server   try ringconnectserver addressany addressgetossocklen null null const stdinfile  stdiogetstdin const stdinfd  stdinfilehandle var inputbuffer 256u8  undefined while true   prompt the user for input try writerprintinput   const readtimeout  oslinuxkerneltimespec tvsec  10 tvnsec  0   read a line from stdin with a 10 second timeout  this is the more verbose api  you can also do ringread const readcqe  ringdo ioread fd  stdinfd buffer  inputbuffer0 offset  inputbufferlen  iotimeout ts  readtimeout flags  0  null  catch err  if err  errorcancelled  try writerprintntimed out waiting for input exitingn  return  else return err  const numbytesread  intcastusize readcqeres  send it to the server   try ringsendserver inputbuffer0numbytesread 0 null null  receive response const recvcqe  try ringrecvserver inputbuffer0 0 null null const numbytesreceived  intcastusize recvcqeres try writerprintreceived sn inputbuffer0numbytesreceived     operation timeouts asynciouring supports adding timeouts to all operations adding a timeout to an operation causes it to be cancelled after the specified timeout returning an error code errorcancelled if cancellation was successful an example from the unit tests zig fn testreadthattimesoutring asynciouring void  var readbuffer  u80  20 const ts  oslinuxkerneltimespec tvsec  0 tvnsec  10000   try to read from stdin  there wont be any input so this should  relia","batiati/iupforzig":"iup (portable user interface toolkit) bindings for the zig language. 404 not found","travisstaloch/simdjzon":"simdjson ported to zig warning work in progress expect bugs andor missing features warning  simdjzon this is a port of simdjsonhttpsgithubcomsimdjsonsimdjson a high performance json parser developed by daniel lemire and geoff langdale to zighttpsziglangorg  cpu support only 64 bit cpus are supported so far  x8664 a cpu with avx is required and clmul is preferred the following usually have both  intel  haswell from 2013 onwards  amd  ryzenepyc cpu q1 2017 these commands show how to test for specific target and cpu support console zig build test dtargetx8664linux dcpux8664avx  uses clmulsoft  missing pclmul zig build test dtargetx8664linux dcpux8664avxpclmul  zig build test dtargetx8664linux  doesnt work  missing avx  zig build test dcpux8664v2  doesnt work  missing avx   aarch64 a cpu with aes is preferred console zig build test dtargetaarch64linux dcpuapplelatestaes fqemu  uses clmulsoft zig build test dtargetaarch64linux fqemu   powerpc not supported yet console  zig build test dtargetpowerpclinux fqemu  doesnt work  no classify  32bit errors  zig build test dtargetpowerpc64linux fqemu  doesnt work  no classify   fallback no fallback for unsupported cpus is provided yet console  zig build test dcpubaseline  doesnt work  no classify   zig compiler support the main branch is meant to compile with zigs master branch it is tested weekly on linux windows and macos for older compiler versions use a tagged versionhttpsgithubcomtravisstalochsimdjzontags  usage  git clone console  json validation  git clone httpsgithubcomtravisstalochsimdjzon  cd simdjzon  zig build dreleasefast  uses the dom api by default  zigoutbinsimdjzon testtestjson  echo   0 on success 0  zig build dreleasefast dondemand  use the ondemand api  zigoutbinsimdjzon testtestjson  echo   0 on success 0  zig build test all 19 tests passed   zig package console   zig fetch save githttpsgithubcomtravisstalochsimdjzon info resolved to commit 28d46c979f761b211539232378138b692ef50d55  zig  buildzig const simdjzondep  bdependencysimdjzon  target  target optimize  optimize  const exemod  bcreatemodule   imports    name  simdjzon module  simdjzondepmodulesimdjzon     zig  mainzig const simdjzon  importsimdjzon  zig const dom  importdomzig test get with struct  const s  struct  a u8 b const u8 c struct  d u8   const input  a 42 b bstring c d 126  var parser  try domparserinitfixedbufferallr input  defer parserdeinit try parserparse var s s  undefined try parserelementgets try testingexpectequalasu8 42 sa try testingexpectequalstringsbstring sb try testingexpectequalasu8 126 scd  test atpointer  const input  a b 123  var parser  try domparserinitfixedbufferallr input  defer parserdeinit try parserparse const b0  try parserelementatpointerab0 try testingexpectequalasi64 1 try b0getint64  const ondemand  importondemandzig  ondemand api users must specify pub const readbufcap  n in their  root source file in tests this defaults to stdmempagesize test ondemand get with struct  const s  struct  a struct  b const u8   const input  a b bstring  var src  stdiostreamsource constbuffer  stdiofixedbufferstreaminput  var parser  try ondemandparserinitsrc allr fba  defer parserdeinit var doc  try parseriterate var s s  undefined try docgets  allocator  allr  defer allrfreesab try testingexpectequalstringsbstring sab  test ondemand atpointer  const input  a b 123  var src  stdiostreamsource constbuffer  stdiofixedbufferstreaminput  var parser  try ondemandparserinitsrc allr fba  defer parserdeinit var doc  try parseriterate var b0  try docatpointerab0 try testingexpectequalasu8 1 try b0getintu8    performance  parsingvalidating twitterjson 630kb  simdjson console  wget httpsrawgithubusercontentcomsimdjsonsimdjsonmastersingleheadersimdjsonh httpsrawgithubusercontentcomsimdjsonsimdjsonmastersingleheadersimdjsoncpp httpsrawgithubusercontentcomsimdjsonsimdjsonmasterjsonexamplestwitterjson  cat maincpp include simdjsonh using namespace simdjson int mainint argc char argv  ifargc  2  stdcout  usage simdjson filejson  stdendl exit1  domparser parser try  const domelement doc  parserloadargv1  catchconst stdexception e  stdcerr  ewhat  n return 1  return 0   g maincpp simdjsoncpp o simdjson o3 marchnative  time simdjson twitterjson real0m0003s user0m0002s sys0m0001s  echo  0   simdjzon console  time zigoutbinsimdjzon twitterjson real0m0002s user0m0000s sys0m0002s  echo  0   timed against simdjson go nim zig std lib the simdjson binary was compiled as shown above go and nim binaries created with sources from jsontestsuite zig std lib driverbenchsrczigjsonzig validation times for several large json files created with benchmarkandplotjlbenchbenchmarkandplotjl resultshttpsgithubcomtravisstalochsimdjsonzigblobmediabenchvalidationgroupedpng  jsontestsuite results of running simdjson and simdjzon through jsontestsuitehttpsgithubcomnstjsontestsuite results are equal as of 8721 resultshttpsgithubcomtravisstalochsimdjsonzigblobmediajsontestsuiteresultspng ","hendriknielaender/zbench":"📊 zig benchmark   zbench  a zig benchmarking library mit licensehttpsimgshieldsiobadgelicensemitbluesvghttpsgithubcomhendriknielaenderzbenchblobheadlicense github code size in byteshttpsimgshieldsiogithublanguagescodesizehendriknielaenderzbench prs welcomehttpsimgshieldsiobadgeprswelcomebrightgreensvghttpsgithubcomhendriknielaenderzbenchblobheadcontributingmd img srclogopng altzbench logo alignright width20 zbench is a benchmarking library for the zig programming language it is designed to provide easytouse functionality to measure and compare the performance of your code  content  installationdocsinstallmd  usageusage  configurationconfiguration  compatibility notescompatibilitynotes  reporting benchmarksreportingbenchmarks  running zbench examplesrunningzbenchexamples  troubleshootingtroubleshooting  contributingcontributing  licenselicense  installation for installation instructions please refer to the documentationdocsinstallmd  usage create a new benchmark function in your zig code this function takes a single argument of type stdmemallocator and runs the code you wish to benchmark zig fn benchmarkmyfunctionallocator stdmemallocator void   code to benchmark here   you can then run your benchmarks in a test zig test bench test  var bench  zbenchbenchmarkinitstdtestingallocator  defer benchdeinit try benchaddmy benchmark mybenchmark  try benchrunstdiogetstdoutwriter    configuration to customize your benchmark runs zbench provides a config struct that allows you to specify several options zig pub const config  struct  iterations u16  0 maxiterations u16  16384 timebudgetns u64  2e9  2 seconds hooks hooks   trackallocations bool  false    iterations the number of iterations the benchmark has been run this field is usually managed by zbench itself  maxiterations set the maximum number of iterations for a benchmark useful for controlling longrunning benchmarks  timebudgetns define a time budget for the benchmark in nanoseconds helps in limiting the total execution time of the benchmark  hooks set beforeall afterall beforeeach and aftereach hooks to function pointers  trackallocations boolean to enable or disable tracking memory allocations during the benchmark  compatibility notes  zig version zig is in active development and its apis can change frequently the main branch of this project now targets the latest zig master build to take advantage of new features and improvements for users who prefer the stability of official releases dedicated branches are maintained for older zig versions eg zig0130 zig0120 etc this ensures you can choose the branch that best fits your stability and feature requirements  performance note its important to acknowledge that a noop time of ca 15 ns or more is expected and is not an issue with zbench itself see also 77httpsgithubcomhendriknielaenderzbenchissues77 this does not reflect an inefficiency in the benchmarking process  reporting benchmarks zbench provides a comprehensive report for each benchmark run it includes the total operations performed the average min and max durations of operations and the percentile distribution p75 p99 p995 of operation durations shell benchmark runs time avg   min  max p75 p99 p995  benchmarkmyfunction 1000 1200ms  10ms 100ms  2000ms 1100ms 1900ms 1950ms  this example report indicates that the benchmark benchmarkmyfunction ran with an average of 1200 ms per execution and a standard deviation of 10 ms the minimum and maximum execution times were 100 ms and 2000 ms respectively the 75th 99th and 995th percentiles of execution times were 1100 ms 1900 ms and 1950 ms respectively  running zbench examples you can build all examples with the following command shell zig build examples  executables can then be found in zigoutbin by default  troubleshooting  if zig doesnt detect changes in a dependency clear the projects zigcache folder and cachezig  nonascii characters not printed correctly on windowsdocsadvancedmd  contributing the main purpose of this repository is to continue to evolve zbench making it faster and more efficient we are grateful to the community for contributing bugfixes and improvements read below to learn how you help improve zbench  contributing guide read our contributing guidecontributingmd to learn about our development process how to propose bugfixes and improvements and how to build and test your changes to zbench  license zbench is mit licensedlicense ","johan0a/clay-zig-bindings":"zig bindings for the library clay: a high performance ui layout library in c.  zig bindings for clayh screenshot from 20250107 170501httpsgithubcomuserattachmentsassets8f38e8bf00aa4e16be96b7a0d81f4313  important  zig 0140 or higher is required  note  this project is currently in beta this repository contains zig bindings for the clay ui layout libraryhttpsgithubcomnicbarkerclay as well as an example implementation of the clay websitehttpsnicbarkercomclay in zig this readme is abbreviated and applies to using clay in zig specifically if you havent taken a look at the full documentation for clayhttpsgithubcomnicbarkerclayblobmainreadmemd its recommended that you take a look there first to familiarise yourself with the general concepts some differences between the c api and the zig bindings include  minor naming changes  ability to initialize a parameter by calling a function that is part of its types namespace for example fixed or layout  ability to initialize a parameter by using a public constant that is part of its types namespace for example grow in c c clay  c macro for creating a scope id  clayidsidebar layout   layoutdirection  claytoptobottom sizing   width  claysizingfixed300 height  claysizinggrow0  padding  claypaddingall16 childalignment   x  clayalignxcenter  y  clayalignytop  childgap  16  backgroundcolor  colorlight   child elements here   in zig zig clayui  function call for creating a scope id  idsidebar layout   direction  toptobottom sizing   w  fixed300 h  grow  padding  all16 childalignment   x  center y  top  childgap  16  backgroundcolor  lightgrey   child elements here    install 1 add zclay to the dependency list in buildzigzon sh zig fetch save httpsgithubcomjohan0aclayzigbindingsarchivecommit shatargz  2 config buildzig zig  const zclaydep  bdependencyzclay  target  target optimize  optimize  compilesteprootmoduleaddimportzclay zclaydepmodulezclay    quickstart 2 ask clay for how much static memory it needs using clayminmemorysizehttpsgithubcomnicbarkerclayblobmainreadmemdclayminmemorysize create an arena for it to use with claycreatearenawithcapacityandmemoryminmemorysize memoryhttpsgithubcomnicbarkerclayblobmainreadmemdclaycreatearenawithcapacityandmemory and initialize it with clayinitializearenahttpsgithubcomnicbarkerclayblobmainreadmemdclayinitialize zig const minmemorysize u32  clayminmemorysize const memory  try allocatorallocu8 minmemorysize defer allocatorfreememory const arena clayarena  claycreatearenawithcapacityandmemorymemory   clayinitializearena  h  1000 w  1000   claysetmeasuretextfunctionvoid  renderermeasuretext  3 provide a measuretexttext config function with claysetmeasuretextfunctionfunctionhttpsgithubcomnicbarkerclayblobmainreadmemdclaysetmeasuretextfunction so that clay can measure and wrap text zig  example measure text function pub fn measuretextclaytext const u8 config claytextelementconfig userdata void claydimensions   claytextelementconfig contains members such as fontid fontsize letterspacing etc  note claystringchars is not guaranteed to be null terminated   tell clay how to measure text claysetmeasuretextfunction measuretext  4 optional  call claysetpointerpositionpointerpositionhttpsgithubcomnicbarkerclayblobmainreadmemdclaysetpointerposition if you want to use mouse interactions zig  update internal pointer position for handling mouseover  click  touch events claysetpointerstate x  mousepositionx y  mousepositiony  isleftmousebuttondown  5 call claybeginlayouthttpsgithubcomnicbarkerclayblobmainreadmemdclaybeginlayout and declare your layout using the provided functions zig const lightgrey claycolor   224 215 210 255  const red claycolor   168 66 28 255  const orange claycolor   225 138 50 255  const white claycolor   250 250 255 255  const sidebaritemlayout claylayoutconfig   sizing   w  grow h  fixed50    reuseable components are just normal functions fn sidebaritemcomponentindex u32 void  clayui id  idisidebarblob index layout  sidebaritemlayout backgroundcolor  orange    an example function to begin the root of your layout tree fn createlayoutprofilepicture const rltexture2d clayclayarrayclayrendercommand  claybeginlayout clayui id  idoutercontainer layout   direction  lefttoright sizing  grow padding  all16 childgap  16  backgroundcolor  white  clayui id  idsidebar layout   direction  toptobottom sizing   h  grow w  fixed300  padding  all16 childalignment   x  center y  top  childgap  16  backgroundcolor  lightgrey  clayui id  idprofilepictureouter layout   sizing   w  grow  padding  all16 childalignment   x  left y  center  childgap  16  backgroundcolor  red  clayui id  idprofilepicture layout   sizing   h  fixed60 w  fixed60   image   sourcedimensions   h  60 w  60  imagedata  ptrcastprofilepicture   claytextclay  ui library  fontsize  24 color  lightgrey   for 05 i sidebaritemcomponentintcasti  clayui id  idmaincontent layout   sizing  grow  backgroundcolor  lightgrey     return clayendlayout   6 call clayendlayouthttpsgithubcomnicbarkerclayblobmainreadmemdclayendlayout and process the resulting clayrendercommandarrayhttpsgithubcomnicbarkerclayblobmainreadmemdclayrendercommandarray in your choice of renderer zig pub fn clayraylibrenderrendercommands clayclayarrayclayrendercommand alloc","thechampagne/webview-zig":"⚡ zig binding & wrapper for a tiny cross-platform webview library to build modern cross-platform guis.  webviewzig httpsimgshieldsiogithubvtagthechampagnewebviewziglabelversionhttpsgithubcomthechampagnewebviewzigreleaseslatest httpsimgshieldsiogithublicensethechampagnewebviewzighttpsgithubcomthechampagnewebviewzigblobmainlicense zig binding for a tiny crossplatform webview library to build modern crossplatform guis p aligncenter img srchttpsrawgithubusercontentcomthechampagnewebviewzigmaingithubassetsscreenshotpng p  requirements  zig compilerhttpsziglangorg  0130  unix  gtk3httpsgtkorg and webkitgtkhttpswebkitgtkorg  windows  webview2 runtimehttpsdevelopermicrosoftcomenusmicrosoftedgewebview2  macos  webkithttpswebkitorg  usage  zig fetch save httpsgithubcomthechampagnewebviewzigarchiverefsheadsmaintargz  buildzigzon zig  dependencies   webview   url  httpsgithubcomthechampagnewebviewzigarchiverefsheadsmaintargz  hash  12208586373679a455aa8ef874112c93c1613196f60137878d90ce9d2ae8fb9cd511     buildzig zig const webview  bdependencywebview  target  target optimize  optimize  exerootmoduleaddimportwebview webviewmodulewebview exelinklibrarywebviewartifactwebviewstatic  or webviewshared for shared library  exelinksystemlibrarywebview to link with installed prebuilt library without building   api zig const webview  struct  const webviewversioninfo  struct  version struct  major cuint minor cuint patch cuint  versionnumber 32cchar prerelease 48cchar buildmetadata 48cchar  const dispatchcallback  const fn webview anyopaque void const bindcallback  const fn 0const u8 0const u8 anyopaque void const windowsizehint  enumcuint  none min max fixed  const nativehandle  enumcuint  uiwindow uiwidget browsercontroller  const webviewerror  error  missingdependency canceled invalidstate invalidargument unspecified duplicate notfound  fn callbackcontextfunc dispatchcallbackbindcallback type  return struct  fn initdata anyopaque this   fn createdebug bool window anyopaque webview fn runself webview webviewerrorvoid fn terminateself webview webviewerrorvoid fn dispatchself webview ctx const callbackcontext webviewerrorvoid fn getwindowself webview anyopaque fn getnativehandleself webview kind nativehandle anyopaque fn settitleself webview title 0const u8 webviewerrorvoid fn setsizeself webview width i32 height i32 hint windowsizehint webviewerrorvoid fn navigateself webview url 0const u8 webviewerrorvoid fn sethtmlself webview html 0const u8 webviewerrorvoid fn initself webview js 0const u8 webviewerrorvoid fn evalself webview js 0const u8 webviewerrorvoid fn bindself webview name 0const u8 ctx const callbackcontext webviewerrorvoid fn unbindself webview name 0const u8 webviewerrorvoid fn retself webview seq 0const u8 status i32 result 0const u8 webviewerrorvoid fn version const webviewversioninfo fn destroyself webview webviewerrorvoid    references  webviewhttpsgithubcomwebviewwebviewtree0120  0120  license this repo is released under the mit licensehttpsgithubcomthechampagnewebviewzigblobmainlicense third party code  externalwebview2httpsgithubcomthechampagnewebviewzigtreemainexternalwebview2 licensed under the bsd3clause licensehttpsgithubcomthechampagnewebviewzigtreemainexternalwebview2license ","ikskuh/zig-opengl":"opengl binding generator based on the opengl registry  zig opengl binding this is a pragmatic binding to different opengl versions it uses the official opengl registryhttpsgithubcomkhronosgroupopenglregistry by khronos to generate the zig code right now it does minimal adjustments like removing the gl prefix from functions or the gl prefix from constants everything else is the same as the c api there is a single nonopengl function exported zig pub fn loadloadctx anytype getprocaddress fntypeofloadctx 0const u8 functionpointer void   this function will load all opengl entry points with the help of getprocaddress it receives the loadctx as well as the function name note please do not reference zigopengl as a submodule or a package generate a binding and copy the output of that into your repository and update the file on demand the opengl registry is just too huge to be used conveniently cloning submodules is required so use recursive bash git clone recursive httpsgithubcomikskuhzigopenglgit   example this example uses zwlhttpsgithubcomaransentinzwl by aransentin zig const zwl  importzwl const platform  zwlplatform pub fn initanddrawwindow platformwindow void  try glloadwindowplatform platformgetopenglprocaddress whiletrue  glclearcolor1 0 1 1 glclearglcolorbufferbit try windowpresent     usage with machglfw there is an example of machglfw  zigopengl usage available here httpsgithubcomhexopsmachglfwopenglexample  pregenerated loaders this repository contains pregenerated bindings for all extensionfree opengl versions  generating your own loader  from source to generate your own loader you have to clone this repository and build the generator with dotnet shsession usermachinezigopengl dotnet run usage generator registry result apiversion extension extension  usermachinezigopengl dotnet run openglregistryxmlglxml gl3v3zig glversion33 final api has 344 commands and 818 enums types usermachinezigopengl  shsession dotnet run  openglregistryxmlglxml   path to the opengl registry mybindingzig   path to the generated file glversion33   feature level options listed below   add your extensions here each as a single arg or let them out you dont need extensions  possible feature levels at the time of writing are  glversion10  glversion11  glversion12  glversion13  glversion14  glversion15  glversion20  glversion21  glversion30  glversion31  glversion32  glversion33  glversion40  glversion41  glversion42  glversion43  glversion44  glversion45  glversion46  glversionescm10  glesversion20  glesversion30  glesversion31  glesversion32  glscversion20  contribution this library uses a small c script that generates the zig bindings it is located in srcgeneratorcs  what is missing right now  option to specify core or compatibility profile ","kassane/qml_zig":"qml bindings for the zig programming language  qmlzig github all releaseshttpsimgshieldsiogithubdownloadskassaneqmlzigtotalstyleflatsquare github release latest by datehttpsimgshieldsiogithubvreleasekassaneqmlzigstyleflatsquare githubhttpsimgshieldsiogithublicensekassaneqmlzigstyleflatsquare bindings are based on dothersidehttpsgithubcomfilcucdotherside c bindings for qml library is mostly featurecompliant with other bindings based on the library but lacks some minor features and has quite a few bugs  preview qmlzighttpsuserimagesgithubusercontentcom6756180102698635a5518500421d11eb870598013d2328d7jpg  build  steps  requirements all software required for building  qt 515 or higher  zig v0120 0130 or master  cmake v32 or higher dotherside build  question  works on qt6 maybe check dothersidehttpsgithubcomfilcucdotherside support  instructions bash  clone repo git clone recursive httpsgithubcomkassaneqmlzig  open folder cd qmlzig  build dotherside zig build cmake  build zig build examplename doptimizereleasesafedoptimizereleasefastdoptimizereleasesmall   examples zig build animated  run an animated box zig build hello  hello world with menu and clickable button zig build cells  cells example from qml tute click a color to change the text zig build button  button with 2way comms to the zig code zig build layouts  layouts examples zig build splits  splitview example zig build tables  tableview example  work in progres examples zig build particle  particle system example  needs qobject wrapper working yet to pass zig objects to the qml side  status  basic initialization and execution  more examples  thanks zigster64httpsgithubcomzigster64  providing properties to qml files  todo    qabstractlistmodels    qobject  working progress    qstyle ","yamafaktory/hypergraphz":"hypergraphz - a hypergraph implementation in zig  hypergraphz  a hypergraph implementation in zig github actions workflow statushttpsimgshieldsiogithubactionsworkflowstatusyamafaktoryhypergraphzciymlbranchmainstyleflatsquare hypergraphz is a directed hypergraph implementation in zig httpsenwikipediaorgwikihypergraph  each hyperedge can contain zero one unary or multiple vertices  each hyperedge can contain vertices directed to themselves one or more times  usage add hypergraphz as a dependency to your buildzigzon sh zig fetch save httpsgithubcomyamafaktoryhypergraphzarchivecommithashtargz  add hypergraphz as a dependency to your buildzig zig const hypergraphz  bdependencyhypergraphz  target  target optimize  optimize  exerootmoduleaddimporthypergraphz hypergraphzmodulehypergraphz   documentation the latest online documentation can be found herehttpsyamafaktorygithubiohypergraphz ","castholm/zigglgen":"zig opengl binding generator   2024 carl stholm spdxlicenseidentifier mit   zigglgen the only zig opengl binding generator you need  installation and usage zigglgen currently supports the following versions of the zig compiler  0140  0150dev master older or more recent versions of the compiler are not guaranteed to be compatible 1 run zig fetch to add the zigglgen package to your buildzigzon manifest sh zig fetch save githttpsgithubcomcastholmzigglgengit  2 generate a set of opengl bindings in your buildzig build script zig const std  importstd pub fn buildb stdbuild void  const exemod  bcreatemodule  choose the opengl api version profile and extensions you want to generate bindings for const glbindings  importzigglgengeneratebindingsmoduleb  api  gl version  41 profile  core extensions   arbclipcontrol nvscissorexclusive    import the generated module exemodaddimportgl glbindings   3 initialize opengl and start issuing commands zig const windowing  import const gl  importgl  procedure table that will hold opengl functions loaded at runtime var procs glproctable  undefined pub fn main void   create an opengl context using a windowing system of your choice const context  windowingcreatecontext defer contextdestroy  make the opengl context current on the calling thread windowingmakecontextcurrentcontext defer windowingmakecontextcurrentnull  initialize the procedure table if procsinitwindowinggetprocaddress return errorinitfailed  make the procedure table current on the calling thread glmakeproctablecurrentprocs defer glmakeproctablecurrentnull  issue opengl commands to your hearts content const alpha glfloat  1 glclearcolor1 1 1 alpha glclearglcolorbufferbit   see castholmzigexampleshttpsgithubcomcastholmzigexamples for example projects  api see this gisthttpsgistgithubcomcastholma99b650cdd523244b456c7597e321e6e for a preview of what the generated code might look like  opengl symbols zigglgen generates declarations for opengl functions constants types and extensions using the original names as defined in the various opengl specifications as opposed to the prefixed names used in c   c  zig    command  glclearcolor  clearcolor   constant  gltriangles  triangles   type  glfloat  float   extension  glarbclipcontrol  arbclipcontrol   info zig pub const info  struct   contains information about the generated set of opengl bindings such as the opengl api version and profile the bindings were generated for  proctable zig pub const proctable  struct   holds pointers to opengl functions loaded at runtime this struct is very large so you should avoid storing instances of it on the stack use global variables or allocate them on the heap instead  proctableinit zig pub fn initprocs proctable loader anytype bool   initializes the specified procedure table and returns true if successful false otherwise a procedure table must be successfully initialized before passing it to makeproctablecurrent or accessing any of its fields loader is ducktyped given the prefixed name of an opengl command eg glclear it should return a pointer to the corresponding function it should be able to be used in one of the following two ways  asproc loaderas0const u8 prefixedname  asproc loadergetprocaddressas0const u8 prefixedname if your windowing system has a get procedure address function it is usually enough to simply pass that function as the loader argument no references to loader are retained after this function returns there is no corresponding deinit function  makeproctablecurrent zig pub fn makeproctablecurrentprocs const proctable void   makes the specified procedure table current on the calling thread a valid procedure table must be made current on a thread before issuing any opengl commands from that same thread  getcurrentproctable zig pub fn getcurrentproctable const proctable   returns the procedure table that is current on the calling thread  extensionsupported only generated if at least one extension is specified zig pub fn extensionsupportedcomptime extension extension bool   returns true if the specified opengl extension is supported by the procedure table that is current on the calling thread false otherwise  faq  which opengl apis are supported any apis versions profiles and extensions included in khronoss opengl xml api registryhttpsgithubcomkhronosgroupopenglregistrytreemainxml are supported these include  opengl 10 through 31  opengl 32 through 46 compatibilitycore profile  opengl es 11 commoncommonlite profile  opengl es 20 through 32  opengl sc 20 the updateapiregistryps1updateapiregistryps1 powershell script is used to fetch the api registry and convert it to a set of zig source files that are committed to revision control and used by zigglgen  why is a threadlocal procedure table required per the opengl spec opengl function pointers loaded when one opengl context is current are not guaranteed to remain valid when a different context becomes current this means that it would be incorrect to load a single set of function pointers to global memory just once at application startup and then have them be shared by all current and future opengl contexts in order to support portable multithreaded multicontext opengl applications it must be possible to load multiple sets of function pointers because opengl contexts are already threadlocal it makes a lot of sense to handle function pointers in a similar manner  why arent opengl constants represented as zig enums the short answer is that its simply not possible to represent groups of opengl constants as zig enums in a satisfying manner  the api registry currently specifies some of these groups but far from all of them and the groups are not guaranteed to be complete groups can be extended by extensions so zig enums would need to be defined as nonexhaustive and using constants not specified as part of a group would require casting  some commands like getintegerv that can return constants will return them as plain integers comparing the returned values against zig enum fields would require casting  some constants in t","jiacai2050/zig-curl":"zig bindings for libcurl 404 not found","tr1ckydev/chameleon":"🦎 terminal string styling for zig. resbannerpng  chameleon  terminal string styling for zig currently the only fully featured terminal color solution for zig   expressive api  highly performant  ability to nest styles  ability for custom themes  no dependencies  clean and focused  truecolor support  140 built in color presets resshowcasepng  installation  install the package bash zig fetch save githttpsgithubcomtr1ckydevchameleon   add the package in buildzig zig const cham  bdependencychameleon  exerootmoduleaddimportchameleon chammodulechameleon   import it in your project zig const chameleon  importchameleon   usage chameleon is divided into two apis  comptime and runtime  comptime the comptime api is simplest way to implement colors in your terminal  runtime the runtime api is much more flexible and is the recommended way when building for production at the end choose what fits best for your use case  documentation check out the full documentation herehttpsgithubcomtr1ckydevchameleonblobmaindocumentationmd  nocolor support  according to nocolororghttpsnocolororg commandline software which adds ansi color to its output by default should check for a nocolor environment variable that when present and not an empty string regardless of its value prevents the addition of ansi color  chameleon supports this standard only in its runtime api by detecting the presence of the nocolor environment variable regardless of its value if present disables any ansi colors or styles and can also be configured to not do so if you want to implement a different way of detection although highly not recommended  license this repository uses the mit license check licensehttpsgithubcomtr1ckydevchameleonblobmainlicense for full license text ","rdunnington/bytebox":"standalone webassembly vm.  bytebox div aligncenter a hrefhttpswebassemblyorgimg srchttpsavatarsgithubusercontentcomu11578470s200v4 altmarkdown logo width150a bytebox is a webassembly vm div  getting started  requirements bytebox currently builds with zig 013xhttpsziglangorgdownload to avoid churn on zig master to run the tests  wasmtools is required to run the wasm testsuite you can install it via the rust toolchain cargo install wasmtools or directly from the release pagehttpsgithubcombytecodealliancewasmtoolsreleases  python3 is required to run the wasi testsuite you may need to run python3 m pip install r testwasiwasitestsuitetestrunnerrequirementstxt to ensure the wasi test runner has all the necessary dependencies installed  run tests sh git clone recursesubmodules httpsgithubcomrdunningtonbyteboxgit cd bytebox zig build testunit  run builtin zig unit tests zig build testwasm  run official wasm spec testsuite zig build testwasi  run official wasi spec testsuite zig build testmem64  run memory64 compat test zig build test  run all of the above in parallel output will not be pretty   usage you can use the standalone runtime to load and execute webassembly programs sh zig build run  file function function args  or embed bytebox in your own programs zig  buildzig const std  importstd pub fn buildb stdbuildbuilder void  const exe  baddexecutablemyprogram srcmainzig exeaddpackagestdbuildpkg name  bytebox source   path  byteboxsrccorezig   submodule in the root dir  exesettargetbstandardtargetoptions exesetbuildmodebstandardreleaseoptions exeinstall const run  exerun const step  bsteprun runs myprogram stepdependonrunstep   mainzig const std  importstd const bytebox  importbytebox pub fn main void  var gpa  stdheapgeneralpurposeallocator var allocator stdmemallocator  gpaallocator const wasmdata u8  try stdfscwdreadfileallocallocator examplewasm 1024  128 defer allocatorfreewasmdata const moduledef  try byteboxcreatemoduledefinitionallocator  defer moduledefdestroy try moduledefdecodewasmdata const moduleinstance  try byteboxcreatemoduleinstancestack moduledef allocator defer moduleinstancedestroy try moduleinstanceinstantiate   interlanguage ffi is also supported see srcbyteboxh for an overview in c to use bytebox as a static library link with the built library in zigoutlib note that zig assumes a default stack size of 8mb so youll need to ensure the same in your program  status this project is still in the alpha stage  legend  meaning       implemented todo not plannedremoved from spec  webassemblyhttpswebassemblygithubiospeccoreindexhtml support  status  feature       webassembly 10 sign extension instructions nontrapping floattoint conversion multiple values reference types table instructions multiple tables bulk memory and table instructions vector instructions  wasi preview 1httpsgithubcomwebassemblywasitreemain support  status  feature       argsget argssizesget environget environsizesget clockresget clocktimeget fdadvise fdallocate fdclose fddatasync fdfdstatget fdfdstatsetflags fdfdstatsetrights fdfilestatget fdfilestatsetsize fdfilestatsettimes fdpread fdprestatget fdprestatdirname fdpwrite fdread fdreaddir fdrenumber fdseek fdsync fdtell fdwrite pathcreatedirectory pathfilestatget pathfilestatsettimes pathlink pathopen pathreadlink pathremovedirectory pathrename pathsymlink pathunlinkfile polloneoff procexit procraise schedyield randomget sockaccept sockrecv socksend sockshutdown  roadmap these tasks must be completed to enter alpha  api ergonomics pass  documentation  general todocode cleanup  crash hardeningfuzzing to enter beta  no breaking api changes after this point  performance competitive with other wellknown interpreters eg microwasmruntimehttpsgithubcombytecodealliancewasmmicroruntime wasm3httpsgithubcomwasm3wasm3 to have a 10 release  tested with a wide variety of wasm programs  successfully used in other betaquality projects ","allyourcodebase/sdl":"sdl with the build system replaced by zig this is a fork of sdlhttpswwwlibsdlorg packaged for zighttpsziglangorg unnecessary files have been deleted and the build system has been replaced with buildzig the package provides version 2 of sdl for version 3 consider httpsgithubcomcastholmsdl ","iridescencetech/zglfw":"a thin, idiomatic wrapper for glfw. written in zig, for zig! h1 aligncenterzglfwh1 p aligncentera thin idiomatic wrapper for glfw written in zig for zigp  why write a wrapper while zig is perfectly capable of simply cimporting glfw3h and using it in your application i think it lacks a lot of cleanliness and succinctness that can be expressed with zig i decided to write this wrapper to provide glfw with a nicer interface error handling options and quality of life changes for example const u8 instead of cconst u8 it also uses nicely named constants in place of defines zglfw is not 100 tested i am happy to fix any errors that may arise and i will accept contributions errors that arise from glfw will be printed to stderr  examples zig const std  importstd const glfw  importglfw pub fn main void  var major i32  0 var minor i32  0 var rev i32  0 glfwgetversionmajor minor rev stddebugprintglfw n  major minor rev  example of something that fails with glfwnotinitialized  but will continue with execution var monitor glfwmonitor  glfwgetprimarymonitor try glfwinit defer glfwterminate stddebugprintglfw init succeededn  var window glfwwindow  try glfwcreatewindow800 640 hello world null null defer glfwdestroywindowwindow while glfwwindowshouldclosewindow  if glfwgetkeywindow glfwkeyescape  glfwpress  glfwsetwindowshouldclosewindow true  glfwpollevents     documentation i would suggest you look into the glfwzig file themselves as most of the changes are simple syntactically but i have made some comments in cases where it may be different than you expect obviously glfws documentationhttpswwwglfworgdocumentationhtml should cover most things that you want to know ","karlseguin/zqlite.zig":"a thin sqlite wrapper for zig 404 not found","marco-christiani/zigrad":"a deep learning framework built on an autograd engine with high level abstractions and low level control. p aligncenter img srcdocszglogosvg width350 p p aligncenter img srchttpsimgshieldsiogithublicensemarcochristianizigradstyleflatlogoopensourceinitiative altlicense img srchttpsimgshieldsiogithublastcommitmarcochristianizigradstyleflatlogogitlogocolorwhite altlastcommit img srchttpsimgshieldsiogithublanguagescountmarcochristianizigradstyleflat altrepolanguagecount img srchttpsimgshieldsiogithublanguagestopmarcochristianizigradstyleflatcolorf7a41d altrepotoplanguage  img srchttpsimgshieldsiobadgezigf7a41dsvgstyleflatlogoziglogocolorwhite altzig   1325584101809324113  img altdiscord srchttpsimgshieldsiodiscord1325584101809324113styleflat p br p aligncenter classmarkdownheadingstrongisupporting ai innovation from ideation to resultsistrongp ai frameworks optimized for rapid research iteration do not seamlessly transition into the infrastructure required for largescale training this fragmented pipeline creates redundant engineering effort and slows iteration cycles zigrad provides a path to performance that preserves the natural development workflow researchers prefer bridging research and engineering using zigrad you can  experiment using highlevel pytorchlike abstractions  gradually opt into finegrained control and performance optimizations  access lowlevel primitives and assert controlwithout switching frameworks code translation or building complex extensions  quickly transition research to high performance training httpsgithubcomuserattachmentsassets3842aa729b164c258789eac7159e3768 fast  benchmarks  25x speedup over a compiled pytorch model on apple silicon 15x on x86 expect similar performance gains across more architectures and platforms as mklcuda support improves and zigrads ml graph compiler is operational  link to a benchmarking page   only need one of the bm plots probably fast vs fast since that requires the least explanation  picture source mediapreferscolorscheme light srcsetdocszgmnistzgtorchperfsvg source mediapreferscolorscheme dark srcsetdocszgmnistzgtorchperfdarksvg  img altdescription of the image srcdocszgmnistzgtorchperfsvg picture  docszgmnistzgtorchperf0speedupzigradpytorchplotlysvg  subtensorflow excluded for scaling purposes too slowsub flexible zigrad supports research workflows with high level abstractions for rapid prototyping and integrations like tensorboard and mujoco zigrad supports the transition of research code to training infrastructure zigrad supports research through  easy to use torchlike ergonomics  a general purpose automatic differentiation system for ndimensional data  eager execution and dynamic computation graph by default  computation graph tracing and visualization  a design that naturally allows for custom differentiable operations zigrad supports engineering through  an architecture that enables deep control and customization through optin complexity  offering flexible tradeoffs between performance characteristics like latency vs throughput  hardwareaware optimizations tailored to specific use cases and system requirements  finegrained memory management and allocation control  crossplatform compatibility without compromising performance  a streamlined design that avoids abstraction layers or build systems that hinder aggressive optimizations  scalar api   features  trace the computation graph docscompgraphmnistsimplenoagsvg an example of tracing the computation graph generated by a fully connected neural network for mnist  input batch of images 28x28 pixel samples  flatten 28x28  784  fc1 linear layer 784  128  relu  fc2 linear layer 128  64  relu  fc3 linear layer 64  10  output value for each of the 10 classes we did not have to use zigrads modules to write this network at all as zigrad is backed by a capable autograd engine even when using the autograd backend to dynamically construct the same neural network zigrad can still trace the graph and render it  note since the graph is generated from the autograd information we set the labels for the nodes by naming the tensors for the sake of the diagram docscompgraphmnistsimpleagsvg  getting started only dependency is a blas library  linux on linux or intel mac you have some options  mkl recommended for best performance  see httpswwwintelcomcontentwwwusendevelopertoolsoneapionemkldownloadhtml  reccommend a system installation for simplicity although this can work with conda for example just make sure you adjust the library paths as necessary  openblas  see httpsgithubcomopenmathlibopenblaswikiprecompiledinstallationpackages  likely available through your package manager as libopenblasdev or openblasdevel  apple silicon  nothing   examples the examples directory has some standalone templates you can take and modify the zon files are pinned to commit hashes hello world example shows how to run a backward pass using the graphmanager note that in this very simple example we do not need the graphmanager and the script could be simplified but this is designed to get you familiar with the workflow shell git clone httpsgithubcommarcochristianizigrad cd zigradexampleshelloworld zig build run  run the mnist demo shell cd zigradexamplesmnist make help make   roadmap a lot is planned and hoping for support from the zig community so we can accomplish some of the more ambitious goals  more comprehensive mkl and cuda support in progress  support for popular formats like onnx and ggml  standardized benchmarking procedures always an ongoing effort  lazy tensors  static graph optimization  dynamic graph compiler  mlir  zml translation for inference  apache tvm integration githubhttpsgithubcomapachetvm homepagehttpstvmapacheorg  more examples like llms physics and robotic control etc  known issues and limitations  documentation as the api stabilizes more documentation will be added for now the examples are designed to be quickstart guides  effort has been directed towards performant primitives not many layer types have been implemented  eg conv pooling etc are test implementations for verification they are slow and unoptimized i would not use them  contributing  join the discordhttpsdiscordggjwssfwj3uf and into the dev channels  any open issue is available for development just leave a comment mentioning your interest and i can provide support to help get you started i","zon-dev/zinc":"zinc is a web framework written in pure zig with a focus on high performance, usability, security, and extensibility.  zinc  zinc is a framework written in pure zig with a focus on high performance usability security and extensibility construction its still under development built on stdnet not the fastest zig framework in the universe but fast enough in the works  remove stdhttpserver  blocking mode auto change to kqueue for macos and bsd  nonblocking mode auto change to iouring for linux a basic example zig const zinc  importzinc pub fn main void  var z  try zincinit port  8080  defer zdeinit var router  zgetrouter try routerget helloworld try zrun  fn helloworldctx zinccontext anyerrorvoid  try ctxtexthello world     some features are  fast  custom allocator  multithreading  middleware  routes grouping  rendering builtin  extensible  suite of unit tests  usability  documentation see more at httpszinczondev  quick start learn and practice with the zinc quick starthttpszinczondevsrcquickstarthtml which includes api examples and builds tag  examples a number of examples demonstrating various use cases of zinc in the zincexampleshttpsgithubcomzondevzincexamples repository","zpsp-dev/zig-psp":"a project to bring the zig programming language to the sony playstation portable! h1 aligncenterzigpsph1 p aligncentera project to bring zig to the sony playstation portablep  why zig on the psp in the psp programming community many libraries tools and other features are written in c or c which as we know has its problems with writing clean reusable and high quality code given that the core objectives of zig as a language are to allow us to create welldesigned and reusable software zig seems like a perfect fit for integrating older psp libraries while striving to develop higher quality software  special thanks special thanks is given to the rustpsp teamhttpsgithubcomoverdrivenpotatorustpsp whose efforts influenced and helped to get this project off the ground no harm is intended and its thanks to you rustaceans that fellow ziguanas can program for the psp  usage currently using zigpsp is rather straight forward  one must use the psp folder in their projects src folder in order to have the psps function definitions alongside with some custom utilities i have created one also must include the tools folder to use the postbuild tools to build a psp app use the included buildzig script to generate a psp executable ebootpbp  appprx this script is well commented for explanation and documentation for a mainzig file one should include something like zig const psp  importpsputilspspzig comptime  asmpspmoduleinfozig psp app 0 1 0  pub fn main void  psputilsenablehbcb pspdebugscreeninit pspdebugprinthello from zig   a quick call to zig build will build your program and should emit an ebootpbp and appprx in your root these are the two psp executable formats  prx for debugging and pbp for running normally one can run a pbp file on their psp assuming cfw is installed by adding their application to pspdrivepspgameyourappnameebootpbp and it will be available under the gamesmemory stick list in the psps xmb  eboot customization in order to customize the eboot one can look into the buildzig file and modify the constant fields to change their application icon background and even add animations or sounds to the eboot on the xmb screen  comparisons to cc when comparing zig code to cc it would be rather apparent that by default zig is much smaller and tightly knit llvm is an excellent backend which produces some very small code and zig is an example of that without the weight of the entire c standard library needing to be imported a simple naive hello world as seen above generates in 10195 bytes compared to the cc size of 68098 bytes thats an 85 reduction in size with a few structural changes as seen in hellominzig sample that size can get down to 6674 bytes thats 902 smaller hopefully in the future one could reference track the functions used in the sdk for imports and dynamically generate module import information this way the psp applications could go as small as 3200 bytes for a hello world this repository is distributed as part of a template allowing one to customize their module imports meaning that full release applications built with small tweaks to the toolchain nids directory could result in extraordinarily small executables for release applications  documentation currently zigpsp does not include documentation of the pspsdk in the sdks zig files  but rather they are well documented in chttppspjimshpspsdkdoc it is planned to add documentation in the future to resolve this  debugging if one has an installed copy of the legacy pspsdk one can use psplink  a usb debugging software to connect their psp to their computer and run debugging functions on the application with legacy pspsdk youll also have access to pspgdb a pspspecific version of gdb to use as well pspgdb with zig is untested at the moment but in theory should work ","rockorager/zeit":"a date and time library written in zig. timezone, dst, and leap second aware  zeit a time library written in zig  usage api documentationhttpsrockoragergithubiozeit zig const std  importstd const zeit  importzeit pub fn main void  const allocator  stdheappageallocator var env  try stdprocessgetenvmapallocator defer envdeinit  get an instant in time the default gets now in utc const now  try zeitinstant  load our local timezone this needs an allocator optionally pass in a  const stdprocessenvmap to support tz and tzdir environment variables const local  try zeitlocalalloc env  convert our instant to a new timezone const nowlocal  nowinlocal  generate datetime info for this instant const dt  nowlocaltime  print it out stddebugprint dt  zeittime  year  2024  month  zeitmonthmar  day  16  hour  8  minute  38  second  29  millisecond  496  microsecond  706  nanosecond  64  offset  18000    format using strftime specifier format strings are not required to be comptime try dtstrftimeanywriter ymd hms z  orgolang magic date specifiers format strings are not required to be comptime try dtgofmtanywriter 20060102 150405 mst  load an arbitrary location using iana location syntax the location name  comes from an enum which will automatically map iana location names to  windows names as needed pass an optional envmap to support tzdir const vienna  try zeitloadtimezonealloc europevienna env defer viennadeinit  parse an instant from an iso8601 or rfc3339 string const iso  try zeitinstant source    iso8601  20240316t0838294961200   const rfc3339  try zeitinstant source    rfc3339  20240316t0838294967060641200     ","bfactory-ai/zignal":"image processing library  zignal testhttpsgithubcombfactoryaizignalactionsworkflowstestymlbadgesvghttpsgithubcombfactoryaizignalactionsworkflowstestyml documentationhttpsgithubcombfactoryaizignalactionsworkflowsdocumentationymlbadgesvghttpsgithubcombfactoryaizignalactionsworkflowsdocumentationyml img srchttpsgithubcombfactoryaizignalblobmasterassetslizajpg width400 zignal is an image processing library heavily inspired by the amazing dlibhttpdlibnet  disclaimer this library is in early stages of development and being used internally as a result the api might change often  motivation this library is used by amelihttpsamelicokr for their makeup virtual try on  features initially the features in this library are the ones required to get the virtual try on for makeup working however we hope that it can be a foundation from which we can build a high quality image processing library collaboratively current features include  color space conversions  simple matrix struct with common linear algebra operations  singular value decomposition svd ported from dlib  geometry  points and rectangles  projective affine and similarity transforms  convex hull  simple image struct with common operations  resize  rotate  crop  blur  sharpen  views called subimage in dlib or roi in opencv  drawing and filling functions  lines  circles  polygons  examples one of the greatest things about dlib is the large amount of examples illustrating how to use many of that library features i plan to showcase most of the features of this library as simple htmljs  wasm examples which can be accessed from herehttpsbfactoryaigithubiozignalexamples currently there are examples for  color space conversionshttpsbfactoryaigithubiozignalexamplescolorspacehtml  face alignmenthttpsbfactoryaigithubiozignalexamplesfacealignmenthtml  perlin noise generationhttpsbfactoryaigithubiozignalexamplesperlinnoisehtml  seam carvinghttpsbfactoryaigithubiozignalexamplesseamcarvinghtml  acknowledgements first of all this project would not have been possible without the existence of dlibhttpdlibnet in fact the first version of the virtual makeup try on was written in c with dlib and emscripten however we decided to give zig a go even if that meant rewriting the world but we have no dependencies now finally b factory inchttpswwwbfactoryai which is my employer and graciously agreed to release this library to the public ","jedisct1/zigly":"the easiest way to write services for fastly's compute@edge in zig. ziglylogopng  the easiest way to write fastly compute services in zig    what is fastly computewhatisfastlycompute  what is ziglywhatiszigly  usageusage  example applicationexampleapplication  adding zigly as a dependencyaddingziglyasadependency  a minimal webassembly programaminimalwebassemblyprogram  testing fastly compute modulestestingfastlycomputemodules  using ziglyusingzigly  hello worldhelloworld  inspecting incoming requestsinspectingincomingrequests  making http queriesmakinghttpqueries  cache overridecacheoverride  pipespipes  proxyingproxying  redirectsredirects  response decompressionresponsedecompression  dictionariesdictionaries  logginglogging  deployment to fastlys platformdeploymenttofastlysplatform  what is fastly compute fastly computehttpswwwfastlycomproductscompute is fastlyhttpsfastlycoms service to run custom code directly on cdn nodes the service runs anything that can be compiled to webassembly and exports a convenient set of functions to interact with the platform  what is zigly zigly is a library that makes it easy to write fastly compute modules in zighttpsziglangorg beyond the functions exported by the fastly platform zigly will eventually include additional utility functions cookie manipulation jwt tokens tracing to make application development as simple as possible zigly is written for zig 012x  usage  example application check out the example directory this contains an example fastly application that relays all incoming traffic to a backend server with transparent caching if you just want to use fastly as a cdn this is all you need  adding zigly as a dependency add the dependency to your project sh zig fetch savezigly httpsgithubcomjedisct1ziglyarchiverefstags019targz  and the following to your buildzig file zig const zigly  bdependencyzigly  target  target optimize  optimize  exerootmoduleaddimportzigly ziglymodulezigly exelinklibraryziglyartifactzigly  the zigly structure can be imported in your application with zig const zigly  importzigly   a minimal webassembly program zig const std  importstd pub fn main void stddebugprinthello from webassembly and zign    the program can be compiled with replace examplezig with the source file name sh zig buildexe target wasm32wasi examplezig  happy with the result add doptimizereleasesmall or doptimizereleasefast to get very small or very fast module sh zig buildexe target wasm32wasi doptimizereleasesmall examplezig  the example above should not compile to more than 411 bytes if you are using a build file instead define the target as wasm32wasi in the buildzig file zig const target  bstandardtargetoptions defaulttarget   cpuarch  wasm32 ostag  wasi    and build with zig build doptimizereleasesmall or doptimizereleasefast to get optimized modules  testing fastly compute modules the easiest way to test the resulting modules is to use viceroyhttpsgithubcomfastlyviceroy a reimplementation of the fastly api that runs locally  using zigly  hello world zig const downstream  try ziglydownstream var response  downstreamresponse try responsebodywriteallhello world try responsefinish  downstream returns a type representing the initial connection from a client to the proxy that type includes response that can be used to send a response as well as request that can be used to inspect the incoming request every function call may fail with an error from the fastlyerror set slightly more complicated example zig const downstream  try ziglydownstream var response  downstreamresponse responsesetstatus201 responseheaderssetxexample header try responsebodywriteallpartial try responseflush try responsebodywriteallresponse try responsefinish var logger  loggeropenloggingendpoint loggerwriteoperation sucessful  note that calling finish is always required in order to actually send a response to the client but realistically most responses will either be simple redirects zig var downstream  try ziglydownstream try downstreamredirect302 httpswwwperducom  or responding directly from the cache proxying to the origin if the cached entry is nonexistent or expired zig var downstream  try ziglydownstream try downstreamproxygoogle wwwgooglecom   inspecting incoming requests applications can read the body of an incoming requests as well as other informations such as the headers zig const request  downstreamrequest const useragent  try requestheadersgetallocator useragent if requestispost   method is post read the body until the end up to 1000000 bytes const body  try requestbodyreadallallocator 1000000   as usual in zig memory allocations are never hidden and applications can choose the allocator they want to use for individual function calls  making http queries making http queries is easy zig var query  try ziglyrequestnewget httpsexamplecom var response  try querysendbackend const body  try responsebodyreadallallocator 0  arbitrary headers can be added the the outgoing query zig try queryheaderssetxcustomheader custom value  body content can also be pushed even as chunks zig try querybodywritex try querybodywritey try querybodyclose  and the resulting response contains headers and body properties that can be inspected the same way as a downstream query  cache override caching can be disabled or configured on a perquery basis with setcachingpolicy zig try querysetcachingpolicy servestale  600 pci  true   attributes include  nocache  ttl  servestale  pci  surrogatekey  pipes with pipe the response sent to a client can be a direct copy of another response the application will then act as a proxy optionally also copying the original status and headers zig var query  try ziglyrequestnewget httpsgooglecom var upstreamresponse  try querysendgoogle const downstream  try ziglydownstream try downstreamresponsepipeupstreamresponse true true   proxying proxying is even easier to use than pipes when a query should be sent unmodified with the exception of the host header to the orig","xyaman/mibu":"pure zig library for low-level terminal manipulation.  warning  this library is a wip and may have breaking changes and bugs  mibu mibu is pure zig library for lowlevel terminal manipulation  tested with zig version 2024110mach 0140dev2577271452d22  features  allocation free  utf8 support  style bold italic underline etc  termios  raw mode  816 colors  true color 24bit rgb  cursor controls  clearerase functions  key events  partial mouse events click scroll release  how to use first we add the library as a dependency in our buildzigzon file with the following command bash zig fetch save githttpsgithubcomxyamanmibu  and we add it to buildzig file zig const mibudep  bdependencymibu  target  target optimize  optimize  exerootmoduleaddimportmibu mibudepmodulemibu  now we can use the library in our code zig const std  importstd const mibu  importmibu const color  mibucolor pub fn main void  stddebugprintshello world in purplen colorprintbgrgb97 37 160    getting started see the examples directoryexamples you can run the examples with the following command bash  prints text with different colors zig build color  prints what key you pressed until you press q or ctrlc zig build event zig build alternatescreen   todo  mouse events  x left middle right click  x scroll up down  x release  x modifiers shift ctrl alt  x move    click and move drag  support all keys events  projects that use mibu  zigtrishttpsgithubcomringtailsoftwarezigtris  chip8 wiphttpsgithubcomxyamanchip8 ","jiacai2050/zigcli":"a toolkit for building command lines programs in zig. 404 not found","raiden1411/zabi":"interact with ethereum and evm based chains via zig! br p aligncenter picture source mediapreferscolorscheme dark srcsethttpsrawgithubusercontentcomraiden1411zabimaingithubzabisvg img altzabi logo srchttpsrawgithubusercontentcomraiden1411zabimaingithubzabisvg widthauto height150 picture p p aligncenter a zig library to interact with evm blockchains p p aligncenter picture source mediapreferscolorscheme dark srcsethttpscodecoviogithubraiden1411zabigraphbadgesvg img altzabi logo srchttpscodecoviogithubraiden1411zabigraphbadgesvg widthauto height25 picture p  overview zabi aims to add support for interacting with ethereum or any compatible evm based chain  zig versions zabi will support zig v014 in separate branches if you would like to use it you can find it in the zigversion0140 branch where you can build it against zig 0130 the main branch of zabi will follow the latest commits from zig and the other branch will be stable in terms of zig versions but not features from zabi  integration you can check how to integrate zabi in your project herehttpswwwzabishintegration  example usage zig const argsparser  zabiargs const std  importstd const zabi  importzabi const wallet  zabiclientswalletwallethttp const clioptions  struct  privkey 32u8 url const u8  pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit var iter  try stdprocessargswithallocatorgpaallocator defer iterdeinit const parsed  argsparserparseargsclioptions gpaallocator iter const uri  try stduriparseparsedurl var wallet  try walletinitparsedprivkey  allocator  gpaallocator networkconfig   endpoint   uri  uri    false defer walletdeinit const message  try walletsignethereummessagehello world const hexed  try messagetohexwalletallocator defer gpaallocatorfreehexed stddebugprintethereum message sn hexed    usage explore the docshttpszabish to find out more on how you can use or integrate zabi in your project  installing zig you can install the latest version of zig herehttpsziglangorgdownload or you can also use a version manager like zvmhttpswwwzvmappguidesinstallzvm to manage your zig version  features  json rpc with support for https wss and ipc connections  evm interpreter that you can use to run contract bytecode  wallet instances and contract instances to use for interacting with nodesjson rpc  wallet nonce manager that uses a json rpc as a source of truth  blockexplorer support only the free methods from those api endpoints are supported  custom secp256k1 ecdsa signer using only zig and implementation of rfc6979 nonce generator  custom schnorr signer bip0340 and erc7816 are both supported  custom json parser that can be used to deserialize and serialized rpc data at runtime  custom solidity tokenizer and parser generator  ability to translate solidity source code to zig  abi to zig types  support for eip712  support for eip3074 authorization message also supports eip7702 transactions  parsing of human readable abis into zig types with custom parser and lexer  hd wallet and mnemonic passphrases  rlp encodingdecoding  ssz encodingdecoding  abi encodingdecoding with support for log topics encoding and decoding  parsing of encoded transactions and serialization of transaction objects  support for all transaction types and the new eip4844 kzg commitments  support for opstack and ens  custom meta programming functions to translate abis into zig types  support for interacting with test chains such as anvil or hardhat  custom cli args parser that translates commands to zig types and can be used to pass data to methods  custom data generator usefull for fuzzing and a lot more yet to come  goal the goal of zabi is to be one of the best library to use by the ethereum ecosystem and to expose to more people to the zig programming language  contributing contributions to zabi are greatly appreciated if youre interested in contributing to zabi feel free to create a pull request with a feature or a bug fix  you can also read the contributing guidegithubcontributingmd before submitting a pull request  sponsors if you find zabi useful or use it for work please consider supporting development on github sponsors httpsgithubcomsponsorsraiden1411 or sending crypto to zzabiethhttpsetherscanionamelookupsearchidzzabieth or interacting with the driphttpswwwdripsnetworkappprojectsgithubraiden1411zabiexact platform where 40 of the revenue gets sent to zabis dependencies thank you  ","jedisct1/zig-charm":"a zig version of the charm crypto library.  charm a tiny selfcontained cryptography library implementing authenticated encryption and keyed hashing charm was especially designed for memoryconstrained devices but can also be used to add encryption support to webassembly modules with minimal overhead any number of hashing and authenticated encryption operations can be freely chained using a single rolling state in this mode each authentication tag authenticates the whole transcript since the beginning of the session the original implementationhttpsgithubcomjedisct1charm was written in c and is used by the dsvpnhttpsgithubcomjedisct1dsvpn vpn software this is a port to the zighttpsziglangorg language it is fully compatible with the c version  usage  setting up a session charm requires a 256bit key and if the key is reused for different sessions a unique session identifier nonce zig var key charmkeylengthu8  undefined stdcryptorandombyteskey var charm  charmnewkey null   hashing zig const h  charmhashdata   authenticated encryption  encryption zig const tag  charmencryptmsg0  encrypts msg inplace and returns a 128bit authentication tag  decryption starting from the same state as the one used for encryption zig try charmdecryptmsg0 tag  returns errorauthenticationfailed if the authentication tag is invalid for the given message and the previous transcript  security guarantees 128bit security no practical limits on the size and length of messages  other implementations  charmhttpsgithubcomjedisct1charm original implementation in c  charmjshttpsgithubcomjedisct1charmjs a javascript typescript implementation ","ziglibs/ansi_term":"zig library for dealing with ansi terminals  ansiterm cihttpsgithubcomziglibsansitermworkflowscibadgesvg zig library for dealing with ansi terminals escape codes styles etc  important  this library was renamed from ansiterm now using an underscore this was originally code which was extracted from lscolorshttpsgithubcomziglibslscolors for use in other zig libraries more features have been added since ansiterm is designed to work with zig 0140  documentation automatically generated documentation for the project can be found at httpsziglibsgithubioansiterm note that autodoc is currently in beta the website may be broken or incomplete ","aegis-aead/libaegis":"portable c implementations of the aegis family of high-performance authenticated encryption algorithms.  libaegis portable c implementations of the aegishttpsdatatrackerietforgdocdraftirtfcfrgaegisaead family of highperformance authenticated ciphers aegis128l aegis128x2 aegis128x4 aegis256 aegis256x2 aegis256x4 with runtime cpu detection  features  aegis128l with 16 and 32 bytes tags software aesni arm crypto altivec  aegis128x2 with 16 and 32 bytes tags software vaes  avx2 aesni arm crypto altivec  aegis128x4 with 16 and 32 bytes tags software avx512 vaes  avx2 aesni arm crypto altivec  aegis256 with 16 and 32 bytes tags software aesni arm crypto altivec  aegis256x2 with 16 and 32 bytes tags software vaes  avx2 aesni arm crypto altivec  aegis256x4 with 16 and 32 bytes tags software avx512 vaes  avx2 aesni arm crypto altivec  all variants of aegismac supporting incremental updates  encryption and decryption with attached and detached tags  incremental encryption and decryption  unauthenticated encryption and decryption not recommended  only implemented for specific protocols  deterministic pseudorandom stream generation  installation note that the compiler makes a difference zig or a recent clang with targetspecific options such as marchnative produces more efficient code than gcc  compilation with zig sh zig build drelease  the library and headers are installed in the zigout folder to favor performance over sidechannel mitigations on devices without hardware acceleration add dfavorperformance sh zig build drelease dfavorperformance  a benchmark can also be built with the dwithbenchmark option sh zig build drelease dfavorperformance dwithbenchmark  libaegis doesnt need wasi nor any extension to work on webassembly the wasm32freestanding target is fully supported webassembly extensions such as bulkmemory and simd128 can be enabled by adding dcpubaselinebulkmemorysimd128 to the command line  compilation with cmake sh mkdir build cd build cmake dcmakeinstallprefixinstallprefix  make install  to favor performance over sidechannel mitigations on devices without hardware acceleration add dfavorperformance  direct inclusion copy everything in src directly into your project and compile everything like regular c code no special configuration is required  usage include aegish and call aegisinit prior to doing anything else with the library aegisinit checks the cpu capabilities in order to later use the fastest implementations  bindings  aegishttpscratesiocratesaegis is a set of bindings for rust  golibaegishttpsgithubcomaegisaeadgolibaegis is a set of bindings for go  libaegis users  fizzhttpsgithubcomfacebookincubatorfizz is facebooks implementation of tls 13  picotlshttpsgithubcomh2opicotls is a tls 13 implementation in c with support for the aegis cipher suites  h2ohttpsh2oexamp1enet is an http123 server with support for the aegis cipher suites  other implementations other aegis implementationshttpsgithubcomcfrgdraftirtfcfrgaegisaeadtabreadmeovfileknownimplementations are also available for most programming languages recommended for applications specifically targeting environments without aes instructions aegisbitslicedhttpsgithubcomaegisaeadaegisbitsliced recommended for applications targeting a specific x8664 cpu aegisjasminhttpsgithubcomaegisaeadaegisjasmin  key differences between aegis variants  feature  aegis128l  aegis256  aegis128x2  aegis128x4  aegis256x2  aegis256x4                  key length  128 bits  256 bits  128 bits  128 bits  256 bits  256 bits   nonce length  128 bits  256 bits  128 bits  128 bits  256 bits  256 bits   state size  1024 bits 8 x 128bit blocks  768 bits 6 x 128bit blocks  2048 bits 2 x 1024bit states  4096 bits 4 x 1024bit states  1536 bits 2 x 768bit states  3072 bits 4 x 768bit states   input rate  256 bits per update  128 bits per update  512 bits per update  1024 bits per update  256 bits per update  512 bits per update   parallelism  none  none  2 parallel lanes  4 parallel lanes  2 parallel lanes  4 parallel lanes   performance  high on standard cpus  high on standard cpus  higher on cpus with avx2  higher on cpus with avx512  higher on cpus with avx2  higher on cpus with avx512   security level  128bit security  256bit security  128bit security  128bit security  256bit security  256bit security   special features  optimized for high performance on standard cpus with aes instructions  optimized for high security with larger keys  parallelized version of aegis128l  parallelized version of aegis128l  parallelized version of aegis256  parallelized version of aegis256   benchmark results aegis is very fast on cpus with parallel execution pipelines and aes support the following results are derived from libaegis which has been optimized primarily for portability and readability other implementations such as jasminaegis or the zig implementations may demonstrate better performance  encryption 16 kb aegis benchmark resultsimgbenchencryptionpng  authentication 64 k","akhildevelops/cudaz":"cuda library for zig 404 not found","hejsil/ziter":"the missing iterators for zig  readmemd is autogenerated please edit examplereadmemdtemplate instead   ziter an iterator library for zig inspired by the iterators in the rust standard libary zig const iter  importziter const std  importstd test ascii  const asciidigits  iterrangeu8 0 255 filter itervoidctxstdasciiisdigit const asciialpha  try iterrangeu8 0 255 filter itervoidctxstdasciiisalphabetic collectnoallocatorstdboundedarrayu8 255 try iterexpectequaliterderef0123456789 asciidigits try stdtestingexpectequalstrings abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz asciialphaslice   test fibonacci  const fib  fibonacci const fibsumfirst5  fibtake5sumusize const fibfirstalphabetic  fibmap tou8 find itervoidctxstdasciiisalphabetic try stdtestingexpectequalasusize 7 fibsumfirst5 try stdtestingexpectequalasu8 y fibfirstalphabetic  pub const fibonacci  struct  c usize  0 n usize  1 pub fn nextit this usize  const curr  itc itc  itn itn  curr  itn return curr  pub usingnamespace iter  fn tou8 void item usize u8  return truncateitem   ","zigembeddedgroup/serial":"serial port configuration library for zig  zig serial port library library for configuring and listing serial ports  features  basic serial port configuration  baud rate  parity none even odd mark space  stop bits one two  handshake none hardware software  byte size 5 6 7 8  flush serial port sendreceive buffers  list available serial ports  api supports windows linux and mac  example zig  port configuration  serial ports are just files com1 for com1 on windows var serial  try stdfscwdopenfilecom1  mode  readwrite   defer serialclose try zigserialconfigureserialportserial zigserialserialconfig baudrate  19200 wordsize  8 parity  none stopbits  one handshake  none    usage  library integration integrate the library in your project via the zig package manager  add serial to your zigzon file by providing the url to the archive of a tag or specific commit of the library  to update the hash run zig fetch save urltotagorcommittargz  running tests the buildzig file contains a test step that can be called with zig build test note that this requires a serial port to be available on the system  linux devttyusb0  mac devcuusbmodem101  windows com3  building the examples you can build the examples from the examples directory by calling zig build examples binaries will be generated in zigoutbin by default  note that the listportinfo example currently only works on windows ","ikskuh/parser-toolkit":"a toolkit that makes it easier to write recursive-descent parsers in zig.  a parser toolkit project logodesignlogopng this repo contains a tiny parser toolkit that can be used to build new parsers and programming languages it provides  x configurable tokenizer  x parser core accept functions with state restoration    compiler error management emission rendering source locations  demo invoke zig build run to run a tiny command line calculator that can evaluate basic expressions parens and invoke functions   zig build run  10  10  10  10  20  5  3  15  a  10  10  sqrta  31622776601683795  sin314  00015926529164868282  a  a  1  11  a  a  1  12  d  available functions are zig fn sinv f64 f64 fn cosv f64 f64 fn tanv f64 f64 fn sqrtv f64 f64 fn powa f64 b f64 f64 fn lnv f64 f64 fn ln10v f64 f64 fn ln2v f64 f64 fn logb f64 v f64 f64  ","nektro/zig-tracy":"zig bindings for the tracy profiler.  zigtracy lochttpsslocxyzgithubnektrozigtracy licensehttpsimgshieldsiogithublicensenektrozigtracysvghttpsgithubcomnektrozigtracyblobmasterlicense discordhttpsimgshieldsiodiscord551971034593755159svglogodiscordhttpsdiscordggp6y4zqc zig integration for the tracy profiler httpsgithubcomwolfpldtracy currently uses tracy v078  adding to your project using the httpsgithubcomnektrozigmod package manager yml rootdependencies  src git httpsgithubcomnektrozigtracy   adding it to your code zig const tracy  importtracy fn functioniwishtotrace void  const t  tracytracesrc null defer tend    the rest of the function body   the second parameter to trace can be used to give a name to the zone otherwise it will simply be the inferred function name and location in the source code zig const tracy  importtracy fn main void  var quit  false while quit  const frame  tracyframenull defer frameend    the rest of the loop     building   zigmod fetch  zig build dtargetnativenativegnu218   license mit ","jedisct1/zig-minisign":"minisign reimplemented in zig.  zigminisign a zig implementation of minisignhttpsjedisct1githubiominisign minizign was primarily designed to verify signatures although signing is likely to be implemented next  compilation requires the current master version of zighttpsziglangorg compile with sh zig build doptimizereleasesmall  for a sizeoptimized version or sh zig build doptimizereleasefast  for a speedoptimized version  usage text usage h help display this help and exit p publickeypath path public key path to a file p publickey string public key as a base64encoded string l legacy accept legacy signatures m input path input file q quiet quiet mode v verify verify c convert convert the given public key to ssh format   example verify publicresolversmd using publicresolversmdminisig and the public key file minisigpub sh minizign p minisignpub vm publicresolversmd  verify publicresolversmd by directly providing the public key on the commandline sh minizign p rwqf6lrcga9i53mlyeco4izt51tgppvwucnsch1cbm0qtaln73y7gfo3 vm publicresolversmd   sshencoded public keys minizign can encode public keys in ssh format so that they can be uploaded to github sh minizign p minisignpub c  text sshed25519 aaaac3nzac1lzdi1nte5aaaaihmlyeco4izt51tgppvwucnsch1cbm0qtaln73y7gfo3 minisign key e7620f1842b4e81f  github makes public ssh keys available at httpsgithubcomusernamekeys sshencoded keys can be loaded by minizign the same way as native keys with p key file they will be automatically recognized as such  features minizign supports prehashing which can be forced if you know this is how the signature was created has zero dependencies and can be crosscompiled to anything that zig can crosscompile to including webassembly ","simonlschlee/zigraylib":"a fairly minimal raylib zig example codebase using the zig package manager  zigraylib a fairly minimal raylibhttpswwwraylibcom zighttpsziglangorgdownload example codebase using the zig package manager  install bash git clone httpsgithubcomsimonlschleezigraylibgit cd zigraylib zig build run  tested with zig version 0140 using raylib commit httpsgithubcomraysan5raylibtreebbeade636cd8c90e18b7e9e841c20b5f8bd15d94  resources raylib cheatsheethttpswwwraylibcomcheatsheetcheatsheethtml learn  zig programming languagehttpsziglangorglearn zig communityhttpsgithubcomziglangzigwikicommunity  raygui if you want to use raygui checkout the rayguihttpsgithubcomsimonlschleezigraylibtreeraygui branch  code completion zls installationhttpsgithubcomzigtoolszlswikiinstallation  ideas or improvements let me know if you have ideas about things that could make this example better i want to keep it fairly minimal but maybe we can add some more links to useful resources or point out common problems ziggit topic for discussion httpsziggitdevtraylibexampleusingthepackagemanager1787  license public domain or mit ","alichraghi/zort":"sorting algorithms in zig  zort logomedialogopng implementation of 13 sorting algorithms in zig  algorithm  custom comparison  zero allocation          bubble       comb       heap       insertion       merge       pdq       quick       radix no negative yet       selection       shell       tail       tim       twin       usage zig const zort  importzort fn asca u8 b u8 bool  return a  b  pub fn main void  var arr  u8 9 1 4 12 3 4  try zortquicksortu8 arr asc    benchmarks run this to see results on your machine  zig build bench doptimizereleasefast  comb quick radix shell stdblock stdheap stdpdq tail tim twin   12th gen intelr coretm i512400f mermaid gantt title sorting ascending 10000000 usize dateformat x axisformat s s section random quick 1670 01670 comb 3156 03155 shell 5469 05467 radix 0304 0304 tim 2893 02893 tail 2400 02399 twin 2377 02377 stdblock 3371 03372 stdpdq 2250 02250 stdheap 5512 05514 section sorted quick 0829 0829 comb 1179 01179 shell 0740 0740 radix 0301 0301 tim 0025 025 tail 0058 058 twin 0071 071 stdblock 0266 0266 stdpdq 0041 041 stdheap 3912 03913 section reverse quick 1544 01544 comb 1375 01375 shell 1378 01378 radix 0303 0303 tim 0822 0822 tail 1364 01364 twin 1280 01280 stdblock 1304 01304 stdpdq 0199 0199 stdheap 3844 03845 section ascending saw quick 2979 02978 comb 2088 02089 shell 1807 01807 radix 0322 0322 tim 0473 0473 tail 0486 0486 twin 0465 0465 stdblock 1129 01129 stdpdq 1604 01604 stdheap 4246 04249 section descending saw comb 1949 01949 shell 1694 01694 radix 0299 0299 tim 1339 01339 tail 1478 01478 twin 1288 01288 stdblock 1618 01618 stdpdq 1613 01613 stdheap 4262 04261  mermaid gantt title sorting ascending 10000000 isize dateformat x axisformat s s section random quick 1691 01691 comb 3084 03084 shell 5410 05413 radix 0332 0332 tim 2951 02953 tail 2414 02414 twin 2414 02414 stdblock 3346 03346 stdpdq 2309 02309 stdheap 5449 05447 section sorted quick 0798 0798 comb 1166 01166 shell 0739 0739 radix 0247 0247 tim 0025 025 tail 0059 059 twin 0048 048 stdblock 0270 0270 stdpdq 0039 039 stdheap 3816 03815 section reverse quick 1581 01581 comb 1347 01347 shell 1234 01234 radix 0262 0262 tim 0044 044 tail 1396 01396 twin 0041 041 stdblock 0953 0953 stdpdq 0204 0204 stdheap 3713 03713 section ascending saw quick 5516 05516 comb 2064 02064 shell 1632 01632 radix 0280 0280 tim 0449 0449 tail 0466 0466 twin 0478 0478 stdblock 1157 01157 stdpdq 1618 01618 stdheap 4281 04279 section descending saw comb 2039 02040 shell 1644 01644 radix 0279 0279 tim 0465 0465 tail 1492 01492 twin 0481 0481 stdblock 1596 01596 stdpdq 1576 01576 stdheap 4199 04199   big thank to voroskoihttpsgithubcomvoroskoi and other contributors ","hejsil/zig-bench":"simple benchmarking library  zigbench a simple benchmarking lib in zig  test 02 test debug benchmark benchmark iterations minns maxns variance meanns  sumsliceblock16 100000 90 2690 243 107 sumsliceblock32 100000 170 1760 338 190 sumsliceblock64 100000 320 2340 476 352 sumsliceblock128 100000 630 2290 862 678 sumsliceblock256 100000 1270 3170 2402 1336 sumsliceblock512 100000 2550 8490 4835 2651 sumreaderblock16 100000 990 2640 1592 1039 sumreaderblock32 100000 1930 3890 3292 2012 sumreaderblock64 100000 3830 6250 6806 3962 sumreaderblock128 63673 7660 12830 15703 7852 sumreaderblock256 31967 15360 22190 31847 15641 sumreaderblock512 16031 30800 34690 59444 31191 test 12 test debug benchmark generics benchmark iterations minns maxns variance meanns  sumvectorsvec4f16 100000 2730 13390 3620 2775 sumvectorsvec4f32 100000 1289 5800 1277 1296 sumvectorsvec4f64 100000 1389 6870 1358 1400 sumvectorsvec8f16 100000 4400 9680 4613 4479 sumvectorsvec8f32 100000 1389 5180 1231 1400 sumvectorsvec8f64 100000 1390 6170 2260 1457 sumvectorsvec16f16 61088 8090 13980 15455 8184 sumvectorsvec16f32 100000 1399 4560 2069 1441 sumvectorsvec16f64 100000 1440 6080 1664 1475 all 2 tests passed test 02 test releasesafe benchmark benchmark iterations minns maxns variance meanns  sumsliceblock16 100000 9 3550 164 18 sumsliceblock32 100000 9 940 22 18 sumsliceblock64 100000 49 1530 66 52 sumsliceblock128 100000 89 1280 102 92 sumsliceblock256 100000 169 1690 210 171 sumsliceblock512 100000 319 5530 724 329 sumreaderblock16 100000 60 2840 180 69 sumreaderblock32 100000 110 3059 288 121 sumreaderblock64 100000 209 2810 323 224 sumreaderblock128 100000 400 1780 387 431 sumreaderblock256 100000 790 2220 681 843 sumreaderblock512 100000 1550 4300 3805 1669 test 12 test releasesafe benchmark generics benchmark iterations minns maxns variance meanns  sumvectorsvec4f16 100000 1269 3790 1799 1283 sumvectorsvec4f32 100000 319 1680 300 328 sumvectorsvec4f64 100000 319 1860 355 329 sumvectorsvec8f16 100000 2399 5010 5014 2420 sumvectorsvec8f32 100000 319 2660 641 329 sumvectorsvec8f64 100000 319 7740 1019 330 sumvectorsvec16f16 100000 4599 9970 22580 4636 sumvectorsvec16f32 100000 319 4310 1231 330 sumvectorsvec16f64 100000 429 4070 1783 439 all 2 tests passed test 02 test releasefast benchmark benchmark iterations minns maxns variance meanns  sumsliceblock16 100000 19 2840 128 21 sumsliceblock32 100000 19 1600 78 20 sumsliceblock64 100000 19 1970 74 21 sumsliceblock128 100000 19 1530 68 21 sumsliceblock256 100000 39 1250 74 44 sumsliceblock512 100000 59 1150 85 68 sumreaderblock16 100000 19 1170 21 20 sumreaderblock32 100000 19 1650 74 20 sumreaderblock64 100000 19 1250 34 20 sumreaderblock128 100000 19 1240 32 20 sumreaderblock256 100000 39 2180 177 44 sumreaderblock512 100000 59 2470 148 68 test 12 test releasefast benchmark generics benchmark iterations minns maxns variance meanns  sumvectorsvec4f16 100000 1259 8590 1678 1284 sumvectorsvec4f32 100000 319 1440 279 327 sumvectorsvec4f64 100000 319 1760 303 327 sumvectorsvec8f16 100000 2399 5260 1861 2417 sumvectorsvec8f32 100000 319 2080 434 327 sumvectorsvec8f64 100000 319 1710 329 328 sumvectorsvec16f16 100000 4599 9010 3883 4634 sumvectorsvec16f32 100000 319 2800 356 329 sumvectorsvec16f64 100000 429 1750 404 436 all 2 tests passed test 02 test releasesmall benchmark benchmark iterations minns maxns variance meanns  sumsliceblock16 100000 19 2760 247 27 sumsliceblock32 100000 29 5090 363 37 sumsliceblock64 100000 50 2640 177 63 sumsliceblock128 100000 90 1830 157 102 sumsliceblock256 100000 169 5860 733 201 sumsliceblock512 100000 330 3690 1560 365 sumreaderblock16 100000 219 1430 276 226 sumreaderblock32 100000 420 1870 460 432 sumreaderblock64","judofyr/zini":"succinct data structures for zig  zini zini zig  mini is a zighttpsziglangorg library providing some succinct data structures  zinipthash a minimal perfect hash functionhttpsenwikipediaorgwikiperfecthashfunction construction algorithm using less than 4 bits per element  ziniribbon a retrieval data structure sometimes called a static function construction algorithm having less than 1 overhead  zinicompactarray stores nbit numbers tightly packed leaving no bits unused if the largest value in an array is m then you actually only need n  log2m  1 bits per element eg if the largest value is 270 you will get 7x compression using compactarray over u64 as it stores each element using only 9 bits and 64 divided by 9 is roughly 7  zinidictarray finds all distinct elements in the array stores each once into a compactarray the dictionary and creates a new compactarray containing indexes into the dictionary this will give excellent compression if theres a lot of repetition in the original array  zinieliasfano stores increasing 64bit numbers in a compact manner  zinidarray provides constanttime support for the select1i operation which returns the ith set bit in a stddynamicbitsetunmanaged  overview  pthash minimal perfect hash function zinipthash contains an implementation of pthashpthash a minimal perfect hash functionhttpsenwikipediaorgwikiperfecthashfunction construction algorithm given a set of n elements with the only requirement being that you can hash them it generates a hash function which maps each element to a distinct number between 0 and n  1 the generated hash function is extremely small typically consuming less than 4 bits per element regardless of the size of the input type the algorithm provides multiple parameters to tune making it possible to optimize for small size short construction time or short lookup time to give a practical example in 06 seconds zini was able to create a hash function for usrsharedictwords containing 235886 words the resulting hash function required in total 865682 bits in memory this corresponds to 1082 kb in total or 367 bits per word in comparison the original file was 249 mb and compressing it with gzip 9 only gets it down to 754 kb which you cant use directly in memory without decompressing it it should of course be noted that they dont store the equivalent data as you cant use the generated hash function to determine if a word is present or not in the list the comparison is mainly useful to get a feeling of the magnitudes  bumped ribbon retrieval a retrieval data structure ziniribbon contains an implementation of bumped ribbon retrievalburr burr a retrieval data structure given n keys with the only requirement being that you can hash them which each have an rbit value well build a data structure which will return the value for all of the n keys however the keys are actually not stored were only using the hash so if you ask for the value for an unknown key you will get a seemingly random answer theres no way of knowing whether the key was present in the original dataset or not the theoretically minimal amount of space needed to store the values is n  r we have n rbit values after all we use the term overhead to refer to how much extra amount of data we need the bumped ribbon retrieval will often have less than 1 overhead  usage zini is intended to be used as a library but also ships the commandline tools zinipthash and ziniribbon as the documentation is a bit lacking it might be useful to look through toolszinipthashribbonmainzig to understand how its used  usage zigoutbinzinipthash build  lookup options command build builds hash function for plain text file i input file o output file c int a alpha float s seed int command lookup i input file k key key b benchmark  and heres an example run of using zinipthash   build zinipthash  zig build dreleasesafe  build a hash function  zigoutbinzinipthash build i usrsharedictwords o wordspth reading usrsharedictwords building hash function successfully built hash function seed 12323441790160983030 bits 865554 bitsn 36693741892269993 writing to wordspth  look up an index in the hash function  zigoutbinzinipthash lookup i wordspth key hello reading wordspth successfully loaded hash function seed 12323441790160983030 bits 865554 bitsn 36693741892269993 looking up keyhello 112576   acknowledgments zini is merely an implementation of existing algorithms and techniques already described in the literature  the pthashpthash algorithm is described by giulio ermanno pibiri and roberto trani in arxiv210410402  they also implemented pthash as a c library in httpsgithubcomjermppthash under the mit license zini uses no code directly from that repository but it has been an invaluable resource for understanding how to implement pthash in practice  the burrburr data structure is described by peter c dillinger lorenz hbschleschneider peter sanders and stefan walzer in arxiv210901892 pthash httpsarxivorgabs210410402 burr httpsarxivorgabs210901892  license zini is licensed under the 0bsd licensehttpsspdxorglicenses0bsdhtml ","moalyousef/zfltk":"zig bindings for the fltk gui library  zfltk a zig wrapper for the fltk gui library  building the package from source sh git clone httpsgithubcommoalyousefzfltk cd zfltk zig build  to build the examples pass dzfltkbuildexamplestrue to your zig build command  usage zfltk supports the zig package manager to create a new project sh mkdir myproject cd myproject zig init  this should create buildzig buildzigzon and other files you can add zfltk as a dependency to your project with one of these sh  specific release  060 for zig 013 zig fetch savezfltk httpsgithubcommoalyousefzfltkarchiverefstagspkg060zip  or main branch zig fetch savezfltk httpsgithubcommoalyousefzfltkarchiverefsheadsmainzip  this might add something like this in your buildzigzon zig   dependencies   zfltk   url  httpsgithubcommoalyousefzfltkarchiverefstagspkg070zip hash        you can add the following to your buildzig zig const zfltkdep  bdependencyzfltk  target  target optimize  optimize  exerootmoduleaddimportzfltk zfltkdepmodulezfltk  then you can run sh zig build run   dependencies zfltk requires a system install of cfltk which along with fltk will be statically linked to your executable cmake and a c compiler you can install cfltk using sh git clone httpsgithubcommoalyousefcfltk recursesubmodules depth1 cd cfltk scriptsbootstrapposixsh  optionally specify a dcmakeinstallprefxsomepath  this might require super user privileges if no install prefix is provided since it might install to usrlocal if you install cfltk into a nonstandard search path you would need to supply your executable with an include path and library path zig exeaddlibrarypathsomepathinclude exeaddincludepathsomepathlib  alternatively you can supply the zig executable with a search prefix bash zig build searchprefix somepath  cfltk dependencies  windows with mingw no dependencies  macos macos sdk  linux x11 and opengl development headers need to be installed for development the libraries themselves are available on linux distros with a graphical user interface for debianbased gui distributions that means running sh sudo aptget install libx11dev libxextdev libxftdev libxineramadev libxcursordev libxrenderdev libxfixesdev libpango10dev libpngdev libgl1mesadev libglu1mesadev  for rhelbased gui distributions that means running sh sudo yum groupinstall x software development  yum install pangodevel libxineramadevel libpngdevel libstdcstatic  for archbased gui distributions that means running sh sudo pacman s libx11 libxext libxft libxinerama libxcursor libxrender libxfixes libpng pango cairo libgl mesa needed  for alpine linux sh apk add pangodev fontconfigdev libxineramadev libxfixesdev libxcursordev libpngdev mesagl  for nixos sh nixshell packages rustc cmake git gcc xorglibxext xorglibxft xorglibxinerama xorglibxcursor xorglibxrender xorglibxfixes libcerf pango cairo libgl mesa pkgconfig   api using the zig wrapper under development zig const zfltk  importzfltk const app  zfltkapp const window  zfltkwindowwindow const button  zfltkbuttonbutton const box  zfltkboxbox const color  zfltkenumscolor fn butcbbut button data anyopaque void  var box  boxfromrawdata boxsetlabelhello world butsetcolorcolorfromnamecyan  pub fn main void  try appinit appsetschemegtk var win  try windowinit w  400 h  300 label  hello  winfreeposition var but  try buttoninit x  160 y  220 w  80 h  40 label  click me  butsetdownboxflat var box  try boxinit x  10 y  10 w  380 h  180 boxtype  up  boxsetlabelfontcourier boxsetlabelsize18 winend winshow butsetcallbackexbutcb box try apprun   the messaging api can also be used zig const zfltk  importzfltk const app  zfltkapp const window  zfltkwindowwindow const button  zfltkbuttonbutton const box  zfltkboxbox const enums  zfltkenums pub const message  enumusize   cant begin with zero first  1 second  pub fn main void  try appinit appsetschemegtk var win  try windowinit w  400 h  300 label  hello  var but1  try buttoninit x  100 y  220 w  80 h  40 label  button 1  var but2  try buttoninit x  200 y  220 w  80 h  40 label  button 2  var mybox  try boxinit x  10 y  10 w  380 h  180 boxtype  up  myboxsetlabelfontcourier myboxsetlabelsize18 winend winshow but1emitmessage first but2emitmessage second while appwait  if apprecvmessage msg switch msg  first  myboxsetlabelbutton 1 clicked second  myboxsetlabelbutton 2 clicked     using the c api directly zig const c  cimport cincludecfltkcflh  flinitall flrun cincludecfltkcflenumsh  flcolor cincludecfltkcflimageh  flregisterimages cincludecfltkcflbuttonh  flbutton cincludecfltkcflboxh  flbox cincludecfltkcflwindowh  flwindow   fltk initizialization of optional functionalities pub fn fltkinit void  cflinitall  inits all styles if needed cflregisterimages  register image types supported by fltk if needed   cfllock  enable multithreading if needed   button callback pub fn butcbw cflwidget data anyopaque callconvc void  cflboxsetlabelptrcastdata hello world cflbuttonsetcolorptrcastw cflcolorcyan  pub fn main void  fltkinit   cflsetschemegtk const win  cflwindownew100 100 400 300 hello const but  cflbuttonnew160 220 80 40 click me const box  cflboxnew10 10 380 180  cflboxsetboxbox cflboxtypeupbox cflboxsetlabelsizebox 18 cflboxsetlabelfontbox cflfontcourier cflwindowendwin cflwindowshowwin cflbuttonsetcallbackbut butcb box ","ringtailsoftware/zig-wasm-audio-framebuffer":"examples of integrating zig and wasm (and c) for audio and graphics on the web  zigwasmaudioframebuffer toby jaffey httpsmastodonmeuktobyjaffey straightforward examples of integrating zig and wasm for audio and graphics on the web compiling against zig v0140 where c code requires functions from the c library httpsgithubcomringtailsoftwarezeptolibc is used  demos visit httpsringtailsoftwaregithubiozigwasmaudioframebuffer  sinetone simple waveform generator  synth htmlcss piano keyboard driving midi synth  mod protracker mod player  mandelbrot mandelbrot set mouse interaction  bat arcade style game skeleton keyboard control interactive graphics background music sound effects  doom doom1 shareware keyboard control midi music sound effects  tinygl software gl renderer in wasm  olivec graphics library with sprite blit circle rectangle line etc  agnes nes emulator no sound  terminal libvterm based terminal emulator playing a terminal tetris game  aims  crossplatform running on multiple browsers and operating systems  simple understandable code no hidden libraries no emscripten magic  main loop in browser wasm responds to function calls to initupdaterender  one wasm binary per program  use existing c libraries to do fun things  build and test zig build  zig build serve  zigout p 8000 browse to httplocalhost8000  video system an inmemory 32bpp argb framebuffer is created and controlled in zig to render onto a canvas element javascript  requests the framebuffer zigwebassembly pointer with getgfxbufptr  wraps the memory in a uint8clampedarray  creates an imagedata from the uint8clampedarray  shows the imagedata in canvass graphics context  audio pipeline an a hrefhttpsdevelopermozillaorgenusdocswebapiaudioworkletnodeaudioworkletnodea is used to move pcm samples from webassembly to the audio output device the system is hardcoded to 2 channels stereo and uses 32bit floats for audio data throughout inmemory arrays of audio data are created and controlled in zig the audioworkletnode expects to pull chunks of audio to be rendered ondemand however being isolated from the main thread it cannot directly communicate with the main wasm program this is solved by using a a hrefhttpsgithubcompadenotringbufjsshared ringbuffera to render audio to the output device javascript  tells zigwebassembly the expected sample rate in hz for the output device setsamplerate44100  forever checks if the ringbuffer has space for more data  tells zigwebassembly to fill its audio buffers with rendersoundquantum  fetches pointers to the left and right channels using getleftbufptr getrightbufptr  copies from left and right channels into the ringbuffer the wasmpcm wasmpcmjs class creates the audioworkletnode wasmworkletprocessor using pcmprocessorjs at regular intervals wasmpcm calls pcmprocess to request audio data from wasm  compatibility tested on safarichromefirefox on macos safari on iphone se2ipad chromeandroid galaxy tablet  ios unmute by default web audio plays under the same rules as the ringer the unmutejs script loops a constant silence in the background to force playback while the mute button is on  cors crossorigin resource sharing to share data between the main thread and the worklet sharedarraybuffer is used this requires two http headers to be set crossoriginopenerpolicy sameorigin crossoriginembedderpolicy requirecorp however this is worked around by using a hrefhttpsgithubcomgzuidhofcoiserviceworkercoiserviceworkera which reloads the page on startup ","joachimschmidt557/linenoize":"a port of linenoise to zig  linenoize a port of linenoisehttpsgithubcomantirezlinenoise to zig aiming to be a simple readline for commandline applications written in zig it is written in pure zig and doesnt require libc linenoize works with the latest stable zig version 0140 in addition to being a fullfledged zig library linenoize also serves as a dropin replacement for linenoise as a proof of concept the example application from linenoise can be built with zig build cexample  features  line editing  completions  hints  history  multi line mode  mask input mode  supported platforms  linux  macos  windows  examples  minimal example zig const std  importstd const linenoise  importlinenoiselinenoise pub fn main void  const allocator  stdheappageallocator var ln  linenoiseinitallocator defer lndeinit while try lnlinenoisehello  input  defer allocatorfreeinput stddebugprintinput sn input try lnhistoryaddinput     example of more features  zig const std  importstd const allocator  stdmemallocator const arraylist  stdarraylist const log  stdlogscopedmain const linenoise  importlinenoiselinenoise fn completionallocator allocator buf const u8 const const u8  if stdmemeqlu8 z buf  var result  arraylistconst u8initallocator try resultappendtry allocatordupeu8 zig try resultappendtry allocatordupeu8 ziglang return resulttoownedslice  else  return const u8   fn hintsallocator allocator buf const u8 const u8  if stdmemeqlu8 hello buf  return try allocatordupeu8  world  else  return null   var debugallocator stdheapdebugallocator  init pub fn main void  defer   debugallocatordeinit const allocator  debugallocatorallocator var ln  linenoiseinitallocator defer lndeinit  load history and save history later lnhistoryloadhistorytxt catch logerrfailed to load history  defer lnhistorysavehistorytxt catch logerrfailed to save history   set up hints callback lnhintscallback  hints  set up completions callback lncompletionscallback  completion  enable mask mode  lnmaskmode  true  enable multiline mode  lnmultilinemode  true while try lnlinenoisehell  input  defer allocatorfreeinput loginfoinput s input try lnhistoryaddinput    ","griush/zm":"zm - fast, zig math library, fully cross-platform img srchttpsrawgithubusercontentcomgriushresourcesf5f9659dd5c4d18d63ff9bc2e67b8feee874e482logoszmdarksvgghdarkmodeonly altzm logo width400px img srchttpsrawgithubusercontentcomgriushresourcesf5f9659dd5c4d18d63ff9bc2e67b8feee874e482logoszmlightsvgghlightmodeonly altzm logo width400px github actions workflow statushttpsimgshieldsiogithubactionsworkflowstatusgriushzmciyamlstyleflatlogogithublabelci  zm  fast math library zm is a zig math library it is fast easy to use and crossplatform  usage  note  this library is tracking zigs master branch last tested with 0140dev3219bffbc918e  it may not compile with newer or older versions run zig fetch save githttpsgithubcomgriushzm on the directory of your buildzig and buildzigzon then in the buildzig add zig const zm  bdependencyzm  exemodaddimportzm zmmodulezm  now in your code you can use zig const zm  importzm   getting started for an example using zigs build system see exampleexample there is a working example using opengl and glfw herehttpsgithubcomgriushzigopenglexample simple example for game development zig const zm  importzm const std  importstd pub fn main void   initialize window with glfw for example  create openglvulkan context const projection  zmmat4perspectivezmtoradians600 160  90 005 1000 const view  zmmat4translation00 075 50 const viewproj  projectionmultiplyview  upload data glnamedbuffersubdataubo 0 sizeofzmmat4 viewproj  render loop  cleanup    benchmarks see benchmarkstestbenchmarkzig ","andrewrk/statichttpfileserver":"zig module for serving a directory of files from memory via http  simple static http file server zig module upon initialization this module recursively walks the specified directory and permanently caches all file contents to memory when handling an http request this module will never touch the file system as part of this process it will compress the file contents using gzip and then choose whether to keep the compressed version or uncompressed version based on a configurable compression ratio defaulting to 95 this module is wellsuited for web applications that have a fixed set of unchanging assets that have no problem fitting into memory i have a similar project for nodejshttpsgithubcomandrewrkconnectstatic  status basic features work but see the roadmap below for planned enhancements  synopsis initialize zig const statichttpfileserver  importstatichttpfileserver var statichttpfileserver  try statichttpfileserverinit allocator  gpa rootdir  tmpdir  defer statichttpfileserverdeinitgpa  then hand off a request to be serviced zig try statichttpfileserverservehttprequest  see also servezig for a standalone example  roadmap 1 gzip compression 2 support more http headers  etag  ifnonematch  ifmodifiedsince  acceptencoding  contentencoding  testing standard unit tests  zig build test  there is also this  zig build serve  path  starts listening on localhost and serves static files at path so you can poke around manually ","nektro/zig-extras":"an assortment of random utility functions that aren't in std and don't need to be their own pacakge.  zigextras an assortment of random utility functions that arent in std and dont deserve their own package  license mit ","deckarep/ziglang-set":"a generic and general purpose set implementation for the zig language  ziglang set licensehttpsimgshieldsiogithublicensedeckarepziglangset issuehttpsimgshieldsiogithubissuesrawdeckarepziglangsetstyleflat commithttpsimgshieldsiogithublastcommitdeckarepziglangset cihttpsgithubcomdeckarepziglangsetworkflowscibadgesvg p aligncenter ziglangset a generic and generalpurpose set implementation for zig br  prealpha  p  p aligncenter img srcassetszigsetgraphicpng width512 p  p aligncenter a hrefhttpsdeckarepgithubioziglangsetimg srchttpsimgshieldsiobadgeapireferencebluesvgstyleflatsquare altapi referencea p  zig currently does not havehttpsgithubcomziglangzigissues6919 a builtin general purpose set data structure at this point in time until it does try this rationale it may be common knowledge that a dictionary or map or hashset can be used as a set where the value is basically void while this is true theres a lot to think about in terms of supporting all the common set operations in a performant and correct way and theres no good reason why a common module for this cant exist after studying the zig stdlib im hoping this implementation can fill that gap and provide some value  this module offers a set implementation built in the same vein and spirit of the other data structures within the zig standard library this is my attempt to model one that can get better over time and grow with community interest and support see a problem file a bug or better yet contribute and lets build the best implementation together i am the original author of the popular go based set package golangsethttpsgithubcomdeckarepgolangset that is used by software components built by docker 1password ethereum sendgrid crowdstrike and hashicorp at just shy of 4k stars i figured id take a crack at building a comprehensive and generic zigbased set that goes above and beyond the original go implementation after using zig for over 25 years on personal projects i thought it was time that zig had a robust set implementation for itself this implementation gives credit and acknowledgement to the zig languagehttpsziglangorg and powerful std libraryhttpsziglangorgdocumentationmasterstdstd hashmaphttpsziglangorgdocumentationmasterstdstdhashmaphashmap data structure of which this set implementation is built on top of without that this probably wouldnt exist efforts will be made to keep the ziglang set code fast and straightforward but this sets raw speed will largely be bounded by the performance of the zig hashmap of which it is built on top of   features  offers idiomatic genericbased zig api  allocators iterators capacity hints clearing resizing etc  a few flavors to choose from  hashbased everyday usecase optimized for lookups primarily insertionremoval secondarily  further readinghttpsdevloghexopscom2022zighashmapsexplained  hashsetmanaged  initializes with an allocator and holds it internally built on top of unmanaged  hashsetunmanaged  does not hold an allocator smaller footprint  arraybased more specialized iteration much faster insertion order preserved indexing into underylying data  further readinghttpsdevloghexopscom2022zighashmapsexplained  arrayhashsetmanaged  initializes with an allocator and holds it internally built on top of unmanaged  arrayhashsetunmanaged  does not hold an allocator smaller footprint  common set operations  add append appendslice  remove removeall  containsone containsany containsall  clone clonewithallocator  equals isempty cardinality  intersection intersectionupdate inplace variant  union unionupdate inplace variant  difference differenceupdate inplace variant  symmetricdifference symmetricdifferenceupdate inplace variant  issubset  issuperset  ispropersubset  ispropersuperset  pop  fully documented and robustly tested  in progress  performance aware to minimize unecessary allocsiteration internally  custom hash function support  string support  coming soon  benchmarks  coming soon   why use a set  a set offers a fast way to manipulate data and avoid excessive looping look into it as there is already tons of literature on the advantages of having a set in your arsenal of tools   example zig  import the namespace const set  importziglangset  create a set of u32s called a var a  setsetu32initstdtestingallocator defer adeinit  add some data   try aadd5   try aadd6   try aadd7  add more data single shot duplicate data is ignored   try aappendslice 5 3 0 9   create another set called b var b  setsetu32initstdtestingallocator defer bdeinit  add data to b   try bappendslice 50 30 20   get the union of a  b var un  try aunionofb defer undeinit  grab an iterator and dump the contents var iter  uniterator while iternext el  stdlogdebugelement d el    output of a  b  the union of a and b order is not guaranteed sh  element 5  element 6  element 7  element 3  element 0  element 9  element 50  element 30  element 20    custom hash function to use a custom hash function you can use the following types  hashsetunmanagedwithcontext  hashsetmanagedwithcontext example zig const simplehasher  struct  const self  this pub fn hash self key u32 u64  return asu64 key  0x517cc1b727220a95  pub fn eql self a u32 b u32 bool  return a  b   const ctx  simplehasher var set  hashsetunmanagedwithcontextu32 simplehasher 75initcontextctx defer setdeinittestingallocator   try setaddtestingallocator 123 try expectsetcontains123 try expectsetcontains456    installation of module to add this module update your applications buildzigzon file by adding the ziglangset dependency definition zig  name  yourapp version  010 dependencies   ziglangset   url  httpsgithubcomdeckarepziglangsetarchivecommityouwanttousetargz     when running zig build now zig will tell you you need a hash for the dependency and provide one put it in your dependency so it looks like zig  ziglangset   url  httpsgithubcomdeckarepziglangsetarchivecommityouwanttousetargz ","mnemnion/mvzr":"minimum viable zig regex  mvzr the minimum viable zig regex library finding myself in need of a regular expressions library for a zig project and needing it to build regex at runtime not just comptime i ended up speedrunning a little library for just that purpose this is that library its a simple bytecodebased commander pikestyle vm under 2000 lines of loadbearing code no dependencies other than std the provided regex type allows 64 operations and 8 unique ascii character sets if you would like more or less you can call sizedregexnumops numsets to customize the type  installation drop the file into your project or use the zig build system zig zig fetch save httpsgithubcommnemnionmvzrarchiverefstagsv033targz  ill do my best to keep that url fresh but it pays to check over here  for the latest release version  features  zero allocation comptime and runtime compiling and matching  x operations per regex  y character sets per regex  greedy qualifiers     lazy qualifiers     possessiveeager qualifiers     alternation foobarbaz  grouping foobarbazquux  sets abc abc az az w x04x1b  builtin character groups ascii w w s s d d  escape sequences t n r xxx hex format  same set as zig if you need the weird c ones use x format  begin and end  and   word boundaries b b  m m mn n  limitations and quirks  minimal multibyte  unicode support  this has improved somewhat a regex like  now matches an optional lambda not just an optional final byte additionally ranges of bytes greater than 0x7f are now supported this with some care can match certain sets for instance xcex91xa9 will match a string of uppercase greek letters xc2x80x9f matches a c1 control code and so on but youll still need to work at the byte level and use x format to do these tasks  no fancy modifiers you want caseinsensitive great lowercase your string   matches any one byte nr works fine if thats not what you want  or split into lines first divide and conquer  note  permits a final newline but  must be the beginning of a string and  only matches a final newline  backtracks sorry for this design to work without backtracking we need async back  compiler does some besteffort validation but i havent really pounded on it  no capture groups divide and conquer as long as you color within the lines it should be fine this library is not intended for use where an attacker could conceivably control the regex pattern much like managing your own memory if you know your tools and are smart about it you can get a lot done with mvzr  interface mvzrregex is available at comptime or runtime and returns an mvzrmatch consisting of a slice field containing the match as well as the start and end locations in the haystack this is a borrowed slice to own it call matchtoownedmatchallocator and deallocate later with matchdeinitallocator or just free the slice similarly if you need to store a regex or sizedregex for later call regextoownedregexallocator freeing later with allocatordestroyheapregex zig  aka sizedregex64 8 const regex mvzrregex  mvzrcompilepattstr  or mvzrregexcompilepattstr const match mvzrmatch  regexmatchhaystack const match2 mvzrmatch  matchhaystack pattstr const didmatch bool  regexismatchhaystack const iter mvzrregexiterator  regexiteratorhaystack while iternext m      comptimeonly const ops const sets  mvzrresourcesneededabcdefgh2  i suggest adding the values directly here once theyre established const slimmeddownregex  mvzrsizedregexops sets   compile errors if a regex string is unable to compile mvzr will return null it will also log an informative error message while this is useful it may not be desirable so mvzr uses a scoped loggerhttpsziglangorgdocumentation0120stdstdlog with the scope mvzr to make it easy for a custom logging function to filter those messages out  bugs fewer over time i hope the test suite never shrinks  bug reports always welcome ideally presented as a failing test block with a note on expected behavior ","allyourcodebase/zlib":"zlib ported to the zig build system  zlib this is zlibhttpswwwzlibnet packaged for zighttpsziglangorg  how to use it first update your buildzigzon  zig fetch save httpsgithubcomallyourcodebasezlibarchiverefstags131targz  next add this snippet to your buildzig script zig const zlibdep  bdependencyzlib  target  target optimize  optimize  yourcompilationlinklibrarylibzdepartifactz  this will provide zlib as a static library to yourcompilation ","scottredig/zig-javascript-bridge":"easily call javascript from zig wasm  zigjavascriptbridge this library creates bindings for accessing javascript from within a wasm runtime for example zig const zjb  importzjb export fn main void  zjbglobalconsolecalllog zjbconststringhello from zig void   is equivalent to this javascript javascript consoleloghello from zig   project status zjb is fully functional and is ready to be used in other projects however 10 will not be tagged until zig is 10 and there is significant enough usage that confidence in the api not needing further changes is high  why calling javascript functions from zig is a pain wasm has restrictions on the function api surface and how references to the runtime environment javascript can be stored so to access javascript functionality from zig you must create a function in zig which is friendly to call a function export and a function in javascript which translates into the call you actually want this isnt too bad so far but the javascript api surface is large has a lot of variadic functions and accepts many types the result is that your programming loop of just wanting to write code slows down writing a large amount of ill fitting boilerplate whenever you must cross the zig to javascript boundary this package is clearly inspired by gos solution to this problem httpspkggodevsyscalljs however there are a few significant deviations to note if youre familiar with that library 1 every call from gos package involves string decoding garbage creation and reflection calls 2 go has a one size fits all javascript file while zjb uses a generator to produce javascript for the calls you use 3 gos garbage collection and finalizers allows for automatically cleaning up references from go to javascript while zjb requires manual handle releasing 4 zig has no runtime so theres none of gos weirdness about blocking on the main thread  usage as of march 2025 zjb is only known to work with zig 0140 the simple folder provides a good template to start from youll need to update to reference to zjb in buildzigzon theres currently no release schedule for point releases so you should use the latest available code eg copy the entire simple folder into your empty project then run zig fetch savezjb githttpsgithubcomscottredigzigjavascriptbridge call into javascript using zjb generate the javascript side code and then build an html page to combine them  example an example which demonstrates usage of all of the components of zjb is in the example folder it includes  srcmainzig has usage examples for the zjb zig import  buildzigs example for how to set up your build file  static includes html and javascript files to run the example zig build from inside the example folder builds the example to zigout as a webserver is required to view the samples in action you can instead use zig build serve to build and host the example locally  details zjb functions which return a value from javascript require specifying which type is returned as arguments or return types to be passed into javascript zjb supports  i32 i64 f32 f64 these are the only numerical types that are supported by the webassembly javascript interface so you must cast to one of these before passing  comptimeint comptimefloat these are valid as arguments and are passed as f64 to javascript which is javascripts main number type  zjbhandle the zig side type for referring to javascript values most of the time this will be a javascript object of some kind but in some rare cases it might be something else such as null a number nan or undefined used as an argument it is automatically converted into the value that is held in zjbs javascript handles map when used as a return value it is automatically added to zjbs javascript handles map it is the callers responsibility to call release to remove it from the handles map when youre done using it  zjbconsthandle as arguments but not return types these values are returned by zjbconststring zjbglobal and zjbfnhandle zjbconsthandle works similarly to zjbhandle with a few notable exceptions 1 values are memoized upon first use on the zig side so they can be used any number of times without churning garbage 2 there is no release function these values are intended to be around for the lifetime of your program with reduced friction of using them as the functions which produce consthandle values all take only comptime arguments these cannot balloon uncontrolably at runtime some values are always defined as handles zjbconsthandlenull is javascripts null zjbconsthandleglobal is the global scope and zjbconsthandleemptystring is a javascript empty string  void is a valid type for method calls which have no return value zjb supports multiple ways to expose zig functions to javascript  zjbexportfn exposes the function with the passed name to javascript this supports zjbhandle so if you pass an object from a javascript function a handle will automatically be created and passed into zig it is the responsibility of the zig function being called to call release on any handles in its arguments at the appropriate time to avoid memory leaks  zjbfnhandle uses zjbexportfn and additionally returns a zjbconsthandle to that function this can be used as a callback argument in javascript functions  zigs export keyword on functions works as it always does in wasm but doesnt support zjbhandle correctly simple zig global variables can also be exposed to javascript  zjbexportglobal exposes the variable with the passed address to javascript this supports bool i32 i64 u32 u64 f32 and f64 property descriptors will be created with getset methods that provide access to the variable a few extra notes zjbstringconst u8 decodes the slice of memory as a utf8 string returning a handle the string will not update to reflect changes in the slice in zig zjbglobal will be set to the value of that global variable the first time it is called as it is intended to be used for javascript objects or classes defined in the global scope that usage will be safe for example console document or map if you use it to retrieve a value or object youve defined in javascript ensure its defined before your program runs and doesnt change the arrayview functions i8arrayview u8arrayview etc create the respective javascript typed array backed by the same memory as the zig wasm instance dataview is similar in functionality to the arrayview functions but returns a dataview object accepts any pointer or slice the generated javascript also includes a shortcut function named dataview to get an uptodate cach","guigui220d/zig-sfml-wrapper":"a zig wrapper for csfml 404 not found","zig-sec/keylib":"fido2/ passkey compatible authentication library fido2 compatible authenticator and client library written in zighttpsziglangorg the authenticator part requires zero dynamic allocations  we track the latest stable release of zig 0120 if you want to see an example on how the library could be used check out passkeezhttpsgithubcomr4guskeypass  zig version  keylib version    0130  050 051 052 053   0140  060   qa details summaryinswhat is fido2inssummary fido2 is a protocol designed for authentication purposes it can be used as single factor eg as a replacement for password based authentication or as a second factor eg instead of otps details details summaryinsive heard the term passkey but what is thatinssummary passkey is a marketing term which is used to refer to a specific fido2 authenticator configuration a authenticator can be configured to use so called discoverable credentials also referred to as resident keys those credentials are stored somewhere on your device eg in a encrypted database devices can also be protected by some form of user verification this can be a pin or a built in user verification method like a finger print scanner passkey refers to fido2 using discoverable credentials and some form of user verification please note that this is only one interpretation of what passkey means as the term itself is nowhere defined see also passkeyss a shattered dreamhttpsfyblackhatsnetaublog20240426passkeysashattereddream details details summaryinshow does it workinssummary fido2 uses asymmetric cryptography to ensure the authenticity of the user a unique credential keypair is created for each relying party typically a web server and bound to the relying party id eg googlecom the private key stays on the authenticator and the public key is stored by the relying party when a user wants to authenticate herself the relying party sends a nonce a random byte string meant to be only used once and some other data over the client typically your web browser to the authenticator the authenticator looks up the required private key and signs the data with it the generated signature can then be verified by the relying party using the corresponding public key details details summaryinswhat is the difference between fido2 passkey and webauthninssummary you might have noticed that fido2 passkey and even webauthn are often used interchangeably by some articles and people which can be confusing especially for people new to the protocol here is a short overview  fido2 protocol consisting of two subprotocols client to authenticator protocol 2 ctap2 and web authentication webauthn  ctap2 specification that governs how a authenticator eg yubikey should behave and how a authenticator and a client eg webbrowser can communicate with each other  webauthn specification that defines how web applications can use a authenticator for authentication this includes the declaration of data structures and java script apis  passkey a authenticator with a specific configuration see above details details summaryinswhy should i use fido2inssummary fido2 has a lot of advantages compared to passwords 1 no secret information is shared ie the private key stays on the authenticator or is protected eg using key wrapping 2 each credential is bound to a relying party id eg googlecom which makes social engineering attacks like phishing websites quite difficult as long as the client verifies the relying party id properly 3 users dont have to be concerned with problems like password complexity 4 if well implemented fido2 provides a better user experience eg faster logins 5 a recent paper showed that with some adoptions fido2 is ready for a post quantum world under certain conditions fido2 ctap 21 and webauthn 2 provable security and postquantum instantiation cryptology eprint archive paper 20221029httpseprintiacrorg20221029pdf details details summaryinsare there problems with fido2inssummary yes there are 1 the two fido2 subprotocols ctap2 and webauthn are way more difficult to implement compared to password authentication 2 there are more points of failure because you have three parties that are involved in the authentication process authenticator client relying party 3 currently not all browsers support the ctap2 protocol well especially on linux 4 there is no way to verify that a client is trustworthy  rogue clients may communicate with a authenticator without your consent  clients may display wrong information 5 the 4th layer introduced for android ios and windows to connect authenticators and clients internally could be used as a man in the middle details details summaryinsdoes this library work with all browsersinssummary answering this question isnt straightforward the library by its nature is designed to be independent of any particular platform meaning that you have the responsibility of supplying it with data for processing to put it differently youre in charge of creating a functional interface for communicating with a client typically a web browser on linux we offer a wrapper for the uhid interface simplifying the process of presenting an application as a usb hid device with a usage page of f1d0 on the bus there are known issues with older browsers including firefox newer browser versions should work fine tested with  browser  supported  tested version notes    cromium  9989  11906045159 official build arch linux 64bit    brave  9989  version 162153 chromium 1210616785 official build 64bit    firefox  9989  1220 64bit    opera  9989  version 1050497016 chromium 11906045159   please let me know if you run into issues details details summaryinsdoes this library implement the whole ctap2 sepcinssummary no we do not fully implement the entire ctap2httpsfidoallianceorgspecsfidov22rd20230321fidoclienttoauthenticatorprotocolv22rd20230321htmlintro specification in the initial version of this library which can be found on github our aim was to remain completely platformagnostic and cover most of the ctap2 specification however this approach introduced complexities for both users and developers the current version of this library strikes a balance between usability and feature completeness we offer support for operations like authenticatormakecredential authenticatorgetassertion authenticatorgetinfo and authenticatorclientpin with builtin support for user verification and the pinuvauth prot","greenfork/jzignet":"zig library to connect janet and zig together  jzignet zighttpsziglangorg is a generalpurpose programming language and toolchain for maintaining robust optimal and reusable software janethttpsjanetlangorg is a functional and imperative programming language and bytecode interpreter it is a lisplike language but lists are replaced by other data structures arrays tables hash table struct immutable hash table tuples the language also supports bridging to native code written in c metaprogramming with macros and bytecode assembly jzignethttpsgitsrhtgreenforkjzignet  zig library to connect janet and zig together you can  embed janet programs into zig  write janet modules in zig  write bindings in zig for a c library to be used as a janet module why use these bindings besides obvious reasons such as connecting together two wonderful languages  you dont need to care about conversion between zig and c but you have full access to c internals if you need to  plenty of tests which are great examples and guarantee minimal regressions when updating  idiomatic zig code  everything is typed names are properly cased operations on types use methods instead of prefixed global functions currently supported versions  zig 0130  janet 1371 repository is available at sourcehuthttpsgitsrhtgreenforkjzignet and at githubhttpsgithubcomgreenforkjzignet  how to use if you want to just start using it jump to the examples copy them or look at the source code it is heavily commented  embed janet into zigexamplesembedjanetzig  run this example with zig build runembedjanet for a more indepth overview of this use case you can take a look at iacores blog posthttpswww1ainsecnetblog16buyjanetgetgcfree as well as the example repositoryhttpsgitenvsnetiacorejanetzigtest warning examples are currently not working  write janet module in zigexampleszigmodule  the template is broken and needs some investigation on how to fix it write bindings in zig for a c library to be used as a janet module  this is very close to write janet module in zig example you just need to know how to wrap a c library in zig this repository is a perfect example for this  how to include as a dependency with zon 1 create a file named buildzigzon with the following content put the correct version for tar archive and change the hash value when you get and error zig  name  janetzigtest version  001 dependencies   jzignet   url  httpsgitsrhtgreenforkjzignetarchive072targz hash  122087fa45b016bd8ce5fbadd17ef2bd84cd1389119edd3c345486870032ea2b7217     2 add this to buildzig zig const jzignet  bdependencyjzignet  targettarget optimizeoptimize   your executable defined here  const exe   exeaddmodulejzignet jzignetmodulejzignet exelinklibraryjzignetartifactjzignet  3 use in your zig code zig const jzignet  importjzignet   how to include as a dependency with git submodule currently you can include jzignet as a git submodule janet is bundled as a single c source amalgamation file and is compiled directly into this library 1 include git submodule into your library assuming further that libpath is the directory where this library is installed shell git submodule add httpsgithubcomgreenforkjzignet libpath  2 include the library in buildzig zig const jzignet  banonymousdependencylibjzignet importlibjzignetbuildzig   your executable defined here  const exe   exeaddmodulejzignet jzignetmodulejzignet exelinklibraryjzignetartifactjzignet  3 use in your zig code zig const jzignet  importjzignet   differences with c api  naming  janet prefix is mostly not present  every type is a zig struct and corresponding functions are called as methods for example janettablegettable key becomes tablegetkey  all bindings have idiomatic zig naming even when janet uses different ones for example arity and fixarity are arity and fixarity in zig  functions like janettable are available as tableinit please consult the source code for that  semantics  function return types return error sets as well as optional values where it makes sense to do so for example tableget returns janet and pcall returns signalerrorvoid  all types are wrapped into structs most of the types support this natively since they are structs in c too others tuple struct string keyword symbol cannot be represented as structs directly and they are wrappers with a ptr or slice field containing the original value  all functions that have a type at the end for example janetgetnumber instead use this signature getcomptime t type  currently these functions exist get opt wrap janetunwrap  when you need to supply a pointer to the array and a length in the c version in zig version you need to supply just a slice since it has both the pointer and the length so its one parameter instead of two for example c int janetdobytesjanettable env const uint8t bytes int32t len const char sourcepath janet out  becomes zig pub fn dobytesenv environment bytes const u8 sourcepath 0const u8 janet   abstracts are fully typed no void pointers to ptrcast take a look at tests for examples with abstracts they are generally reworked to make them easier to use  all functions returning signal instead return void on ok and return error otherwise with the specified signal signature is signalerrorvoid  dostring and dobytes are aliases and return janet directly instead of accepting a reference for the return value  string keyword symbol nil toplevel functions are the only ones to create these types and they do what you want  environment type introduced which is internally a table but allows conceptually different operations such as defining values and executing code  completeness bindings are not complete 100 but all the generally useful things are there if you need any specific part of the api feel free to contribute or just ask and you shall receive  qna q whats with the name a janetreplacea zig q i hate that name a yes i know  license mit see license file ","nektro/zig-time":"a date and time parsing and formatting library for zig.  zigtime lochttpsslocxyzgithubnektrozigtime licensehttpsimgshieldsiogithublicensenektrozigtimesvghttpsgithubcomnektrozigtimeblobmasterlicense exposes a datetime structure that can be initialized and acted upon using various methods all public methods return a new structure currently handles dates and times based on the proleptic gregorian calendarhttpsenwikipediaorgwikiprolepticgregoriancalendar in adherence to iso 8601httpsenwikipediaorgwikiiso8601 does not currently support time zones outside of utc does not handle leap seconds see the formatseq structure for display information on what to pass as a fmt string ","karlseguin/cache.zig":"a thread-safe, expiration-aware, lru cache for zig 404 not found","fabioarnold/nfd-zig":"os-native file dialogs on linux, macos and windows   nfdzig nfdzig is a zig binding to the library nativefiledialoghttpsgithubcommlabbenativefiledialog which provides a convenient crossplatform interface to opening file dialogs on linux macos and windows this library has been tested on windows 10 macos 111 and linux  usage you can run a demo with zig build run the demos source is in srcdemozig if you want to add the library to your own project  add the nfd dependency to your buildzigzon zig  dependencies   nfd   path  libsnfdzig   assuming nfdzig is available in the local directory use url otherwise     add the import in your buildzig zig const nfd  bdependencynfd  const nfdmod  nfdmodulenfd exerootmoduleaddimportnfd nfdmod   screenshot open dialog on windows 10httpsrawgithubusercontentcommlabbenativefiledialog67345b80ebb429ecc2aeda94c478b3bcc5f7888escreensopenwinpng ","cztomsik/fridge":"a small, batteries-included database library for zig.  fridge a small batteriesincluded database library for zig it offers a typesafe query builder connection pooling shorthands for common tasks migrations and more  features  x supports both bundling sqlite3 with your app or linking system sqlite3  x typesafe query builder  x connection pool  x shortcuts for common tasks  x migrations inspired by david rthlisbergerhttpsdavidrothlisnetdeclarativeschemamigrationforsqlite    additional drivers eg postgresql    documentation  installation to get started get the library first sh zig fetch httpsgithubcomcztomsikfridgearchiverefsheadsmaintargz save  then in your buildzig zig  use bundle  false if you want to link system sqlite3 const sqlite  bdependencyfridge  bundle  true  exerootmoduleaddimportfridge sqlitemodulefridge   basic usage fridges api is highly generic and revolves around userdefined structs lets start by adding a few imports and defining a simple struct for the user table zig const std  importstd const fr  importfridge const user  struct  id u32 name const u8 role const u8   the primary api youll interact with is always session this highlevel api wraps the connection with an arena allocator and provides a typesafe query builder sessions can be either oneshot or pooled lets start with the simplest case zig var db  try frsessionopenfrsqlite3 allocator  filename  memory  defer dbdeinit  as you can see sessionopen is generic and expects a driver type allocator and connection options these connection options are driverspecific currently only sqlite3 is supported but the api is designed to be easily extendable to other drivers including your own now lets do something useful with the session for example we can create a table executing ddl statements is a bit special because it usually involves multiple statements and doesnt return any rows in such cases you can access conn connection directly and use lowlevel methods like execall lastinsertrowid etc zig try dbconnexecall create table user   id integer primary key  name text not null  role text not null    next lets insert some data since this is a common operation theres a convenient shorthand zig try dbinsertuser  name  alice role  admin   alternatively you could also use the query builder directly zig try dbqueryuserinsert name  bob role  user   the difference here is subtle for instance you could add onconflict before calling insert or in the case of update you could add where which is often more common now lets query the data back the query method returns a query builder that among other things has a findall method zig for try dbqueryuserfindall user  stdlogdebuguser  user   of course you can also use where to filter the results zig for try dbqueryuserwhererole adminfindall user  stdlogdebugadmin  user   notably the where method is typesafe and will only accept types compatible with the column type  pooling if youre building a web application you might want to use a connection pool pooling improves performance and ensures that each user request gets its own session with separate transaction chains heres how to use the frpool zig  during your app initialization var pool  frpoolinitsqlite3 allocator 5  filename  memory  defer pooldeinit  inside your request handler var db  try poolgetsessionallocator  perrequest allocator defer dbdeinit  cleans up and returns the connection to the pool  now you can use the session as usual   try dbqueryuserfindall   migrations  todo currently migrations only work with sqlite fridge includes a simple migration script that can be used with any ddl sql file it expects a create xxx statement for every table view trigger etc and will automatically create or drop the respective objects the only requirement is that all names must be quoted sql create table user  id integer primary key name text not null   for tables the script will try to reuse as much data as possible it will first create a new table with a temporary name copy all data from the old table using insert into xxx  from temp and finally drop the old table and rename the new one this approach allows you to freely add or remove columns though you cant change their types or remove default values while its not a fullyfledged migration system it works surprisingly well for most cases zig try frmigrateallocator mydb embedfiledbschemasql   license mit ","travisstaloch/art.zig":"an adaptive radix tree ported from c 404 not found","cztomsik/napigen":"automatic n-api bindings for your zig project.  zignapigen comptime napi bindings for zig  note this library is still in early development and the api is subject to  change   you need to use latest zig master to use this library   see ggmljshttpsgithubcomcztomsikggmljs for a complete realworld  example  features  primitives tuples structs value types optionals  strings valid for the function scope  struct pointers see below  functions no classes see below  all the napixxx functions and types are reexported as napigennapixxx so you can do pretty much anything if you dont mind going lowerlevel  limited scope the library provides a simple and thin api supporting only basic types this design choice is intentional as it is often difficult to determine the ideal mapping for more complex types the library allows users to hook into the mapping process or use the napi directly for finer control specifically there is no support for classes  structstuples value types when returning a structtuple by value it is mapped to an anonymous javascript objectarray with all propertieselements mapped recursively similarly when accepting a structtuple by value it is mapped back from javascript to the respective native type in both cases a copy is created so changes to the js object are not reflected in the native part and vice versa  struct pointers t when returning a pointer to a struct an empty javascript object will be created with the pointer wrapped inside if this javascript object is passed to a function that accepts a pointer the pointer is unwrapped back the same javascript object is obtained for the same pointer unless it has already been collected this is useful for attaching state to the javascript counterpart and accessing that data later changes to javascript objects are not reflected in the native part but getterssetters can be provided in javascript and native functions can be called as necessary  functions javascript functions can be created with ctxcreatefunctionzigfn and then exported like any other value only comptimeknown functions are supported if an error is returned from a function call an exception is thrown in javascript zig fn adda i32 b i32 i32  return a  b   somewhere where the jscontext is available const jsfun napigennapivalue  try jscreatefunctionadd  make the function accessible to javascript try jssetnamedpropertyexports add jsfun  note that the number of arguments must match exactly so if you need to support optional arguments you will have to provide a wrapper function in js which calls the native function with the correct arguments  callbacks jscontext napivalue functions can also accept the current jscontext which is useful for calling the napi directly or performing callbacks to get a raw javascript value simply use napivalue as an argument type zig fn callmebackjs napigenjscontext recv napigennapivalue fun napigennapivalue void  try jscallfunctionrecv fun  hello from zig    and then javascript nativecallmebackconsole consolelog  if you need to store the callback for a longer period of time you should create a ref for now you have to do that directly using napicreatereference  definemoduleinitfn exports napi modules need to export a function which will also init  return the exports object you could export napiregistermodulev1 and call jscontextinit yourself but theres also a shorthand using comptime block which will allow you to use try anywhere inside zig comptime  napigendefinemoduleinitmodule  fn initmodulejs napigenjscontext exports napigennapivalue anyerrornapigennapivalue  try jssetnamedpropertyexports   return exports    hooks whenever a value is passed from zig to js or vice versa the library will call a hook function if one is defined this allows you to customize the mapping process hooks have to be defined in the root module and they need to be named napigenread and napigenwrite respectively they must have the following signature zig fn napigenreadjs napigenjscontext comptime t type value napigennapivalue t  return switch t   we can easily customize the mapping for specific types  for example we can allow passing regular js strings anywhere where we expect an internedstring internedstring  internedstringfromtry jsreadconst u8  otherwise just use the default mapping note that this time  we call jsdefaultread explicitly to avoid infinite recursion else  jsdefaultreadt value   pub fn napigenwritejs napigenjscontext value anytype napigennapivalue  return switch typeofvalue   convert internedstring to back to a js string hypothetically internedstring  try jswritevalueptr  same thing here else  jsdefaultwritevalue      complete example first create a new library bash mkdir example cd example zig initlib  then change your buildzig to something like this zig  const lib  baddsharedlibrary name  example rootsourcefile   path  srcmainzig  target  target optimize  optimize   weaklinkage liblinkerallowshlibundefined  true  add correct path to this lib const napigen  bcreatemodule rootsourcefile   path  depsnapigennapigenzig   librootmoduleaddimportnapigen napigen  build the lib binstallartifactlib  copy the result to a node file so we can require it const copynodestep  baddinstalllibfilelibgetemittedbin examplenode bgetinstallstepdependoncopynodestepstep   next define some functions and the napi module itself in srcmainzig zig const std  importstd const napigen  importnapigen export fn adda i32 b i32 i32  return a  b  comptime  napigendefinemoduleinitmodule  fn initmodulejs napigenjscontext exports napigennapivalue napigennapivalue  try jssetnamedpropertyexports add try jscreatefunctionadd return exports   finally use it from javascript as expected javascript import  createrequire  from nodemodule const require  createrequireimportmetaurl const native  requirezigoutlibexamplenode consolelog1  2  nativeadd1 2  to build the library and run the script   zig build  node examplejs 1  2  3   license mit ","ziglibs/zinput":"a zig command-line input library!  zinput  a zig commandline input library   zinputzinput  usageusage   usage zig const zinput  importzinput  const mystring  try zinputaskstringallocator i need a string 128 defer allocatorfreemystring   check out the test in mainzig for an example ","mnemnion/ohsnap":"oh snap! easy snapshot testing for zig  oh snap easy snapshot testing for zig its hard to know if a program or part of one actually works but its easy to know if it doesnt if there isnt a test for some part of the program then that part doesnt work snapshot testinghttpstigerbeetlecomblog20240514snapshottestingforthemasses is a great way to get fast coverage for data invariants in a program or library the article i just linked to goes into great detail about the advantages of snapshot testing and you should read it ohsnap is a zig library for doing snapshot testing one which is in fact based on the tigerbeetle libraryhttpsgithubcomtigerbeetletigerbeetleblobmainsrctestingsnaptestzig used in that post it includes some features not found in the original tigerbeetle has a nodependencies policy and im confident that what they have serves their needs just fine but a library like this is a dependency by definition and i didnt mind adding a couple more let me show you its features  installation the best way to use ohsnap is to install it using the zig build systemhttpsziglangorglearnbuildsystem from your project repo root use zig fetch like this sh zig fetch save httpsgithubcommnemnionohsnaparchiverefstagsv031targz  then add it to your test artifact like so zig if blazydependencyohsnap  target  target optimize  optimize  ohsnapdep  libunittestsrootmoduleaddimportohsnap ohsnapdepmoduleohsnap   that should be it now youre ready to write some snaps  using ohsnap the interface will be familiar if you read the linked blog post which really you should one difference between ohsnap and the original is that ohsnap includes prettyhttpsgithubcomtimfayzpretty a clever prettyprinter for arbitrary data structures so you dont need to write a custom format method to use ohsnap although if you have one you can use that instead or both belt and suspenders kinda thing writing a snap is simple to get started do something like this zig const ohsnap  importohsnap test snap something  const oh  ohsnap  you can configure pretty by using var oh and changing settings  in ohprettyoptions const snapme  somefn try ohsnapsrc   expectequalsnapme   note that the call to src has to be directly above the string and the string has to be multiline style with the double backslashes  both this zig try ohsnapsrc  etc expectequalsnapme  and this zig try ohsnap src  etc expectequalsnapme  will work just fine this test will fail because the snapshot generated by pretty wont be equal to the empty string ohsnap will diff that empty string with what it gets out of snapme and print what it got in allgreen because thats what happens when you diff an empty string against a string which isnt empty if you like what you see updating is simple change the file to the following zig const ohsnap  importohsnap test snap something  const oh  ohsnap  you can configure pretty by using var oh and changing settings  in ohprettyoptions const snapme  somefn try ohsnapsrc update  expectequalsnapme   the snaptest will see the update which must be the beginning of the string and replace it in your file with the output of the pretty printing easy if your data structure has a format method and youd prefer to use that as a basis simply use expectequalfmt instead of expectequal if down the road the snapshot doesnt compare to the expected string ohsnap will use diffzhttpsgithubcommnemniondiffztreemoreport1 a zig port of diffmatchpatchhttpsgithubcomgooglediffmatchpatch to produce a terminalcolored characterlevel diff of the expected string with the actual string making it easy to see exactly whats changed these changes are either a bug or a new feature if its the former fix it if its the latter just add update to the head of the string again and ohsnap will oblige  patternmatching snapshots this is fine and dandy if the data structure exactly as it prints will always be the same on every test run but what if thats only true of some of the data consider this example we have a struct which looks like this zig const stampedstruct  struct  message const u8 tag u64 timestamp isize pub fn initmsg const u8 tag u64 stampedstruct  return stampedstruct message  msg tag  tag timestamp  stdtimetimestamp     which we want to snapshot test like this zig test snap with timestamp  const oh  ohsnap const withstamp  stampedstructinit frobnicate the turboencabulator 31337  try ohsnap src ohsnapstampedstruct  message const u8  frobnicate the turboencabulator  tag u64  31337  timestamp isize  1721501316  expectequalwithstamp   but of course the next time we run the test the timestamp will be different so the test will fail we care about the message and the tag we care that there is a timestamp but we dont care what the timestamp is because we know it will be changing for cases like this ohsnap includes mvzrhttpsgithubcommnemnionmvzr the minimum viable zig regex library which i wrote specifically for this purpose simply replace the timestamp like so zig try ohsnap src ohsnapstampedstruct  message const u8  frobnicate the turboencabulator  tag u64  31337  timestamp isize  d  expectequalwithstamp  through the magic of diffing ohsnap will identify the part of the new string which matches d and try to match the regular expression against that part of the string since this matches the test now passes note that the regex must be in the form  the exact regex we use is n in fact the  and  are essential and are loadbearing parts of the expression this prevents partial matches as well as making the regex portions of a snapshot test easier for ohsnap to find note that because this is a multiline string you dont have to do doublebackslashes its d not d to be very clear the  and  demarcate the regex they arent part of it lets say you make a change zig const withstamp  stampedstructinit thoroughly frobnicate the encabulator 3133","nektro/zig-xml":"a pure-zig fully spec-compliant xml parser.  zigxml a purezig speccompliant xml parser httpswwww3orgtrxml passes all standalone tests from httpswwww3orgxmltestxmlconf20020606htm even more coverage coming soon one caveat is that this parser expects utf8  build summary 33 steps succeeded 120120 tests passed test success  run test 120 passed 5ms maxrss1m  zig test debug native success 1s maxrss247m   license mpl20 ","ikskuh/texteditor":"a backbone for text editors. no rendering, no input, but everything else.  texteditor a backend for text editors it implements the common textbox editing options but is both rendering and input agnostic keyboard input must be translated into operations like editordeleteright word to emulate what a typical text box implementation would do when ctrl delete is pressed for mouse input the editor component needs to be made aware about the font that is used for this an abstract font interface is required  api zig const texteditor  importsrctexteditorzig fn inittexteditorbuffer initialtext const u8 inserterrortexteditor  fn deinittexteditor void fn settexttexteditor text const u8 inserterrorvoid fn gettexttexteditor const u8 fn getsubstringeditor texteditor start usize length usize const u8 fn setcursortexteditor offset usize setcursorerrorvoid fn movecursortexteditor direction editdirection unit editunit void fn deletetexteditor direction editdirection unit editunit void fn inserttexttexteditor text const u8 inserterrorvoid fn graphemecounttexteditor usize   common key mappings  keyboard input  editor call        left  editormovecursorleft letter   right  editormovecursorright letter   ctrlleft  editormovecursorleft word   ctrlright  editormovecursorright word   home  editormovecursorleft line   end  editormovecursorright line   backspace  editordeleteleft letter   delete  editordeleteright letter   ctrlbackspace  editordeleteleft word   ctrldelete  editordeleteright word   text input  try editorinsertstring  ","g41797/mailbox":"zig mailbox  is convenient  inter-thread communication mechanizm. logomailboxespng  mailbox  old new way of interthread communication cihttpsgithubcomg41797yazqactionsworkflowsciymlbadgesvghttpsgithubcomg41797yazqactionsworkflowsciyml img srchttpsimgshieldsiobadgelinuxfcc624styleflatlogolinuxlogocolorblack width48 height24nbsp img srchttpsimgshieldsiobadgemacos000000styleflatlogoapplelogocolorwhite width48 height24nbsp img srchttpsimgshieldsiobadgewindows0078d6styleflatlogowindowslogocolorwhite width48 height24nbsp  a bit of history a bit of theory mailboxes are one of the fundamental parts of the actor model originated in 1973httpsenwikipediaorgwikiactormodel  an actor is an object that carries out its actions in response to communications it receives  through the mailbox mechanism actors can decouple the reception of a message from its elaboration  a mailbox is nothing more than the data structure fifo that holds messages i first encountered mailbox in the late 80s while working on a realtime system  a mailbox is object that can be used for intertask communication when task a wants to send an object to task b task a must send the object to the mailbox and task b must visit the mailbox where if an object isnt there it has the option of waiting for any desired length of time  irmx 86 nucleus reference manual copyright  1980 1981 intel corporation since than i have used it in  os  languages    irmx  plm86   aix  c   windows  cc   linux  go  now its zig time  why if your thread runs in fire and forget mode you dont need mailbox but in real multithreaded applications threads communicate with each other as members of a work team mailbox provides a convenient and simple interthread communication  thread safe  asynchronous  nonblocking  cancelable  no own allocations  unbounded  fanoutfanin  example of usage  echo zig  mbx is mailbox with usize letterdata const mbx  mailboxmailboxusize  echo  runs on own thread  it has two mailboxes  to and from  from the client point of the view  receives letter via to mailbox  replies letter without change echo to from mailbox const echo  struct  const self  this to mbx  undefined from mbx  undefined thread thread  undefined  mailboxes creation and start of the thread  pay attention that client code does not use  any thread api  all embedded within echo pub fn startecho self void  echoto   echofrom   echothread  stdthreadspawn run echo catch unreachable   echo thread function fn runecho self void   main loop while true   receive  exit from the thread if mailbox was closed const envelope  echotoreceive100000000 catch break  reply to the client  exit from the thread if mailbox was closed   echofromsendenvelope catch break    wait exit from the thread pub fn waitfinishecho self void  echothreadjoin   close mailboxes  as result echo should stop processing  and exit from the thread pub fn stopecho self void    echotoclose   echofromclose   var echo  try stdtestingallocatorcreateecho  start echoon own thread echostart defer echostop defer   wait finish of echo echowaitfinish stdtestingallocatordestroyecho   because nothing was send to to mailbox nothing should be received  from from mailbox try testingexpecterrorerrortimeout echofromreceive100  create wrapper for the data const envl  try stdtestingallocatorcreatembxenvelope defer stdtestingallocatordestroyenvl  sendreceive loop for 06 indx   set value for send 05 envlletter  indx  send to to mailbox try echotosendenvl  wait received data from out mailbox const back  echofromreceive1000000 if back val   expected value  index 05 try testingexpectvalletter  indx  else   try testingexpectfalse     boring details mailbox of const u8 letters zig const rumors  mailboxmailboxconst u8 const rmrsmbx  rumors    envelope is a wrapper of actual user defined type letter zig pub const envelope  struct  prev envelope  null next envelope  null letter letter   in fact mailbox is a queuefifo of envelopes mailbox supports following operations  send envelope to mailbox enqueue and wakeup waiting receivers  receive envelope from mailbox dequeue with timeout  close mailbox  disables further operations  first close returns list of nonprocessed envelopes for freereuse etc feel free to suggest improvements in doc and code  license mitlicense  installation you finally got to installation  submodules create folder deps under src and mailbox submodule bash mkdif srcdeps git submodule add httpsgithubcomg41797mailbox srcdepsmailbox  import mailbox zig const mailbox  importdepsmailboxsrcmailboxzig  use mailbox zig const msgblock  struct  len usize  undefined buff 1024u8  undefined  const msgs  mailboxmailboxmsgblock var msgs msgs      msgsclose  periodically update submodules bash git submodule update remote   package manager with an existing zig project adding mailbox to it is easy 1 add mailbox to your buildzigzon 2 add mailbox to your buildzig to add mailbox to buildzigzon simply run the following in your terminal sh cd myexampleproject zig fetch savemailbox githttpsgithubcomg41797mailbox  and in your buildzigzon you should find a new dependency like zig  name  my example project version  001 dependencies   mailbox   url  githttpsgithubcomg41797mailbox3f794f34f5d859e7090c608da998f3b8856f8329 hash  122068e7811ec1bfc2a81c9250078dd5dafa9dca4eb3f1910191ba060585526f03fe   paths    ","karlseguin/metrics.zig":"prometheus metrics for library and application developers 404 not found","ziglana/grpc-zig":"blazigly fast grpc client & server implementation in zig   grpczig a blazingly fast grpc client  server implementation in zig designed for maximum performance and minimal overhead license unlicensehttpsimgshieldsiobadgelicenseunlicensebluesvghttpunlicenseorg zighttpsimgshieldsiobadgezig23f7a41dsvgstyleflatlogoziglogocolorwhitehttpsziglangorg http2httpsimgshieldsiobadgehttp2f2supportedsuccesshttpshttp2githubio   features   blazingly fast built from ground up in zig for maximum performance   full security builtin jwt authentication and tls support   compression support for gzip and deflate compression   streaming efficient bidirectional streaming   http2 full http2 support with proper flow control   health checks builtin health checking system   zero dependencies pure zig implementation   type safety leverages zigs comptime for compiletime checks   quick start zig  server const server  try grpcserverinitallocator 50051 secretkey try serverhandlersappend name  sayhello handlerfn  sayhello  try serverstart  client var client  try grpcclientinitallocator localhost 50051 const response  try clientcallsayhello world none    examples  basic server zig const std  importstd const grpcserver  importserverziggrpcserver pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit var server  try grpcserverinitgpaallocator 50051 secretkey defer serverdeinit try serverstart    streaming zig var stream  streamingmessagestreaminitallocator 5 try streampushfirst message false try streampushfinal message true    installation 1 add to your buildzigzon zig dependencies   grpczig   url  httpsgithubcomziglanagrpczigarchiverefstagsv010targz    2 add to your buildzig zig const grpczig  bdependencygrpczig  exeaddmodulegrpc grpczigmodulegrpc    performance benchmarked against other grpc implementations opssec lower is better  grpczig  21ms grpc go  38ms grpc c  42ms    contributing contributions are welcome please feel free to submit a pull request for major changes please open an issue first to discuss what you would like to change   license this project is licensed under the unlicense  see the licenselicense file for details   support if you find this project useful please consider giving it a star on github to show your support   acknowledgments  spicehttpsgithubcomjudofyrspice  for the amazing protocol buffers implementation  tonichttpsgithubcomhyperiumtonic  for inspiration on api design  the zig community for their invaluable feedback and support  made with  in zig ","kubkon/zig-snapshots":"preview zig's incremental linker state in interactive html  zigsnapshots a tool allowing you to preview a series of snapshots of zigs incremental linker  usage you will need to build zigs stage2selfhosted compiler with dlinksnapshot flag on   zig build dlinksnapshot  then you can run the compiler either in a fireandforget or watchforupdates manner with debuglinksnapshot flag on to generate a snapshot of the linkers state per incremental update all saved in the same json output file   zig buildexe hellozig watch debuglinksnapshot  updateandrun  updateandrun  exit  file snapshotsjson snapshotsjson json data  you should then feed the output json file to zigsnapshots which will generate an html file with the linkers state per each incremental update that you can interative with   zigoutbinzigsnapshots snapshotsjson  open snapshotshtml  zigsnapshots demozigsnapshotsdemopng ","rockorager/comlink":"an experimental irc client  comlink an experimental irc client written in zig join the discussion in comlink on liberachat screenshot of comlinkscreenshotpng  installation  arch linux comlinkhttpsaurarchlinuxorgpackagescomlink is available as a package in the aur it can be installed using an aur helper eg paru sh paru s comlink   zig build system comlink is written in zig and can be installed using the zig build system version 0140 sh git clone httpsgithubcomrockoragercomlink cd comlink zig build doptimizereleasesafe prefix local   configuration configuration is loaded from homeconfigcomlinkinitlua works best with soju picosh runs a free instance of soju and has fantastic documentationhttpspicoshirc on how to get connected lua local comlink  requirecomlink local config   server  chatsrht user  rockorager nick  rockorager password  password realname  tim culverhouse tls  true   pass the server config to connect connect to as many servers as you need comlinkconnectconfig  bind a key to an action comlinkbindctrlc quit   contributing patches accepted on the mailing listhttpslistssrhtrockoragercomlink pull requests accepted on githubhttpsgithubcomrockoragercomlink ","r4gus/keypass":"passkeez is a fido2/ passkey compatible authenticator implementation for linux  passkeez a fido2 passkey compatible authenticator for linux based on keylibhttpsgithubcomr4guskeylib the project exclusively supports linux due to the absence of a standardized api for interprocess communication ipc between the client and authenticator as a workaround platform authenticators on linux act as virtual usb hid devices utilizing uhid however extending this functionality to other platforms remains unexplored as i havent had the opportunity to investigate the equivalent mechanisms elsewhere  browser  supported  tested version notes    cromium  9989  11906045159 official build arch linux 64bit    brave  9989  version 162153 chromium 1210616785 official build 64bit    firefox  9989  1220 64bit    opera  9989  version 1050497016 chromium 11906045159    note  all tests were conducted using passkey for github  important  browsers running in sandboxed environments might not be able to communicate with the authenticator out of the box eg when installing browsers with the ubuntu app center  features  works with all services that support passkeys  store your passkeys just a private key  related data in a local encrypted database  constant signcounter ie you can safely sync your credentialspasskeys between devices  note  the release of version 030 removed the gui this means that you need version 025 if  you want to delete credentials a upcoming update will add credential management which  should also allow to modify credentials using a tool like fido2token the overall goal  is to write a dedicated tool that allows the configuration of passkeez via official commands  install this project is installed by running the following command in your terminal  beta  sudo bash c curl fssl httpsrawgithubusercontentcomr4guskeypassmasterscriptinstallbetash   note  the following dependencies are required   curl   git   libgtk30 the script will make the following modifications  passkeez is installed to usrlocalbin  zigenity used for the user interface is installed to usrlocalbin  the user is added to the fido group  a udev rule is copied to etcudevrulesd90uinputrules  the uhid module is added to etcmodulesloaddfidoconf  note  databases generated by older versions are not compatible  database management currently the only way to manage your credentials is by using the ccdb command line applicationhttpsgithubcomr4gusccdb  file synchronization you can synchronize your database files using a service like syncthinghttpsdocssyncthingnetintrogettingstartedhtml between your devices this allows you to use the same passkeys to login to your accounts on multiple devices  syncthing please see the getting started guidehttpsdocssyncthingnetintrogettingstartedhtml on how to setup syncthing on your device make sure you also setup syncthing to startup automaticallyhttpsdocssyncthingnetusersautostarthtmllinux to prevent a situation where your databases are out of sync  note for now please make sure that you dont have the same database open on multiple devices simultaneously  contributing currently this application and the surrounding infrastructure keylibhttpsgithubcomr4guskeylib zborhttpsgithubcomr4guszbor tresorhttpsgithubcomr4gustresor is only maintained by me one exception is the graphics library dvuihttpsgithubcomdavidvandersondvui i use for the frontend if you find a bug or want to help out feel free to either open a issue for one of the mentioned projects or write me a mail all contributions are wellcome including  bug fixes  documentation  new features  support for other systems linux distros oss     qa details summaryinswhat is this project aboutinssummary fido2 stands as a dedicated authentication protocol crafted for diverse authentication needs whether employed as a standalone method supplanting traditional passwordbased authentication or as an additional layer of security fido2 serves both purposes the fido alliance has actively advocated for the widespread adoption of this protocol for several years with 2023 witnessing a substantial surge in its adoption however its crucial to note that fido2 introduces a heightened level of complexity in comparison to conventional passwords notably the use of roaming authenticators such as yubikey can be a costintensive aspect upon initiating the keylib project in october 2022 my primary objective was to develop a library empowering individuals to transform their own hardware such as esp32 into a functional authenticator i believe ive achieved this goal successfully however during this process i also recognized the evolving trend favoring hybridplatform authenticators with discoverable credentials now commonly marketed as passkeys while traditional authenticators like yubikeys provide robust protection against various attacks they come with notable drawbacks their high cost limited updatepatching capabilities and restricted storage for discoverable credentials for instance my yubikey 5 supports around 25 credentials underscore these challenges additionally the inability to back up data although enhancing confidentiality poses availability concerns the official solution offered for this predicament is surprisingly simple buy a second one conversely platform authenticators present a more flexible and costeffective alternative unlike traditional counterparts they can undergo regular updates and patches akin to any software component furthermore these authenticators permit the backup and secure sharing of credentials leveraging an encrypted database within this project one key advantage lies in their costeffectiveness eliminating the need for additional hardware when implemented with precision platform authenticators can attain a commendable level of security providing a compelling alternative to their more expensive counterparts the primary objective of this project is to furnish an alternative keeping in mind that the term alternative is subjective and due to resource constraints i may not offer a polished commercialgrade product to existing commercial passkey implementations details details summaryinswhat is fido2 passkeyinssummary please read the qa of the keylibhttpsgithubcomr4guskeylib project details   showcase table tr tdimg srcstaticloginpng width400td tdimg srcstaticnewdatabasepng width400td tr tr tdimg srcstaticmainpng width400td tdimg srcstaticassertionpng width400td","kubkon/zacho":"zig's mach-o parser  zacho or zigs macho parser this project started off as a dummy scratchpad for reinforcing my understanding of the macho file format while i was working on the zigs stage2 macho linker i still am working on it in case anyone was asking my current vision for zacho is for it to be a crossplatform version of otool and pagestuff macos utilities these seem to be very useful when battling the darwin kernel and dyld when those refuse to load your handcrafter binary or you just like looking at macho dissected output  usage  usage zacho options file general options c codesignature print the contents of code signature if any d dyldinfo print the contents of dyld rebase and bind opcodes e exportstrie print export trie if any h header print the macho header i indirectsymboltable print the indirect symbol table l loadcommands print load commands r relocations print relocation entries if any s symboltable print the symbol table u unwindinfo print the contents of compact unwind info section if any v verbose print more detailed info for each flag archiveindex print archive index if any stringtable print the string table dataincode print dataincode entries if any hexdumpname dump section contents as bytes stringdumpname dump section contents as strings verifymemorylayout print virtual memory layout and verify there is no overlap help display this help and exit   building from source building from source requires zig 013httpsziglangorgdownload   git clone httpsgithubcomkubkonzachogit  zig build  ","kassane/llvm-zig":"llvm bindings written in zig  llvm kaleidoscope written on zig the purpose of this repository is to learn about the llvmllvm compiler infrastructure and practice some ziglangzig to reach the goals set we follow the official llvm tutorial kaleidoscope implementing a language with llvmllvmtutorial this tutorial is written in c and structured in multiple chapters we will try to follow along and implement every chapter in zig  requirement  zig v0130httpsziglangorgdownload or higher  references  rust  go  c         llvmsys  inkwell  gollvm  llvmc   llvmkaleidoscopers  llvmtutokaleidoscopegolang  llvmckaleidoscope   license this project is licensed under the mitlicense license llvm httpsllvmorg llvmsys httpsgitlabcomtaricorpllvmsysrs gollvm httpsgithubcomtinygoorggollvm inkwell httpsgithubcomthedan64inkwell llvmkaleidoscopers httpsgithubcomjohannstllvmkaleidoscopers llvmckaleidoscope httpsgithubcombenbjohnsonllvmckaleidoscope llvmtutokaleidoscopegolang httpsgithubcomvhiribarrenllvmtutokaleidoscopegolang llvmtutorial httpsllvmorgdocstutorialmyfirstlanguagefrontendindexhtml llvmch1 httpsllvmorgdocstutorialmyfirstlanguagefrontendlangimpl01html llvmch2 httpsllvmorgdocstutorialmyfirstlanguagefrontendlangimpl02html llvmch3 httpsllvmorgdocstutorialmyfirstlanguagefrontendlangimpl03html llvmch4 httpsllvmorgdocstutorialmyfirstlanguagefrontendlangimpl04html llvmch5 httpsllvmorgdocstutorialmyfirstlanguagefrontendlangimpl05html zig httpsziglangorg","joegm/flags":"an effortless command-line argument parser for zig.  flags an effortless commandline argument parser for zig  features  zero allocations  cross platform  singlefunction declarative api  multilevel subcommands  automatic help message generation at comptime  customisable terminal coloring  getting started to import flags to your project run the following command  zig fetch save githttpsgithubcomn0s4flags  then set up the dependency in your buildzig zig const flagsdep  bdependencyflags  target  target optimize  optimize  exerootmoduleaddimportflags flagsdebmoduleflags  see the examplesexamples for basic usage ","speed2exe/myzql":"mysql and mariadb  driver in native zig  myzql  mysql and mariadb driver in native zig  status  beta  version compatibility  myzql  zig    0091  0120   0132  0130   0140  0140   main  0140   features  native zig code no external dependencies  tcp protocol  prepared statement  structs from query result  data insertion  mysql datetime and time support  requirements  mysqlmariadb 575 and up  todos  config from url  connection pooling  tls support  add as dependency to your zig project  buildzig zig  const myzqldep  bdependencymyzql  const myzql  myzqldepmodulemyzql exeaddmodulemyzql myzql    buildzigzon zon   dependencies   myzql    choose a tag according to version compatibility table url  httpsgithubcomspeed2exemyzqlarchiverefstags0132targz hash  1220582ea45580eec6b16aa93d2a9404467db8bc1d911806d367513aa40f3817f84c       usage  project integration example usagehttpsgithubcomspeed2exemyzqlexample  connection zig const myzql  importmyzql const conn  myzqlconnconn pub fn main void   setting up client var client  try conninit allocator  username  someuser  default root password  password123  default  database  customers  default   current default value  use stdnetgetaddresslist if you need to look up ip based on hostname address  stdnetaddressinitip4 127 0 0 1  3306     defer clientdeinit  connection and authentication try clientping    querying zig const okpacket  protocolgenericresponseokpacket pub fn main void     you can do a text query text protocol by using query method on conn const result  try cquerycreate database testdb  query results can have a few variant   ok okpacket  query is ok   err errorpacket  error occurred  in this example res will either be ok or err  we are using the convenient method expect for simplified error handling  if the result variant does not match the kind of result you have specified  a message will be printed and you will get an error instead const ok okpacket  try resultexpectok  alternatively you can also handle results manually for more control  here we do a switch statement to handle all possible variant or results switch resultvalue  ok  ok   aserror is also another convenient method to print message and return as zig error  you may also choose to inspect individual fields for more control err  err return erraserror     querying returning rows text results  if you want to have query results to be represented by custom created structs this is not the section scroll down to executing prepared statements returning results instead zig const myzql  importmyzql const queryresult  myzqlresultqueryresult const resultset  myzqlresultresultset const resultrow  myzqlresultresultrow const textresultrow  myzqlresulttextresultdata const resultsetiter  myzqlresultresultsetiter const tabletexts  myzqlresulttabletexts const textelemiter  myzqlresulttextelemiter pub fn main void  const result  try cqueryrowsselect  from customerspurchases  this is a query that returns rows you have to collect the result  you can use expectrows to try interpret query result as resultsettextresultrow const rows resultsettextresultrow  try queryresexpectrows  allocation free interators const rowsiter resultrowitertextresultrow  rowsiter   option 1 iterate through every row and elem while try rowsiternext row   resultrowtextresultrow var elemsiter textelemiter  rowiter while elemsiternext elem    const u8 stddebugprints  elem      option 2 iterating over rows collecting elements into const const u8 while try rowsiternext row  const textelems textelems  try rowtextelemsallocator defer textelemsdeinitallocator  elems are valid until deinit is called const elems const const u8  textelemselems stddebugprintelems anyn elems    you can also use collecttexts method to collect all rows  under the hood it does network call and allocations until eof or error  results are valid until deinit is called on tabletexts const rows resultsettextresultrow  try queryresexpectrows const table  try rowstabletextsallocator defer tabledeinitallocator  table is valid until deinit is called stddebugprinttable anyn tabletable    data insertion  lets assume that you have a table of this structure sql create table testperson  id int not null autoincrement primary key name varchar255 age int   zig const myzql  importmyzql const queryresult  myzqlresultqueryresult const preparedstatement  myzqlresultpreparedstatement const okpacket  myzqlprotocolgenericresponseokpacket pub fn main void   in order to do a insertion you would first need to do a prepared statement  allocation is required as we need to store metadata of parameters and return type const prepres  try cprepareallocator insert into testperson name age values   defer prepresdeinitallocator const prepstmt preparedstatement  try prepresexpectstmt  data to be inserted const params    john 42   sam 24   inline for params param  const exeres  try cexecuteprepstmt param const ok okpacket  try exeresexpectok  expecting ok here because theres no rows returned const lastinsertid u64  oklastinsertid stddebugprintlastinsertid anyn lastinsertid   currently only tuples are supported as an argument for insertion  there are plans to include named structs in the future    executing prepared statements returning results as structs zig const resultsetiter  myzqlresultresultsetiter const queryresult  myzqlresultqueryresult const binaryresultrow  myzqlresultbinaryre","judofyr/parg":"lightweight argument parser for zig  parg parg is a lightweight argument parser for zig which focuses on a single task parsing commandline arguments into positional arguments and longshort flags it doesnt concern itself anything else you may find this useful as a quick way of parsing some arguments or use it as a building block for a more elaborate cli toolkit  features  nonfeatures  parses commandline arguments into positional arguments long flags and short flags  provides an iterator interface while parsernext token   supports boolean flags force f  supports multiple short flags avz  values can be provided as separate arguments message hello with a delimiter messagehello and also part of short flag mhello  automatically detects  and skips any further parsing  licensed under 0bsd  usage the principles of parg are as follows  use parseprocess parseslice or parse to create a new parser  remember to call deinit when youre done with the parser  call next in a loop to parse arguments  call nextvalue whenever you need a plain value  theres a few more knobs you can tweak with lets go over these steps a bit more in detail  create a new parser instance theres three ways of creating a parser instance all of these accept some options as the last argument zig const parg  importparg  1 parse arguments given to the current process var p  try pargparseprocessallocator   2 parse arguments from a const const u8 var p  pargparsesliceslice   3 parse arguments from an iterator advanced usage var p  pargparseit   always remember to deinit defer pdeinit  in addition remember that the first parameter given to a process is the file name of the executable you typically want to call nextvalue to retrieve this value before you continue parsing any arguments zig const programname  pnextvalue orelse panicno executable name   parsing boolean flags and positional arguments once you have a parser you want to call next in a loop this returns a token which has three different possibilities  flag when it encounters a flag eg verbose or v this flag has a name field which contains the name of the flag without the dashes and a kind field if you need to distinguish between long and short flags there are also a helper functions islong and isshort to easily check the name of the field  arg when it encounters a positional argument  unexpectedvalue when it encounters an unexpected value you should just quit the program with an error when this happens well come back to this in the next section also note that this will automatically split up short flags as expected if you give the program fv then next will first return a flag with name f and then a flag with name v zig  see examplesex1zig for full example var verbose  false var force  false var arg const u8  null while pnext token  switch token  flag  flag  if flagislongforce or flagisshortf  force  true  else if flagislongverbose or flagisshortv  verbose  true  else if flagislongversion  stddebugprintv1n  stdosexit0   arg  val  if arg  null paniconly one argument supported arg  val  unexpectedvalue  panicunexpected value     parsing flags with values when you find a flag which require a value you need to invoke nextvalue this returns an optional slice zig  see examplesex2zig for full example while pnext token  switch token  flag  flag  if flagislongfile or flagisshortf  file  pnextvalue orelse panicfile requires value  else if flagislongverbose or flagisshortv  verbose  true  else if flagislongversion  stddebugprintv1n  stdosexit0   arg  panicunexpected argument unexpectedvalue  panicunexpected value    all of these will be treated the same way  file buildzig  filebuildzig  f buildzig  fbuildzig  fbuildzig most notably notice that when you call nextvalue it will break out of parsing short flags without the call to nextvalue the code would parse fbuildzig as the short flags f b u and so on this also explains the need for unexpectedvalue in next if you pass forceyes to the first example it will parse the force as a long flag when you then dont invoke nextvalue since its a boolean flag then we need to later bail out since we didnt expect a value  options and other functionality theres currently only one option which you configure when instantiate the parser  autodoubledash defaults to true when this is true it will look for  and then stop parsing anything as a flag your program will not observe the  token at all and all tokens after this point will be returned as arg even though they start with a dash when this is false it will return  as a regular argument arg and argument parsing will continue as usual theres also one additional method  pskipflagparsing this turns off any further argument parsing all tokens after this point will be returned as arg even though they start with a dash ","games-by-mason/shader_compiler":"glslang ported to be usable via zig's build system.  shader compiler a command line tool that compiles glsl shaders to spirv and optimizes them using glslangzighttpsgithubcomgamesbymasonglslangzig remap is also supported results in better compression spirv is validated before results are written  usage note that the initial compile will take quite while as its building the shader c implementation of the shader compiler once this finishes it will be cached example usage sh zig build run  target vulkan13 optimizeperf inputglsl outputspv  example usage from zigs build system zig const compileshader  baddrunartifactshadercompilerexe compileshaderaddargs target vulkan13  switch optimize  debug  compileshaderaddargs robustaccess  releasesafe  compileshaderaddargs optimizeperf robustaccess  releasefast  compileshaderaddargs optimizeperf  releasesmall  compileshaderaddargs optimizeperf optimizesmall   compileshaderaddfileargbpathpath return compileshaderaddoutputfileargcompiledspv   glarbshadinglanguageinclude glslang supports include via the glarbshadinglanguageincludehttpsregistrykhronosorgopenglextensionsarbarbshadinglanguageincludetxt extension you can enable it in your shaders like this glsl extension glarbshadinglanguageinclude  require  you will also need to specify at least one include path via includepath multiple can be specified by passing the arg more than once if calling via zigs build system use writedeps for proper caching behavior command line  zig build run  target vulkan13 includepath include shadervert shaderspv  zig build system zig compileshaderaddargincludepath compileshaderadddirectoryargbpathinclude compileshaderaddargwritedeps   compileshaderadddepfileoutputargdepsd  you can now include files in your shaders glsl include fooglsl  for details on inclusion syntax and path resolution see the extension specificationhttpsregistrykhronosorgopenglextensionsarbarbshadinglanguageincludetxt ","zenolith-ui/zenolith":"the gui engine to end them all! mirror of https://git.mzte.de/zenolith/zenolith logoassetslogosvg  zenolith zenolith is my attempt at a retainedmode platformagnostic zignative gui engine join the matrix room herehttpsmatrixtozenolithmztede warning zenolith is in an extremely early stage many important features such as text editing are not yet implemented expect breaking changes  attention github users zenolith is mirrored on github to make it easier to discover however this mirror is readonly do not open issues or pull requests on github all development happens on mzte githttpsgitmztedezenolithzenolith  contributing pull requests are always welcome if youd like to fix a bug improve documentation or implement a feature on the todo list below go ahead if youd like to suggest a new feature or design change please open an issue first to discuss it all commits must follow conventional commitshttpswwwconventionalcommitsorg  todo  x painter api  x rectangles  x textures  x text  x multicolor chunks  x multifont chunks    triangles    matrix transformations    drawing of partial widgets    stencils  x widgets  x box flowboxlike algorithm  x button  x label  x word wrapping  x character wrapping    ellipsization    text edit    single line    multi line    tabbed pane    split pane    scrolled pane  x focus system  x theming  x builtin themes    layout overflow handling  x logo  x treevents treebound downwards events  x backevents treebound upwards events  x platform events platform event loop events  x wrap backevents  x attreebutes treebound inhereted widget properties    documentation  x incode    book    examples    cicd  x sdl2 backendhttpsgitmztedezenolithzenolithsdl2    mach backend    tui backend    wasm backend    lazy rendering of subtrees  gallery early test guiassetsearlytestguipng ","r4gus/zbor":"cbor parser written in zig  zbor  zig cbor githubhttpsimgshieldsiogithublicenser4guszborstyleflatsquare github workflow statushttpsimgshieldsiogithubactionsworkflowstatusr4guszbormainymlstyleflatsquare github all releaseshttpsimgshieldsiogithubdownloadsr4guszbortotalstyleflatsquare the concise binary object representation cbor is a data format whose design goals include the possibility of extremely small code size fairly small message size and extensibility without the need for version negotiation rfc8949httpswwwrfceditororgrfcrfc8949htmlabstract it is used in different protocols like the client to authenticator protocol ctap2httpsfidoallianceorgspecsfidov20ps20190130fidoclienttoauthenticatorprotocolv20ps20190130htmlctap2canonicalcborencodingform which is a essential part of fido2 authenticators passkeys i have utilized this library in several projects throughout the previous year primarily in conjunction with my fido2 libraryhttpsgithubcomr4gusfido2 id consider it stable with the introduction of zig version 0110httpsziglangorgdownload this library will remain aligned with the most recent stable release if you have any problems or want to share some ideas feel free to open an issue or write me a mail but please be kind  getting started versions  zig version  zbor version    0130  0150 0151 0152   0140  0160 0170  first add this library as a dependency to your buildzigzon file bash  replace version tag with the version you want to use zig fetch save httpsgithubcomr4guszborarchiverefstagsversion tagtargz  then within you buildzig add the following code zig  first fetch the dependency const zbordep  bdependencyzbor  target  target optimize  optimize  const zbormodule  zbordepmodulezbor  if you have a module that has zbor as a dependency const yourmodule  baddmoduleyourmodule  rootsourcefile   path  srcmainzig  imports    name  zbor module  zbormodule     or as a dependency for a executable exerootmoduleaddimportzbor zbormodule   usage this library lets you inspect and parse cbor data without having to allocate additional memory  inspect cbor data to inspect cbor data you must first create a new dataitem zig const cbor  importzbor const di  dataitemnewx1bxffxffxffxffxffxffxffxff catch   handle the case that the given data is malformed   dataitemnew will check if the given data is wellformed before returning a dataitem the data is well formed if its syntactically correct to check the type of the given dataitem use the gettype function zig stddebugassertdigettype  int  possible types include int major type 0 and 1 bytestring major type 2 textstring major type 3 array major type 4 map major type 5 tagged major type 6 and float major type 7 based on the given type you can the access the underlying value zig stddebugassertdiint  18446744073709551615  all getter functions return either a value or null you can use a pattern like if diint v v else return erroroops to access the value in a safe way if youve used dataitemnew and know the type of the data item you should be safe to just do diint the following getter functions are supported  int  returns i65  string  returns const u8  array  returns arrayiterator  map  returns mapiterator  simple  returns u8  float  returns f64  tagged  returns tag  boolean  returns bool  iterators the functions array and map will return an iterator every time you call next you will either get a dataitem pair or null zig const di  dataitemnewx98x19x01x02x03x04x05x06x07x08x09x0ax0bx0cx0dx0ex0fx10x11x12x13x14x15x16x17x18x18x18x19 var iter  diarray while iternext value    value  doe something    encoding and decoding  serialization you can serialize zig objects into cbor using the stringify function zig const allocator  stdtestingallocator var str  stdarraylistu8initallocator defer strdeinit const info  struct  versions const const u8  const i  info versions  fido20  try stringifyi  strwriter   note compile time floats are always encoded as single precision floats f32 please use floatcast  before passing a float to stringify the stringify function is convenient but also adds extra overhead if you want full control over the serialization process you can use the following functions defined in zborbuild writeint writebytestring writetextstring writetag writesimple writearray writemap for more details check out the manual serialization exampleexamplesmanualserializationzig and the corresponding source codesrcbuildzig  stringify options you can pass options to the stringify function to influence its behavior without passing any options stringify will behave as follows  enums will be serialized to their textual representation  u8 slices will be serialized to byte strings  for structs and unions  null fields are skipped by default  fields of type stdmemallocator are always skipped  the names of fields are serialized to text strings you can modify that behavior by changing the default options eg zig const ecdsap256key  struct   kty kty u8  2  alg alg i8  7  crv crv u8  1  xcoordinate x 32u8  ycoordinate y 32u8 pub fn newk ecdsap256publickey this  const xy  ktouncompressedsec1 return  x  xy133 y  xy3365     try stringifyk  fieldsettings    name  kty fieldoptions   alias  1 serializationtype  integer    name  alg fieldoptions   alias  3 serializationtype  integer    name  crv fieldoptions   alias  1 serializationtype  integer    name  x fieldoptions   alias  2 serializationtype  integer    name  y fieldoptions   alias  3 serializationtype  integer     strwriter  here we define a alias for every field of the struct and tell serialize that it should treat those aliases as integers instead of text strings see o","ziglibs/antiphony":"a zig remote procedure call solution  antiphony a simple zig remote procedure call library project logodesignlogopng  features  transport layer agnostic  support for nearly every nongeneric function signature  nestable remote calls peer calls host calls peer calls host calls   easy to use  api zig  comptime details left out for brevity pub fn createdefinitionspec anytype type  return struct  pub fn hostendpointreader type writer type implementation type type  return createendpointhost reader writer implementation  pub fn clientendpointreader type writer type implementation type type  return createendpointclient reader writer implementation  pub fn createendpointrole role readertype type writertype type implementationtype type type  return struct  const endpoint  this pub const reader  reader pub const writer  writer pub const implementation  implementation pub const ioerror  error   pub const protocolerror  error   pub const invokeerror  error   pub const connecterror  error   pub fn initallocator stdmemallocator reader reader writer writer endpoint pub fn destroyself endpoint void pub fn connectself endpoint impl implementation connecterrorvoid pub fn shutdownself endpoint ioerrorvoid pub fn acceptcallsself endpoint invokeerrorvoid pub fn invokeself endpoint funcname const u8 args anytype invokeerrorresultfuncname      example for createdefinitionspec const definition  antiphonycreatedefinition host    add all functions the host implements createcounter  fn  createerroru32 destroycounter  fn u32 void increment  fn u32 u32 usageerroru32 getcount  fn u32 usageerroru32  client    add all functions the client implements signalerror  fn msg const u8 void   this is optional and can be left out config    defines how to handle remote error sets mergeerrorsets  true     project status this project is currently in testing phase all core features are already implemented and functional  contribution contributions are welcome as long as they dont change unnecessarily increase the complexity of the library this library is meant to be the bare minimum rpc implementation that is well usable bug fixes and updates to new versions are always welcome  compile and run the examples shsession userhost antiphony zig build install userhost antiphony zigoutbinsocketpairexample info first increment 0 info second increment 5 info third increment 8 info final count 15 error remote error this counter was already deleted info error while calling getcount with invalid handle unknowncounter userhost antiphony   run the test suite shsession userhost antiphony zig build test test 36 test invoke function emulated client no self parameter some1334 31415927410125732 hello host test 46 test invoke function emulated client with self parameter some123 1334 31415927410125732 hello host test 56 test invoke function with callback emulated host no self parameter callbackhello world test 66 test invoke function with callback emulated host with self parameter callbackclientimpl7ffd33f6cdc0 hello world all 6 tests passed userhost antiphony  ","nektro/zig-pek":"a comptime html preprocessor with a builtin template engine for zig.  pek a comptime html preprocessor with a builtin template engine for zig  example document fsharp htmllangen head titlepek example metacharsetutf8 metanameviewport contentwidthdevicewidthinitialscale1  body h1pek example hr pthis is an example html document written in ahrefhttpsgithubcomnektrozigpekpek     example usage srcmainzigsrcmainzig  built with  zighttpsgithubcomziglangzig master  zigmodhttpsgithubcomnektrozigmod package manager  add me   zigmod aq add 1nektropek  ","speed2exe/tree-fmt":"tree-like pretty formatter for zig  tree formattar for zig  pretty prints out zig values for your debugging needs  if you faces any issue with formatting kindly open an issue  versioning  current main branch tracks zig latest version  if you need a stable version see release tags  objective  provide a colored treelike visual representation of a zig value to aid in debugging  features  colored output to distinguish between types and values  indentation to show the structure of the value  special formatters for following types do file a pr or fr if you think there are more types that can require special formatting  stdmultiarraylist  stdhashmapunmanaged  screenshot screenshotimagesscreenshotpng  example  you can run on of the examples in the examples by executing the following command bash zig build test dtestfilteranon struct 1   you might need to require to remove zigcache to run it again without changes  usage  zig package manager example httpsgithubcomspeed2exetreefmtexample  zigbuildzon zon  name  yourpackagename version  001 dependencies   treefmt    c6398b225f15cdbe35b3951920f634ffd1c65c12 is just commit hash url  httpsgithubcomspeed2exetreefmtarchivec6398b225f15cdbe35b3951920f634ffd1c65c12targz  just do zig build get the error code and replace with expected hash hash  12201dceb9a9c2c9a6fc83105a7f408132b9ab69173b266e7df2af2c1dd6f814cd51   paths        buildzig zig pub fn buildb stdbuild void    const dep  bdependencytreefmt  const treefmt  depmoduletreefmt yourprogramrootmoduleaddimporttreefmt treefmt    quick setup  fastest and easiest way to if you want to save time and effort  this example is in exampledefaulttreeformatterzig zig var treeformatter  importtreefmtdefaultformatter pub fn main void  const mystruct   1 24 hi  try treeformatterformatmystruct  name  mystruct  optional just an identifier to the root of the tree     output  someanonstruct tuplecomptime comptimeint  1 comptime comptimefloat  24 comptime const 20u8  hi 0 comptimeint  1 1 comptimefloat  24e00 2 const 20u8 21d169  20u8 hi 0 u8  104 1 u8  105   proper setup  this is recommended as it gives you more control over writer allocator and settings zig const std  importstd  add imports here const treeformatter  importtreefmttreeformatter pub fn main void   initialize your allocator var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer  const leaked  gpadeinit if leaked  panicleaked memory    initialize a writer stdiowriter  tips if you print a lot wrap with stdiobufferedwriter to improve performance var w  stdiogetstdoutwriter  initialize treeformatter with allocator and writer var treeformatter  treeformatterallocator w  initialize your value var sentinelarray 0const u8  hello world  call the method with writer and value try treeformatterformatvaluewithidsentinelarray   name  sentinelarray  example setting  you can find settings at importsrctreefmtzigtreeformattersettings  you can also leave it blank to use default settings     output  sentinelarray 0const u8 20a71e hello world 0 u8  104 1 u8  101 2 u8  108 3 u8  108 4 u8  111 5 u8  32 6 u8  119 7 u8  111 8 u8  114 9 u8  108  showed first 10 out of 11 items only   you can find other examples in the examples directory to run specific examples bash zig build test dtestfiltername of test  eg zig build test dtestfilteranon struct 1   example  stdarraylistu8   arraylistarraylistalignedu8null items u8 7efcc912f000  0 u8  0  1 u8  1  2 u8  2  3 u8  3  4 u8  4   showed first 5 out of 100 items only capacity usize  105 allocator memallocator ptr anyopaque 7fffadc5b3d8 vtable const memallocatorvtable 202a38  memallocatorvtable alloc const fnanyopaque usize u8 usize u8 238e00 resize const fnanyopaque u8 u8 usize usize bool 2393c0 free const fnanyopaque u8 u8 usize void 23a2d0   stdautohashmapu8 u8  map hashmaphashmapu8u8hashmapautocontextu880 unmanaged hashmaphashmapunmanagedu8u8hashmapautocontextu880  iterator   next hashmaphashmapunmanagedu8u8hashmapautocontextu880entry    keyptr u8 7fcad47f5021      u8  1    valueptr u8 7fcad47f5029     u8  2   next hashmaphashmapunmanagedu8u8hashmapautocontextu880entry    keyptr u8 7fcad47f5022      u8  0    valueptr u8 7fcad47f502a     u8  0   next hashmaphashmapunmanagedu8u8hashmapautocontextu880entry   keyptr u8 7fcad47f5026     u8  2   valueptr u8 7fcad47f502e    u8  4  metadata hashmaphashmapunmanagedu8u8hashmapautocontextu880metadata    hashmaphashmapunmanagedu8u8hashmapautocontextu880metadata 7fcad47f5018  size u32  3  available u32  3 allocator memallocator  ptr anyopaque 7ffc3b6baca0  vtable const memallocatorvtable 2045b8   memallocatorvtable  alloc const fnanyopaque usize u8 usize u8 2433a0  resize const fnanyopaque u8 u8 usize usize bool 243960  free const fnanyopaque u8 u8 usize void 244870 ctx hashmapautocontextu8     stdmultiarraylist see examplemultiarraylistzig  multiarraylist multiarraylistmultiarraylistexamplemultiarraylistperson slice multiarraylistmultiarraylistexamplemultiarraylistpersonslice  items  id u64 7f8cf20c3000   0 u64  0   1 u64  1   2 u64  2   ","ziglibs/tres":"valuetree-based json parser  tres stdjsonparse but on valuetrees stringify that supports undefinedables arraylists and hashmaps  features  parse stdjsonvalue  t  stringify t  const u8  tovalue t  stdjsonvalue all the above modes support stdjson standard features as well as  enhanced optionals tresnullmeaning see test parse and stringify null meaning  string enums tresstringenum see test jsonstringify enums  field name remapping tresremap see test remapping  map and arraylist support unmanaged too  license mit ","ringtailsoftware/commy":"a serial monitor for mac, linux and windows  commy a serial monitor commy is a small console utility for communicating with tty uart or com port devices it runs on mac linux and windows windows support is experimental bug reports appreciated does some of the same things as tiohttpsgithubcomtiotio minicomhttpsenwikipediaorgwikiminicom screenhttpswwwgnuorgsoftwarescreen minitermpyhttpsgithubcompyserialpyserialblobmasterserialtoolsminitermpy zcomhttpsgithubcomzigembeddedgroupzcom puttyhttpswwwputtyorg etc commy incorporates a vt220xtermecma48 terminal emulator for consistency whether running in windows terminalhttpsgithubcommicrosoftterminal xtermhttpsenwikipediaorgwikixterm or terminalapphttpsenwikipediaorgwikiterminalmacos mac windows linuxhttpsgithubcomringtailsoftwarecommyactionsworkflowsbuildymlbadgesvg demogif  build from source use zig 0140 shell zig build zigoutbincommy h  the binary is shell zigoutbincommy  copy it to a directory in your path for easy access shell sudo cp zigoutbincommy usrlocalbin  or if you prefer let zig install it in your home directory assuming localbin is in your path shell zig build doptimizereleasesafe prefix local  commy is a single statically linked binary no further runtime files are required you may install it on another system by simply copying the binary it can be cross compiled using zigs dtarget shell zig build dtargetx8664windows   typical use list available serial ports shell commy l devcuusbmodem1124101 devcuusbmodem1124203  connect to a port shell commy devcuusbmodem1124203 115200  commy will try to find available ports which match so connecting to devttyusb0 can be written as shell commy usb0 115200  the status bar at the top shows keyboard shortcuts press ctrla then q  or x to quit log data received from a device only received data will be logged unless local echo is enabled shell commy devcuusbmodem1124203 115200 o logtxt  enable local echo of sent data used for devices which do not echo back characters they receive shell commy devcuusbmodem1124203 115200 e   scrollback commy supports moving back and forwards in terminal history however unlike some serial monitors it stores screen updates rather than lines of incoming text this means that a terminal ui can be rewound and replayed in time visually to enter scrollback press ctrla then use updownpageuppagedown to move through terminal history to run commy with a longer scrollback history use a larger b value scrollbackgif  why use commy it tells you how to quit commy does what i use gnu screen for but its better in two important respects first it is slightly smaller and secondly it has the words ctrla and quit inscribed in large friendly letters on its cover  help text usage commy args options args port serial port file speed baudrate options v version version l list list available serial ports e echo enable local echo o outputoutput log to file p parityparity parity values  none even odd mark space  w wordsizewordsize wordsize values  five six seven eight  s stopstop stop values  one two  f flowflow flow values  none software hardware  b bufferbuffer scrollback buffer size h help print this help and exit  testing if no serial device is available commy can connect to a linux serial terminal inside docker from here any standard linux terminal software can be used shell cd linuxtest lincommysh  this will build commy then build a docker container and start it inside the container socat will create a virtual serial port and bind it to bash commy will then connect to the virtual serial port quitting commy will close down the docker container ","cryptocode/marble":"a metamorphic testing library for zig img alignright width320 srchttpsuserimagesgithubusercontentcom34946442159163318432052e369c74598aaac74d54f67c8b4png marble is a metamorphic testinghttpsenwikipediaorgwikimetamorphictesting library for zig this library tracks zig master and was last tested on 0140dev3187d4c85079c metamorphic testing is a powerful technique that provides additional test coverage by applying a number of transformations to test input and then checking if certain relations still hold between the outputs marble will automatically run through all possible combinations of these transformations heres a great introduction byhttpswwwcockroachlabscomblogmetamorphictestingthedatabase cockroach labs i highly recommend reading before using this library the repository contains a few test exampleshttpsgithubcomcryptocodemarbleblobmainsrcexampletestszig  resources  hillel waynes blog post on metamorphic testing highly recommendedhttpswwwhillelwaynecompostmetamorphictesting  test your machine learning algorithm with metamorphic testinghttpsmediumcomtrustableaitestingaiwithmetamorphictesting61d690001f5c  original paper by ty chen et alhttpswwwcseusthksccpublcs9801metamorphictestingpdf  case study ty chen et alhttpgriseupmesrearviewmirrorconferenciasjiisic04papers25pdf  metamorphic testing and beyond ty chen et alhttpswwwcshkuhkdatatechrepsdocumenttr200306pdf  survey on metamorphic testinghttpwwwcsecuedureureufilesreadmetamorphictesting16pdf  performance metamorphic testinghttpwwwlsiusesjtroyapublicationsnier17aticse17pdf  experiences from three fuzzer toolshttpsjohnwickersongithubiopapersdreamingupmet21pdf  monarch a similar library for rusthttpsgithubcomzmitchellmonarchblobmastersrcrunnerrs  building to build and run test examples bash zig build zig build test   importing the library add marble as a zig package in your build file or simply import it directly after vendoringadding a submodule zig const marble  importmarblemainzig   writing tests a metamorphic zig test looks something like this zig const sinustest  struct  const tolerance  stdmathepsilonf64  20  this test has a single value but you could also design the test to take an  array as input the transformations check and execute functions would then  loop through them all alternatively the test can be run multiple times  with different inputs value f64  the mathematical property sinx  sin  x must hold pub fn transformpiself sinustest void  selfvalue  stdmathpi  selfvalue   adding half the epsilon must still cause the relation to hold given the tolerance pub fn transformepsilonself sinustest void  selfvalue  selfvalue  stdmathepsilonf64  20   a metamorphic relation is a relation between outputs in different executions  this relation must hold after every execution of transformation combinations pub fn check sinustest originaloutput f64 transformedoutput f64 bool  return stdmathapproxeqabsf64 originaloutput transformedoutput tolerance   called initially to compute the baseline output and after every transformation combination pub fn executeself sinustest f64  return stdmathsinselfvalue   test sinus  var i f64  1 while i  100  i  1  var t  sinustest value  i  try stdtestingexpecttry marblerunsinustest t     you will get compile time errors if the requirements for a metamorphic test are not met in short you must provide a value field a check function an execute function and one or more transform functions  writing transformations add one or more functions starting with transform marble will execute all combinations of the transformation functions after every combination execute is called followed by check transformations should change the value property  marble will remember what it was originally the transformations must be such that check succeeds that is the relations between the inital output and the transformed output must still hold  checking if relations still hold you must provide a check function to see if one or more relations hold and return true if so if false is returned the test fails with a printout of the current transformationcombination relation checks may be conditional check out the tests for examples on how this works  executing you must provide an execute function that computes a result based on the current value the simplest form will simply return the current value but you can do any arbitrary operation here this function is called before any transformations to form a baseline this baseline is passed as the first argument to check  optional beforeafter calls before and after the test and every combination before and after is called if present this is useful to reset state initialize test cases and perform cleanup  what happens during a test run using the example above the following pseudocode runs will be performed  baseline  execute  first combination transformpi out  execute checkbaseline out  second combination transformepsilon out  execute checkbaseline out  third combination transformpi transformepsilon out  execute checkbaseline out   configuring runs the run function takes a runconfiguration zig  if set to true only run each transformation once separately skipcombinations bool  false  if true print detailed information during the run verbose bool  false   error reporting if a test fails the current combination being executed is printed for instance the following tells us that the combination of transformadditionalterm and transformcase caused the metamorphic relation to fail  test 22 test query test case failed with transformations  transformadditionalterm  transformcase   terminology  source test case output the output produced by execute on the initial input this is also known as the baseline  derived test case output the output produced by execute after applying a specific combination of transformations  metamorphic relation a property that must hold when considering a source test case and a derived test case ","ikskuh/zig-serve":"server implementations for several protocols in zig. includes http(s), gemini and gopher  zigserve project logodesignlogopng a implementation of several network protocols for zig  http 11  gemini  gopher  finger  disclaimer do not use these server implementations in production they are very much workinprogress without any warranty of function or correctness dont even think about security right now  status  protocol  status        finger   not started   gopher   experimental   gemini   experimental   https   experimental  experimental means that there is basic support for the protocol but no spec compliance has been proven yet  development  tasks  create a new selfsigned ssl certificate shconsole openssl req new x509 config examplesdatacertconfigcfg nodes newkey rsa2048 keyout examplesdatakeypem out examplesdatacertpem days 36500   rfcs  specs  rfc1945httpsdatatrackerietforgdochtmlrfc1945  hypertext transfer protocol  http10  rfc2616httpsdatatrackerietforgdochtmlrfc2616  hypertext transfer protocol  http11  rfc7231httpsdatatrackerietforgdochtmlrfc7231  hypertext transfer protocol http11 semantics and content  rfc1436httpsdatatrackerietforgdochtmlrfc1436  the internet gopher protocol a distributed document search and retrieval protocol  project geminihttpsgeminicircumlunarspacedocsspecificationgmi  speculative specification  rfc1288httpsdatatrackerietforgdochtmlrfc1288  the finger user information protocol ","dweiller/zimalloc":"general purpose allocator for zig  zimalloc zimalloc is general purpose allocator for zig inspired by mimallochttpsgithubcommicrosoftmimalloc  status this project is under development and should currently be considered experimentalexploratory there is no documentation and it has not been battletested in particular there may be issues with multithreaded workloads contributions of any kind prs suggestions for improvements resources or ideas related to benchmarking or testing are welcome the allocator is significantly faster than stdheapgeneralpurposeallocator but should not yet be expected to be competitive with other established general purpose allocators  usage to use the allocator in your own project you can use the zig package manager by putting this in your buildzig zig pub fn buildb stdbuild void    snip  const zimalloc  bdependencyzimallocmodulezimalloc  get the zimalloc module   snip  exeaddmodulezimalloc  add the zimalloc module as a dependency of exe   snip    and this to the dependencies section of your buildzigzon zig zimalloc   url  httpsgithubcomdweillerzimallocarchivecommitshatargz   where commitsha should be replaced with full sha of the desired revision you can then import and initialise an instance of the allocator as follows zig const zimalloc  importzimalloc pub fn main void  var gpa zimallocallocator   defer gpadeinit const allocator  gpaallocator   snip     shared library there is a shared library that can be used for overriding standard libc allocation functions it can be accessed from your buildzig like so zig pub fn buildb stdbuild void    snip  const libzimalloc  bdependencyzimallocartifactzimalloc  get the zimalloc shared library   snip  exelinklibraryzimalloc  link to libzimalloc   snip    if you just want to build the shared library and use it outside the zig build system you can build it with the libzimalloc or install steps for example sh zig build libzimalloc doptimizereleasesafe   notes  the current implementation works on linux with other systems untested  the main suite of tests currently used is httpsgithubcomdaanxmimallocbench which are run using ldpreload not all tests have been tried but all those that have been tested run successfully  no attempt has been made to make the allocator signalsafe ","sackosoft/zig-luajit":"a package providing zig language bindings to luajit. used to run high performance lua code in zig applications! div aligncenter  zigluajit zig  language bindings for the luajithttpsluajitorg c api use zigluajit to run lua scriptshttpswwwluaorg within a zig application ubuntu regression tests badgehttpsimgshieldsiogithubactionsworkflowstatussackosoftzigluajittestsubuntuymllabeltests20ubuntu windows regression tests badgehttpsimgshieldsiogithubactionsworkflowstatussackosoftzigluajittestswindowsymllabeltests20windows github licensehttpsimgshieldsiogithublicensesackosoftzigluajit  todo capture attention with a visualization diagram demo or other visual placeholder here placeholder  div  about the goal of the zigluajit project is to provide the most idiomatic zig language bindings for the luajit c api and c api auxilary library additionally the zigluajit project emphasizes safety by making liberal use of runtime safety checks in debug and releasesafe builds and provides full test coverage of the api  zig version the main branch targets recent builds of zigs master branch last tested with zig 0140  installation  usage it is recommended that you install zigluajit using zig fetch this will add a luajit dependency to your buildzigzon file bash zig fetch saveluajit githttpsgithubcomsackosoftzigluajit  next in order for your code to import zigluajit youll need to update your buildzig to do the following 1 get a reference the zigluajit dependency 2 get a reference to the luajit module which contains the core zig language bindings for luajit 3 add the module as an import to your executable or library zig  1 get a reference to the zig fetched dependency const luajitdep  bdependencyluajit  target  target optimize  optimize   2 get a reference to the language bindings module const luajit  luajitdepmoduleluajit  set up your library or executable const lib    const exe     3 add the module as an import to your executable or library myexerootmoduleaddimportluajit luajit mylibrootmoduleaddimportluajit luajit  now the code in your library or exectable can import and use the luajit zig api zig const luajit  importluajit const lua  luajitlua var gpa  stdheapgeneralpurposeallocator const lua  luainitgpaallocator defer luadeinit luaopenbaselib luadostring  printhello world    examples some examples are provided in examplesexamples to aid users in learning to use zigluajit these small selfcontained applications should always be working please create an issue if they do not work for you  language binding coverage progress  api  support    lua c api lua   100 coveragesupsup 9292   auxilary library lual   100 coverage 4848   debug api luadebug   100 coverage 1212   luajit extensions  no plans to implement   coroutine yieldresume is not yet part of the public zigluajit zig api see 6issue6  coverage and compatibility this section describes the current status of zig language bindings the zig api   fully supported test coverage and runtime safety checks enabled in debug or releasesafe builds   internal used internally and intentionally hidden from the zig api   superseded has no direct zig equivalent but the functionality is provided by a different part of the zig api   renamed renamed in a nonobvious way from the c api renaming is avoided but done in cases deemed required 1 to conform to zig idioms or patterns such as the init  deinit pattern 1 to avoid conflicts with zig language keywords such as the zig error keyword 1 to show that the zig api has slightly different behavior than the c api such as using luasetallocator instead of luasetallocf since the zig api uses stdmemallocator instead of allocation functions 1 to improve the clarity discoverability or consistency of the symbol in the overall api surface  core c api coverage lua  c type definition  available in zigluajit    luastate   lua   luaalloc   hidden please use luasetallocator and luagetallocator   luacfunction   luacfunction   luainteger   luainteger   luanumber   luanumber   luareader   stdioanyreaderzigdocanyreader   luawriter   stdioanywriterzigdocanywriter  zigdocanyreader httpsziglangorgdocumentationmasterstdstdioanyreader zigdocanywriter httpsziglangorgdocumentationmasterstdstdioanywriter  c api symbols  available in zigluajit    luaatpanic   luaatpanic   luacall   luacall   luapcall   luacallprotected   luacpcall   luacallprotectedc   luacheckstack   luacheckstack   luaclose   luadeinit   luaconcat   luaconcat   luacreatetable   luacreatetable   luadump   luadump   luaequal   luaequal   luaerror   luaraiseerror   luagc   luagc  luagcisrunning   luagetallocf   luagetallocator   luagetfenv   luagetenvironment   luagetfield   luagetfield   luagetglobal   luagetglobal   luagetmetatable   luagetmetatable   luagettable  ","sbancuz/openmp-zig":"an implementation of the openmp directives for zig  openmpzig this wrapper implements almost all the openmp directives upto version 31 and some newer stuff all of this is mostly see below without any allocation from the zig part this is implemented using the libomp library of llvm gomp support is not planned disclaimer this project is not affiliated with llvm in any capacity zig const std  importstd const omp  importomp fn main void  ompparallel run struct  fn f void  stddebugprinthello world  ompgetthreadnum  f    build sh zig fetch save githttpsgithubcomsbancuzopenmpzig  zig  buildzig const openmpzigdep  bdependencyopenmpzig  target  target optimize  optimize  exerootmoduleaddimportomp openmpzigdepmoduleomp   features  x pragma omp parallel  x all reductions  x pragma omp for  x pragma omp sections  x pragma omp single  x pragma omp mastermasked  x pragma omp critical  x pragma omp barrier  x pragma omp task    pragma omp atomic not possible to implement    pragma omp simd not possible to implement to see some other examples of the library check the tests folder  extensions zig fn testomptaskerror bool   the ret reduction parameter tells the directive how it should reduce the return value const result  ompparallel retreduction  plus  run struct   you can return whatever you want fn f usize  const maybe  ompsingle run struct   only for tasks you have to put the explicit error type in the promise  otherwise it wont be able to infer the type fn f omppromiseerrorwompwompusize  return omptask run struct   same deal here fn f errorwompwompusize  return errorwompwomp  f  f if maybe pro  defer prodeinit return proget  return 0  f catch err switch err  errorwompwomp  stddebugprintcaught an error    stddebugprintno errors here     return all of the directives can return values to return something you may need to specify the retreduction parameter  warning  the promises that are returned from the task directive will be heap allocated so make sure to deinit them  errors all of the directive can return error types  warning  returning more than one type of error from a directive its clearly a race condition  goal the goal of this library is to provide at least openmp 45 to zig and be production ready along with the mentioned extensions ","ikskuh/any-pointer":"a type erasure library for zig that is meant to be eventually upstreamed to std  anypointer type erasure this package provides a single file anypointerzig that implements a typeerased pointer for zig this pointer type supports three functions make cast and isnull and exports the symbol nullpointer zig const anypointer  importanypointeranypointer var i u32  0 const erased  anypointermakeu32 i const ptr  erasedcastu32 ptr  42 stddebugassertptrisnull stddebugasserti  42  in safe modes debug and releasesafe cast will typecheck the pointer and might panic when a type confusion would happen  usage just add a package pointing to anypointerzig to your project the package will export three types  safepointer which will provide type checking and panics in safe modes  unsafepointer which will not provide type checking and will only have the size of a single pointer  anypointer which will be safepointer in safe modes and unsafepointer in unsafe modes in addition to make cast and isnull safepointer also has the function trycast which works like cast but will return an optional ","lun-4/zigdig":"naive dns client library in zig  zigdig naive dns client library in zig help me decide if this api is good httpsgithubcomlun4zigdigissues10  what does it do  serialization and deserialization of dns packets as per rfc1035  supports a subset of rdata i do not have any plans to support 100 of dns but srvmxtxtaaaaa are there which most likely will be enough for your use cases  has helpers for reading etcresolvconf not that much really  what does it not do  no edns0  support all resolvconf options  can deserialize pointer labels but does not serialize into pointers  follow cname records this provides only the basic serializationdeserializtion  how do  zig 0140 httpsziglangorg  have a etcresolvconf  tested on linux should work on bsd i think  git clone  cd zigdig zig build test zig build install prefix local  and then bash zigdig googlecom a  or for the host1 equivalent bash zigdigtiny googlecom   using the library  getaddressliststyle api zig const dns  importdns pub fn main void  var gpa  stdheapgeneralpurposeallocator defer    gpadeinit  var allocator  gpaalloator var addresses  try dnshelpersgetaddresslistziglangorg allocator defer addressesdeinit for addressesaddrs address  stddebugprintwe live in a society n address     full api zig const dns  importdns pub fn main void  var gpa  stdheapgeneralpurposeallocator defer    gpadeinit  var allocator  gpaalloator var namebuffer 128const u8  undefined const name  try dnsnamefromstringziglangorg namebuffer var questions  dnsquestion  name  name typ  a class  in   var packet  dnspacket header   id  dnshelpersrandomheaderid isresponse  false wantedrecursion  true questionlength  1  questions  questions answers  dnsresource nameservers  dnsresource additionals  dnsresource   use helper function to connect to a resolver in the systems  resolvconf const conn  try dnshelpersconnecttosystemresolver defer connclose try connsendpacketpacket  you can also do this to support any writer  const writtenbytes  try packetwritetosomefunwritergoeshere const reply  try connreceivepacketallocator 4096 defer replydeinit  you can also do this to support any reader  const packet  try dnspacketreadfromsomefunreader allocator  defer packetdeinit const replypacket  replypacket loggerinforeply  replypacket try stdtestingexpectequalpacketheaderid replypacketheaderid try stdtestingexpectreplypacketheaderisresponse  asserts that theres one a resource in the answer you should verify  replypacketheaderopcode to see if theres any errors const resource  replypacketanswers0 var resourcedata  try dnsresourcedatafromopaque replypacket resourcetyp resourceopaquerdata allocator  defer resourcedatadeinitallocator  you now have an stdnetaddress to use to your hearts content const ziglangaddress  resourcedataa   it is recommended to look at zigdigs source on srcmainzig to understand how things tick using the library but it boils down to three things  packet generation and serialization  sendingreceiving via a small shim on top of stdossocket  packet deserialization ","zigster64/zts":"zig templates made simple  zts  other zig template management tools to check out  httpsgithubcomjetzigframeworkzmpl  httpsgithubcombatiatimustachezig  httpsgithubcomhazeetch also  httpsgithubcomkristoffitziggy  static site generator that has some interesting templating possibilities  zig templates made simple zts ztshttpsgithubcomzigster64ztsblobmaindocsztsjpgrawtrue zts is a minimalist zig module that helps you use text templates in a way that is simple maintainable and efficient simple  uses zig like field tags in your template  uses zig fmtprint for formatting data  no funky new templating syntax no dsl no new formatting conventions to learn  outputs to zig writer interface use it in web server apps  maintainable  control of the template logic is done in your zig code not delegated to the template engine  data passed through the template must be explicitly defined  there is no magic expansion of data structs that works fine today and breaks tomorrow as your data model evolves  mismatches between your code your data and the template are caught at compile time not runtime efficient  all template parsing is performed at comptime no runtime overhead  minimal codebase  there is just less going on compared to fullfeatured templating engines lets have a look   zts  very basic example lets say you have a template file foobartxt that looks like this   foo i prefer daytime bar i like the nighttime  note the sections foo and bar zts uses a zig like field syntax for defining the section breaks in the text then in your zig code just embed that file and then use the ztsstemplate sectionname function to return the appropriate section out of the data zig const zts  importzts const out  stdiogetstdoutwriter const tmpl  embedfilefoobartxt try outprintfoo says  sn ztsstmpl foo try outprintbar says  sn ztsstmpl bar  produces the output  foo says  i prefer daytime bar says  i like the nighttime  thats really all there is to it its basically splitting the input into sections delimited by named tags in the input text  the contents of data sections are comptime known the data returned from stemplate sectionname is comptime known  which means that it can in turn be passed to zig standard print functions as a formatting string  foo i like s bar i prefer s  zig const tmpl  embedfilefoobartxt try outprintztsstmpl foo daytime try outprintztsstmpl bar nighttime   zts print helper functions use of the stmpl sectionname function is provided as a lowlevel utility putting ztsstmpl sectionname everywhere is a bit verbose and gets a bit messy very quickly zts provides helper functions that make it easier to print ztsprinttmpl sectionname args writer works like print in zig ztswritetmpl sectionname writer works like write in zig  foo i like s bar i prefer s  zig const tmpl  embedfilefoobartxt try ztsprinttmpl foo daytime out try ztsprinttmpl bar nighttime out  because everything is happening at comptime if your template file and your zig code get out of sync due to ongoing changes nothing to fear  zig will pick that up at compile time and throw an error about missing sections in your templates as well as the standard compile errors about parameters not matching the expected fields in the template for example if you add this to the code above  zig try ztsprinttmpl other  out  this will throw a compile error saying that there is no section labelled other in the template if the template gets modified  say change the label foo to fooz in the text file  then that will also cause a compile error in the zig code saying that foo doesnt exist in the template anymore if the template changes again say  change the foo contents to i like d  then this will also cause a compile error in the zig code saying that the string parameter daytime does not match format d in the template there is no great magic here its just the power of zig comptime as it is actively parsing the text templates at compile time and using the built in zig print formatting which also evaluates at compile time  zts runtime  noncomptime helper functions if you want to pass data through template segments using the built in zig print functions on the writer then everything must be comptime there are no exceptions to this its just the way that zig print works if your template segments do not have print formatting do not need argument processing and are just blocks of text then you can use the write variant helper functions that zts provides zig try ztswriteheadertemplate out try ztswritetemplate section out  when using writetemplate section out  if the section is null or cannot be found in the data then write will print nothing there is also a lookup function that takes runtime  dynamic labels and returns a noncomptime string of the section  or null if not found its a runtime version of the s function that can be used with dynamic labels you can only use the return data from lookup in a noncomptime context though such as using the data in a writeall statement example zig  you can do some fancy dynamic processing here const dynamictemplatesection  ztslookuptmpl osgetenvplanet if dynamictemplatesection  null  stddebugprintsorry cannot find a section for the planet you are on return  try outwritealldynamictemplatesection  or you can do this using the write helper functions  note that if there is no planet env then nothing is printed try ztswritetmpl osgetenvplanet out  but you cant do this because print needs comptime values only and lookup is a runtime variant try outprintdynamictemplatesection customerdetails   compile error  dynamictemplatesection is not comptime known  and you cant do this either because s demands comptime params too const printabledynamicsection  ztsstmpl osgetenvplanet   compile error  unable to resovle comptime value  comptime restrictions can be a pain zts lookup writeheader and write might be able to help you out if you need to do some dynamic processing  or it might not depending on how deep a hole of meta programming you are in  a more common html templating example lets define a typical html file with template segments defined and add some places where we can print structured data that we pass through the template the html template looks like this  html div h1financial statement pageh1 ","pwbh/ymlz":"small and convenient yaml parser for zig h1 aligncenter img srchttpsrawgithubusercontentcompwbhymlzea6e6bf43dbe40edd66b46fc32be714546d38c6bimgslogosvg altymlz width1007 h1 h4 aligncentersmall and convenient a hrefhttpsenwikipediaorgwikiyaml targetblankyamla parserh4 p aligncenter a hrefkeyfeatureskey featuresa  a hrefhowtousehow to usea  a hrefsupportsupporta  a hrefcontributioncontributiona  a hreflicenselicensea p  key features  simple and straightforward to use thanks to builtin reflectionshttpsziglangorgdocumentationmasterfunctionreflection  just define a struct load a yml into it and access your fields  supports recursive struct  deinitialization is handled for you just call deinit and you are done  fields are automatically parsed based on field type  ability to parse fields optionally  how to use easiest way to use ymlz is to fetch it via zig fetch make sure to provide it the url of latest released version as the argument see an example below bash zig fetch save httpsgithubcompwbhymlzarchiverefstags010targz  now in your buildzig we need to import ymlz as a module the following way zig pub fn buildb stdbuild void  const exe  baddexecutable   const ymlz  bdependencyymlz  exerootmoduleaddimportymlz ymlzmoduleroot    parsing yaml from file we can utilize loadfile which expects the absolute path to your yaml file i will be loading the following yaml file located in the root of my project under the name fileyml yml first 500 second 3 name just testing strings overhere fourth 142241 foods  apple  orange  strawberry  mango inner sd 12 k 2 l hello world another new 1 stringed its just a string  mainzig zig  usage  zig build run  fileyml const std  importstd const ymlz  importymlzymlz  notice how simple it is to define a struct that is onetoone  to the yaml file structure const tester  struct  first i32 second i64 name const u8 fourth f32 foods const u8 inner struct  sd i32 k u8 l const u8 another struct  new f32 stringed const u8    pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer   gpadeinit const args  try stdprocessargsallocallocator defer stdprocessargsfreeallocator args if argslen  2  return errornopathargument  const ymllocation  args1 const ymlpath  try stdfscwdrealpathalloc allocator ymllocation  defer allocatorfreeymlpath var ymlz  try ymlztesterinitallocator const result  try ymlzloadfileymlpath defer ymlzdeinitresult  we can print and see that all the fields have been loaded stddebugprinttester anyn result  lets try accessing the first field and printing it stddebugprintfirst n resultfirst  same goes for the array that weve defined foods for resultfoods food  stddebugprints food     parsing yaml from bytes parsing yaml file using generic u8 slice for the sake of our example lets parse a small yaml inlined in to some variable that contains our yaml in const u8 zig const std  importstd const ymlz  importrootzigymlz pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer   gpadeinit const yamlcontent  first 500 second 3 name just testing strings overhere  just a comment fourth 142241  comment in between lines foods   apple   orange   strawberry   mango inner  abcd 12  k 2  l hello world  comment somewhere  another  new 1  stringed its just a string  const experiment  struct  first i32 second i64 name const u8 fourth f32 foods const u8 inner struct  abcd i32 k u8 l const u8 another struct  new f32 stringed const u8    var ymlz  try ymlzexperimentinitallocator const result  try ymlzloadrawyamlcontent defer ymlzdeinitresult stddebugprintexperimentfirst n resultfirst    parsing by providing a custom stdioanyreader its possible to pass your own implementation of the stdioanyreader interface to ymlz using loadreader which is used internally for both loadfile and loadraw see internal implementationhttpsgithubcompwbhymlzblobmastersrcrootzigl64 for reference  contribution you are more then welcomed to submit a pr ymlz codebase is still pretty small and it should be relatively simple to get into it if you have any questions regarding the project or you just need assist starting out open an issue  support if you find a bug please submit new issuehttpsgithubcompwbhymlzissuesnew and i will try to address it in my free time i do however want to note that this project is used in my bigger project so any bugs i find i fix without reporting them as an issue so some issues that may have been reported have beeen fixed without me seeing them  license apache license 20 can be found under the licensehttpsgithubcompwbhymlzblobmasterlicense ","follgad/zig-ai":"openai sdk with streaming support  zigai a simple openai api client for zig with streaming support find examples in the examplesexamples directory  usage with streaming zig const std  importstd const openai  importzigai pub fn main void    var messages  stdarraylistopenaimessageinitallocator try messagesappend role  system content  you are a helpful assistant  try messagesappend role  user content  user message here  const payload  openaichatpayload model  gpt4o messages  messagesitems maxtokens  1000 temperature  02  var stream  try openaistreamchatpayload false defer streamdeinit while try streamnext response   stream the response to stdout if responsechoices0deltacontent content  try writerwriteallcontent try bufwriterflush      installation bash  zig fetch save githttpsgithubcomfollgadzigai  and add zigai to your buildzig file zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const exe  baddexecutable name  streamcli rootsourcefile  bpathexamplesstreamclizig target  target optimize  optimize  const module  bdependencyzigai  rootsourcefile  bpathsrcllmzig  exerootmoduleaddimportzigai modulemodulezigai    usage see the examples directory for usage examples ","travisstaloch/flatbufferz":"a flatbuffers codegen library in zig warning this project is in its early early stages beware of bugs and missing features warning  about generate zig code from flatbuffer schema files which can deserialize flatbuffer messages depends on packaged flatc to parse fbs files ci tested weekly with latest zig version this project depends on packaged flatc compiler v2333 built with zig using a fork of googleflatbuffershttpsgithubcomtravisstalochflatbuffers  usage  fetch to generate code from a flatbuffers file in your buildzig console  zig fetch save githttpsgithubcomtravisstalochflatbufferz   gen step zig  buildzig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const exe  baddexecutable name  myapp rootsourcefile  bpathsrcmainzig target  target optimize  optimize  const fbzdep  bdependencyflatbufferz  target  target optimize  optimize  const genstep  try importflatbufferzgenstepcreate b fbzdepartifactflatczig srcmyschemafbs  flatczig  exerootmoduleaddimportgenerated genstepmodule exerootmoduleaddimportflatbufferz fbzdepmoduleflatbufferz    manual generation run packaged flatc console zig build flatc  flatc args   compile from fbs files use flatczig to generate zig files from schema fbs files console zigoutbinflatczig o gen i examplesincludes examplestestfbs   compile from bfbs files optionally use packaged flatc to generate a binary schema bfbs from a schema fbs files console zig build flatc  b schema bfbscomments bfbsbuiltins bfbsgenembed i examplesincludes o genexamples examplestestfbs  use flatczig to generate zig files from binary schema bfbs files  zigoutbinflatczig o gen genexamplestestbfbs   use compiled zig files either of these create the following in gen console  find gen name fbzig genracefbzig genpeoplexfbzig genpeoplefoofbzig genpeoplepersonfbzig  you can now import these files into your zig application as in genstepgenstep the compiled fbzig files depend on the same flatbufferz module zig  buildzig const flatbufferzdep  bdependencyflatbufferz  target  target optimize  optimize  exerootmoduleaddimportgenerated bcreatemodule rootsourcefile  bpathsrcmygeneratedfbzig imports   name  flatbufferz module  flatbufferzdepmoduleflatbufferz     tools convert bfbs to fbs console zigoutbinflatczig gentestbfbs bfbstofbs  warning warning bfbstofbs doesnt produce valid fbs files in its current state it is more of a binary schema debugging tool ","akarpovskii/build.crab":"build and use rust libraries from zig  buildcrab thin wrapper around cargo which integrates it with zigs build system br crosscompilation is supported  requirements please see minimumzigversion field of the buildzigzon file  usage sh zig fetch save githttpsgithubcomakarpovskiibuildcrab  in buildzig replace crate with the name of your crate zig const buildcrab  importbuildcrab const crateartifacts  buildcrabaddcargobuild b  manifestpath  bpathpathtocargotoml  you can pass additional arguments to cargo cargoargs   release quiet     set to debug to see debug logs  defaults to the same optimization level as your package optimize  releasesafe   moduleaddlibrarypathcrateartifacts modulelinksystemlibrarycrate   see exampleexamplebuildzig for the other examples  crosscompilation use target argument to specify the crosscompilation target zig const target  bstandardtargetoptions const buildcrab  importbuildcrab const crateartifacts  buildcrabaddcargobuild b   cargo params   target  target    buildcrab binaries will still be built for the native target but it will try its best to convert zigs target triple to rust and call cargo build with the appropriate target argument see rustzigsrcrustzig and the tests at the bottom to know how the conversion is done  override rust target use rusttarget from cargoconfig to override the target argument passed to cargo build zig const target  bstandardtargetoptions const buildcrab  importbuildcrab const crateartifacts  buildcrabaddcargobuild b  rusttarget    override only some parts override   vendor   custom  alpine    or specify the value explicitly  value  x8664alpinelinuxmusl        windows  toolchain by default rust on windows targets msvc toolchain this creates additional problems as you have to link against msvcrt etc if you want to avoid that you can target windowsgnu this is the default behavior of buildcrab  unused symbols i recommend adding the following parameters to cargotoml toml profilerelease optlevel  z  optimize for size strip  true lto  true  otherwise you will have to link some obscure windows libraries even if you dont use them and it also makes the size of the rust library smaller  duplicate symbols obsolete since zig 0140  buildcrab 020 both rust and zig provide compilerrtlib with most of the symbols having weak linking but not chkstk and chkstkms so if you want to link against a rust library that needs these intrinsics you should somehow resolve the conflict though im not completely sure that it is safe to do for this purpose buildcrab provides an additional artifact called stripsymbols that repacks a archive removing o files containing conflicting functions provided by the user zig const cratelibpath  importbuildcrabaddstripsymbolsb  name  libcratea archive  bpathpathtolibcratea symbols   chkstkms   moduleaddlibrarypathcratelibpathdirname modulelinksystemlibrarycrate   if you use addruststaticlib this is already taken care of for you see the buidzigexamplebuildzig for a complete example ","andrewrk/mime":"zig package for mapping extensions to mime types   zig module for mime types  synopsis zig const std  importstd const mime  importmime test html smoke test  const mimetype  mimeextensionmapgethtml try stdtestingexpectequalstringstexthtml tagnamemimetype  test bogus extension  try stdtestingexpectmimeextensionmapgetsillybogo  null   ","tiawl/cimgui.zig":"dear imgui packaged for @ziglang  cimguizig this is a fork of ocornutimgui1 packaged for zig2  why this fork  the intention under this fork is to package ocornutimgui1 for zig2 so  unnecessary files have been deleted  the build system has been replaced with buildzig  dearimguidearbindings3 generates the c binding  a cron runs every day to check ocornutimgui2 and dearimguidearbindings3 then it updates this repository if a new release is available  how to use it the goal of this repository is not to provide a zig2 binding for ocornutimgui1 there are at least as many legit ways as possible to make a binding as there are active accounts on github so you are not going to find an answer for this question here the point of this repository is to abstract the ocornutimgui1 compilation process with zig2 which is not new comers friendly and not easy to maintain to let you focus on your application so you can use cimguizig  as raw see the examples directoryhttpsgithubcomtiawlcimguizigblobtrunkexamples  as a daily updated interface for your zig2 binding of ocornutimgui1 see here13 for a private usage  cimguizig as a library if you want to add cimguizig as a library to your project you can do the following do know that it requires a zig version 013  fetch this repository  sh  zig fetch save githttpsgithubcomtiawlcimguizig  add it to your buildzig  diff const std  importstd const cimgui  importcimguizig pub fn buildb stdbuild void    snip   const cimguidep  bdependencycimguizig   target  target  optimize  optimize  platform  cimguiplatformglfw  renderer  cimguirenderervulkan    where exe represents your executablelibrary to link to  exelinklibrarycimguidepartifactcimgui   snip    and thats it  youre ready to go  see the examples directory on how to move forward from there  backends the backends are separated in two categories  the platforms handling windows events  and the renderers draw to screen   platform  glfw4  sdl314  renderers  vulkan5  opengl15  as you can see these backends do not support all of those supported by imgui adding a backend is a bit of work because of the needed maintenance please do not ask for backends to be added if you dont feel like adding them yourselves   dependencies the zig2 part of this package is relying on the latest zig2 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  ocornutimguihttpsgithubcomtiawlcimguizigblobtrunkreferencesimgui currently there are no tagsrelease for dearimguidearbindings3 so cimguizig is relying on the last commit for backends see the buildzigzonhttpsgithubcomtiawlcimguizigblobtrunkbuildzigzon  cicd reminder these repositories are automatically updated when a new release is available  tiawlspaceporn6 this repository is automatically updated when a new release is available from these repositories  ocornutimgui1  dearimguidearbindings3  tiawltoolbox7  tiawlglfwzig8  tiawlspacepornactionbot9  tiawlspacepornactionci10  tiawlspacepornactioncdping11  tiawlspacepornactioncdpong12  zig build options these additional options have been implemented for maintainability tasks  dfetchbool update references folder and buildzigzon then stop execution dupdatebool update binding drendererenum specify the renderer backend supported values vulkan opengl3 dplatformenum specify the platform backend supported values glfw sdl3   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomocornutimgui 2httpsgithubcomziglangzig 3httpsgithubcomdearimguidearbindings 4httpsgithubcomglfwglfw 5httpsgithubcomkhronosgroupvulkanheaders 6httpsgithubcomtiawlspaceporn 7httpsgithubcomtiawltoolbox 8httpsgithubcomtiawlglfwzig 9httpsgithubcomtiawlspacepornactionbot 10httpsgithubcomtiawlspacepornactionci 11httpsgithubcomtiawlspacepornactioncdping 12httpsgithubcomtiawlspacepornactioncdpong 13httpsgithubcomtiawlspacepornblobtrunksrcspacepornbindingsimguiimguizig 14httpswikilibsdlorgsdl3frontpage 15httpswwwopenglorg ","hejsil/zig-midi":"this repository has no description. 404 not found","leecannon/zig-libgit2":"zig bindings to libgit2  ziglibgit2  warning this project is not currently in a good state and is not 100 compatible with any of libgit2s releases work on this project stalled at step one in todotodomd  zig bindings to libgit2httpsgithubcomlibgit2libgit2 this is an inprogress zig binding to libgit2 unfortunately libgit2 doesnt full document all possible errors so every errorable function returns the full errorset there is currently no plan to port all the headers within includegit2sys if anyone requires any of that functionailty raise an issue  files fully wrapped others maybe partially complete  x annotatedcommith  x applyh  x attrh  x blameh  x blobh  x branchh  x bufferh  x certh  x checkouth  x cherrypickh  x cloneh  x commith  x commonh  x configh  x credentialh  x describeh    diffh  x errorsh  x filterh  x globalh  x graphh  x ignoreh  x indexh  x indexerh  x mailmaph    mergeh  x messageh  x notesh  x objecth    odbh  x oidh  x oidarrayh  x packh  x patchh  x pathspech  x proxyh  x rebaseh  x refdbh  x reflogh    refsh  x refspech  x remoteh  x repositoryh  x reseth  x reverth  x revparseh  x revwalkh  x signatureh  x stashh  x statush  x strarrayh    submoduleh  x tagh  x traceh  x transactionh  x treeh  x worktreeh  x sysalloch  x syscredentialh  x sysdiffh  x syshashsigh  x syspathh  x sysrepositoryh ","karlseguin/mqttz":"mqtt client for zig 404 not found","zigtools/zig-lsp-codegen":"lsp codegen based on the metamodel cihttpsgithubcomzigtoolsziglspcodegenactionsworkflowsmainymlbadgesvghttpsgithubcomzigtoolsziglspcodegenactions codecovhttpscodecovioghzigtoolsziglspcodegengraphbadgesvgtokenc3hcn59e4chttpscodecovioghzigtoolsziglspcodegen documentationhttpsbadgennetbadgeicondocsiconwikilabelhttpszigtoolsgithubioziglspcodegen license mithttpsimgshieldsiobadgelicensemityellowsvghttpsopensourceorglicensesmit  zig lsp codegen generates stdjson compatible zig code based on the official lsp metamodelhttpsmicrosoftgithubiolanguageserverprotocolspecificationslsp317specificationmetamodel  installation  note  the minimum supported zig version is 0140dev34456c3cbb0c8 bash  initialize a zig build project if you havent already zig init  add the lspcodegen package to your buildzigzon zig fetch save githttpsgithubcomzigtoolsziglspcodegengit  you can then import lspcodegen in your buildzig with zig const lspcodegen  bdependencylspcodegen  const exe  baddexecutable exerootmoduleaddimportlsp lspcodegenmodulelsp  ","zigcc/zig-msgpack":"zig messagpack implementation / msgpack.org[zig]  messagepack for zig this is an implementation of messagepackhttpsmsgpackorgindexhtml for zighttpsziglangorg an article introducing it zig msgpackhttpsnvimerorgblogzigmsgpack  features  supports all messagepack typesexcept timestamp  efficient encoding and decoding  simple and easytouse api  note the current protocol implementation has been completed but it has not been fully tested only limited unit testing has been conducted which does not cover everything  getting started  about 013 and previous versions please use 006  0140  nightly 1 add to buildzigzon sh zig fetch save httpsgithubcomzigcczigmsgpackarchivecommit or branchtargz  of course you can also use githttps to fetch this package  2 config buildzig zig  to standardize development maybe you should use lazydependency instead of dependency const msgpack  bdependencyzigmsgpack  target  target optimize  optimize   add module exerootmoduleaddimportmsgpack msgpackmodulemsgpack   related projects  gettymsgpackhttpsgitmztedelordmztegettymsgpack  znvimhttpsgithubcomjinzhongjiaznvim ","ikskuh/ztt":"precompiled zig text template engine  zig text templates this project implements a template generator for zig that works similar to how php works it allows you to mix plain text and zig code to generate automatic text files consider the following example zig   this tag lets you import global statements available to the render function const std  importstd   zig text template the following syntax inserts ctxintro formattet with the format string s10  ctxintro  s10  the list has the following  ctxlistlen  items  forctxlist item     itemname  s  weight  itemweight  d1  kg    you can pass arbitrary format strings and expressions to the direct formatter   helloworld  s    10  20  30    stdmathlog1010  20  30  note that for using a  inside the format expression itself use braces to encapsulate the items  this was inspired by both phphttpswwwphpnetmanualenintrowhatisphp and microsofts t4httpsdocsmicrosoftcomenusvisualstudiomodelingcodegenerationandt4texttemplatesviewvs2019 engine  usage each generated template will yield a zig file which exports a function called render zig pub fn renderstream anytype ctx anytype void     this function must be invoked with a stdiowriter for the first argument and any value for the second argument ctx is meant to pass information from the caller to the template engine to allow dynamic content generation to generate templates in your build script just run the executable with filesources zig  to be done   for a full example see buildzig and the example folder  syntax the syntax knows these constructs     will paste everything between the start and end sigil verbatim into the render function code this can be used to generate loops conditions    expr  will print a defaultformatted  expression into the stream   expr  format  will behave similar to the defaultformatted version but you can specify your own format string in format this accepts any format string that stdfmtformat accepts for the type of expr     will paste everything between the start and end sigil verbatim into the global scope of the zig code this can be used to create custom functions or exports note that both    and    will swallow a directly following line break while    will not this makes writing templates more intuitive","ikskuh/zig-bearssl":"a bearssl binding for zig  zigbearssl a bearsslhttpsbearsslorg binding for zig providing primitive and probably unsafe im no ssl expert bindings for ssl and tls connections to generic zig code ","ziglibs/zig-lv2":"zig-intuitive bindings for lv2.  ziglv2  a toolkit for lv2 plugin authors written in zig  warning here be dragons tons of lv2 features arent implemented and this isnt ready for production at all   installing bash git clone recursesubmodules httpsgithubcomziglibsziglv2    getting started check out the example in examples which contains both sample zig code as well as its corresponding turtle manifest ","tr1ckydev/zoop":"a benchmarking library for zig. resoutputpng  zoop a benchmarking library for zig  uses built in monotonic high performance timer  warms up to remove function call overhead time  supports lifecycle hooks like beforeall aftereach etc  can export raw benchmark data to json  vibrant terminal output with easy to read data  highly customizable  installation  zig master version is required to use zoop to install zoop in your own project 1 add the dependency to the buildzigzon of your project zig dependencies   zoop   url  httpsgithubcomtr1ckydevzooparchive0ce2e985206e28fe13ed3c6dcb6b88650688238etargz hash  1220bad2ffae51552957e6255289dd452ee1a5e687d9f4c8c9427008edb0a802d874    2 add the dependency and module to your buildzig zig const zoopdep  bdependencyzoop  const zoopmod  zoopdepmodulezoop exeaddmodulezoop zoopmod  3 import it inside your project zig const benchmark  importzoopbenchmark  or if you just want to try out the benchmark from the above image clone this repository and run zig build run  documentation  callbackfn refers to the type const fn  anyerrorvoid   benchmarkinitallocator config create a new benchmark instance with the provided config options provide  to use the default configuration zig var bench  benchmarkinitallocator    allocatorallocator the allocator to use inside the benchmark  configstruct configuration for the benchmark  showcpunamebool if true shows the name of host device cpu default is true  showzigversionbool if true shows the version of zig currently used to run the benchmark default is true  showsummarybool if true shows the summary after the entire benchmark is finished ie the fastest test and comparison with other tests default is true  showsummarycomparisonbool if true shows the comparison of the fastest test with the other tests else summary only displays the fastest test default is true  showoutputbool if false no output is printed to stdout default is true  enablewarmupbool if true measures a noophttpsenwikipediaorgwikinopcodejavascript function to calculate function call overhead which will be subtracted from results for more accurate data default is true  iterationsu16 the maximum number of iterations to perform if the budget expires default is 10  budgetu64 the maximum time in nanoseconds allotted to measure if the maximum iterations expire default is 2 secs  hooksstruct hooks to execute during the benchmark lifecycle defaults are noop  beforeallcallbackfn runs once before starting the benchmark  afterallcallbackfn runs once after finishing the benchmark  beforeeachcallbackfn runs before measuring each test  aftereachcallbackfn runs after measuring each test  exportjsonconst u8 exports the raw benchmark data in nanoseconds to the provided json file path default is null   benchmarkdeinit release all allocated memory zig defer benchdeinit    benchmarkaddname const u8 function callbackfn add a function to the test suite zig try benchaddmy function myfunction     fn myfunction void   some code here to be measured     benchmarkrun after adding all the tests start the benchmark after finishing results are sorted from fastest to slowest zig try benchrun  some of the internal functions are exposed for users convenience   getcpunameallocator returns the name of the host device cpu such as 12th gen intelr coretm i712700h apple m1 max etc   fmtintu32u32int returns a formatter which can convert u32 integers to short forms like 26312k 2906m if you have any questions feel free to join the discord server herehttpsdiscordcominvitetfba2z8mbq  credits zoop is inspired from hyperfinehttpsgithubcomsharkdphyperfine and mitatahttpsgithubcomevanwasheremitata  license this repository uses mit license see licensehttpsgithubcomtr1ckydevzoopblobmainlicense for full license text ","karlseguin/smtp_client.zig":"smtp client for zig 404 not found","gonzooo/zig-win32":"bindings for win32, with and without win32_lean_and_mean  zigwin32  archived i would suggest using this libraryhttpsgithubcommarlersoftzigwin32 instead if there is some reason you cannot feel free to reach out and ill unarchive this so people can continue to work on it if they want  linking you will need to add something like the following to your buildzig depending on what you end up using if youre using the win32c module most functions are annotated with their library information so you dont need to link anything but at the time of writing the leanandmean module is not annotated with that in mind you may have to add build instructions like the following depending on which functions you use zig const exe  baddexecutableexecutablename srcmainzig exeaddpackagepathwin32 dependencieszigwin32srcmainzig exelinksystemlibraryc exelinksystemlibrarygdi32 exelinksystemlibraryuser32 exelinksystemlibrarykernel32   usage in files a simple import will do it access the subnamespaces with c and leanandmean zig const win32  importwin32   win32cmessageboxa  or import one of the subnamespaces directly zig const win32  importwin32leanandmean   win32messageboxa   macros not available in the ffi files makeintresourceaw is not available in the generated files but is available in the top namespace zig const win32  importwin32 const resource windowslpstr  win32makeintresourcea32512  ","ziglibs/ini":"a teeny tiny ini parser  ini parser library this is a very simple iniparser library that provides  raw record reading  leadingtrailing whitespace removal  comments  zig api  c api  usage example  zig zig const std  importstd const ini  importini pub fn main void  const file  try stdfscwdopenfileexampleini  defer fileclose var gpa  stdheapgeneralpurposeallocator defer if gpadeinit  ok panicmemory leaked var parser  iniparsegpaallocator filereader  defer parserdeinit var writer  stdiogetstdoutwriter while try parsernext record  switch record  section  heading try writerprintsn heading property  kv try writerprints  sn  kvkey kvvalue  enumeration  value try writerprintsn value      c c include inih include stdioh include stdboolh int main  file  f  fopenexampleini rb iff return 1 struct iniparser parser inicreatefileparser f  2 struct inirecord record whiletrue  enum inierror error  ininextparser record iferror  inisuccess goto cleanup switchrecordtype  case inirecordnul goto done case inirecordsection printfsn recordsection break case inirecordproperty printfs  sn recordpropertykey recordpropertyvalue break case inirecordenumeration printfsn recordenumeration break   done cleanup inidestroyparser fclosef return 0   ","sasluca/zig-nanoid":"a tiny, secure, url-friendly, unique string id generator. now available in pure zig.  nano id in zig licensehttpsimgshieldsiobadgelicensemit20licensebluesvghttpsgithubcomsaslucananoidzigmasterlicense cross build testshttpsgithubcomsaslucazignanoidactionsworkflowscrossbuildymlbadgesvghttpsgithubcomsaslucazignanoidactionsworkflowscrossbuildyml maintenance intention for this cratehttpsimgshieldsiobadgemaintenanceactivelydevelopedbrightgreensvg img srchttpsrawgithubusercontentcomsaslucazignanoidmainlogosvg alignright altnano id x zig logo by anton lovchikov adapted by luca sas width180 height94 a battletested tiny secure urlfriendly unique string id generator now available in pure zig  freestanding zignanoid is entirely freestanding  fast the algorithm is very fast and relies just on basic math speed will mostly depend on your choice of rng  safe it can use any random generator you want and the library has no errors to handle  short ids it uses a larger alphabet than uuid azaz09 so id length was reduced from 36 to 21 symbols and it is url friendly  battle tested original implementation has over 18 million weekly downloads on npmhttpswwwnpmjscompackagenanoid  portable nano id was ported to 20 programming languageshttpsgithubcomainanoidotherprogramminglanguages  example basic usage with stdcryptorandom zig const std  importstd const nanoid  importnanoid pub fn main void  const result  nanoidgeneratestdcryptorandom stdloginfonanoid s result    comparison to uuid nano id is quite comparable to uuid v4 randombased it has a similar number of random bits in the id 126 in nano id and 122 in uuid so it has a similar collision probability it also uses a bigger alphabet so a similar number of random bits are packed in just 21 symbols instead of 36 for there to be a one in a billion chance of duplication 103 trillion version 4 ids must be generated  how to use  generating an id with the default size the simplest way to generate an id with the default alphabet and length is by using the function generate like so zig const result  nanoidgeneratestdcryptorandom  if you want a custom alphabet you can use generatewithalphabet and pass either a custom alphabet or one from nanoidalphabets zig const result  nanoidgeneratewithalphabetstdcryptorandom nanoidalphabetsnumbers  this id will only contain numbers  you can find a variety of other useful alphabets inside of nanoidalphabets the result is an array of size defaultidlen which happens to be 21 which is returned by value there are no errors to handle assuming your rng object is valid everything will work the default alphabet includes the symbols  numbers and english lowercase and uppercase letters  generating an id with a custom size if you want a custom alphabet and length use generateex or generateexwithiterativerng the function generateex takes an rng an alphabet a resultbuffer that it will write the id to and a stepbuffer the stepbuffer is used by the algorithm to store a random bytes so it has to do less calls to the rng and stepbufferlen must be at least computerngstepbufferlengthcomputemasktruncateu8 alphabetlen resultbufferlen alphabetlen the function generateexwithiterativerng is the same as generateex except it doesnt need a stepbuffer it will use randomintu8 instead of randombytes to get a random byte at a time thus avoiding the need for a rng step buffer normally this will be slower but depending on your rng algorithm or other requirements it might not be so the option is there in case you need but normally it is recommended you use generateex which requires a temporary buffer that will be filled using randombytes in order to get the best performance additionally you can precompute a sufficient length for the stepbuffer and preallocate it as an optimization using computesufficientrngstepbufferlengthfor which simply asks for the largest possible id length you want to generate if you intend to use the defaultidlen you can use the constant nanoidrngstepbufferlensufficientfordefaultlengthids  regarding rngs you will need to provide an random number generator rng yourself you can use the zig standard library ones either stdranddefaultprng or if you have stricter security requirements use stdranddefaultcsprng or stdcryptorandom when you initialize them you need to provide a seed providing the same one every time will result in the same ids being generated every time you run the program except for stdcryptorandom if you want a good secure seed you can generate one using stdcryptorandombytes here is an example of how you would initialize and seed stdranddefaultcsprng and use it zig  generate seed var seed stdranddefaultcsprngsecretseedlengthu8  undefined stdcryptorandombytesseed  initialize the rng and allocator var rng  stdranddefaultcsprnginitseed  generate id var id  nanoidgeneraterngrandom   add zignanoid to your project  manually to add the library as a package to your zig project 1 download the repo and put it in a folder eg thirdparty in your project 2 import the librarys buildzig in your build script eg const nanoid  importthirdpartynanoidzigbuildzig 3 add the library as a package to your steps eg exeaddpackagenanoidgetpackagenanoid full example zig  buildzig const std  importstd const nanoid  importthirdpartyzignanoidbuildzig pub fn buildb stdbuildbuilder void  const target  bstandardtargetoptions const mode  bstandardreleaseoptions const exe  baddexecutablezignanoidtest srcmainzig exesettargettarget exesetbuildmodemode exeaddpackagenanoidgetpackagenanoid exeinstall    using the gyro package manager we support the zig gyro package managerhttpsgithubcommattnitegyro here is how to use it 1 from your terminal initialize a gyro project and add the package saslucananoid  gyro init gyro add saslucananoid  2 in your buildzig do an import like so const pkgs  importdepszigpkgs and call pkgsaddalltoexe to add all libraries to your executable or some other target 3 import const nanoid  importnanoid in your mainzig and use it 4 invoke gyro build run which will generate depszig and other files as well as building and running your project  useful links  original implementation httpsgithubcomainanoid  online tool httpszelarkgithubionanoidcc ","rcalixte/libqt6zig":"qt 6 for zig div aligncenter img altlibqt6zig srcassetslibqt6zigpng height128px  mit licensehttpsimgshieldsiobadgelicensemitgreen go report cardhttpsgoreportcardcombadgegithubcomrcalixtelibqt6zighttpsgoreportcardcomreportgithubcomrcalixtelibqt6zig static badgehttpsimgshieldsiobadgev01420stablef7a41dlogoziglogocolorf7a41dlabelzighttpsziglangorgdownload div  mitlicensed qt 6 bindings for zig this library is a straightforward binding of the qt 64 api you must have a working qt 6 c development toolchain to use this binding the buildingbuilding section below has instructions for installing the required dependencies this library is designed to be used as a dependency in a larger application and not as a standalone library the versioning scheme used by this library is based on the qt version used to generate the bindings with an additional nod to the library revision number any breaking changes to the library will be reflected in the changelog these bindings are based on the miqt bindings for gohttpsgithubcommappumiqt that were released in 2024 the bindings are complete for qtcore qtgui qtwidgets qtmultimedia qtmultimediawidgets qtspatialaudio qtprintsupport qtsvg qtnetwork qtwebchannel qtwebengine qscintilla and others there is support for slotssignals subclassing custom widgets async via qt etc but the bindings may be immature or unstable in some ways it is fairly easy to encounter segmentation faults with improper handling q3 of the faqfaq is a decent entry point for newcomers please try out the library and start a discussionhttpsgithubcomrcalixtelibqt6zigdiscussions if you have any questions or issues relevant to this library  table of contents   supported platformssupportedplatforms  licenselicense  examplesexamples  buildingbuilding  usageusage  faqfaq  special thanksspecialthanks supported platforms   os  arch  linkage bindings  status            freebsd  x8664  static   works   linux  arm64  static   works   linux  x8664  static   works  license  the libqt6zig bindings are licensed under the mit license you must also meet your qt license obligations examples  the helloworldhttpsgithubcomrcalixtelibqt6zigexamplestreemastersrchelloworldmainzig example follows zig const std  importstd const qt6  importlibqt6zig const qapplication  qt6qapplication const qpushbutton  qt6qpushbutton const qwidget  qt6qwidget var counter isize  0 pub fn main void   initialize qt application const argc  stdosargvlen const argv  stdosargvptr   qapplicationnewargc argv const text  hello world const widget  qwidgetnew2 if widget  null panicfailed to create widget defer qwidgetqdeletewidget  we dont need to free the button its a child of the widget const button  qpushbuttonnew5text widget qpushbuttonsetfixedwidthbutton 320 qpushbuttononclickedbutton buttoncallback qwidgetshowwidget   qapplicationexec stddebugprintokn   fn buttoncallbackself anyopaque callconvc void  counter  1 var buffer 64u8  undefined const text  you have clicked the button  times const formatted  stdfmtbufprintzbuffer text counter catch panicfailed to bufprintz qpushbuttonsettextself formatted   full examples are available in the libqt6zigexampleshttpsgithubcomrcalixtelibqt6zigexamples repository building  freebsd native   tested with freebsd 14  qt 68 for dynamic linking with the qt 6 system libraries bash sudo pkg install qt6base qt6multimedia qt6svg qt6webchannel qt6webengine qscintilla2qt6 zig   note  the zig package may need to be downloaded or compiled and installed separately if the latest stable version is not available in the default repositories linux native   tested with debian 12  13  qt 64  67  tested with linux mint 22  qt 64  tested with ubuntu 2404  qt 64  tested with fedora 41  qt 68  tested with endeavouros mercury  qt 68 for dynamic linking with the qt 6 system libraries  debianbased distributions bash sudo apt install qt6basedev libqscintilla2qt6dev qt6baseprivatedev qt6multimediadev qt6svgdev qt6webchanneldev qt6webenginedev   note  the zig package must be downloaded and installed separately  fedorabased distributions bash sudo dnf install qt6qtbasedevel qscintillaqt6devel qt6qtmultimediadevel qt6qtsvgdevel qt6qtwebchanneldevel qt6qtwebenginedevel zig   note  the zig package will need to be downloaded and installed separately if the latest stable version is not available in the default repositories  archbased distributions bash sudo pacman s qt6base qscintillaqt6 qt6multimedia qt6svg qt6webchannel qt6webengine zig  once the required packages are installed the library can be built from the root of the repository bash zig build  users of archbased distributions need to make sure that all packages are uptodate first and will need to add the following option to support successful compilation bash zig build denableworkaroundtrue  the compiled libraries can be installed to the system in a nondefault location by adding the prefixlibdir option to the build command bash sudo zig build prefixlibdir usrlocalliblibqt6zig  creates usrlocalliblibqt6ziglibraries  to skip the restricted extras bash zig build dskiprestrictedtrue  to see the full list of build options available bash zig build help  usage   import the library into your project bash zig fetch save githttpsgithubcomrcalixtelibqt6zig  append tag commit or branch to the end of the url to pin to a specific version of the library  add the library to your buildzig file zig const qt6zig  bdependencylibqt6zig  target  target optimize  releasefast   after defining the executable add the module from the library exerootmoduleaddimportlibqt6zig qt6zigmodulelibqt6zig  link the compiled libqt6zing libraries to the executable  qtlibname is the name of the target library without prefix and suffix eg qapplication qwidget etc exerootmodulelinklibraryqt6zigartifactqtlibname  extra options are required for building on archbased distributions refer to the build system at the example","flyfish30/zig-cats":"a category and functional programing library for zig language  zigcats a category and functional programing library for zig monoid functor applicative monad compose product coproduct generic etc the monoidfunctorapplicativemonad has support pure data type  current supported feature list    semigroup    monoid  x functor  x natural transformation  x applicative functor  x monad  x compose  x product  x coproduct    foldable    traversable ","deckarep/zigualizer":"zigualizer: a music visualizer built with zig, powered by the fft algorithm.  zigualizer zigualizer a music visualizer built with zig powered by the fft algorithm click herehttpsyoutube6h9btywdma for a demo on youtube screenshotpng  details this implementation was originally based on the musializer project by tsodinghttpsgithubcomtsodingmusializerblobmastersrcplugc this version as it stands has been tested to work with raylib 50 i have modified this version to be backed by a generic circular buffer over a fixed size array additionally i am leveraging comptime in a few spots to generate some static windowing functions  raylib integration for a more thorough example see raylibzig in the examples folder integration is a 4step process aside from music stream code zig  1 import const fft  importzigualizer  2 init fftfftanalyzerreset  after loading up a raylib music stream track  cloadmusicstreampathtotrack defer cunloadmusicstreamtrack  3 attach cattachaudiostreamprocessortrackstream fftfftanalyzerfftprocesscallback cplaymusicstreamtrack  in your update loop fn update void  cupdatemusicstreamtrack  4 analyze frames  fftfftanalyzeranalyzecgetframetime   in your draw loop render the fft however you like fn draw void  cbegindrawing defer cenddrawing cclearbackgroundcblack  5 draw renderfft400 200    building the examples sh  run the raylib demo zig build dexamplenameraylibzig  zigoutexampleraylib  ","allyourcodebase/cpython":"a port of the cpython implementation of the python programming language to the zig build system  cpython zig package this is a fork of cpythonhttpswwwpythonorg packaged for zig unnecessary files have been deleted and the build system has been replaced with buildzig there are no system dependencies the only thing required to build this package is zighttpsziglangorgdownload this builds a static executable which can be then executed like this  pythonpathlib zigoutbincpython   project status my personal use case is to run the latest ytdlphttpsgithubcomytdlpytdlp releases this package is capable of doing that however there may be missing features beyond what is required for this use case such as missing c modules i have tested on x8664linuxgnu and x8664linuxmusl but not any other targets yet probably other targets will need some work before they are additionally supported contributions to broaden the support status are welcome ","karlseguin/ztl":"templating language for zig 404 not found","games-by-mason/tween":"common easing and interpolation functions for game development.  tween rigid motion often appears unnatural this library provides easing and interpolation functions widely used in game development to create natural looking or stylized tweens inbetweens example usage zig const tween  importtween const lerp  tweeninterplerp const ease  tweenease   pos  lerpstart end easebounceoutt   interpolation the following interpolation functions are provided  lerp  ilerp  remap  clamp01  damp linear interpolation differs from the implementation in the standard library in that it returns exact results at 0 and 1 additionally it accepts a larger variety of types  floats  vectors  arrays  structures containing other supported types ilerp is the inverse of lerp and only accepts floats remap uses a combination of ilerp and lerp to remap a value from one range to another clamp01 is what it sounds like and is provided for convenience you can apply it to a t value getting passed to lerp to create a clamped lerp damp is useful for framerate independent lerpinghttpswwwrorydriscollcom20160307framerateindependentdampingusinglerp if youre unfamiliar with this class of functions i recommend viewing the simple yet powerful math we dont talk abouthttpswwwyoutubecomwatchvnzjf1pdlk7y by freya holmerhttpswwwacegikmocom  ease the following easing functions are supported most of these originated with robert pennerhttprobertpennercomeasing  linear  sinehttpseasingsneteaseinsine  quadhttpseasingsneteaseinquad  cubichttpseasingsneteaseincubic  quarthttpseasingsneteaseinquart  quinthttpseasingsneteaseinquint  exphttpseasingsneteaseinexpo  circhttpseasingsneteaseincirc  backhttpseasingsneteaseinback  elastichttpseasingsneteaseinelastic  bouncehttpseasingsneteaseinbounce  step  smoothstephttpsenwikipediaorgwikismoothstep  smootherstephttpsenwikipediaorgwikismoothstepvariations ive opted to not include gifs demonstrating the easing styles here as easingsnethttpseasingsnet already has a great visualizer for almost all of these note that the links above are provided for convenient reference the actual implementations may not be 100 identical or may have slightly different parameters in out and inout variations of each are provided functions are exact at 0 and 1 for 32 bit floats unless otherwise noted easing functions operate on the t value given to lerp for example zig const result  lerpa b easesmootherstept  if youre new to easing and not sure which to use smootherstep is a reasonable default to slap on everything to start you can adapt easing functions with mix combine reflect and reverse the provided easing functions are exact at 0 and 1 for 32 bit floats unless otherwise noted when designing your own easing functions i highly recommend testing them in desmoshttpswwwdesmoscomcalculator  build configuration if youre shipping binaries you probably have a min spec cpu in mind i recommend making sure muladd is enabled for your baseline so it doesnt end up getting emulated in software more info herehttpsgamesbymasoncomdevlog2025muladd on x86 this means enabling fma on armaarch64 this means enabling either neon or vfp4 ","vexu/comptime_hash_map":"a statically initiated hashmap  comptime hashmap a statically initiated hashmap originally a pull request to the zig std lib 5359httpsgithubcomziglangzigpull5359  installation build for zig 0130 sh zig fetch save githttpsgithubcomvexucomptimehashmap  in your buildzig zig const chm  bdependencycomptimehashmap  exerootmoduleaddimportcomptimehashmap chmmodulecomptimehashmap  in your exe module zig const chm  importcomptimehashmap  ","ymndoseijin/zilliam":"a geometric algebra library for zig  zilliam zilliam is a geometric algebra library that generates a simd optimized library for any given clpqr algebra it can be used for  pga projective geometric algebra for which zilliam has a special for generating all needed mask types where you can easily construct points lines and planes in any dimension and do projection rotations intersections and more between all of them under the same syntax it has many uses for computer graphics and physics it can also model conformal transformations using cga  modelling complex numbers quaternions dual numbers and many more other clifford algebras under a single interface generating simd optimized code for all of them this makes it possible to use zilliam for automatic differentiation complex analysis  calculate lorentz boosts and more using an sta spacetime algebra which also provides a very useful model for doing electrodynamics work for all these applications zilliam gives you access to useful functions such as the trigonometric functions the exponential and also useful concepts such as the poincare dual and wedge operations it also provides a sort of operation overloading through a comathhttpsgithubcominkryptioncomath interface which allows you to evaluate complex expressions more easily and without much compile time cost it currently has the following operations syntax for the eval function  ab geo  a reverse  ab wedge  ab regressive  a dual  ab inner product  a grade involution  ak grade projection  a undual it generates simd operations for any generic clifford algebra for all these operations and for any generic type as well zig const alg  algebrai32 2 1 1 try stdtestingexpectequalslices i32 try algeval14e1  21e2  7e12  24 val try algeval2e13e25e12  11e113e217e12 val  try stdtestingexpectequalslices i32 try algeval109  654e0  129e1  127e2  214e12 val try algeval23e02e13e25e127  31e011e113e217e1219 val   as you can see it also uses the amazing comathhttpsgithubcominkryptioncomath library to overload operations in the case where you know the grade of the multivectors you are working with which is most practical cases zilliam generates types for like kvector plus the even subalgebra and dispatches among them zig const alg  algebraf32 3 0 1 const blades  getbladesalg const types  bladestypes const vector  types1 const bivector  types2 const trivector  types3 pub fn main void  const bivectorbatch  bivectorgetbatchtype2 const vectorbatch  vectorgetbatchtype2 for 0bivectorcount ai  for 0vectorcount bi  var a  bivectorbatch var b  vectorbatch avalai   1 2  bvalbi   1 2  var buf 2048u8  undefined  this is a trivector it gets properly dispatched const res  awedgeb for 02 i  const rw  resgeti var rs  try agetiprintbuf stddebugprints   rs rs  try bgetiprintbuf stddebugprints   rs rs  try rwprintbuf stddebugprintsn rs  stddebugprintn        10000e13  10000e0  10000e013  20000e13  20000e0  40000e013    for more examples and a guide for using zilliam on your project check the wikihttpsgithubcomymndoseijinzilliamwikiexamples  todo  add more general utilities beyond just the pga one and improve the calculation of functions  eventually hook it up to my graphics library to start doing visualizations maybe something on par with ganjajs  references  thanks to kleinhttpsgithubcomjeremyongklein specially who gave me the idea to generate simd operations and something to compare the generated code to  also thanks to the people at bivectornethttpsbivectornetindexhtml and specially their toolshttpsbivectornettoolshtml page whose tables and calculators helped me verifying the correctness of my own code ","zhuyadong/zoop":"a zig oop solution  readmecnmd  englishreadmemd  zoop is an oop solution for zig  install in the project root directory shell zig fetch githttpsgithubcomzhuyadongzoopgit savezoop  if you want to install a specific version shell zig fetch githttpsgithubcomzhuyadongzoopgitref id savezoop   define the class zig  define a class human pub const human  struct   the first field of the zoop class must be aligned to zoopalignment name const u8 alignzoopalignment age u8  30  if there is no cleanup work can skip define deinit pub fn deinitself human void  selfname    pub fn getnameself const human const u8  return selfname  pub fn setnameself human name const u8 void  selfname  name     creating and destroying class objects zig const t  stdtesting  create a human on the heap var phuman  try zoopnewtallocator human null  if the class field has a default value the object field will be initialized to the default value try texpectphumanage  30  destroy the object and release the memory  if the class defines deinit it will be called first and then release the memory zoopdestroyphuman  create a human on the stack var human  zoopmakehuman null  access object fields through ptr try texpecthumanptrage  30  clean up the object call deinit if any  if there is no work to clean up you dont need to call zoopdestroy zoopdestroyhumanptr  both zoopnew and zoopmake support creationtime initialization phuman  try zoopnewtallocator human name  heapobj age  1 human  zoopmakehuman name  stackobj age  2 try texpectphumanage  1 try texpecthumanptrage  2  note about deinit zoopdestroy will sequentially call the deinit method of the class and all its parent classes  inheritance zig  define superman inherit from human  the parent class must be the first field and the alignment is zoopalignment  the field name is arbitrary and does not have to be super but it is recommended to use super pub const superman  struct  super human alignzoopalignment  superman can live a long time u8 cant satisfy it we use u16 age u16  9999 pub fn getageself superman u16  return selfage  pub fn setageself superman age u16 void  selfage  age    first create a superman object var psuperman  try zoopnewtallocator superman null call parent class method psupermansupersetnamesuper  or call the parent class method like this this method is suitable for situations where the  inheritance hierarchy is too deep and you dont know which parent class implements the setname method  in addition since it is called upcall it means that even if superman implements setname  the following call will still call the setname method of the nearest parent class zoopupcallpsuperman setname super  you can also flexibly access all fields in the class inheritance tree for example  if you want to access the humanage field you can do this var phumanage  zoopgetfieldpsuperman age u8 try texpectphumanage  30  access supermanage you can do this var psuperage  zoopgetfieldpsuperman age u16 try texpectpsuperage  9999  note that if two age are of the same type and both are called age  the above zoopgetfield call will cause a compilation error to avoid bugs   class type conversion zig  first create a human and a superman var phuman  try zoopnewtallocator human null var psuper  try zoopnewtallocator superman null  subclasses can be converted to parent classes texpectzoopaspsuper human  null texpectzoopcastpsuper humanage  30  the parent class cannot be converted to a subclass if zoopcast is used a compilation error will occur texpectzoopasphuman superman  null  a parent class pointer to a subclass can be converted to a subclass phuman  zoopcastpsuper human try texpectzoopasphuman superman  null   define the interface zig  define an interface iname for accessing names pub const iname  struct   the interface can only define two fields ptr and vptr  and the names and types must be the same as below ptr anyopaque vptr anyopaque  define the getname interface method pub fn getnameself ihuman const u8  return zoopicallself getname    define the setname interface method pub fn setnameself ihuman name const u8 void  zoopicallself setname name   dont worry about what zoopicall is just follow it   define another interface iage for accessing age pub const iage  struct  ptr anyopaque vptr anyopaque pub fn getageself ihuman u16  return zoopicallself getage   pub fn setageself ihuman age u16 void  zoopicallself setage age    interfaces can also be inherited pub const inameandage struct  pub const extends  iname iage ptr anyopaque vptr anyopaque   can specify exclude apis  only methods defined in this interface can be specified  and inherited methods will not be affected pub const inameandage struct  pub const extends  iname iage  exclude eql method pub const excludes  eql ptr anyopaque vptr anyopaque pub fn eqlself inameandage other inameandage bool  return selfptr  otherptr    interfaces can also provide default implementations of methods  so that classes that declare to implement interfaces can still  compile and work correctly without implementing these methods  the interface becomes an abstract class pub const iname  struct   same as above code pub fn defaultcomptime class type type  return struct  pub fn getname class const u8  return default name       implementing the interface zig  we let human implement the iname interface pub const human  struct  pub const extends  iname  same as above code   let superman implement the iage interface pub const superman  struct  pub const extends  iage same as above code   the interface implemented by the parent class is automatically implemented by the class  so superman also implements iname although it only declares that it implements iage  a subclass can repeatedly declare that it implements an interface that has already been implemented  by its paren","andrewrk/xml":"tokenize xml  xml a library for tokenizing xml  building  zig build   testing  zig build test  ","bitlytwiser/snek":"snek - a simple cli parser to build cli applications in zig div aligncenter img srcassetslogopng width450 height500  snek a simple cli parser building cli applications in zig  contents usageusage  building the clibuildyourcli  examplesexamples  optionalsoptionals  default valuesdefaultvalues  help menuhelpmenu  what is not supportedwhatisnotsupported div  usage add snek to your zig project with zon  zig fetch save httpsgithubcombitlytwisersnekarchiverefstagsv011targz  add the following to buildzig file  const snek  bdependencysnek  exerootmoduleaddimportsnek snekmodulesnek   build your cli snek builds dynamic yet simple clis using zigs meta programming to infer the struct fields the expected types then insert the incoming data from the stdin arguments and serialize that data into the given struct mapping the data values to the given fields and marshalling the data into the proper type  const t  struct  booltest bool word const u8 testopt u32 testdefault const u8  i am static if not set by user  var snek  try snektinitstdheappageallocator const parsed  try snekparse  do stuff with the fields of the struct after parsing stddebugprintany parsed  when the user goes to interact with the application they can now utilize the flags you have established to run specific commands see the completedexamplefullexecution and functional example below or checkout the main filesrcmainzig in the repo for a full working example as well  items to note 1 if the user does not supply a value and the field is not otional that is a failure case and a message is displayed to the user 2 if there is a default value on the field of the struct and a vale is not passed for that field it is treated as an optional case and will use the static value ie no error message and value is set 3 simple structs only for now no recursive struct fields at the moment ie no embeded structs 4 if the users passed the wrong type which differes from what is expeected ie the type of the struct field this is an error case and a message will be displayed to the user 5 if you want to handle the errors yourself the clierror struct is public so you can catch errors on the parse call  const t  struct  booltest bool word const u8 testopt u32 testdefault const u8  i am static if not set by user  var snek  try snektinitstdheappageallocator  adjust to actually use value of course   snekparse catch err  switche   do stuff with the errors     examples using the above struct as a reference here are a few examples of calling the cli  example  help command  yourappname help  or yourappname h  note as you can see the optionals are just that optional they are not required by your users and can be checked in the calling code in the standard ways that zig handles optionals this is a design decisions allowing flexibility over the cli to not lock users into using every flag etc  example  optionals  yourappname booltesttrue wordi am a word   example  defaults  yourappname booltesttrue wordi am a word  or to override the default field yourappname booltesttrue wordi am a word testdefaultsi am a different word   example  full execution  const std  importstd const snek  importlibzigsnek  binary is also compiled for showcasing how to use the api const t  struct  name const u8 location u32 exists bool necessary bool filledoptional const u8 defaultname const u8  test default name   example command after compilation  zigoutbinsnek nametest mctest location420 existstrue pub fn main void  var cli  try snektinitstdheappageallocator const parsedcli  try cliparse  necessary is skipped here to showcase optional values being ignored stddebugprintname sn location dn exists anyn defualt value sn filled optional sn  parsedcliname parsedclilocation parsedcliexists parsedclidefaultname parsedclifilledoptional orelse badvalue    compile with zig build then run the cli command  zigoutbinsnek nametest mctest location420 existstrue   optionals using zig optionals you can set selected flags to be ignored on the cli thus giving flexibilitiy on the behalf of the cli creator to use or not use selected flags at their whimsy  default values you can use struct defaut values to set a static value if one is not parsed this can be useful for certain flags for conditional logic branching later in program execution  help menu snek dynaically builds the help menu for your users by calling the help function you can display how to use your cli  const t  struct  booltest bool word const u8 testopt u32  var snek  try snektinitstdheappageallocator const parsed  try snekhelp  output  cli flags help menu  booltestbool optional false wordpointer optional false testoptoptional optional true   alternatively if users call help as the first arguments in the cli it will also display the help menu  yourappname help  or yourappname h  this will display the help menu and skip all other parsing so its important to note that this is effectively an exit case for the parser and your program you should build your application to support this  what is not supported  recursive struct types for subcommand fields at this time no recursive flags are supported ie you cannot use a slice of structs as a field in the primary cli interface struct and have those fields parsed as subcommand fields perhaps if this is requested we could work that into the application it seemed slightly messy and unecessray for a simple cli builder but perhaps expansion will be necessary there if its requested  topusage ","theseyan/bufzilla":"simple serialization in pure zig   bufzilla buffer  zilla a simple and fast binary encoding format in pure zig originally based on rxis article  a simple serialization systemhttpsrxigithubioasimpleserializationsystemhtml bufzilla is ideal for serializing jsonlike objects and arrays and has the following qualities  portable across endianness and architectures  schemaless fully selfdescribing format no precompilation is necessary  zerocopy reads directly from the encoded bytes  variable length integer encoding enabled by default no wasted bytes  data can be read linearly without any intermediate representation eg trees  printing encoded objects as json via inspect api  serialize zig structs and data types recursively  installation  zig version 014 sh zig fetch httpsgithubcomtheseyanbufzillaarchiverefstagsversiontargz  copy the hash generated and add bufzilla to your buildzigzon zig  dependencies   bufzilla   url  httpsgithubcomtheseyanbufzillaarchiverefstagsversiontargz hash  hash      usage the writerwriteany function can serialize primitive data types as well as zig structs and tuples coupled with the writerstartobject writerstartarray and writerendcontainer functions it can be used to incrementally build a message as well zig const writer  importbufzillawriter var writer  writerinitstdheapcallocator defer writerdeinit const datatype  struct  a i64 b struct  c bool  d const union enum  null void f64 f64 string const u8   const data  datatype a  123 b   c  true  d    f64  123123   null  null   string  value    try writerwriteanydata try stddebugprint  writerbytes   lets print out the object as a json string via inspect api zig const inspect  importbufzillainspect var buf  stdarraylistu8initstdtestingallocator defer bufdeinit var writer  bufwriter var inspector  inspectinitencodedbytes writer  try inspectorinspect  writes the json string to buf stddebugprints  bufitems   which prints the following json json  a 123 b  c true  d  12312300000000000 null value    you can find more examples of usage in the unit testshttpsgithubcomtheseyanbufzillatreemaintest  caveats  as a selfdescribing format field names keys are present in the encoded result which can inflate the encoded size  testing unit tests are present in the test directory bash zig build test   benchmarks todo ","nektro/zig-inquirer":"a collection of utilities for prompting information from the user on the cli  ziginquirer a collection of utilities for prompting information from the user on the cli adapted from httpsgithubcomsboudriasinquirerjs  add me  zigmod aq add 1nektroinquirer   run example  zig build run   screenshots imagehttpsuserimagesgithubusercontentcom5464072127479686fda8f860a7054fd69768a3e1f53a6bc7png  usage  pub fn answerwriter reader comptime prompt const u8 value const u8 const u8  prints just the done string  pub fn forenumwriter reader comptime prompt const u8 alloc stdmemallocator comptime options enum default options options  accepts an enum and prompts the user to pick on of the fields  pub fn forstringwriter reader comptime prompt const u8 alloc stdmemallocator default const u8 const u8  base function asks prompt and returns nonempty answer  pub fn forconfirmwriter reader comptime prompt const u8 alloc stdmemallocator bool  calls forenum with yn  todo  number current implementation causes compiler crash  list with strings  string password  long list with autocomplete  date  time  license mit ","kassane/openssl-zig":"tls/ssl and crypto library (uses zig build) welcome to the openssl project forked to zigpkg support v0140  openssl logowwwopensslorg zig buildhttpsgithubcomkassaneopensslactionsworkflowszigymlbadgesvghttpsgithubcomkassaneopensslactionsworkflowszigyml zig embeddedhttpsgithubcomkassaneopensslactionsworkflowszigembeddedymlbadgesvghttpsgithubcomkassaneopensslactionsworkflowszigembeddedyml openssl is a robust commercialgrade fullfeatured open source toolkit for the tls formerly ssl dtls and quic currently client side only protocols the protocol implementations are based on a fullstrength general purpose cryptographic library which can also be used standalone also included is a cryptographic module validated to conform with fips standards openssl is descended from the ssleay library developed by eric a young and tim j hudson the official home page of the openssl project is wwwopensslorg table of contents   overviewoverview  downloaddownload  build and installbuildandinstall  documentationdocumentation  licenselicense  supportsupport  contributingcontributing  legalitieslegalities overview  the openssl toolkit includes  libssl an implementation of all tls protocol versions up to tlsv13 rfc 8446 dtls protocol versions up to dtlsv12 rfc 6347 and the quic currently client side only version 1 protocol rfc 9000  libcrypto a fullstrength general purpose cryptographic library it constitutes the basis of the tls implementation but can also be used independently  openssl the openssl command line tool a swiss army knife for cryptographic tasks testing and analyzing it can be used for  creation of key parameters  creation of x509 certificates csrs and crls  calculation of message digests  encryption and decryption  ssltlsdtls and client and server tests  quic client tests  handling of smime signed or encrypted mail  and more download  for production use  source code tarballs of the official releases can be downloaded from wwwopensslorgsourcehttpswwwopensslorgsource the openssl project does not distribute the toolkit in binary form however for a large variety of operating systems precompiled versions of the openssl toolkit are available in particular on linux and other unix operating systems it is normally recommended to link against the precompiled shared libraries provided by the distributor or vendor we also maintain a list of third parties that produce openssl binaries for various operating systems including windows on the binaries page on our wiki for testing and development  although testing and development could in theory also be done using the source tarballs having a local copy of the git repository with the entire project history gives you much more insight into the code base the official openssl git repository is located at gitopensslorg there is a github mirror of the repository at githubcomopensslopenssl which is updated automatically from the former on every commit a local copy of the git repository can be obtained by cloning it from the original openssl repository using git clone gitgitopensslorgopensslgit or from the github mirror using git clone httpsgithubcomopensslopensslgit if you intend to contribute to openssl either to fix bugs or contribute new features you need to fork the openssl repository opensslopenssl on github and clone your public fork instead git clone httpsgithubcomyournameopensslgit this is necessary because all development of openssl nowadays is done via github pull requests for more details see contributingcontributing build and install  after obtaining the source have a look at the installinstallmd file for detailed instructions about building and installing openssl for some platforms the installation instructions are amended by a platform specific document  notes for unixlike platformsnotesunixmd  notes for android platformsnotesandroidmd  notes for windows platformsnoteswindowsmd  notes for the dos platform with djgppnotesdjgppmd  notes for the openvms platformnotesvmsmd  notes on perlnotesperlmd  notes on valgrindnotesvalgrindmd specific notes on upgrading to openssl 3x from previous versions can be found in the osslguidemigration7ossl manual page documentation  readme files  there are some readmemd files in the top level of the source distribution containing additional information on specific topics  information about the openssl quic protocol implementationreadmequicmd  information about the openssl provider architecturereadmeprovidersmd  information about using the openssl fips validated modulereadmefipsmd  information about the legacy openssl engine architecturereadmeenginesmd the openssl guide  there are some tutorial and introductory pages on some important openssl topics within the openssl guide manual pages  the manual pages for the master branch and all current stable releases are available online  openssl masterhttpswwwopensslorgdocsmanmaster  openssl 30httpswwwopensslorgdocsman30  openssl 31httpswwwopensslorgdocsman31  openssl 32httpswwwopensslorgdocsman32 demos  the are numerous source code demos for using various openssl capabilities in the demos subfolderdemos wiki  there is a wiki at wikiopensslorg which is currently not very active it contains a lot of useful information not all of which is uptodate license  openssl is licensed under the apache license 20 which means that you are free to get and use it for commercial and noncommercial purposes as long as you fulfill its conditions see the licensetxtlicensetxt file for more details support  there are various ways to get in touch the correct channel depends on your requirement see the supportsupportmd file for more details contributing  if you are interested and willing to contribute to the openssl project please take a look at the contributingcontributingmd file legalities  a number of nations restrict the use or export of cryptography if you are potentially subject to such restrictions you should seek legal advice before attempting to develop or distribute cryptographic code copyright  copyright c 19982024 the openssl project authors copyright c 19951998 eric a young tim j hudson all rights reserved  links  wwwopensslorg httpswwwopensslorg openssl homepage gitop","ikskuh/zig-mqtt":"a build package for mqtt-c.  zigmqtt a build package for the awesome mqttchttpsgithubcomliambindlemqttc project by liam bindlehttpsgithubcomliambindle right now only provides a build script api in sdkzig but might contain a zig frontend in the future  usage zig const std  importstd const sdk  importsdkzig pub fn buildb stdbuildbuilder void  const mode  bstandardreleaseoptions const target  bstandardtargetoptions const lib  sdkcreatelibraryb libsetbuildmodemode libsettargettarget libinstall const exe  baddexecutable exelinklibarylib exeaddincludepathsdkincludepath    ","kubkon/zelf":"zig's elf parser utility  zelf zigs elf parsing utility  a replacement maybe someday utility for readelf written in zig  usage  usage zelf options file general options a all equivalent of having all flags on g sectiongroups display the section groups h fileheader display elf file header l programheaders display program headers if present s sectionheaders display section headers s symbols display symbol table dynsyms display the dynamic symbol table r relocs display relocations if present d dynamic display the dynamic section if present initializers display tables of initializersfinalizers if present p stringdumpnumbername dump the contents of section numbername as strings v versioninfo display the version sections if present w wide do not shorten the names if too wide x hexdumpnumbername dump the contents of section numbername as bytes help display this help and exit  currently supported flags more to come typical output will look something like this   zelf a maino elf header magic 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 class elf64 data 2s complement little endian version 1 current osabi unix  system v abi version 0 type rel relocatable file machine advanced micro devices x8664 version 0x1 entry point address 0x0 start of program headers 0 bytes into file start of section headers 28208 bytes into file flags 0x0 size of this header 64 bytes size of program headers 0 bytes number of program headers 0 size of section headers 64 bytes number of section headers 23 section header string table index 22 there are 23 section headers starting at offset 0x6e30 section headers nr name type address offset size entsize flags link info align  0 null 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0 0 0  1 notegnupr note 0000000000000000 0000000000000040 0000000000000040 0000000000000000 a 0 0 8  2 noteabitag note 0000000000000000 0000000000000080 0000000000000020 0000000000000000 a 0 0 4  3 text progbits 0000000000000000 00000000000000a0 0000000000000031 0000000000000000 ax 0 0 16  4 relatext rela 0000000000000000 0000000000000480 0000000000000030 0000000000000018 i 20 3 8  5 rodatacst4 progbits 0000000000000000 00000000000000d4 0000000000000004 0000000000000004 am 0 0 4  6 ehframe progbits 0000000000000000 00000000000000d8 000000000000005c 0000000000000000 a 0 0 8  7 relaehframe rela 0000000000000000 00000000000004b0 0000000000000030 0000000000000018 i 20 6 8  8 data progbits 0000000000000000 0000000000000134 0000000000000004 0000000000000000 wa 0 0 1  9 bss nobits 0000000000000000 0000000000000138 0000000000000000 0000000000000000 wa 0 0 1 10 comment progbits 0000000000000000 0000000000000138 0000000000000036 0000000000000001 ms 0 0 1 11 notegnustack progbits 0000000000000000 000000000000016e 0000000000000000 0000000000000000 0 0 1 12 debugaranges progbits 0000000000000000 00000000000004e0 000000000000003b 0000000000000000 c 0 0 8 13 reladebug rela 0000000000000000 0000000000000520 0000000000000090 0000000000000018 i 20 12 8 14 debuginfo progbits 0000000000000000 00000000000005b0 00000000000013c4 0000000000000000 c 0 0 8 15 reladebuginfo rela 0000000000000000 0000000000001978 00000000000041d0 0000000000000018 i 20 14 8 16 debugabbrev progbits 0000000000000000 0000000000005b48 00000000000001ac 0000000000000000 c 0 0 8 17 debugline progbits 0000000000000000 0000000000005cf8 0000000000000313 0000000000000000 c 0 0 8 18 reladebugline rela 0000000000000000 0000000000006010 0000000000000030 0000000000000018 i 20 17 8 19 debugstr progbits 0000000000000000 0000000000006040 0000000000000d1a 0000000000000001 msc 0 0 8 20 symtab symtab 0000000000000000 0000000000000170 0000000000000288 0000000000000018 21 19 8 21 strtab strtab 0000000000000000 00000000000003f8 0000000000000088 0000000000000000 0 0 1 22 shstrtab strtab 0000000000000000 0000000000006d5a 00000000000000d6 0000000000000000 0 0 1 key to flags w write a alloc x execute m merge s strings i info l link order o extra os processing required g group t tls c compressed x unknown o os specific e exclude d mbind l large p processor specific there are no program headers in this file relocation section relatext at offset 0x480 contains 2 entries offset info type sym value sym name  addend 000000000017 00150000002a rx8664rexgotpcrelx 0000000000000000 main  4 00000000001d 001900000029 rx8664gotpcrelx 0000000000000000 libcstartmain  4 relocation section relaehframe at offset 0x4b0 contains 2 entries offset info type sym value sym name  addend 000000000020 000300000002 rx8664pc32 0000000000000000 text  0 000000000050 000300000002 rx8664pc32 0000000000000000 text  30 relocation section reladebugaranges at offset 0x520 contains 6 entries offset info type sym value sym name  addend 000000000006 000b00000","ziglibs/string-searching":"string(not limited to []const u8)-searching algorithms in zig  stringsearching cihttpsgithubcomziglibszigstringsearchingworkflowscibadgesvg implementation of some stringsearch algorithms in zighttpsziglangorg compatible with zig 0130  boyermoore string searching ported from the implementation in the go standard library stringssearchgohttpsgolangorgsrcstringssearchgo  bitap algorithm inspired by the code on the wikipedia articlehttpsenwikipediaorgwikibitapalgorithm ","jetzig-framework/zmd":"zmd is a markdown library written in zig  zmd zmd is a markdownhttpsenwikipediaorgwikimarkdown parser and html translator written in 100 pure zighttpsziglangorg with zero dependencies zmd is used by the jetzig web frameworkhttpswwwjetzigdev  supported syntax  headers h1h6  bold  italic  code  links  images  fenced code blocks with info string  ordered lists  unordered lists  usage zig const std  importstd const zmd  importzmdzmd const fragments  importzmdhtmldefaultfragments pub fn main void  var zmd  zmdinitstdtestingallocator defer zmddeinit try zmdparse  header  subheader  subsubheader  some text in bold and italic  a paragraph  zig some code  some more text with a code fragment  const html  try zmdtohtmlfragments defer stdtestingallocatorfreehtml    customization the default html formatter provides a set of fragments that can be overridden fragments can be either  a twoelement tuple containing an open and close tag eg  div div   a function that receives stdmemallocator and zmdnode returning const u8 simply define a struct with the appropriate declarations of either type and zmd will use the provided fragments falling back to defaults for anything that is not defined some node types provie special attributes such as  meta  provided on block elements this is the language specifier zig in this example  zig if true stddebugprintsome zig code    href title  provided on image and link elements zig const myfragments  struct  pub const h1   h1 classtextxl fontbold h1n  pub fn blockallocator stdmemallocator node node const u8  const style  fontfamily monospace return if nodemeta meta stdfmtallocprintallocator pre classlanguages stylescodescodepre   meta style nodecontent  else stdfmtallocprintallocator pre stylescodescodepre   style nodecontent     and then zig const html  try zmdtohtmlmyfragments  see srczmdhtmlzigsrczmdhtmlzig for the full reference  license zmd is mitlicenselicensed ","zigster64/zig-zag-zoe":"multiplayer tictactoe - in zig - using htmx for that zero-javascript experience  zigzagzoe multiplayer tictactoe  in zig  using htmx for that zerojavascript experience online demo here httpzigzagzoecom  running on a t4gnano instance on aws  linux arm64 using less than 2mb memory for the whole container  uses latest zig 0120 official release  screenshothttpsgithubcomzigster64zigzagzoeblobmainsrcimageszzzscreenshotjpg  install get zig  httpsziglangorgdownload zigzagzoe now tracks   zig 012dev from nightly builds last successful build  test using 0120dev2139e025ad7b4  httpzig blocking branch with hash  1220b9cb100296f9ecbea1d5d335a074884e978c2f4fa9781cdeec47e2d222119b65 is not currently working with the nonblocking  async branch of httpzig  git clone httpsgithubcomzigster64zigzagzoegit cd zigzagzoe zig build   build and run  zig build  or zig build run  now point your browsers at httplocalhost3000  or the equivalent address on the local network on boot the system will print a list of valid urls that should be able to find the game note that for multiuser play you must bring up multiple browser tabs works best if you spawn a couple of new windows from the browser and shrink them so they can sit side by side  how to play please visit teh wiki  user manual at httpsgithubcomzigster64zigzagzoewikizigzagzoee28090zerowingedition  bugs there are a few lingering bugs that i havent got around to fixing yet audio support on ios  safari is a lost cause  can fix it but it requires a lot of js code and i figure that is outside the scope of a nice clean zig application that im trying to build here also appreciate any other thrashing  trying to break the application as it all helps make the zig http ecosystem much more robust thanks  contributions yep thats cool just go through the regular channels  raise an issue  post a pr if you have questions or rfcs  you can either post them as an issue here or discuss on zig discord dont be too sad if it takes  48hr for me to respond though  will do my best  more modes and gameplay ideas thinking up some new random modes to add to make the game harder  ideas most welcome  poison square  make the grid square permanently unusable  skip  skip the next players turn they miss out  reverso  like uno reverso reverses the order in which players take turns  team play  allow multiple users to collab as a team  exotic victory conditions  not just lines but other shapes to allow victory  whats interesting from a code point of view  this code is interesting and worth a read for the following reasons   its all written in zig httpziglangorg fast  safe  easy to read  pick all 3  it uses the excellent httpzig library httpsgithubcomkarlseguinhttpzig to do all the web stuff i have had exactly zero issues using this lib  single file binary which includes the game a web server all assets such as html images and audio 1 file  no litter on your filesystem  generated docker image  770kb compressed all it has is the compiled executable 25mb which includes only a single binary nothing else  run stats  in releasefast mode running a 2 player game uses less than 2mb ram to run and hardly any cpu its pretty resource efficient  its about as simple as doing the same thing in go there is really nothing too nasty required in the code  the router and all the html contents is part of the game object  the implications of this are that it is possible to create web components using this zightmx approach that are all self contained and can be imported into other projects without having to know about connecting up routes or pulling in content interesting  uses sse  event streams to keep it all realtime with pubsub updates for multiple players is simple and it works and requires only a trivial amount of code to do  demonstrates how to do threading thread conditions  signalling and using mutexes to make object updates thread safe its a bit tricky to do cleanly still but i guess that concurrency was never meant to be easy its certainly no harder than doing the some concurrency in go  no websockets needed  there is pretty much no javascript on the frontend it uses htmx httpshtmxorg  which is an alternative approach to web clients where the frontend is pure hypertext and everything is done on the backend  there is a tiny bit of js to play some audio and to update the session id but im still thinking up a way of getting rid of that as well  uses stdfmtprint as the templating engine i didnt know before but you can use named tags inside the comptime format string and use those to reference fields in the args param actually makes for a half decent templating tool without having to find and import a templating lib ie  responseprinti can use names and addresss in a fmtprint statement and it references fields from the struct passed   name  johnny ziggy address  22 zig street zigville 90210   thats pretty good  dont really need a templating engine to do most things like that then can just use stdfmtprint in fact this is better than using a template engine because you can store the html in actual html files  which means your editor goes into full html mode otherwise need to come up with yet another jsx like thing and then write a bunch of editor tooling to understand it yuk  keep it simple i reckon just use stdfmt and just use html files not sure if its worth adding a templating lib  at least to do loops and some basic flow control because its often much much better to take the full power of a real language instead and just emit formatted fragments go has a pretty comprehensive and well done text templating tool in the stdlib but its quite a pain to use and impossible to debug when thing do go wrong compared to doing the hard stuff in a real language  htmx thoughts yeah its pretty cool worth adding to your toolbelt not sure its really a replacement for spa type apps  i think it might be painful for larger apps not sure havnt tried yet what it is 100 excellent for though is for doing apps where there is a lot of shared state between users like a turn based game  in that case doing everything on the server and not having any state at all on the frontend to sync is really ideal its a good fit to this sort of problem its super robust you can do horrible things like reboot the backend or hard refresh the front ends  and it maintains state without a hiccup and without needing any exception handling code at all very nice it would be a nightmare doing this in react there are some very complex things you could do with a turnbasedmultiplayergame type of model though doesnt have to be a game even and being able to do that","mattnite/zig-zlib":"compile zlib in your build.zig  zlib build package buildhttpsgithubcommattnitezigzlibactionsworkflowsbuildymlbadgesvghttpsgithubcommattnitezigzlibactionsworkflowsbuildyml  like this project if you like this project or other works of mine please consider donating to or sponsoring mehttpsgithubcomsponsorsmattnite on github hearthttpsgithubcomsponsorsmattnite  how to use this repo contains code for your buildzig that can statically compile zlib as well as some idiomatic zig bindings for zlib that you can use in your application in either case below you will be able to include zlibs header with zig const c  cimport cincludezlibh    link and add bindings to your application in order to statically link zlib into your application and access the bindings with a configurable import string zig const zlib  importpathtozlibzig pub fn buildb stdbuildbuilder void    const lib  zlibcreateb target mode const exe  baddexecutablemyprogram srcmainzig liblinkexe  importname  zlib    now code that is part of the myprogram executable can import the zlib bindings with importzlib  only link to your application in order to just link to the application all you need to do is omit the importname  zlib argument to zlibs link options zig liblinkexe   ","scemino/z_impact":"a 2d game engine written in zig buildhttpsgithubcomsceminozimpactactionsworkflowsmainymlbadgesvghttpsgithubcomsceminozimpactactionsworkflowsmainyml                                z impact is a zig game engine for creating 2d action games its well suited for jumpnruns twin stick shooters topdown dungeon crawlers and others with a focus on pixel art this is not a general purpose game engine akin to godot unreal or unity at this stage it is also quite experimental and lacking documentation expect problems z impact is more a framework than it is a library meaning that you have to adhere to a structure in code and file layout that is prescribed by the engine you do not call z impact z impact calls you games made with z impact can be compiled for linux macos windows through the usual hoops and for the web with wasm there are currently two platform backends sdl2  sokol and different renderers for sdl2 platform opengl and for sokol one renderer by os opengl linux metal mac os directx windows z impact is a port of the orginal game engine highimpacthttpsgithubcomphoboslabhighimpacttreemaster made by phoboslab  examples  biolab disasterhttpsgithubcomsceminozbiolab a jumpngun platformer displaying many of z impacts capabilities  drophttpsgithubcomsceminozimpacttreemainsampleszdrop a minimal arcade game with randomly generated levels  compiling to compile and run the sample game drop  linux  windows  macos sdl2 platform  opengl renderer shell zig build run  sdl2 platform  software renderer shell zig build dplatformsdlsoft run  sokol platform shell zig build dplatformsokol run   web shell zig build dtargetwasm32emscripten run   documentation theres not much at the moment most of z impacts functionality is documented in the header files with this readme giving a general overview its best to read the blog posthttpsphoboslaborglog202408highimpact for an overview and the source for all the details  assets at this time z impact can only load images in qoi format and sounds  music in qoa format the tools to convert png to qoi and wav to qoa are bundled in this repository and can be integrated in your build step game levels can be loaded from json files a tile editor to create these levels is part of z impact weltmeisterhtml which can be launched with a simple double click from your local copy  libraries used  sokol app audio and time httpsgithubcomflooohsokolzig  stbimageh and stbimagewriteh httpsgithubcomnothingsstb  qoi image format httpsgithubcomphoboslabqoi  qoa audio format httpsgithubcomphoboslabqoa  sdlzig httpsgithubcomikskuhsdlzig  license all z impact code is mit licensed though some of the libraries come with their own permissive license check the header files ","mattnite/zig-libcurl":"compile libcurl in your build.zig  libcurl build package cihttpsgithubcommattniteziglibcurlactionsworkflowsciymlbadgesvghttpsgithubcommattniteziglibcurlactionsworkflowsciyml  like this project if you like this project or other works of mine please consider donating to or sponsoring mehttpsgithubcomsponsorsmattnite on github hearthttpsgithubcomsponsorsmattnite  how to use this repo contains code for your buildzig that can statically compile libcurl as well as some idiomatic zig bindings for libcurl that you can use in your application in either case below you will be able to include libcurls header with zig const c  cimport cincludecurlcurlh    link and add bindings to your application in order to statically link libcurl into your application and access the bindings with a configurable import string zig const libcurl  importpathtolibcurlzig pub fn buildb stdbuildbuilder void    const lib  libcurlcreateb target optimize const exe  baddexecutable name  myprogram rootsourcefile   path  srcmainzig  target  target optimize  optimize  const exe  baddexecutablemyprogram srcmainzig liblinkexe  importname  curl    now code that is part of the myprogram executable can import the libcurl bindings with importcurl  only link to your application in order to just link to the application all you need to do is omit the importname  curl argument to libcurls link options zig liblinkexe   ","nektro/zig-ulid":"a binary implementation of ulid in zig.  zigulid lochttpsslocxyzgithubnektrozigulid licensehttpsimgshieldsiogithublicensenektrozigulidsvghttpsgithubcomnektrozigulidblobmasterlicense a binary implementation of ulid in zig httpsgithubcomulidspec  license mit ","ziglibs/painterz":"low-level implementation of different painting primitives (lines, rectangles, ...) without specialization on a certain draw target  painterz the idea of this library is to provide platformindependent embeddedfeasible implementations of several drawing primitives the library exports a generic canvas type which is specialized on a setpixel function that will put pixels of type color onto a framebuffer its currently not possible or planned to do blending but alpha test could be implemented by ignoring certain color values in the setpixel function  usage example usage example renderingdocsexamplepng see srcexamplezigsrcexamplezig for a full usage example zig const pixel  packed struct  r u8 g u8 b u8 a u8  const framebuffer  struct  buffer pixel fn setpixelfb this x isize y isize c pixel void  if x  0 or y  0 return if x  100 or y  100 return fbbuffer100  stdmathabscasty  stdmathabscastx  c   var canvas  painterzcanvasframebuffer pixel framebuffersetpixelinitframebuffer buffer    canvasdrawline100 120 110 90 pixel r  0xff g  0x00 b  0xff a  0xff   ","nektro/gimme":"a yummy collection of useful allocators.  gimme gimme is a yummy collection of useful allocators check out srclibzigsrclibzig for more ","rdunnington/zig-stable-array":"address-stable array with a max size that allocates directly from virtual memory.  zigstablearray addressstable array with a max size that allocates directly from virtual memory memory is only committed when actually used and virtual page table mappings are relatively cheap so you only pay for the memory that youre actually using additionally since all memory remains inplace and new memory is committed incrementally at the end of the array there are no additional recopies of data made when the array is enlarged ideal use cases are for large arrays that potentially grow over time when reallocating a dynamic array with a high upper bound would be a waste of memory and depending on dynamic resizing may incur high recopy costs due to the size of the array consider using this array type another good use case is when stable pointers or slices to the array contents are desired since the memory is never moved pointers to the contents of the array will not be invalidated when growing not recommended for small arrays since the minimum allocation size is the platforms minimum page size also not for use with platforms that dont support virtual memory such as wasm typical usage is to specify a large size upfront that the array should not encounter such as 2gb then use the array as usual if freeing memory is desired shrinkandfree will decommit memory at the end of the array total memory usage can be calculated with calctotalusedbytes the interface is very similar to arraylist except for the allocator semantics since typical heap semantics dont apply to this array the memory is manually managed using mmapmunmap and virtualallocvirtualfree on nix and windows platforms respectively usage zig var array  stablearrayu8init1024  1024  1024  128  virtual address reservation of 128 gb try arrayappendsliceu8 0 1 2 3 4 5 6 7 8 9  assertarraycalctotalusedbytes  mempagesize for arrayitems v i  assertv  i  arrayshrinkandfree5 assertarraycalctotalusedbytes  mempagesize arraydeinit  ","nektro/zig-ansi":"ansi utilities for cli usage in zig.  zigansi lochttpsslocxyzgithubnektrozigansi licensehttpsimgshieldsiogithublicensenektrozigansisvghttpsgithubcomnektrozigansiblobmasterlicense discordhttpsimgshieldsiodiscord551971034593755159svglogodiscordhttpsdiscordggp6y4zqc ansi utilities for cli usage in zig  zig  httpsziglangorg  httpsgithubcomziglangzig  httpsgithubcomziglangzigwikicommunity  getting started using httpsgithubcomnektrozigmod add a git type with a path of httpsgithubcomnektrozigansi  usage see srcmainzig or do zig build run to see examples see srclibzig for source code  built with  zig 070  contact  hellonektronet  httpstwittercomnektro  license mit ","fobersteiner/zdt":"timezoned datetime in zig   coding utf8   zighttpsimgshieldsiobadgezigf7a41dstyleflatlogoziglogocolorwhitehttpsziglangorg  testshttpsgithubcomfobersteinerzdtactionsworkflowszdttestsymlbadgesvghttpsgithubcomfobersteinerzdtactionsworkflowszdttestsyml github releasehttpsimgshieldsiogithubvreleasefobersteinerzdthttpsgithubcomfobersteinerzdtreleases tzdatahttpsimgshieldsiobadgetzdata2025abluehttpswwwianaorgtimezones license mpl 20httpsimgshieldsiobadgelicensempl20brightgreensvghttpsgithubcomfobersteinerzdtblobmasterlicense  zdt timeinszinsoned insdinsateinstinsime in zig opinionated and mostly for learning purposes  api overviewhttpsgithubcomfobersteinerzdtwikiapioverview  exampleshttpsgithubcomfobersteinerzdttreemasterexamples build step zig build examples  roadmaphttpsgithubcomfobersteinerzdtwikiroadmap  demohttpsgithubcomfobersteinerzdtblobmasterexamplesdemozig zig  need an allocator for the time zones since the size of the rulefiles varies var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator  zdt embeds the iana tz database var tzla  try zdttimezonefromtzdataamericalosangeles allocator defer tzladeinit  you can also use your systems tz data at runtime  this will very likely not work on windows so we use the embedded version here as well var tzparis  switch builtinostag  windows  try zdttimezonefromtzdataeuropeparis allocator else  try zdttimezonefromsystemtzdataeuropeparis zdttimezonetzdbprefix allocator  defer tzparisdeinit  iso8601 parser onboard accepts wide variety of compatible formats const adatetime  try zdtdatetimefromiso860120220307 const thistimela  try adatetimetzlocalize tz  tzla   string output also requires allocation var buf  stdarraylistu8initallocator defer bufdeinit try thistimelatostringi p z bufwriter const thistimeparis  try thistimelatzconvert tz  tzparis   s directive gives iso8601 format by default stddebugprint time la  s sn thats s in paris snn  thistimela bufitems thistimeparis thistimeparistzabbreviation    time la  20220307t0000000800 12 am pst   thats 20220307t0900000100 in paris const walldiff  try thistimeparisdiffwallthistimela const absdiff  thistimeparisdiffthistimela stddebugprintwall clock time difference snabsolute time difference snn  walldiff absdiff   wall clock time difference pt9h  absolute time difference pt0s  easteregg const now  zdtdatetimenowutc const easterdate  try zdtdatetimeeasterdatenowyear bufclearandfree try easterdatetostringb d y bufwriter stddebugprinteaster this year is on sn bufitems  easter this year is on april 20 2025   documentation see wikihttpsgithubcomfobersteinerzdtwiki  credits  inspiration for early version of parser and most of the posix tz code leroycepzigtzifhttpsgithubcomleroycepzigtzif  date  days since unix epoch conversion algorithm cassionerieafhttpsgithubcomcassionerieaf  zig implementation travisstalochdatezighttpsgithubcomtravisstalochdatezig  general support from httpsziggitdev  development see changeloghttpsgithubcomfobersteinerzdtblobmasterchangelogmd  zig version  zdt v06x zig 014  zdt v05x zig 014  zdt v04x zig 013 this library is developed with zig master  this might sometimes introduce version incompatibilities if you just want to use the library use a tagged version that suites your zig version  iana timezone database version  v045 2025a current  v022 2024b   v021 2024a  dependencies development and time zone database  no dependencies on other libraries  time zone database zdt comes with eggerttzhttpsgithubcomeggerttz the database is compiled and shipped with zdt asis not tarballed or compressed  if you wish to use your own version of the iana time zone dbhttpswwwianaorgtimezones you can set a path to it using the dprefixtzdbpathtoyourtzdb option see also zig build help  for development to update the time zone database and the version info run the following build steps zig build updatetzdb some of the code generation is done with python scripts which require python  39 but no third party packages ie a system installation will do  license mpl see the license file in the root directory of the repository ","nektro/zig-tracer":"generic tracing library for zig, supports multiple backends.  zigtracer generic tracing library for zig supports multiple backends  install  supports zigmod  supports zig package manager  usage in your program zig const std  importstd const tracer  importtracer pub const buildoptions  importbuildoptions pub const tracerimpl  tracerspall  see backends section below pub fn main void  try tracerinit defer tracerdeinit  main loop while true  try tracerinitthread defer tracerdeinitthread handler   fn handler void  const t  tracertracesrc defer tend   src values are sometimes absolute paths so backends may use this value to trim it to only log relative paths zig exeoptionsaddoptionusize srcfiletrimlen stdfspathdirnamestdfspathdirnamesrcfilelen   backends  none this is the default and causes tracing calls to become a noop so that tracer can be added to libraries transparently  log uses stdlog to print on function entrance  chrome writes a json file in the chrometracing format described herehttpsdocsgooglecomdocumentd1cvaclvffya5rphyumn5ooqtymh4h6i0nsskchnaysupreview and herehttpswwwchromiumorgdevelopershowtostraceeventprofilingtool  spall writes a binary file compatible with the spallhttpsgravitymothcomspall profiler  more feel free to open an issue with requests any custom backend may also be used that defines the following functions  pub fn init void  pub fn deinit void  pub fn initthreaddir stdfsdir void  pub fn deinitthread void  pub inline fn tracebeginctx tracerctx comptime ifmt const u8 iargs anytype void  pub inline fn traceendctx tracerctx void  license mit ","kassane/libvlc-zig":"zig bindings for libvlc media framework. h1 aligncenter div img srcgithublogopng altlibvlczig logo div h1 p aligncenter a hrefhttpsgithubcomkassanelibvlczigactionsworkflowslinuxyml img altbuild linux status srchttpsgithubcomkassanelibvlczigactionsworkflowslinuxymlbadgesvg a a hrefhttpsgithubcomkassanelibvlczigactionsworkflowsdarwinyml img altbuild macos status srchttpsgithubcomkassanelibvlczigactionsworkflowsdarwinymlbadgesvg a a hrefhttpsgithubcomkassanelibvlczigactionsworkflowsmingwyml img altbuild mingw status srchttpsgithubcomkassanelibvlczigactionsworkflowsmingwymlbadgesvg a a hrefhttpsopensourceorglicensesbsd2clause relnofollow img altbsd 2 clause license srchttpsimgshieldsiogithublicensekassanelibvlczig a a hrefhttpsgithubcomkassanelibvlcziggraphscontributors img altgithub contributors srchttpsimgshieldsiogithubcontributorskassanelibvlczig  a p  libvlczig zig bindings for libvlc media framework some of the features provided by libvlc include the ability to play local files and network streams as well as to transcode media content into different formats it also provides support for a wide range of codecs including popular formats like h264 mpeg4 and aac  requirements  zig v0110 or higherhttpsziglangorgdownload  vlchttpscodevideolanorgvideolanvlc  how to use  example bash  zig build run doptimizereleasesafe  printversion default  zig build run dexamplecliplayerccppzig doptimizereleasesafe  i pathmultimediafile   how to contribute to the libvlczig project read contributingcontributingmd  faq  q why isnt libvlczig licensed under lgplv21 a the decision to license libvlczig under the bsd2 clause was made by the author of the project this license was chosen because it allows for more permissive use and distribution of the code while still ensuring that the original author receives credit for their work libvlczig respects the original lgplv21 lesser general public license license of the vlc project  q are you connected to the developers of the original project a no the author of libvlczig is not part of the videolan development team they are simply interested in being part of the vlc community and contributing to its development  q what is the main goal of this project a the main goal of libvlczig is to provide a set of bindings for the vlc media players libvlc library that are written in the zig programming language the project aims to provide a more modern and safe way to interface with the library while maintaining compatibility with existing code written in c and c  q does libvlczig aim to replace libvlc a no libvlczig does not aim to replace libvlc instead it provides an alternative way to interface with the library that may be more suitable for zig developers  q can i use libvlczig in my project a yes you can use libvlczig in your project as long as you comply with the terms of the bsd2 clause license this includes giving credit to the original author of the code  q does libvlczig support all of the features of libvlc a libvlczig aims to provide bindings for all of the features of libvlc but it may not be complete or uptodate with the latest version of the library if you encounter any missing features or bugs please report them to the projects github issues page  q what programming languages are compatible with libvlczig a libvlczig provides bindings for the zig programming language but it can also be used with c and c projects that use the libvlc library  license  bsd 2clause license copyright c 2022 matheus catarino frana redistribution and use in source and binary forms with or without modification are permitted provided that the following conditions are met 1 redistributions of source code must retain the above copyright notice this list of conditions and the following disclaimer 2 redistributions in binary form must reproduce the above copyright notice this list of conditions and the following disclaimer in the documentation andor other materials provided with the distribution  ","dweiller/zubench":"micro benchmarking in zig  zubench a microbenchmarking package for zighttpsziglangorg  goals the primary goals of zubench are to  be simple to use  there should be no need to wrap a function just to benchmark it  provide standard machinereadable output for archiving or postprocessing  given the user the choice of which system clocks to use  provide statistically relevant and accurate results  integrate with the zig build system not all these goals are currently met and its always possible to debate how well they are met feel free to open an issue if one doesnt exist or pull request if you would like to see improvement in one of these areas  features  x humanreadable terminalstyle output  x machinereadable json output  x wall process and thread time    kerneluser mode times  x declarative zig test style benchmark runner  x option to define benchmarks as zig tests    adaptive sample sizes  x madhttpsenwikipediaorgwikimedianabsolutedeviationbased outlier rejection  platforms some attempt has been made to work on the below platforms those with a  in the table below havent been tested but should work for all implemented clocks windows currently only has the wall time clock implemented if you find a nonlinux platform either works or has issues please raise an issue  platform  status        linux     windows     darwin     bsd     wasi     usage the main branch follows zigs master branch for zig 012 use the zig012 branch the simplest way to create and run benchmarks is using one of the zig build system integrations there are currently two integrations one utilising the zig test system and one utilising public declarations both integrations will compile an executable that takes a collection of functions to benchmark runs them repeatedly and reports timing statistics the differences between the two integrations are how you define benchmarks in your source files and how benchmarking options are determined  test integration the simplest way to define and run benchmarks is utilising the zig test system zubench will use a custom test runner to run the benchmarks this means that benchmarks are simply zig tests ie test   code to benchmark  in order to avoid benchmarking regular tests when using this system you should consider the way that zig analyses test declarations and either give the names of benchmark tests a unique substring that can be used as a test filter or organise your tests so that when the compiller analyses the root file for benchmark tests it will not analyse regular tests the following snippets show how you can use this integration zig const addtestbench  importzubenchbuildzigaddtestbench pub fn buildb stdbuildbuilder void   existing build function    benchmark all tests analysed by the compiler rooted in srcfilezig compiled in releasesafe mode const benchmarkexe  zubenchaddtestbenchb srcfilezig releasesafe  use a test filter to only benchmark tests whose name include the substring bench  note that this is not required if the compiler will not analyse tests that you dont want to benchmark benchmarkexesettestfilterbench const benchstep  bstepbench run the benchmarks benchstepdependonbenchmarkexerunstep   this will make zig build bench benchmark tests the compiler analyses by starting at srcfilezig addtestbench returns a libexeobjstep for an executable that runs the benchmarks you can integrate it into your buildzig however you wish benchmarks are test declarations the compiler analyses staring from srcfilezig zig  srcfilezig test bench 1   this will be benchmarked    test also a benchmark   this will be benchmarked    test   this will be benchmarked  the test filter is ignored for unnamed tests    test regular test   this will not be benchmarked return errornotabenchmark    public decl integration this integration allows for finegrained control over the execution of benchmarks allowing you to specify various options as well as benchmark functions that take parameters the following snippets shows how you can use this integration zig  buildzig const addbench  importzubenchbuildzigaddbench pub fn buildb stdbuildbuilder void   existing build function    benchmarks in srcfilezig compiled in releasesafe mode const benchmarkexe  addbenchb srcfilezig releasesafe const benchstep  bstepbench run the benchmarks benchstepdependonbenchmarkexerunstep   this will make zig build bench run the benchmarks in srcfilezig and print the results addbench returns a libexeobjstep for an executable that runs the benchmarks you can integrate it into your buildzig however you wish benchmarks are specified in srcfilezig by creating a pub const benchmarks declaration zig  add to srcfilezig  the zubench package const bench  importsrcbenchzig pub const benchmarks   benchmark func1  benchspecfunc1 args   arg1 arg2  maxsamples  100  benchmark func2  benchspecfunc2 args   arg1 arg2 arg3  maxsamples  1000 opts   outlierdetection  none   disable outlier detection   the above snippet would cause two benchmarks to be run called benchmark func1 and benchmark func2 for functions func1 and func2 respectively the args field of a spec is a stdmetaargstuple for the corresponding function and maxsamples determines the maximum number of times the function is run during benchmarking a complete example can be found in examplesfibbuildzig it is also relatively straightforward to write a standalone executable to perform benchmarks without using the build system integration to create a benchmark for a function func run it measuring process and wall time and obtain a report all that is needed is zig var progress  stdprogressstart var bm  try benchmarkfuncinitallocator benchmark name  funcarg1    maxsamples progress const report  bmrun bmdeinit  the report then holds a statistical summary of the benchmark and can used with stdiowriterprint for terminalstyle readable output or stdjsonstringify for json output see examples for complete examples  custom exectuable it is also possible to write a custom benchmarking executable using zubench as a dependency there is a simple example of this in examplesfib2zig or you can examine srcbenchrunnerz","raugl/clay-zig":"zig bindings for the library clay: a high performance ui layout library in c.  zig language bindings  important  zig 0140 or higher is required  note  this project currently is in beta this directory contains bindings for the zigodinlangorg programming language as well as an example implementation of the clay websitehttpsnicbarkercomclay in zig special thanks to johan0agithubusercontentcomjohan0a for the reference implementation if you havent taken a look at the full documentation for clayhttpsgithubcomnicbarkerclayblobmainreadmemd its recommended that you take a look there first to familiarise yourself with the general concepts this readme is abbreviated and applies to using clay in zig specifically the most notable difference between the c api and the zig bindings is the use of if statements to open the scope for declaring child elements and then having to close it manually with a deferred function call other changes include  minor naming changes  ability to initialize a parameter by calling a function that is part of its types namespace for example fixed or all  ability to initialize a parameter by using a public constant that is part of its types namespace for example grow todo  talk about integrations with raylib  talk about special getopenelementid element and hovered functions c  c macro for creating a scope clay clayidsidebar claylayout layoutdirection  claytoptobottom childalignment   x  clayalignxcenter y  clayalignytop  sizing   width  claysizingfixed300 height  claysizinggrow  padding  16 16 childgap  16  clayrectangle color  colorlight     child elements here   zig  zig form of element macros if clayopen id  clayidsidebar layout   direction  toptobottom alignment  centertop sizing   w  fixed300 h  grow  padding  all16 childgap  16  rectangle   color  colorlight    defer clayclose  child elements here    install download and add clayzig as a dependency by running the following command in your project root sh zig fetch save httpsgithubcomrauglclayzigarchivecommit shatargz  then add clayzig as a dependency and import its modules and artifact in your buildzig zig const claydep  bdependencyclayzig  target  target optimize  optimize  exelinklibraryclaydepartifactclay exerootmoduleaddimportclay claydepmoduleclay  to enable a builtin renderer you should first add its third party library to your project separately eg raylib sdl2 then tell clayzig about it in this example we are using raylibzighttpsgithubcomnotnikraylibzig zig const cl  importclayzig const raylibdep  bdependencyraylibzig    clenablerendererexerootmodule claydep  raylib  raylibdepmoduleraylib    quick start 1 ask clay for how much static memory it needs using clayminmemorysizehttpsgithubcomnicbarkerclayblobmainreadmemdclayminmemorysize create an arena for it to use with claycreatearenawithcapacityandmemoryminmemorysize memoryhttpsgithubcomnicbarkerclayblobmainreadmemdclaycreatearenawithcapacityandmemory and initialize it with clayinitializearena layoutsize errorhandlerhttpsgithubcomnicbarkerclayblobmainreadmemdclayinitialize zig const memory  try allocatorallocu8 clayminmemorysize defer allocatorfreememory const arena  claycreatearenawithcapacityandmemoryintcastmemorylen ptrcastmemory clayinitializearena    2 provide a measuretexttext config function with claysetmeasuretextfunctionfunctionhttpsgithubcomnicbarkerclayblobmainreadmemdclaysetmeasuretextfunction so that clay can measure and wrap text zig  example measure text function pub fn measuretexttext const u8 config claytextconfig claydimensions   claytextconfig contains members such as fontid fontsize letterspacing etc   tell clay how to measure text claysetmeasuretextfunctionmeasuretext  3 optional  call claysetpointerpositionpointerpositionhttpsgithubcomnicbarkerclayblobmainreadmemdclaysetpointerposition if you want to use mouse interactions zig claysetpointerstate x  mousepositionx y  mousepositiony  isleftmousebuttondown  4 call claybeginlayouthttpsgithubcomnicbarkerclayblobmainreadmemdclaybeginlayout and declare your layout using the provided functions zig const colorlight  claycolorinit224 215 210 255 const colorred  claycolorinit168 66 28 255 const colororange  claycolorinit225 138 50 255  layout config is just a struct that can be declared statically or inline const sidebaritemlayout  claylayoutconfig sizing   w  grow h  fixed50    reuseable components are just normal functions fn sidebaritemcomponentindex usize void  clayelement id  clayidwithindexsidebarblob index layout  sidebaritemlayout rectangle   color  colororange     an example function to begin the root of your layout tree fn createlayout clayrendercommandarray  claybeginlayout  an example of laying out a ui with a fixed width sidebar and flexible width main content if clayopen id  clayidoutercontainer layout   sizing  grow padding  all16 childgap  16  rectangle   color  init250 250 250 255    defer clayclose if clayopen id  clayidsidebar layout   direction  toptobottom sizing   w  fixed300 h  grow  padding  all16 childgap  16  rectangle   color  colorlight    defer clayclose if clayopen id  clayidprofilepictureouter layout   sizing   w  grow  padding  all16 childgap  16 alignment  leftcenter  rectangle   color  colorred    defer clayclose clayelement id  clayidprofilepicture layout   sizing  fixed60  image   imagedata  profilepicture size  all60   claytextclay  ui library  fontsize  24 textcolor  init255 255 255 255    standard zig code like loops etc work inside components for 010 i sidebaritemcom","bronter/wgpu_native_zig":"zig bindings for wgpu-native  wgpunativezig zig bindings for wgpunativehttpsgithubcomgfxrswgpunative this package exposes two modules wgpuc and wgpu wgpuc is just wgpuh and by extension webgpuh run through translatec so as close to wgpunatives original c api as is possible in zig wgpu is a module full of pure zig bindings for libwgpunative it does not import any c code and instead relies on extern fn declarations to hook up to wgpunative  adding this package to your build add the package to your dependencies either with sh zig fetch save httpsgithubcombronterwgpunativezigarchiverefstagsv301targz  or by manually adding to your buildzigzon zig   other stuff dependencies    other dependencies wgpunativezig    you can either use a commit hash urlhttpsgithubcombronterwgpunativezigarchivecommithashtargz  or a tagged release  url  httpsgithubcombronterwgpunativezigarchiverefstagsv301targz hashdependency hash     then in buildzig add zig const wgpunativedep  bdependencywgpunativezig   add module to your exe wgpuc can also be added like this just pass in wgpuc instead exerootmoduleaddimportwgpu wgpunativedepmodulewgpu  or add to your lib similarly librootmoduleaddimportwgpu wgpunativedepmodulewgpu   building on windows windows x8664 has two options for abi gnu and msvc for i686 and aarch64 only the msvc option is available if you need to specify the build target you can do that with zig const target  bstandardtargetoptions defaulttarget    if not specified defaults to the gnu abi abi  msvc    or specify it with your build command for example the triangle example in this repository can be run like so sh zig build runtriangleexample dtargetx8664windowsmsvc  either way pass the resolved target to the dependency like so zig const wgpunativedep  bdependencywgpunativezig  target  target   an example of using wgpunativezig with static linking on windows can be found at wgpunativezigwindowstesthttpsgithubcombronterwgpunativezigwindowstest  dynamic linking dynamic linking can be made to work though it is a bit messy to use when you initialize your wgpunativedep add the option for dynamic linking like so zig const wgpunativedep  bdependencywgpunativezig   defaults to static if you dont specify linkmode  dynamic   then add the following with your install step dependencies zig const libdir  wgpunativedepnamedwritefileslibgetdirectory  this would also work with so files on linux const dllpath  libdirjoinballocator wgpunativedll catch return  addinstallbinfile puts the dll in the same directory as your executable const installdll  baddinstallbinfiledllpath wgpunativedll  make sure that the dll is installed when the install step is run bgetinstallstepdependoninstalldllstep   how the wgpu module differs from wgpuc  names are shortened to remove redundancy  for example wgpuwgpusurfacedescriptor becomes wgpusurfacedescriptor  c pointers c are replaced with more specific pointer types  for example cconst u8 is replaced with 0const u8  pointers to opaque structs are made explicit and only optional when they need to be  for example wgpuwgpuadapter from webgpuh would instead be expressed as wgpuadapter or wgpuadapter depending on the context  methods are expressed as decls inside of structs  for example zig wgpuwgpuinstancecreatesurfaceinstance wgpuinstance descriptor cconst wgpusurfacedescriptor wgpusurface  becomes zig instancecreatesurfaceself instance descriptor const surfacedescriptor surface   certain methods that require a callback such as requestadapter and requestdevice are provided with wrapper methods  for example requesting an adapter with a callback looks something like zig fn handlerequestadapterstatus requestadapterstatus adapter adapter message 0const u8 userdata anyopaque callconvc void  switchstatus  success   const udadapter adapter  ptrcastaligncastuserdata udadapter  adapter  else   stdlogerrsn message    var adapterptr adapter  null instancerequestadapternull handlerequestadapter ptrcastadapterptr  whereas the noncallback version looks like zig const response  instancerequestadaptersyncnull  unfortunately propagating anything more than status codes is ugly in zig  see httpsgithubcomziglangzigissues2647 const adapterptr adapter  switch responsestatus  success  responseadapter else  blk  stdlogerrsn responsemessage break blk null     chained structs are provided with inline functions for constructing them which come in two forms depending on whether or not the chained struct is likely to always be required  for required chained structs you can either write them explicitely zig surfacedescriptor nextinchain  ptrcastsurfacedescriptorfromxlibwindow  chain  chainedstruct  stype  stypesurfacedescriptorfromxlibwindow  display  display window  window  label  xlibsurfacedescriptor   or use a function to construct them zig  here the descriptors from surfacedescriptor and surfacedescriptorfromxlibwindow have been merged  so just pass in an anonymous struct with the things that you need default values will take care of the rest surfacedescriptorfromxlibwindow label  xlibsurfacedescriptor display  display window  window    for optional chained structs you can either write them explicitely like in the example above or you can use a method of the parent struct instance to add them for example zig primitivestate  topology  primitivetopologytrianglelist stripindexformat  indexformatuint16 frontface  frontfaceccw cullmode  cullmodeback withdepthclipcontrolfalse   wgpubool is replaced with bool whenever possible  this pretty much means it is replaced with bool in the parameters and return values of met","freakmangd/zentig_ecs":"zig ecs library  zentigecs a zig ecs library zentig is designed for scalability and ease of use while staying out of your way its heavily inspired by everything that makes bevyecshttpsgithubcombevyenginebevy so great and unityhttpsunitycom so approachable  warning it is not recommended to use zentig for anything major in its current state while it is functional and i use it frequently it is far from battle tested that being said if you encounter any problems please feel free to open an issue  installation fetching for zig master  zig fetch save githttpsgithubcomfreakmangdzentigecs  fetching for zig 0130  zig fetch save httpsgithubcomfreakmangdzentigecsarchiverefstags0130targz  in both cases place this in your buildzig zig const zentig  bdependencyzentigecs  exerootmoduleaddimportztg zentigmodulezentig  and import it in your project zig const ztg  importztg   overview an entity is just a usize zig pub const entity  usize  a basic component zig pub const player  struct  name const u8   a basic system zig pub fn playerspeakq ztgqueryplayer void  for qitemsplayer plr  stddebugprintmy name is sn selfname    registering systemscomponents into a world zig const myworld  blk  var wb  ztgworldbuilderinit wbaddcomponentsplayer wbaddsystemstostageupdate playerspeak break blk wbbuild   calling systems is easily integratable into your game framework zig test running systems  var world  myworldinittestingallocator defer worlddeinit try worldrunstageload try worldrunupdatestages try worldrunstagedraw  support for user defined stages try worldrunstagelist postprocess prereset postmortem     scalability the include function in worldbuilder makes it easy to compartmentalize your game systems as well as integrate third party libraries with only one extra line mainzig zig  include looks for a pub fn includecomptime worldbuilder void def  in each struct if the function errors its a compile error  but the signature can return either void or void wbinclude ztgbase importplayerzig importmylibrary   playerzig zig pub fn includecomptime wb ztgworldbuilder void  wbaddcomponents player playergun playerhud  wbaddsystemstostageupdate  updateplayer updategun updatehud    mylibraryinitzig zig pub fn includecomptime wb ztgworldbuilder void  wbinclude  namespaces can be included more than once to ensure  they are included if you depend on them ztgbase      getting started see this short tutorial on creating systems and components herehttpsgithubcomfreakmangdzentigecstreemaindocshelloworldmd  full examples see full examples in the examples folderhttpsgithubcomfreakmangdzentigecstreemainexamples  framework support zentig is framework agnostic it doesnt include any drawing capabilities for that you need something like raylib ive created a library that wraps common raylib components and provides systems that act on those components herehttpsgithubcomfreakmangdzentigraylib that page provides installation instructions and usage examples ","rcalixte/libqt6c":"qt 6 for c div aligncenter img altlibqt6c srcassetslibqt6cpng height128px  mit licensehttpsimgshieldsiobadgelicensemitgreen go report cardhttpsgoreportcardcombadgegithubcomrcalixtelibqt6chttpsgoreportcardcomreportgithubcomrcalixtelibqt6c static badgehttpsimgshieldsiobadgev01420stablef7a41dlogoziglogocolorf7a41dlabelzighttpsziglangorgdownload div  mitlicensed qt 6 bindings for c this library is a straightforward binding of the qt 64 api you must have a working qt 6 c development toolchain to use this binding the buildingbuilding section below has instructions for installing the required dependencies this library is designed to be used as a dependency in a larger application and not as a standalone library the versioning scheme used by this library is based on the qt version used to generate the bindings with an additional nod to the library revision number any breaking changes to the library will be reflected in the changelog these bindings are based on the miqt bindings for gohttpsgithubcommappumiqt that were released in 2024 the bindings are complete for qtcore qtgui qtwidgets qtmultimedia qtmultimediawidgets qtspatialaudio qtprintsupport qtsvg qtnetwork qtwebchannel qtwebengine qscintilla and others there is support for slotssignals subclassing custom widgets async via qt etc but the bindings may be immature or unstable in some ways it is fairly easy to encounter segmentation faults with improper handling q3 of the faqfaq is a decent entry point for newcomers please try out the library and start a discussionhttpsgithubcomrcalixtelibqt6cdiscussions if you have any questions or issues relevant to this library  table of contents   supported platformssupportedplatforms  licenselicense  examplesexamples  buildingbuilding  usageusage  faqfaq  special thanksspecialthanks supported platforms   os  arch  linkage bindings  status            freebsd  x8664  static   works   linux  arm64  static   works   linux  x8664  static   works  license  the libqt6c bindings are licensed under the mit license you must also meet your qt license obligations examples  the helloworldhttpsgithubcomrcalixtelibqt6cexamplestreemastersrchelloworldmainc example follows c include libqt6ch include stdinth include stdioh define buffersize 64 static long counter  0 void buttoncallbackvoid self  counter char bufferbuffersize snprintfbuffer buffersize you have clicked the button ld times counter qpushbuttonsettextself buffer  int mainint argc char argv   initialize qt application qapplicationnewargc argv qwidget widget  qwidgetnew2 if widget   we can use assert or check for null to simulate exception handling  assertwidget  null fprintfstderr failed to create widgetn return 1   we dont need to free the button its a child of the widget qpushbutton button  qpushbuttonnew5hello world widget if button  fprintfstderr failed to create buttonn return 1  qpushbuttonsetfixedwidthbutton 320 qpushbuttononclickedbutton buttoncallback qwidgetshowwidget int result  qapplicationexec qwidgetdeletewidget printfokn return result   full examples are available in the libqt6cexampleshttpsgithubcomrcalixtelibqt6cexamples repository building  freebsd native   tested with freebsd 14  qt 68  gcc 13 for dynamic linking with the qt 6 system libraries bash sudo pkg install qt6base qt6multimedia qt6svg qt6webchannel qt6webengine qscintilla2qt6 zig   note  the zig package may need to be downloaded or compiled and installed separately if the latest stable version is not available in the default repositories linux native   tested with debian 12  13  qt 64  67  gcc 12  14  tested with linux mint 22  qt 64  gcc 13  tested with ubuntu 2404  qt 64  gcc 13  tested with fedora 41  qt 68  gcc 14  tested with endeavouros mercury  qt 68  gcc 14 for dynamic linking with the qt 6 system libraries  debianbased distributions bash sudo apt install qt6basedev libqscintilla2qt6dev qt6baseprivatedev qt6multimediadev qt6svgdev qt6webchanneldev qt6webenginedev   note  the zig package must be downloaded and installed separately  fedorabased distributions bash sudo dnf install qt6qtbasedevel qscintillaqt6devel qt6qtmultimediadevel qt6qtsvgdevel qt6qtwebchanneldevel qt6qtwebenginedevel zig   note  the zig package will need to be downloaded and installed separately if the latest stable version is not available in the default repositories  archbased distributions bash sudo pacman s qt6base qscintillaqt6 qt6multimedia qt6svg qt6webchannel qt6webengine zig  once the required packages are installed the library can be built from the root of the repository bash zig build  users of archbased distributions need to make sure that all packages are uptodate first and will need to add the following option to support successful compilation bash zig build denableworkaroundtrue  the compiled libraries can be installed to the system in a nondefault location by adding the prefixlibdir option to the build command bash sudo zig build prefixlibdir usrlocalliblibqt6c  creates usrlocalliblibqt6clibraries  to skip the restricted extras bash zig build dskiprestrictedtrue  to see the full list of build options available bash zig build help  usage   if using zigs build system import the library into your project bash zig fetch save githttpsgithubcomrcalixtelibqt6c  append tag commit or branch to the end of the url to pin to a specific version of the library  add the library to your buildzig file zig const qt6c  bdependencylibqt6c  target  target optimize  releasefast   after defining the executable add the include path from the library exerootmoduleaddincludepathqt6cpathinclude  link the compiled libqt6c libraries to the executable  qtlibname is the name of the target library without prefix and suffix eg qapplication qwidget etc exerootmodulelinklibraryqt6cartifactqtlibname  extra options are required for building on archbased distribut","jinzhongjia/znvim":"neovim remote rpc client implementation with zig  znvim znvim is a neovim remote rpchttpsneovimiodocuserapihtmlrpcconnecting client implementation with zighttpsziglangorg  this package is under developing  document httpsjinzhongjiagithubioznvimhttpsjinzhongjiagithubioznvim  features  implementation of multiple remote calling methods  support all neovim rpc channelshttpsneovimiodocuserchannelhtmlchannelintro  completely thread safe  asynchronous  getting started  0120  0130  master 1 add to buildzigzon sh zig fetch save httpsgithubcomjinzhongjiaznvimarchivecommit or branchtargz  2 config buildzig zig const znvim  bdependencyznvim  target  target optimize  optimize   add module exerootmoduleaddimportznvim znvimmoduleznvim   to use this lib you can find example on test fold recommend to learn about what msgpackhttpsgithubcommsgpackmsgpackblobmasterspecmd is this lib uses zigmsgpackhttpsgithubcomzigcczigmsgpack and read neovims api documentationhttpsneovimiodocuserapihtml ","ringtailsoftware/zigtris":"a minimal terminal tetris written in zig  zigtris a minimal terminal tetris written in zig tested with zig 0140 zig build run cursor keys to move space to drop q to quit demogif  i just want to play dont make me install zig docker run rm it v pwdapp w app kassanyalpineziglang0130 zig build run  run as a service via ssh runasservicesh ssh zigtrislocalhost p 2022  notes some notes for anyone looking at the code  display is a thin wrapper on top of the mibu terminal library it provides a double buffered one pixel per character interface where it only redraws changed pixels on the buffer flip  stage is the game stage and provides a square pixel interface on top of display by printing two chars for each pixel  player holds the tetronimo shapes and movement logic  debris holds the list of fallen blocks for hitchecking and completed line detection  license mit ","ikskuh/zig-assimp":"open asset importer library built with zig  openassetimporter library binding for zig this repo is a build sdk for assimphttpsgithubcomassimpassimp to be used with the zig build system zig const std  importstd  import the sdk const assimp  importsdkzig pub fn buildb stdbuildbuilder void  const mode  bstandardreleaseoptions const exe  baddexecutablestaticexample null exesetbuildmodemode exeaddcsourcefilesrcexamplecpp const u8stdc17 exelinklibc exelinklibcpp exeinstall  create a new instance var sdk  assimpinitb  and link assimp statically to our exe and enable a default set of  formats sdkaddtoexe static assimpformatsetdefault  ","jedisct1/zig-rocca-s":"an implementation of the rocca-s encryption scheme.  roccas an efficient aesbased encryption scheme this is an implementation of roccas an efficient aesbased encryption scheme for beyond 5ghttpswwwietforgarchiveiddraftnakanoroccas05html a very fast authenticated encryption scheme optimized for platforms with aesni or arm crypto extensions roccas has a 256 bit key size a 128 bit nonce processes 256 bit message blocks and outputs a 256 bit authentication tag warning this implementation is for benchmarking and testing purposes only ","kj4tmp/gatorcat":"an ethercat maindevice written in zig  gatorcat testshttpsgithubcomkj4tmpgatorcatactionsworkflowsmainymlbadgesvg gatorcat is an ethercat maindevice written for the zig programming language  warning  gatorcat is alpha software using it today means participating in its development  documentation examples can be found in examplesexamples the examples can be built using zig build examples documentation can be found in docdocreadmemd  status  notably working features  x automatic configuration to reach op for most subdevices via sii and coe  x verifcation of the network contents against an ethercat network information struct eni  x can manipulate process data  x coe startup parameters  x cli for scanning networks and getting information about subdevices  x multios support linux and windows  x generate starting point for the network configuration eni using the cli scan  notably missing features    distributed clocks    ethernet over ethercat eoe also aoe foe soe voe    user configurable processing of coe emergency messages    mapping the mailbox status into the process data    async  event loop frames    multithreading friendly api    linux xdp    macos embedded support    allocationfree api    cable redundancy    ethercat network informationeni xml parsing    segmented sdo transfer    eeprom write access    embedded friendly api  timers    network diagnosis in the cli crc counters etc  road to v02    runtime process image info  x comptime process image    no config executable with valkey integration    validate pdos at runtime    revise error handling  x python package hello world    python package message pack models    python package valkey driver    zig message pack models  sponsors list updated monthly  empty please consider  sponsoringhttpsgithubcomsponsorskj4tmp if you depend on this project or just want to see it succeed ","allyourcodebase/openssl":"openssl zig package  openssl zig package this is openssl ported to the zig build system  status i was able to use this to build cpythonhttpsgithubcomthejoshwolfecpython for x8664linux adding support for other operating systems and cpu architectures is straightforward and will require fiddling with the build script to take into account the target  antiendorsement i do not endorse openssl i think it is a pile of trash my motivation for this project is because it is a dependency of cpython which is a dependency of the most active youtube downloader ytdlphttpsgithubcomytdlpytdlp ","discord-zig/discord.zig":"mirror of discord.zig  discordzig a highperformance bleeding edge discord library in zig featuring full api coverage sharding support and finetuned parsing  sharding support ideal for large bots enabling distributed load handling  100 api coverage  fully typed offers complete access to discords api with strict typing for reliable and safe code  high performance faster than whichever library you can name wip  flexible payload parsing supports payload parsing through both zlib and zstd  proper error handling zig const std  importstd const discord  importdiscord const shard  discordshard fn ready shard payload discordready void  stddebugprintlogged in as sn payloaduserusername  fn messagecreatesession shard message discordmessage void  if stdasciieqlignorecasemessagecontent hi  var result  try sessionsendmessagemessagechannelid  content  hello world from discordzig  defer resultdeinit const m  resultvalueunwrap stddebugprintsent sn mcontent   pub fn main void  var gpa stdheapgeneralpurposeallocator  init const allocator  gpaallocator var handler  discordinitallocator defer handlerdeinit try handlerstart intents  discordintentsfromraw53608447 token  stdposixgetenvdiscordtoken run   messagecreate  messagecreate ready  ready      installation zig  in your buildzig file const exe  baddexecutable name  marin rootsourcefile  bpathsrcmainzig target  target optimize  optimize  const dzig  bdependencydiscordzig  exerootmoduleaddimportdiscordzig dzigmodulediscordzig  warning the library is intended to be used with the latest dev version of zig  contributing contributions are welcome please open an issue or pull request if youd like to help improve the library  support server httpsdiscordggrbhkbt7np5  the original repo httpscodebergorgyuzudiscordzig  general roadmap  task  status    stablish good sharding support with buckets     finish the event coverage roadmap     proper error handling     use the priority queues for handling ratelimits half done     make the library scalable with a gateway proxy     get a cool logo     missing events right now  event  support    voicechanneleffectsend     voicestateupdate     voiceserverupdate     http methods missing  endpoint  support    audit log     automod     guild scheduled event related     guild template related     soundboard related     stage instance related     subscription related     voice related     webhook related    ","attron/astroz":"astrodynamics and spacecraft toolkit written in zig! features orbit prop, celestial precession, ccsds parsing, rf parsing, fits image parsing, and more!  astroz cicishdciurl cdcdshdcdurl dcdcshddcurl img srchttpsrepositoryimagesgithubusercontentcom819657891291c28ef4c034d0ebb0c41d4662867c3 width100 height100  astronomical and spacecraft toolkit written in zig for zig  features  plans  spacecraft  x ccsds packets  x ccsds stream parser  x vita49 packets  x vita49 stream parser  x tle support  x orbital propagation  x rk4  x orbital maneuvers  x impulse maneuvers  x phase maneuvers  x plane change maneuvers  x orientation determination  astronomical  x astronomical references  x j2000 and jd  x celestial bodies  x mass  x radius  x orbital details  x astronomical coordinates  x equatorial coordinate system  x world coordinate system  x astronomical computation  x precession  x celestial bodies    orbital mechanics    interplanetary maneuvers    fits file parsing  broken due to zigimg dependency breaking on main  x image generation    multi image parsinggeneration  x table parsing  feature not listed  to request a feature please create an issue for this project and i will try my best to be responsive  usage  add astroz as a dependency in your buildzigzon sh zig fetch save httpsgithubcomattronastrozarchivegittagorcommithashtargz   use astroz as a module in your buildzig zig const astrozdep  bdependencyastroz  target  target optimize  optimize  const astrozmod  astrozdepmoduleastroz exerootmoduleaddimportastroz astrozmod   examples   parse tleexamplesparsetlezig   orbit prop for next 3 daysexamplesorbitpropzig img srcassetsorbitpropgif width450 height400 altvisualization of orbit prop   orbit prop for next 3 days with impulse maneuversexamplesorbitpropimpulsemanueverszig img srcassetsorbitpropimpulsegif width450 height400 altvisualization of orbit prop with impulse   orbit plane changeexamplesorbitplanechangezig   orbit phase changeexamplesorbitphasechangezig   orbit orientation determinationexamplessimplespacecraftorientationzig   parse vita49examplesparsevita49zig   parse vita49 with callbackexamplesparsevita49callbackzig   parse ccsds from fileexamplesparseccsdszig   parse ccsds from file with file syncexamplesparseccsdsfilesynczig   create ccsds packetexamplescreateccsdspacketzig   create ccsds packet with configexamplescreateccsdspacketconfigzig note this is currently broken due to zigimg dependency breaking on the main branch   generate image from fits fileexamplesparsefitsfilezig img srctesttestpng width450 height400 altsample fits image as png   precess star to july 30 2005examplesprecessstarzig   calculate wcs values from a tleexampleswcszig  markdown links  cishd httpsimgshieldsiogithubactionsworkflowstatusattronastrozciyamlbranchmainstyleforthebadgelogogithublabelcilabelcolorblack ciurl httpsgithubcomattronastrozblobmaingithubworkflowsciyaml cdshd httpsimgshieldsiogithubactionsworkflowstatusattronastrozcdyamlbranchmainstyleforthebadgelogogithublabelcdlabelcolorblack cdurl httpsgithubcomattronastrozblobmaingithubworkflowscdyaml dcshd httpsimgshieldsiobadgeclickf6a516styleforthebadgelogoziglogocolorf6a516labeldoclabelcolorblack dcurl httpsattrongithubioastroz ","ringtailsoftware/misshod":"misshod is a minimal, experimental ssh client and server implemented as a library  misshod misshod msd adj badly shod  about misshod is a minimal experimental ssh client and server implemented as a library it has been tested with both opensshhttpsgithubcomopensshopensshportable and dropbearhttpsgithubcommkjdropbear misshod is not secure it should not be used in real world systems it aims to be  transport and io agnostic  tcp would be normal but misshod can be run over any reliable stream protocol  asynchronous  misshod never blocks execution for io it enters a wait state and can be resumed when data arrives  callback free  asynchronous message passing prevents the caller needing callbacks and context structs  very lightweight opening up the possibility of running on small embedded devices features  public key auth  password auth  supports exactly one of each of the required protocols  hmacsha2256 hmac  curve25519sha256 key exchange  sshed25519 key  aes256ctr cipher  building misshod requires zig 0140httpsziglangorgdownload  client to build mssh a command line ssh client for maclinux bash zig build test  bash cd mssh zig build zigoutbinmssh zigoutbinmssh usernamehost port idfile  to run a test ssh server dropbear in docker bash cd testserver sshserver  login with password auth password bash zigoutbinmssh testuser127001 2022  same as ssh p 2022 testuser127001  login with pubkey auth using a passwordless private key bash zigoutbinmssh testuser127001 2022 testserverided25519passwordless  same as ssh p 2022 testuser127001 i testserverided25519passwordless  login with pubkey auth using a password protected private key secretpassword bash zigoutbinmssh testuser127001 2022 testserverided25519passworded  same as ssh p 2022 testuser127001 i testserverided25519passworded   server msshd is a toy ssh server it handles one connection at a time and echoes back received data with you said x to build msshd bash cd msshd zig build zigoutbinmsshd zigoutbinmsshd port hostkey  to run the server bash zigoutbinmsshd 2022 testserverided25519passwordless server listening on port 2022  connect using openssh bash ssh p 2022 foo127001  by default the server will accept any public key offered typically openssh offers all available keys so it will be able to login immediately this can be changed in msshdsrcmainzig typically a real server would check the users authorizedkeys file connect using mssh using pubkey auth key password is secretpassword bash cd mssh zig build run  foo127001 2022 testserverided25519passworded  connect using mssh using password auth any password matching username will be accepted so foo here bash cd mssh zig build run  foo127001 2022   tiny client example as a proof of concept the tiny example logs into the test server but contains no socket code instead it uses stdout and stdin to run it via socat bash zig build  socat tcp41270012022 execzigoutbintiny  tiny uses a weaker prng a fixed buffer allocator and does no file io  security misshod is not secure it should not be used in real world systems  very little testing has been done and not all code paths have been exercised  no efforts have been made to prevent timing attacks  sensitive data is held in ram for longer than is strictly necessary  misshod relies on zigs standard library for all crypto algorithms which is still relatively young  most importantly i am not a cryptographer and i have no idea what im doing  status misshod was developed rapidly the main aim was to get it working and learn something along the way i dont know whats next but hopefully you can learn something too by looking at a small ssh implementation its entirely undocumented and there arent enough tests the io systems are a bit arcane as ive tried wherever possible to avoid using excess ram ","jedisct1/zig-eddsa-key-blinding":"a zig implementation of eddsa signatures with blind keys.  eddsa signatures with blind keys a zig implementation of the eddsa key blindinghttpschriswoodgithubiodraftwoodcfrgeddsablindingdraftwoodcfrgeddsablindinghtml proposal zig  create a standard ed25519 key pair const kp  try ed25519keypaircreatenull  create a random blinding seed var blind 32u8  undefined cryptorandombytesblind  blind the key pair const blindkp  try blinded25519blindkp blind  sign a message and check that it can be verified with the blind public key const msg  test const sig  try blinded25519signmsg blindkp null try ed25519verifysig msg blindkpblindpublickey  unblind the public key const pk  try blinded25519unblindpublickeyblindkpblindpublickey blind try stdtestingexpectequalslicesu8 pk kppublickey  ","allyourcodebase/pipewire":"pipewire ported to the zig build system  pipewire pipewire client library ported to the zig build system  motivation i want a static executable that can play audio i have this working already with libsoundio however it is via the pulseaudio client library i thought it would be nice to use pipewire directly on systems that use it  status i got the audiosrc example compiling and running however it turns out the pipewire protocol only works via dlopen making it a nonstarter for static executables therefore i will not be pursuing this project any further ","jdknezek/uuid6-zig":"uuidv6 implemented in zig  uuid6zig  this is a prototype uuidv6httpsgithubcomuuid6uuid6ietfdraft draft 03 implementation in zighttpsgithubcomziglangzig it also includes versions 1  35 for comparison   installation  the library is contained entirely in srcuuidzig feel free to copy and customize or clone it as a submodule  it targets zig master and may not work on the latest release   adding to your buildzig  zig liborexeaddpackagepathuuid6 pathtouuid6zigsrcuuidzig    usage  there are namespaces for the various uuid versions v1 v3  v7 each has a create method to create a single uuid or a source that can be used to create many with shared parameters andor state  sources are not threadsafe and should be protected with a mutex   example  zig const std  importstd const uuid  importuuid6  pub fn main anyerrorvoid  var rng  stdranddefaultprnginit0 const source  uuidv4sourceinitrngrandom  var i usize  0 while i  10  i  1  const uuid  sourcecreate stddebugprintn uuid     see also examplesbench   performance  the following tables were generated by hyperfinehttpsgithubcomsharkdphyperfine running examplesbench  note that the times are for 1e7 uuids so for example each v4 takes 12ns and each v3 takes 99ns   threadsafe   command  mean ms  min ms  max ms  relative    bench n 10000000 v 1  2324  15  2306  2357  183  002   bench n 10000000 v 3  9989  29  9957  10047  788  009   bench n 10000000 v 4  1268  13  1237  1297  100   bench n 10000000 v 5  7407  26  7366  7439  584  006   bench n 10000000 v 6  1891  11  1873  1916  149  002   bench n 10000000 v 7  2067  16  2043  2097  163  002    singlethreaded   command  mean ms  min ms  max ms  relative    bench n 10000000 v 1  2297  09  2283  2313  189  002   bench n 10000000 v 3  10057  174  9985  10549  827  017   bench n 10000000 v 4  1217  13  1198  1257  100   bench n 10000000 v 5  7478  89  7370  7602  615  010   bench n 10000000 v 6  1516  10  1500  1539  125  002   bench n 10000000 v 7  2034  14  2014  2064  167  002   environment  os windows 10  cpu amd ryzen 5 5600x  build mode releasefast ","dmgk/zig-getopt":"posix-compatible getopt(3) implementation in zig  minimal posix getopt3 implementation in zig this is a minimal allocationfree getopt3 implementation with posixconforminghttppubsopengrouporgonlinepubs9699919799functionsgetopthtml argument parsing semantics  example zig const std  importstd const debug  stddebug const getopt  importgetoptzig pub fn main void  var arg const u8  undefined var verbose bool  false var opts  getoptgetoptavh while optsnext maybeopt  if maybeopt opt  switch optopt  a   arg  optarg debugprintarg  sn arg  v   verbose  true debugprintverbose  n verbose  h  debugprint usage example a arg hv    else  unreachable   else break  else err  switch err  getopterrorinvalidoption  debugprintinvalid option cn optsoptopt getopterrormissingargument  debugprintoption requires an argument cn optsoptopt   debugprintremaining args sn optsargs     zig run examplezig  hv a42 foo bar usage example a arg hv verbose  true arg  42 remaining args  foo bar   ","jnordwick/tempus":"fast, minimal clocks, tsc, dates, and timestamps for zig 404 not found","cyberegoorg/zbgfx":"when zig meets bgfx.  zbgfx github actionshttpsgithubcomcyberegoorgzbgfxactionsworkflowstestyamlbadgesvghttpsgithubcomcyberegoorgzbgfxactionsworkflowstestyaml when zighttpsgithubcomziglangzig meets bgfxhttpsgithubcombkaradzicbgfx  features  x zig api  x compile as standard zig library  x shaderc as build artifact  x shader compile in buildzig to binh  x shader compile in buildzig and embed as zig module this is zig equivalent of binh  x shader compile from runtime via shaderc as child process  x binding for debugdraw apihttpsgithubcombkaradzicbgfxtreemasterexamplescommondebugdraw  x imgui render backend use build option imguiinclude to enable ex for zgui imguiinclude  zguipathlibsgetpathb    zig based allocator  important  this is only zig binding for bgfx stuff goto bgfxhttpsgithubcombkaradzicbgfx  warning   shaderc need some time to compile  note   if you build shadersapp and see something like run shaderc shaderbinh stderr this is not true error build success but only in debug build shader print some stuff to stderr and zig build catch it  license folders libs shaders is copypaste from bgfxhttpsgithubcombkaradzicbgfx for more sellcontained experience and is licensed by licenseehttpsgithubcombkaradzicbgfxblobmasterlicense zig binding is licensed by wtfpllicense  zig version minimal is 0140 but you know try your version and believe  bgfx version  bxhttpsgithubcombkaradzicbxcompare01c99ddd0912c5ecf56d9522f287c6c67aa3ad14master  bimghttpsgithubcombkaradzicbimgcomparec5c7b6e1874cf60caa18b643391f5122f89a4ca8master  bgfxhttpsgithubcombkaradzicbgfxcomparede56398919b875b27b629c0b62f119c338c081d8master  getting started copy zbgfx to a subdirectory of your project and then add the following to your buildzigzon dependencies zig zbgfx   path  pathtozbgfx   or use zig fetch save  way then in your buildzig add zig pub fn buildb stdbuild void  const exe  baddexecutable   const zbgfx  bdependencyzbgfx  exerootmoduleaddimportzbgfx zbgfxmodulezbgfx exelinklibraryzbgfxartifactbgfx  this install shaderc to install dir  for shader build in build d check examples  binstallartifactzbgfxartifactshaderc    usage see examples for binding usage and bgfxhttpsgithubcombkaradzicbgfx for bgfx stuff  build options  build option  default  description    imguiinclude  null  path to imgui includes need for imgui bgfx backend   multithread  true  compile with bgfxconfigmultithreaded   withshaderc  true  compile with shaderc   examples run this for build all examples sh cd examples zig build   00minimalexamples00minimal minimal setup with glfw for window and input sh exampleszigoutbin00minimal   key  description    v  vsync onoff   d  debug onoff   01zguiexamples01zgui minimal setup for zguiimgui sh exampleszigoutbin01zgui   key  description    v  vsync onoff   d  debug onoff   02runtime shadercexamples02runtimeshaderc basic usage of shader compile in runtime try edit shaders in zigoutbinshaders and hit r to recompile sh exampleszigoutbin02runtimeshaderc   key  description    v  vsync onoff   d  debug onoff   r  recompile shaders form file   03debugdrawexamples03debugdraw debugdraw api usage example sh exampleszigoutbin03debugdraw   key  description    v  vsync onoff   d  debug onoff  ","lawrence-laz/zig-enumerable":"iterator tools for functional data processing.  zig enumerable  functional vibes for data processing as sequences zig const std  importstd const enumerable  importenumerable test example  try expectequaliter 123 enumerablefromstdmemtokenizeanyu8 foo1bar2baz3 buffer wherestdasciiisdigit intersperse prepend append      get started bash zig fetch save httpsgithubcomlawrencelazzigenumerablearchivemastertargz  zig  buildzig const enumerable  bdependencyenumerable  target  target optimize  optimize  exerootmoduleaddimportenumerable enumerablemoduleenumerable  ","dmgk/zig-uuid":"fast, allocation-free v4 uuids in zig  fast allocationfree v4 uuids in zig  example zig const std  importstd const uuid  importuuidziguuid pub fn main void   generate const uuid1  uuidinit stddebugprintn uuid1  parse const uuid2  try uuidparse3df6f0e4f9b14e34ad7033206069b995 stddebugprintn uuid2     zig run examplezig 78c334814c674202ba8d11ee1dfaad24 3df6f0e4f9b14e34ad7033206069b995   tests bash zig test uuidzig  bash test 33 testcheck tostring works first call tostring 851d0256c62c43b0bf1571da00bafb30 second call tostring 851d0256c62c43b0bf1571da00bafb30 all 3 tests passed ","jedisct1/zig-hpke":"hpke implementation for zig.  hpke for zig zighpke is an implementation of the hybrid public key encryptionhttpswwwrfceditororgrfcrfc9180html hpke scheme  usage  bounded arrays this code heavily relies on the stdboundedarray type a type to store small variablesized slices whose maximum size is known keys are typically represented using that type whose raw slice can be accessed with the constslice function for a constant slice or slice for a mutable slice  suite instantiation zig const suite  try suiteinit primitiveskemx25519hkdfsha256id primitiveskdfhkdfsha256id primitivesaeadaes128gcmid    key pair creation zig const kp  try suitegeneratekeypair   client creation and encapsulation of the shared secret a client initiates a connexion by sending an encrypted secret a server accepts an encrypted secret from a client and decrypts it so that both parties can eventually agree on a shared secret zig var clientctxandencapsulatedsecret  try suitecreateclientcontextserverkppublickeyslice info null null var clientctx  clientctxandencapsulatedsecretclientctx var encapsulatedsecret  clientctxandencapsulatedsecretencapsulatedsecret   encapsulatedsecretencapsulated needs to be sent to the server encapsulatedsecretencapsulatedsecret must remain secret  clientctx can be used to encryptdecrypt messages exchanged with the server to improve misuse resistance this implementation uses distinct types for the client and the server context clientcontext for the client and servercontext for the server  server decapsulation of the shared secret zig var serverctx  try suitecreateservercontextencapsulatedsecretencapsulatedconstslice serverkp info null   serverctx can be used to encryptdecrypt messages exchanged with the client  the last parameter is an optional preshared key  encryption of a message from the client to the server a message can be encrypted by the client for the server zig clientctxencrypttoserverciphertext message ad  nonces are automatically incremented so it is safe to call this function multiple times within the same context last parameter is optional associated data the ciphertext is clientctxtaglength bytes larger than the message  decryption of a ciphertext received by the server the server can decrypt a ciphertext sent by the client zig var message2 messagelenu8  undefined try serverctxdecryptfromclientmessage2 ciphertext ad  last parameter is optional associated data the message length is serverctxtaglength bytes shorter than the ciphertext  encryption of a message from the server to the client a message can also be encrypted by the server for the client zig serverctxencrypttoclientciphertext message ad  nonces are automatically incremented so it is safe to call this function multiple times within the same context last parameter is optional associated data  decryption of a ciphertext received by the client the client can decrypt an encrypted response from the server zig try clientctxdecryptfromservermessage2 ciphertext ad  last parameter is optional associated data  authenticated modes authenticated modes with or without a psk are supported see createauthenticatedclientcontext and createauthenticatedservercontext  exporter secret the exporter secret can be obtained with the exportedsecret function available both in the servercontext and clientcontext structures zig const exporter  clientctxexportersecretconstslice   key derivation zig const secret1  try clientctxexportsecretdescription 1 const secret2  try serverctxexportsecretdescription 2   access the raw cipher interface zig const aead  suiteaead   thats it ","ttytm/osdialog-zig":"cross-platform utility module for zig to open native dialogs for the filesystem, message boxes, color-picking.  osdialogzig badgebuildstatus httpsimgshieldsiogithubactionsworkflowstatusttytmosdialogzigciymlbranchmainlogogithublogocolorc0caf5labelcolor333 badgeversionlib httpsimgshieldsiogithubvtagttytmosdialogziglogotasklogocolorc0caf5labelcolor333color badgeversionzig httpsimgshieldsiobadgezig0130cc742flogoziglogocolorc0caf5labelcolor333 badgebuildstatushttpsgithubcomttytmosdialogzigactionsquerybranch3amain badgeversionlibhttpsgithubcomttytmosdialogzigreleaseslatest badgeversionzighttpsgithubcomttytmosdialogzigreleaseslatest crossplatform utility module for zig to open native dialogs for the filesystem message boxes colorpicking  quickstart  installationinstallation  usageusage  exampleexample  creditscredits  showcase table aligncenter tr thlinuxth thwindowsth thmacosth tr tr td width400 img altlinux file dialog srchttpsgithubcomttytmdialogassets343115836ba6e96b35814382807479918a99dcbd td td width400 img altwindows file dialog srchttpsgithubcomttytmdialogassets34311583911e8c710cc14426a62c04714b6b071f td td width400 img altmacos file dialog srchttpsgithubcomttytmdialogassets34311583f7c4375ed2e44121ad34db0473d8fabe td tr table details open summarybmore examplesb subsuptoggle visibilitysupsubsummarybr table aligncenter tr thlinuxth thwindowsth thmacosth tr tr td width400 img altlinux color picker gtk3 srchttpsgithubcomttytmdialogassets343115838e587c8c2f1241ee9a104c3f92e72885 img altlinux message srchttpsgithubcomttytmdialogassets3431158342e1081bee524286abfdad9eda63d282 img altlinux message with yes and no buttons srchttpsgithubcomttytmdialogassets3431158307aa26bdf887417b9c1a56724ceb2589 img altlinux input prompt srchttpsgithubcomttytmdialogassets34311583bc5e3ec188b54e1ab46e381b322b8a6c img altlinux color picker gtk2 srchttpsgithubcomttytmdialogassets3431158337619ed08fe24e5caf1170d7f2304b2b td td width400 img altwindows color picker srchttpsgithubcomttytmdialogassets34311583966b139555ac45b8aa1b516f673b64e8 img altwindows message srchttpsgithubcomttytmdialogassets34311583a73e0eafe56b44e6bcc531bb381c6e37 img altwindows message with yes and no buttons srchttpsgithubcomttytmdialogassets3431158316a1ad65571e41838c0b119cbf126aec img altwindows input prompt srchttpsgithubcomttytmdialogassets3431158354e4a708de3844eaae61be39c1bdbff9 td td width400 img altmacos color picker srchttpsgithubcomuserattachmentsassets551ac8d6406d4b019095d0a357cc8250  img altmacos message srchttpsgithubcomttytmdialogassets3431158315920c46e529405f97313ac57ce46449  img altmacos message with yes and no buttons srchttpsgithubcomttytmdialogassets3431158311cba10b31904114b1ade49e56d4498c img altmacos input prompt srchttpsgithubcomttytmdialogassets34311583e6d496b43c204ece88080eba99a59a45 td tr table details  installation sh  projectspathyourawesomeprojct zig fetch save httpsgithubcomttytmosdialogzigarchivemaintargz  zig  yourawesomeprojctbuildzig const std  importstd pub fn buildb stdbuild void    const osdialogdep  bdependencyosdialog  const exe  baddexecutable name  yourawesomeprojct    exerootmoduleaddimportosdialog osdialogdepmoduleosdialog      usage ref osdialogzigsrclibzighttpsgithubcomttytmosdialogzigblobmainsrclibzig zig  opens a message box and returns true if ok or yes was pressed pub fn messagetext 0const u8 opts messageoptions bool  opens an input prompt with an ok and cancel button pub fn promptallocator stdmemallocator text 0const u8 opts promptoptions 0u8  opens an rgba color picker and returns the selected color or null if the selection was canceled pub fn coloroptions colorpickeroptions color  opens a file dialog and returns the selected path or null if the selection was canceled pub fn pathallocator stdmemallocator action pathaction options pathoptions 0u8   example ref osdialogzigexamplessrcmainzighttpsgithubcomttytmosdialogzigblobmainexamplessrcmainzig zig const std  importstd const osd  importosdialog pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer   gpadeinit   osdmessagehello world  if osdmessagedo you want to continue  buttons  yesno   stdprocessexit0  if osdpromptallocator give me some input  input  defer allocatorfreeinput stddebugprintinput sn input  if osdcolor color   r  247 g  163 b  29 a  255   selected  stddebugprintcolor rrrgggbbbaaa ddddn  selectedr selectedg selectedb selecteda   if osdpathallocator open  path  defer allocatorfreepath stddebugprintselected file sn path  if osdpathallocator opendir  path  defer allocatorfreepath  if osdpathallocator save  path   filename  myfiletxt  path  defer allocatorfreepath stddebugprintsave location sn path    sh  osdialogexamples zig build run   credits  andrewbeltosdialoghttpsgithubcomandrewbeltosdialog  the c project this library is leveraging ","jedisct1/zig-blind-rsa-signatures":"blind rsa signatures implementation for zig.  blind rsa signatures authorblinded rsassapss rsae signatures this is an implementation of the rsa blind signatureshttpswwwrfceditororgrfcrfc9474html rfc also includes a preliminary implementation of the partially blind rsa signatureshttpsdatatrackerietforgdocdraftamjadcfrgpartiallyblindrsa draft  protocol overview a client asks a server to sign a message the server receives the message and returns the signature using that message signature pair the client can locally compute a second valid message signature pair anyone can verify that message signature is valid for the servers public key even though the server didnt see that pair before but no one besides the client can link message signature to message signature using that scheme a server can issue a token and verify that a client has a valid token without being able to link both actions to the same client 1 the client creates a random message optionally prefixes it with noise and blinds it with a random secret factor 2 the server receives the blind message signs it and returns a blind signature 3 from the blind signature and knowing the secret factor the client can locally compute a message signature pair that can be verified using the servers public key 4 anyone including the server can thus later verify that message signature is valid without knowing when step 2 occurred the scheme was designed by david chaum and was originally implemented for anonymizing digicash transactions  dependencies this implementation requires openssl or boringssl  usage zig  server generate a rsa2048 key pair const kp  try blindrsa2048keypairgenerate defer kpdeinit const pk  kppk const sk  kpsk  client create a random message and blind it for the server whose public key is pk  the second parameter determines whether noise should be added to the message  true adds noise and returns it as blindingresultmsgrandomizer  false doesnt prefix the message with noise  the client must store the message the optional noise and the secret const msg  msg var blindingresult  try pkblindmsg true  server compute a signature for a blind message to be sent to the client  the client secret should not be sent to the server const blindsig  try skblindsignblindingresultblindmessage  client later when the client wants to redeem a signed blind message  using the blinding secret it can locally compute the signature of the  original message  the client then owns a new valid message signature pair and the  server cannot link it to a previousblinded message blind signature pair  note that the finalization function also verifies that the new signature  is correct for the server public key  the noise parameter can be set to null if the message wasnt prefixed with noise const sig  try pkfinalizeblindsig blindingresultsecret blindingresultmsgrandomizer msg  server a nonblind signature can be verified using the servers public key try pkverifysig blindingresultmsgrandomizer msg  deterministic padding is also supported with the blindrsadeterministic type zig const brsa  blindrsadeterministic2048 const kp  brsakeypairgenerate   for specific use cases custom hash functions and salt lengths are also accessible via the blindrsacustom type zig const brsa  blindrsacustom2048 sha256 48 const kp  brsakeypairgenerate   some helper functions are also included for key serialization and deserialization  for other languages  rusthttpsgithubcomjedisct1rustblindrsasignatures  chttpsgithubcomjedisct1blindrsasignatures  gohttpsgithubcomcloudflarecircltreemasterblindsign ","gonzooo/zig-windows-process":"toolset for interacting with windows processes in zig  zigwindowsprocess this repo is meant to hold tools for tinkering with windows processes though i might extend it in the future to allow for a higherlevel interface for injecting dlls and such the primary motivation is that id like to have a basic toolkit for dealing with things that usually come up in game hacking and exploration  the library code the library code is primarily in mainzig so if you were to add the package it would be from that file as follows zig exeaddpackagepathwindowsprocess dependencieswindowsprocesssrcmainzig   example usage  dll injection injectdllzig contains a main file for a program that will take a dll path and inject it into a given process one needs to make sure that the process has the same bitness as the dll  findingenumerating processes findprocesszig uses the process enumeration api to find processes matching a given executable name  more stuff and more ways to do these things im not an expert on any of these things and there are way more things to add here id love suggestions for tools to add techniques to facilitate through this package having a general module that allows interaction with windows processes in general is the point after all ","alexnask/peertype":"zig peer type resolution at comptime, ported from the compiler source code  peertype  api zig  types must be an iterable of types tuple slice ptr to array pub fn peertypecomptime types anytype type pub fn coercestocomptime dst type comptime src type bool pub fn requirescomptimecomptime t type bool   license mit ","zetaframe/zetaframe":"lightweight zig game framework.  zetaframe github workflow statushttpsimgshieldsiogithubworkflowstatuszetaframezetaframetestsstyleforthebadge a wip lightweight zig game framework  modules  core the core of all zetaframe applications zetaframe is based around a entity component system ecs  math a glsl compatible linear algebra library wip  render an powerful vulkan render api wip will later include a system that can be added directly into core   building use zig master   license see licensemdmasterlicensemd ","adjectiveallison/zai":"zig ai!  zai  a zig ai library zai is a flexible zig library for interacting with various ai providers apis offering a unified interface for chat completions embeddings and more  requirements  zig 0130  features  multiprovider support  openaicompatible apis openai togetherai openrouter  amazon bedrock  anthropic  support coming soon for google vertex ai and local models via zml  unified interface across providers  streaming support for realtime responses  provider and model registry for easy configuration  commandline interface cli for quick interactions  supports chat completions standard completions and embeddings  installation 1 add zai as a dependency using zig fetch sh  latest version zig fetch save githttpsgithubcomadjectiveallisonzaigitmain  2 add zai as a module in your buildzig zig const zaidep  bdependencyzai  target  target optimize  optimize  const zaimod  zaidepmodulezai  add to your executable exerootmoduleaddimportzai zaimod   cli installation to install the zai cli tool sh zig build cli install doptimizereleasefast prefix local   usage  provider configuration first create a provider configuration you can do this programmatically or via the cli zig const zai  importzai  openaicompatible configuration const providerconfig  zaiproviderconfig openai   apikey  yourapikey baseurl  httpsapitogetherxyzv1  togetherai example   amazon bedrock configuration const bedrockconfig  zaiproviderconfig amazonbedrock   accesskeyid  youraccesskey secretaccesskey  yoursecretkey region  uswest2   anthropic configuration const anthropicconfig  zaiproviderconfig anthropic   apikey  youranthropicapikey defaultmaxtokens  8000  default max tokens limit    chat example zig const std  importstd const zai  importzai pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator  initialize provider var provider  try zaiinitallocator providerconfig defer providerdeinit  set up chat messages const messages  zaimessage  role  system content  you are a helpful assistant   role  user content  tell me a short joke    configure chat options const chatoptions  zaichatrequestoptions model  mistralaimixtral8x7bv01 messages  messages temperature  07 stream  true   stream the response try providerchatstreamchatoptions stdiogetstdoutwriter    provider feature matrix  provider  chat  chat stream  completion  completion stream  embeddings    openaicompatible             amazon bedrock             anthropic             google vertex             local zml             coming soon  cli usage the zai cli provides commands for managing providers models and making api calls sh  add a provider idk if this works or not yet zai provider add openai apikey yourkey baseurl httpsapiopenaicomv1  add a model to a provider zai models add openai gpt4 id gpt4turbopreview chat  chat with a model will use first provider and first model of provider by default zai chat provider openai model gpt4 tell me a joke  same as this if openai and gpt4 are your first provider and chat model in config zai chat tell me a joke  see more cli examples and documentation by running sh zai help zai command help   examples check out the examples directory for more detailed examples  chat using openaicompatible apis exampleschatopenaizig  chat using amazon bedrock exampleschatbedrockzig  chat using anthropic exampleschatanthropiczig  embeddings generation examplesembeddingszig  provider registry management examplesregistryzig  and more  contributing contributions are welcome some areas that need work  adding tests  improving cli provider configuration workflow  implementing additional providers google vertex ai  local model support via zml integration  documentation improvements  license zai is released under the mit license see the licenselicense file for details ","ziglibs/lscolors":"a zig library for colorizing paths according to ls_colors  lscolors cihttpsgithubcomziglibsziglscolorsworkflowscibadgesvg a zig library for colorizing paths according to the lscolors environment variable designed to work with zig 0140  quick example zig const std  importstd const lscolors  importlscolorslscolors pub fn main void  var gpa stdheapdebugallocator  init defer   gpadeinit const allocator  gpaallocator var lsc  try lscolorsfromenvallocator defer lscdeinit var dir  try stdfscwdopendir  iterate  true  defer dirclose var iterator  diriterate while try iteratornext itm  stdloginfo try lscstyleditmname    ","ethanthoma/zensor":"zig tensor library h3 aligncenter zensor a zig tensor library h3 a zig tensor library correctness first speed second this library promises compiletime type and shape checking very wip  example usage zig const std  importstd const t  u32 const tensor  importzensortensort pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator var compiler  zensorcompilerinitallocator defer compilerdeinit const filename  examplesnumpynpy const a  try zensortensorint64 3fromnumpycompiler filename const b  try zensortensorint64 3fullcompiler 4 const c  try amulb const d  try csum0 stddebugprintn d   results in   zig build run tensor type dtypesint64 shape 1 length 1 data 56     install fetch the library bash zig fetch save githttpsgithubcomethanthomazensorgitmain  add to your buildzig zig const zensor  bdependencyzensor  target  target optimize  optimize modulezensor exerootmoduleaddimportzensor zensor   examples examples can be found in examples you can run these via bash zig build nameofexample  assuming you have cloned the source  tests if you want to run the tests after cloning the source simply run bash zig build test   design this library conversts all your tensor operations into an ast  0 store runtimebufferptr140052063859008 dtypedtypesint64 shape 3  1 mul 2 load runtimebufferptr140052063858688 dtypedtypesint64 shape 3  3 const 4  when you want to execute your operations it first gets split into schedules  schedule status notrun topological sort 4astnodesload const mul store global buffers 0 true 1 false dependencies count 0 ast 0 store runtimebufferptr140052063859008 dtypedtypesint64 shape 3  1 mul 2 load runtimebufferptr140052063858688 dtypedtypesint64 shape 3  3 const 4   and then ir code  step op name type input arg 0 defineglobal pointer  0 true 1 defineglobal pointer  1 false 2 const int  0 3 const int  3 4 defineacc int 5 0 5 loop int 2 3 none 6 load int 1 5 none 7 alu int 4 6 aluadd 8 update int 4 7 none 9 endloop 5 none 10 const int  0 11 store 0 10 4 none  and finally executed  pc 0 pc 1 pc 2 const 0 pc 3 const 3 pc 4 acc 0 pc 5 loop from 0 to 3 pc 6 load 4 from buffer 1 at 0 pc 7 alu add0 4  4e0 pc 8 update value stored in step 4 to 4e0 pc 6 load 16 from buffer 1 at 1 pc 7 alu add4e0 16  2e1 pc 8 update value stored in step 4 to 2e1 pc 6 load 36 from buffer 1 at 2 pc 7 alu add2e1 36  56e1 pc 8 update value stored in step 4 to 56e1 pc 9 pc 10 const 0 pc 11 store 56e1 into 0 at 0  ","gota7/zig-clay":"bindings for clay ui library in zig.  zigclay tweaked bindings for the clayhttpsgithubcomnicbarkerclay c ui library  features  zig 0130 compatibility  naming conventions follow zig standards  callbacks are more ziglike  config structures have default initializations  code is very similar to how it looks in c  usage the main difference between this and the c api is the lack of macros to get around this a different approach was taken to emulate the feel of the c api zig const layout  claybeginlayout if claychild clayidoutercontainer clayrectangle color   r  43 g  41 b  51 a  255   claylayout layoutdirection  toptobottom sizing   width  claysizinggrow height  claysizinggrow  padding   x  16 y  16  childgap  16   more config here  outercontainer  defer outercontainerend claytexthello world  fontid  0 fontsize  24 textcolor   r  255 g  255 b  255 a  255    more child elements here    const commands  layoutend  c version for comparison c claybeginlayout clay clayidoutercontainer clayrectangle color   43 41 51 255   claylayout layoutdirection  claytoptobottom sizing   width  claysizinggrow height  claysizinggrow  padding   16 16  childgap  16   more config here   claytexthello world claytextconfig fontid  0 fontsize  24 textcolor   255 255 255 255    more child elements here    clayrendercommandarray rendercommands  clayendlayout  while not as frequent sometimes control flow is required during element configuration in this scenario manual configuration should be done zig if claychildmanualcontrolflow sidebarbutton  defer sidebarbuttonend sidebarbuttonconfigclaylayoutsidebarbuttonlayout clayonhoverhandlesidebarinteraction ptrfrominti if clayhovered sidebarbuttonconfigclayrectangle color   r  120 g  120 b  120 a  255  cornerradius  claycornerradius8   more config here sidebarbuttonendconfig  children claytextdocumenttitle  fontid  fontidbody16 fontsize  20 textcolor  colorwhite   more child elements here   in this scenario care should be taken that the order is 1 call childmanualcontrolflow 2 config calls to config 3 call endconfig 4 child elements 5 call end  getting started the example folder has an example of a working project other than the syntatical differences seen above usage of the zig api should be fairly 1to1 with the c library ","andrewrk/pulseaudio":" pulseaudio with the build system replaced by zig   pulseaudio zig package this is a fork of pulseaudiohttpswwwfreedesktoporgwikisoftwarepulseaudio packaged for zig unnecessary files have been deleted and the build system has been replaced with buildzig  license original license file is unchanged the zig files that have been added to this repository are mit expat licensed the mit license expat copyright c contributors permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the software to deal in the software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense andor sell copies of the software and to permit persons to whom the software is furnished to do so subject to the following conditions the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software the software is provided as is without warranty of any kind express or implied including but not limited to the warranties of merchantability fitness for a particular purpose and noninfringement in no event shall the authors or copyright holders be liable for any claim damages or other liability whether in an action of contract tort or otherwise arising from out of or in connection with the software or the use or other dealings in the software ","jinzhongjia/zig-lamp":"improve the zig experience in neovim 404 not found","leecannon/zig-x86_64":"support for x86_64 specific instructions (e.g. tlb flush), registers (e.g. control registers), and structures (e.g. page tables)  zigx8664 cihttpsgithubcomleecannonzigx8664actionsworkflowsmainymlbadgesvgbranchmasterhttpsgithubcomleecannonzigx8664actionsworkflowsmainyml i dont use this library anymore i made this as a port of the rust crate but over time i have come to dislike the api as written it does not support selfhosted so will probably be deleted with the release of zig 011 this repo contains various functionality required to make an x8664 kernel following writing an os in rusthttpsosphiloppcom it is mainly a zig reimplementation of the rust crate x8664httpsgithubcomrustosdevx8664 it includes a few additonal types in the x8664additional namespace  serialport  serial port type mainly for debug output  simplepic  reimplementation of pic8259simplehttpsdocsrspic8259simple  how to get  gyro gyro add leecannonx8664  zigmod zigmod aq add 1leecannonx8664  git  submodule git submodule add httpsgithubcomleecannonzigx8664 zigx8664  clone git clone httpsgithubcomleecannonzigx8664 ","leecannon/zig-bitjuggle":"various 'bit juggling' helpers and functionality  zigbitjuggle this package contains various bit juggling helpers and functionality  isbitset  check if a bit is set  getbit  get the value of a bit  getbits  get a range of bits  setbit  set a specific bit  setbits  set a range of bits  bitfield  used along with extern union to represent arbitrary bit fields  bit  used along with extern union to represent bit fields  boolean  used along with extern union to represent boolean bit fields  installation add the dependency to buildzigzon sh zig fetch save githttpsgithubcomleecannonzigbitjuggle  then add the following to buildzig zig const bitjuggle  bdependencybitjuggle  exerootmoduleaddimportbitjuggle bitjugglemodulebitjuggle  ","gabrieleinvernizzi/zig-prompter":"zig-prompter is a lightweight and flexible library for building and managing interactive text-based prompts.  zigprompter zigprompter is a lightweight and flexible library for building and managing interactive textbased prompts in the zig programming languagehttpsziglangorg whether youre creating commandline tools textbased games or utilities requiring user input zigprompter simplifies the process with intuitive apis and a robust feature set  installation first add zigprompter to your buildzigzon file bash zig fetch save githttpsgithubcomgabrieleinvernizzizigprompter  update your buildzig file to include the dependency zig const prompterdep  bdependencyprompter  target  target optimize  optimize  exerootmoduleaddimportprompter prompterdepmoduleprompter  heres an example of using zigprompter to create a simple selection prompt zig const std  importstd const prompter  importprompter pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator const stdout  stdiogetstdout const theme  prompterthemessimpletheme var p  prompterpromptinitallocator themetheme const opts  const u8 option 1 option 2 option 3  const selopt  try poptionselect an option opts 1 if selopt o  try stdoutwriterprintthe selected option was s idx dn  optso o   else  try stdoutwriterwriteallthe selection was abortedn    for a more exhaustive example take a look at the examplehttpsgithubcomgabrieleinvernizzizigpromptertreemainexample directory  features  x string prompt  x interactive option selection prompt  x confirmation prompt  x password prompt  x input validation  x advanced support for themes and personalization    include more themes    windows support  contributions contributions are always welcome and greatly appreciated whether its fixing bugs adding features improving documentation or enhancing examples your input helps make zigprompter even better feel free to open issues to discuss potential improvements or submit pull requests directly thank you for your support  acknowledgments this library was inspired by the fantastic rust library dialoguerhttpsgithubcommitsuhikodialoguer ","freref/fzwatch":"a lightweight and cross-platform file watcher for your zig projects  fzwatch a lightweight and crossplatform file watcher for your zig projects  note  this project exists to support fancycathttpsgithubcomfrereffancycat and has limited features  instructions  run example you can run the examplesexamples like so sh zig build runfilename   usage a basic example can be found under examplesexamplesbasiczig the api is defined as follows zig pub const event  enum  modified  pub const callback  fn context anyopaque event event void pub const opts  struct  latency f16  10  pub fn initallocator stdmemallocator watcher pub fn deinitself watcher void pub fn addfileself watcher path const u8 void pub fn removefileself watcher path const u8 void pub fn setcallbackself watcher callback callback void pub fn startself watcher opts opts void pub fn stopself watcher void   testing run the test suite sh zig build test  ","nektro/zig-unicode-ucd":"zig bindings for the unicode character database  zigunicodeucd zig bindings for the unicode character database last updated as of unicode 1600 httpwwwunicodeorgreportstr44 httpswwwunicodeorgversionslatest  development  zig build run dstepgenerate zig build run dsteprun   license code here is mit source data files are httpswwwunicodeorglicensehtml ","jedisct1/zig-hiae":"hiae - a high-throughput authenticated encryption algorithm for cross-platform efficiency.  hiae a highthroughput authenticated encryption algorithm for crossplatform efficiency a zig implementation of hiae along with support for parallel variants  benchmarks  encryption  zen4  variant  throughput        hiae  2520 gbs   hiaex2  4499 gbs   hiaex4  4728 gbs   apple m1  variant  throughput        hiae  1695 gbs   hiaex2  1339 gbs   hiaex4  983 gbs   webassembly lime1simd128  variant  throughput        hiae  92 gbs   hiaex2  110 gbs   hiaex4  77 gbs   mac  zen4 likely limited by the memory bandwidth  variant  throughput        hiaemac  3158 gbs   hiaex2mac  5304 gbs   hiaex4mac  5222 gbs   lemac  3450 gbs   apple m1  variant  throughput        hiaemac  1631 gbs   hiaex2mac  1829 gbs   hiaex4mac  1388 gbs   lemac  2192 gbs   webassembly lime1simd128  variant  throughput        hiae  98 gbs   hiaex2  120 gbs   hiaex4  77 gbs   lemac  100 gbs   circuits  absorption absorption in hiaemedias1png  encryption encryption in hiaemedias2png  inversion inversion in hiaemedias3png ","nektro/zig-range":"a range function to loop over an index without an extra variable.  zigrange lochttpsslocxyzgithubnektrozigrange licensehttpsimgshieldsiogithublicensenektrozigrangesvghttpsgithubcomnektrozigrangeblobmasterlicense discordhttpsimgshieldsiodiscord551971034593755159svglogodiscordhttpsdiscordggp6y4zqc a range function to loop over an index without an extra variable  usage zig for range10  i   i will increment from 0  9    building example program   zigmod fetch  zig build   built with  zig master  zigmod package managerhttpsgithubcomnektrozigmod  license mit ","ikskuh/zig-gemtext":"a zig library to manipulate gemini text files  gemini text processor this is a library and a tool to manipulate gemini text fileshttpsgeminicircumlunarspacedocsspecificationhtml it provides both an easytouse api as well as a streaming parser with minimal allocation requirements and a proper separation between temporary allocations required for parsing and allocations for returned text fragments the library is thoroughly tested with a lot of gemini text edge cases and all tested cases are handled reasonably  features  fully speccompliant gemini text parsing  nonblocking streaming parser  provides both a convenient zigsrcgemtextzig and cincludegemtexth api  rendering to several formats  gemini text  html  markdown  rtf  example this is a simple example that parses a gemini file and converts it into a html file zig pub fn main void  var document  try gemtextdocumentparse stdheappageallocator stdiogetstdinreader  defer documentdeinit try gemtextrendererhtml documentfragmentsitems stdiogetstdoutwriter    more examples can be found the the examples folder  gem2html cexamplesgem2htmlc zigexamplesgem2htmlzig  gem2md cexamplesgem2mdc zigexamplesgem2mdzig  streamingparser cexamplesstreamingparserc zigexamplesstreamingparserzig","jedisct1/zig-aes-gem":"aes-gem (aes galois extended mode) implementation. 404 not found","nektro/zig-json":"a json library for inspecting arbitrary values  zigjson lochttpsslocxyzgithubnektrozigjson licensehttpsimgshieldsiogithublicensenektrozigjsonsvghttpsgithubcomnektrozigjsonblobmasterlicense a json library for inspecting arbitrary values optionally accepts trailing commas fully passes httpsgithubcomnstjsontestsuite  usage see testzig for examples  building example program   zigmod fetch  zig build test   license mit ","neurocyte/thespian":"thespian: an actor library for zig, c & c++ applications  thespian fast  flexible actors for zig c  c applications to build  zig build  see tests for many interesting examples ","nektro/zig-oauth2":"http handler functions to allow you to easily add oauth2 login support to your zig application  zigoauth2 http handler functions to allow you to easily add oauth2 login support to your zig application  built with  zig master  httpsgithubcomziglangzig  zigmod package manager  httpsgithubcomnektrozigmod  install  zigmod aq add 1nektrooauth2   license mit ","peterhellberg/typ":"a small zig ⚡ module, as a convenience for me when writing webassembly plugins for typst  typ printer a small zighttpsziglangorg  module as a convenience for me when writing webassembly pluginshttpstypstappdocsreferencefoundationsplugin for typsthttpstypstapp  note  initially based on the hellozighttpsgithubcomastralesharpwasmminimalprotocolblobmasterexampleshellozighellozig  example in wasmminimalprotocolhttpsgithubcomastralesharpwasmminimalprotocol  requirements you will want to have a fairly recent zighttpsziglangorgdownloadreleasemaster as well as the typst clihttpsgithubcomtypsttypsttabreadmeovfileinstallation  important  i had to rustup default 1790 when compiling the latest typst  as there were some breaking change in 1800  tip  some of the software that i have installed for a pretty  nice typst workflow in neovimhttpsneovimio    httpsgithubcomnvarnertypstlsp   httpsgithubcomkaarmutypstvim   httpsgithubcomchomosuketypstpreviewnvim  usage use zig fetch to add a typ to the dependencies in your buildzigzon console zig fetch save httpsgithubcompeterhellbergtyparchiverefstagsv010targz   note  you should now be able to update your buildzig as described below  buildzig zig const std  importstd pub fn buildb stdbuild void  const target  bresolvetargetquery cpuarch  wasm32 ostag  freestanding  const hello  baddexecutable name  hello rootsourcefile  bpathhellozig strip  true target  target optimize  releasesmall  const typ  bdependencytyp moduletyp hellorootmoduleaddimporttyp typ helloentry  disabled hellordynamic  true binstallartifacthello    hellozig zig const typ  importtyp export fn hello i32  const msg  hello from hellowasm written in zig return typstrmsg  export fn echolen usize i32  var res  typallocu8 len  2 catch return 1 defer typfreeres typinresptr for 0len i  resi  len  resi  return typokres    hellotyp typst set pagewidth 10cm height 10cm set textfont inter  a webassembly plugin for typst linelength 100 emphtypst is capable of interfacing with plugins compiled to webassembly linelength 100 let p  pluginzigoutbinhellowasm evalstrphello mode markup evalstrpechobytes12 mode code   expected output hellopnghttpsgithubcomuserattachmentsassetsa1cd9c86ef944d1fa44cb958475f79b0 ","nektro/zig-tls":"[wip] a pure-zig tls 1.3 client implementation.  zigtls a purezig rfc8446 tls 13httpstoolsietforghtmlrfc8446 client implementation crypto is hard please feel free to view the source and open issues for any improvements indebted to httpstls13xargsorg and multiple readings of the rfc  license mit ","by-nir/aws-sdk-zig":"🟧 aws sdk for the zig programming language  aws sdk for zig zig v014 devhttpsimgshieldsiobadgezigv014devblacklogoziglogocolorf7a41d zig v014  master branch mit licensehttpsimgshieldsiogithublicensebynirawssdkziglicense the aws sdk for zig provides an interface for amazon web services aws  caution  this project is in early development do not use it in production   support for the remaining services and features will be added as the project  matures and stabilize breaking changes are imminent pure zig implementation from code generation to runtime sdks building upon the languages strong foundation this project provides a performant and fully functioning sdks while minimizing dependencies and increased platform portability  tip  use the aws lambda runtime for zighttpsgithubcombynirawslambdazig  to deploy lambda functions written in zig  supported features  authentication  status  method  runs locally     iam identity center authenticationhttpsdocsawsamazoncomsdkreflatestguideaccessssohtml      iam roles anywherehttpsdocsawsamazoncomsdkreflatestguideaccessrolesanywherehtml      assume a rolehttpsdocsawsamazoncomsdkreflatestguideaccessassumerolehtml       aws access keyshttpsdocsawsamazoncomsdkreflatestguideaccessusershtml      iam roles for ec2 instanceshttpsdocsawsamazoncomsdkreflatestguideaccessiamrolesforec2html    settings  status  feature  notes     application idhttpsdocsawsamazoncomsdkreflatestguidefeatureappidhtml     amazon ec2 instance metadatahttpsdocsawsamazoncomsdkreflatestguidefeatureec2instancemetadatahtml     amazon s3 access pointshttpsdocsawsamazoncomsdkreflatestguidefeatures3accesspointhtml     amazon s3 multiregion access pointshttpsdocsawsamazoncomsdkreflatestguidefeatures3mraphtml      aws regionhttpsdocsawsamazoncomsdkreflatestguidefeatureregionhtml     aws sts regionalized endpointshttpsdocsawsamazoncomsdkreflatestguidefeaturestsregionalizedendpointshtml      dualstack and fips endpointshttpsdocsawsamazoncomsdkreflatestguidefeatureendpointshtml     endpoint discoveryhttpsdocsawsamazoncomsdkreflatestguidefeatureendpointdiscoveryhtml     general configurationhttpsdocsawsamazoncomsdkreflatestguidefeaturegenconfightml     imds clienthttpsdocsawsamazoncomsdkreflatestguidefeatureimdsclienthtml     retry behaviorhttpsdocsawsamazoncomsdkreflatestguidefeatureretrybehaviorhtml     request compressionhttpsdocsawsamazoncomsdkreflatestguidefeaturecompressionhtml     servicespecific endpointshttpsdocsawsamazoncomsdkreflatestguidefeaturessendpointshtml     smart configuration defaultshttpsdocsawsamazoncomsdkreflatestguidefeaturesmartconfigdefaultshtml    contributing  important  at this point the project serves as environment for developing other experimental subprojects  this initiative is in an exploratory phase and is not yet ready for contributions    description    sdksdk  aws sdks for zigbr autogenerated do not modify manually   awsruntimeawsruntime  sdk runtime shared by all the services   awscodegenawscodegen  awsspecific source generation pipeline   smithyruntimesmithyruntime  smithy 20httpssmithyio20 client runtime   smithycodegensmithycodegen  smithy 20httpssmithyio20 source generation pipeline   cli commands  zig build buildfile buildcodegenzig generate the aws sdks source code  optionally specify one or more dfiltersdkcodename to select specific services  zig build testservice run generated sdk services unit tests  license the author and contributors are not responsible for any issues or damages caused by the use of this software part of it or its derivatives see licenselicense for the complete terms of use  note  aws sdk for zig is not an official amazon web services software nor is it  affiliated with amazon web services inc the sdks code is generated based on a dataset of smithy models created by amazon web services the models are extracted from the official aws sdk for rusthttpsgithubcomawslabsawssdkrust and licensedhttpsgithubcomawslabsawssdkrustblobmainlicense as declared by amazon web services inc at the source repository this codebase including the generated code are covered by a standalone licenselicense  references  smithy  smithy spechttpssmithyio20indexhtml  smithy reference implementationhttpsgithubcomsmithylangsmithy  smithy rusthttpsgithubcomsmithylangsmithyrs  aws sdks  aws sdks and tools reference guidehttpsdocsawsamazoncomsdkreflatestguideoverviewhtml  aws common runtime crt librarieshttpsdocsawsamazoncomsdkreflatestguidecommonruntimehtml  aws sdk for chttpsgithubcomawsawssdkcpp  aws sdk for rusthttpsgithubcomawslabsawssdkrust","jeevananthan-23/ziglang-caches":"in-memory cache implementation with commonly used lru, w-lfu and s3-fifo as the eviction policy  ziglangcaches this is a modern cache implementation inspired by the following papers provides high efficiency  sieve  sieve is simpler than lru an efficient turnkey eviction algorithm for web caches nsdi24httpsjunchengyangcompublicationnsdi24sievepdf  s3fifo  fifo queues are all you need for cache eviction sosp23httpsdlacmorgdoi10114536000063613147  wtinylfu  tinylfu a highly efficient cache admission policyhttpsarxivorgabs151200727 this offers stateoftheart efficiency and scalability compared to other lrubased cache algorithms  basic usage  lrucache  least recents used cache eviction policy for cache your data inmemory for fast access zig const std  importstd const lru  importlru const cache  lrulrucachelocking u8 const u8 pub fn main void   create a cache backed by dram var lrucache  try cacheinitstdheappageallocator 4 defer lrucachedeinit  add an object to the cache try lrucacheinsert1 one try lrucacheinsert2 two try lrucacheinsert3 three try lrucacheinsert4 four  most recently used cache stddebugprintmru s n lrucachemruvalue  least recently used cache stddebugprintlru s n lrucachelruvalue  remove from cache   lrucacheremove1  check if an object is in the cache op false stddebugprintkey 1 exists  n lrucachecontains1    rocket usage 1 add ziglangcaches as a dependency in your buildzigzon details summarycodebuildzigzoncode examplesummary zig  name  nameofyourpackage version  versionofyourpackage dependencies   caches   url  httpsgithubcomjeevananthan23ziglangcachesarchivegittagorcommithashtargz hash  packagehash     set packagehash to 12200000000000000000000000000000000000000000000000000000000000000000 and zig will provide the correct found value in an error message details 2 add lrucache as a module in your buildzig details summarycodebuildzigcode examplesummary zig const lrucache  bdependencycaches  exeaddmodulelrucache lrucachemodulelrucache  details ","leecannon/zig-sbi":"zig wrapper around the risc-v sbi specification  zigsbi zig wrapper around the riscv sbi specificationhttpsgithubcomriscvnonisariscvsbidoc compatible with sbi specification v30rc1  installation add the dependency to buildzigzon sh zig fetch save githttpsgithubcomleecannonzigsbi  then add the following to buildzig zig const sbi  bdependencysbi  exerootmoduleaddimportsbi sbimodulesbi  ","ringtailsoftware/zig-embshell":"small embeddable command line shell in zig  embshell a very small interactive command shell for embedded zig programs embshell makes an ideal system monitor for debugging and interacting with a small embedded system it interactively takes lines of text parses commands and makes callbacks into handler functions compared with readline linenoise and editline  embshell is tiny it lacks most of their features but it does have  tab completion for command names  backspace for line editing  no reliance on libc and very little use of zigs std ie no fancy print formatting  very little ram use just a configurable buffer for the incoming command line in embshell  all commands and configuration are set at comptime to optimise footprint  all arguments are separated by whitespace there is no support for quoted strings multiline commands or escaped data  all handler arguments are strings leaving it to the app to decide how to parse them  no runtime memory allocations  using developed with zig 0140  run the sample cd exampleposix zig build run  myshell help echo led myshell echo hello world you said  echo hello world  ok myshell led 1 if we had an led it would be set to true ok   using in your own project first add the library as a dependency in your buildzigzon file zig fetch save githttpsgithubcomringtailsoftwarezigembshellgit and add it to buildzig file zig const embshelldep  bdependencyembshell  target  target optimize  optimize  exerootmoduleaddimportembshell embshelldepmoduleembshell  import the module and provide a configuration  prompt is the string shown to the user before each command is entered  maxargs is the maximum number of arguments embshell will process eg mycmd foo bar is 3 arguments  maxlinelen is the maximum length of a line to be handled a buffer of this size will be created  cmdtable an array of names and handler function for commands zig const userdatat  u32 const embshellt  importembshellembshellfixedparamsuserdatat const embshell  importembshellembshellfixed prompt  myshell  maxargs  16 maxlinelen  128 cmdtable    name  echo handler  echohandler   name  led handler  ledhandler   userdatat  userdatat   each handler function is in the following form embshell prints ok after successfully executing each function and failed if an error is returned zig fn myhandleruserdata userdatat argsconst u8 anyerrorvoid   process args  optionally return error   next call init and provide a write callback to allow embshell to emit data zig fn writedataconst u8 void   emit data to terminal  var shell  try embshellinitwrite userdata  finally feed embshell with incoming data from the terminal to be processed zig const buf  readfrommyterminal shellfeedbuf  ","zigembeddedgroup/zfat":"generic purpose platform-independent fat driver for zig  zfat bindings for the fatfshttpelmchanorgfswff00indexehtml library ","hendriknielaender/http2.zig":"🌐 http/2 server for zig  warning  still work in progress h1 aligncenter img srcdocsimageslogopng width40 height40 althttp2zig logo titlehttp2zig logo h1 div aligncentera http2 zig library according to the http2 rfcsdiv div aligncenter mit licensehttpsimgshieldsiobadgelicensemitbluesvghttpsgithubcomhendriknielaenderhttp2zigblobheadlicense github code size in byteshttpsimgshieldsiogithublanguagescodesizehendriknielaenderhttp2zig prs welcomehttpsimgshieldsiobadgeprswelcomebrightgreensvghttpsgithubcomhendriknielaenderhttp2zigblobheadcontributingmd h2spec conformancehttpsimgshieldsiobadgeh2spec712f7420tests20passingred div  features  connection management  stream handling  frame parsing and serialization  compliance with http2 specifications  installation you can use zig fetch to conveniently set the hash in the buildzigzon file and update an existing dependency run the following command to fetch the http2zig package shell zig fetch httpsgithubcomhendriknielaenderhttp2zigarchivecommittargz save  using zig fetch simplifies managing dependencies by automatically handling the package hash ensuring your buildzigzon file is up to date  option 1 buildzigzon 1 declare http2zig as a dependency in buildzigzon diff  name  myproject version  100 paths   dependencies    http2    url  httpsgithubcomhendriknielaenderhttp2zigarchivecommittargz      2 add the module in buildzig diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption  const opts   target  target optimize  optimize   const http2module  bdependencyhttp2 optsmodulehttp2 const exe  baddexecutable name  test rootsourcefile  bpathsrcmainzig target  target optimize  optimize   exerootmoduleaddimporthttp2 http2module exeinstall    3 get the package hash shell  zig build myprojectbuildzigzon620 error url field is missing corresponding hash field url  httpsgithubcomhendriknielaenderhttp2zigarchivecommittargz  note expected hash  hash  4 update buildzigzon package hash value diff  name  myproject version  100 paths   dependencies   http2   url  httpsgithubcomhendriknielaenderhttp2zigarchivecommittargz  hash  hash      usage  connection to create an http2 connection use the connection struct this struct handles the initialization sending of the http2 preface settings and managing streams zig const std  importstd const http2  importhttp2 const connection  http2connectionstdioanyreader stdioanywriter pub fn main void  const address  try stdnetaddressresolveip0000 8081 var listener  try addresslisten reuseaddress  true  defer listenerdeinit stddebugprintlistening on 1270018081n  while true  var conn  try listeneraccept defer connstreamclose stddebugprintaccepted connection from anyn connaddress var serverconn  connectioninitconstcaststdheappageallocator connstreamreaderany connstreamwriterany true catch err  stddebugprintfailed to initialize connection n err continue  defer serverconndeinit  handle connection and errors during the process serverconnhandleconnection catch err  stddebugprinterror handling connection n err  stddebugprintconnection from any closedn connaddress    ","dravenk/ollama-zig":"ollama zig library  ollama zig library the ollama zig library provides the easiest way to integrate zig 013 projects with ollamahttpsgithubcomollamaollama  prerequisites  ollamahttpsollamacomdownload should be installed and running  pull a model to use with the library ollama pull model eg ollama pull llama32  see ollamacomhttpsollamacomsearch for more information on the models available  install sh zig fetch save githttpsgithubcomdravenkollamaziggit   usage adding to buildzig zig const ollama  bdependencyollamazig  target  target optimize  optimize  exerootmoduleaddimportollama ollamamoduleollama  import it in your code zig const ollama  importollama  see typeszigsrctypeszig for more information on the response types  streaming responses response streaming can be enabled by setting stream  true zig try ollamachat model  llama32 stream  true messages    role  user content  why is the sky blue      api the ollama zig librarys api is designed around the ollama rest apihttpsgithubcomollamaollamablobmaindocsapimd  chat zig var responses  try ollamachat model  llama32 stream  false messages    role  user content  why is the sky blue    while try responsesnext chat  const content  chatmessagecontent stddebugprints content    generate zig var responses  try ollamagenerate model  llama32 prompt  why is the sky blue  while try responsesnext response  const content  responseresponse stddebugprints content    show zig try ollamashowllama32   create zig try ollamacreate model  mario from  llama32 system  you are mario from super mario bros    copy zig try ollamacopyllama32 userllama32   delete in planwait for the upstream update see httpsgithubcomollamaollamaissues8753 zig try ollamadeletellama32   pull zig try ollamapullllama32   push zig try ollamapush model  dravenkllama32   embed or embed batch zig var input  stdarraylistconst u8initallocator try inputappendthe sky is blue because of rayleigh scattering try inputappendgrass is green because of chlorophyll var responses  try ollamaembed model  dravenkllama32 input  try inputtoownedslice  while try responsesnext response  stddebugprinttotalduration dn responsetotalduration stddebugprintpromptevalcount dn responsepromptevalcount    ps zig try ollamaps   version zig try ollamaversion   errors errors are raised if requests return an error status or if an error is detected while streaming zig  ","better-zig/learn-zig":"zig quick learn  learnzig  learning zig language  related   httpsgithubcombetterzigziglingssolutions  zig   features  basicpackagesbasic zig basic example  toolboxpackagestoolbox  zig toolbox  zigutilspackageszigutils  zig utils   c    cpackagescsrcmainc  zig  c   c   cd packagesc task run  or task crun   zigusecpackageszigusecsrcmainzig zig  c    zigtocpackageszigtocreadmemd zig  c libc abi  ffi  dart  quickstart  requirements  zig 0100dev261747c4d4450  zigmod zigmod r80 macos aarch64 none  install ruby  install zig task installzigdev   zig version 0100dev261747c4d4450  macos  m1 cpu task installzigmodm1  or macos  intel cpu task installzigmodintel   run ruby task basicrun   test ruby task basictest   structure ruby   tree packages l 2 packages  basic   taskfileyml   buildzig   src   zigcache   zigout   zigmodyml  toolbox   taskfileyml   buildzig   src   zigmodyml  zigutils  taskfileyml  buildzig  src  zigcache  zigmodyml  ","laohanlinux/boltdb-zig":"this repository has no description.  boltdbzig a pure zig implementation of boltdb an embedded keyvalue database  overview boltdbzig is a zig port of the original boltdbhttpsgithubcomboltdbbolt which is a simple yet powerful embedded keyvalue database written in go it provides a consistent and acidcompliant data store with the following features  pure zig implementation  single file backend  acid transactions  lockfree mvcc  nested buckets  status  this project is currently under development  usage zig  zig fetch save githttpsgithubcomlaohanlinuxboltdbziggit  import the library in your buildzigzon file linkexamplebuildzigzon  const boltdbdep  bdependencyboltdbzig  target  target optimize  optimize  const exe  baddexecutable name  example rootsourcefile  bpathsrcmainzig target  target optimize  optimize  exerootmoduleaddimportboltdb boltdbdepmoduleboltdb  how use linkexamplesrcmainzig  license this project is licensed under the mit license  see the license file for details  acknowledgments  original boltdbhttpsgithubcomboltdbbolt ","bitlytwiser/zinger":"simple http request library for zig applications div aligncenter img srcassetszingerjpg width450 height500  zinger a simple http request library  contents usageusage  make requestsmakerequests  getget  postpost  put and deleteputanddelete  supported requestssupports  div  usage add zinger to your zig project with zon sh zig fetch save httpsgithubcombitlytwiserzingerarchiverefstagsv011targz  add the following to buildzig file zig const zinger  bdependencyzinger  exerootmoduleaddimportzinger zingermodulezinger  import zinger and you should be set zig const zinger  importzingerzinger  please see the examples in the mainzig file or below to view using the package  make requests any of the requsts can be made with a body utilizing the optional values additionally any body can be converted to json by utilizing the anytype passed into the json function call the example in main shows how to make a request and check for errors in the query  maxappendsize note the stdhttpclientfetchoptions by default sets a max body size if not defined to  2  1024  1024 if this is enough for your use cases most general http requests with a smaller json body would fit within this allotment then everything is fine overwise you will need to pass in the alloteddesired amount into zinger init example zig var z  zingerzingerinitallocator null  or  the numerical value here should be carefully considered to avoid over allocation var z  zingerzingerinitallocator 1024  10  zig const allocator  stdheappageallocator var z  zingerzingerinitallocator null defer zdeinit var headers  stdhttpheader const resp  try zgetsome api null headers if resperr errdata  stddebugprints errdataphrase  if resperr  null  try respprinterr   this is the most basic example there is for curating requests a simple get request but otherwiese does not display anything as we pass in a null body perhaps useful if all you want to check is the status of the response which is done in the resperr check  get zig const allocator  stdheappageallocator var z  zingerzingerinitallocator 1024  2  2 defer zdeinit var headers  stdhttpheader const resp  try zgetsome api null headers if resperr errdata  stddebugprints errdataphrase  if resperr  null  try respprinterr   serialize the json data from the body using the jsonanytype method  pass any struct type here to marshal the body into the struct  obviously ensure that the struct attributes match the returned json data from the endpoint const jsonresp  try respjsontestresptype stddebugprintany jsonresp   post you can denote whatever type you want for the json data in a custom struct zig const testresptype  struct  testdata const u8   zig fn postallocator stdmemallocator void   create zinger instance for post var z  zingerzingerinitallocator null const testdata  struct  examplestring const u8  examplestring  testing  const jsonbody  stdjsonstringifyallocallocator testdata  defer allocatorfreejsonbody var headers  stdhttpheader name  contenttype value  applicationjson  const resp  try zgetapi endpoint testdata headers if resperr errdata  stddebugprints errdataphrase  if resperr  null  try respprinterr   serialize the json data from the body using the jsonanytype method using the custom struct above const respdata  struct  examplestring const u8  const jsonresp  try respjsonrespdata stddebugprintany jsonresp    put and delete following the same pattern above you can unclude a body as part of the deleteput requests the library is really designed around however the user wants to present the data attempting to make it as simple as possible to make all the general requests you need for putdelete simply change the http verb in the above examples and you are set putdelete zig fn deleteallocator stdmemallocator void   create zinger instance for post  the value for the maxoverride here is just symbolic for reference  this would generally be null unless you need to override this value var z  zingerzingerinitallocator 2048  10 const testdata  struct  examplestring const u8  examplestring  testing  const jsonbody  try stdjsonstringifyallocallocator testdata  defer allocatorfreejsonbody var headers  stdhttpheader name  contenttype value  applicationjson  var resp  try zdeleteapi endpoint jsonbody headers if resperr  null  try respprinterr return   serialize the json data from the body using the jsonanytype method const jsonresp  try respjsontestresptype stddebugprintany jsonresp  fn putallocator stdmemallocator void   create zinger instance for post var z  zingerzingerinitallocator null const testdata  struct  examplestring const u8  examplestring  testing  const jsonbody  try stdjsonstringifyallocallocator testdata  defer allocatorfreejsonbody var headers  stdhttpheader name  contenttype value  applicationjson  var resp  try zputapi endpoint jsonbody headers if resperr errdata  stddebugprints errdataphrase return   serialize the json data from the body using the jsonanytype method const jsonresp  try respjsontestresptype stddebugprintany jsonresp    supports get post put and delete requests ","durobot/zon_get_fields":"utility functions to get field values from the abstract syntax tree generated from zon (zig object notation) text using zig stdlib  zongetfields several functions to facilitate the process of walking abstract syntax trees asts generated from zonhttpsgithubcomziglangzigissues14290 text and fetch the values of the fields from the ast but first you have to call stdzigastparse to tokenize and parse your zon creating the ast updated to work with and tested with zig 0140dev304608d661fcf the latest commit is not going to work with earlier versions of zig 0140dev because of the breaking changes in libstdbuiltinzig change of names of struct fields like arraysentinel to sentinelptr or structfielddefaultvalue to defaultvalueptr support for older versions like zig 0120 0121 0130 and 0140dev91a154d8da8 was dropped because of this breaking change in the standard libraryhttpsgithubcomziglangzigcommit0fe3fd01ddc2cd49c6a2b939577d16b9d2c65ea9 if you need a version of zongetfields that works with older zig versions get this releasehttpsgithubcomdurobotzongetfieldsreleasestagv01beta it still probably wont work with zig 011 but youre welcome to try it and report back although im not too keen on backporting zongetfields is licensed under the the mit licensehttpsenwikipediaorgwindexphptitlemitlicenseuseskinvector you are more than welcome to drop zongetfieldszig into your project dont forget to const zgf  importzongetfieldszig or you can use the zig package manager 1 in your projects buildzigzon in dependencies add zig zongetfields   url  httpsgithubcomdurobotzongetfieldsarchivegit commit hash 40 hex digitstargz hash  zig package hash 68 hex digits  use arbitrary hash get correct hash from the error   2 in your projects buildzig in pub fn build before binstallartifactexe add zig const zgf  bdependencyzongetfields  target  target optimize  optimize  exerootmoduleaddimportzongetfields zgfmodulezongetfields  3 add const zgf  importzongetfieldsin your source files 3 build your project with zig build as you normally do things i like 1 hey it works at least it looks like it does and since nothing like this exists in the standard library i consider it a success 2 you can throw your struct and an ast at a function pub fn zontostruct and have your struct filled with data the fields that have matching values in the provided ast that is and you get to know what was filled and what was not  look and the returned struct 3 or you can fetch the values of the fields you need using string paths to indicate them calling pub fn getfieldval its fine if all you need is a couple of fields 3 all the basics are covered  signed and unsigned integers and floats strings single characters booleans nested structs arrays arrays of arrays arrays of structs in fact any combination of structs and arrays should work things i dont really like 1 no ast validity verification thinking about zon schemas or similar in the future maybe 2 if you use the second approach pub fn getfieldval for every field you want to read youve got to specify the path the path is split the ast is walked and if you have rather large structures to fetch a lot of this work is repeated for each field not the best approach performancewise but you can switch to pub fn zontostruct which fills all the fields it can it one go 3 an ugly hack that i had to use in order to get negative values from the fields both integers and floating point see fn fullltokenslice i cant be sure my approach works correctly in all situations or will continue to work in the future so i feel really uneasy about using it for examples of how to use them turn to the test sections in zonparsezig 1 find zontostruct tests commenthttpsgithubcomdurobotzongetfieldsblobcd1524a1e30b1375524a48b491d845f27a3b4594srczongetfieldszigl1490 for pub fn zontostruct approach  filling your struct all at once 2 find getfieldval tests commenthttpsgithubcomdurobotzongetfieldsblobcd1524a1e30b1375524a48b491d845f27a3b4594srczongetfieldszigl428 for pub fn getfieldvalapproach  fetching field values one by one as you provide string paths to each field or check out the short examples below you can compile and run them with zig build examplezontostruct and zig build examplegetfieldval commands say youve got this zon file myzon zon  database   host  127001 port  5432 user  superadmin password  supersecret  decimalseparator   monthsinyear  12 newlinechar  n pi  314159265359 hello   unicodechar   primes   2 3 5 7 11  factorials   1 1 2 6 24 120 720 5040 40320 362880 3628800 39916800  slcofstructs    ham  10 eggs  2   ham  5   slcofarrays    10 20 30   40 50   slcofslices    1 2 3   4 5   6     then you can either 1 define a struct pass a pointer to it together with ast built from myzon to pub fn zontostruct get your struct filled and get a report struct which mirrors the fields of your struct indicating whether they were filled or not see this tablereportstructfieldtypes for report struct field types zig const std  importstd const zgf  importzongetfieldszig pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocr  gpaallocator  astparse requires a sentinel 0 terminated slice so we pass 0 as the sentinel value last arg const zontxt  try stdfscwdreadfileallocoptionsallocr myzon stdmathmaxintusize null alignofu8 0 defer allocrfreezontxt var ast  try stdzigastparseallocr zontxt zon defer astdeinitallocr const mystruct  struct  field order is not important  const databasesettings  struct  host const u8    since this is a slice of const u8  it will be addressing the string in astsource port u16  0 user u8    having a slice field requires passing a nonnull allocator  to zontostruct and freeing user when were done password 20u8  u8 33  20  this array is filled with stringarray elements up  to this fields capacity or padded with 0 bytes ","tensorush/liza":"[mirror] zig codebase initializer.  liza  zig codebase initializer  usage sh git clone httpscodebergorgtensorushlizagit cd liza zig build exe  h   features   zig executable templatesrctemplatesexe  zig executable compilation  dependency usage  binary release   zig library templatesrctemplateslib  zig static library compilation  public module creation  example suite setup   zig build templatesrctemplatesbld  cc static library compilation  configuration option usage  lazy dependency usage   mach application templatesrctemplatesapp  machhttpsmachengineorg application compilation  wgslhttpswwww3orgtrwgsl shader usage   githubsrctemplatesgithubworkflowsciyaml  forgejosrctemplatesforgejoworkflowsciyaml  woodpeckersrctemplateswoodpeckerciyaml ci workflow template  exeexamplelib s executables run librarys example suite execution or builds installation  test test suite execution and optional githubonly code coverage publication to codecovhttpsdocscodecovcomdocsgithub2gettingacodecovaccountanduploadingcoverageinstallthegithubappintegration  fmt formatting checks execution   optional githubsrctemplatesgithubworkflowscdyaml  forgejosrctemplatesforgejoworkflowscdyaml  woodpeckersrctemplateswoodpeckercdyaml cd workflow  emitdeploy documentation emission and deployment to github pageshttpsdocsgithubcomenpagesgettingstartedwithgithubpagesconfiguringapublishingsourceforyourgithubpagessitepublishingwithacustomgithubactionsworkflow or codeberg pageshttpscodebergpage   mit license templatesrctemplateslicense   gitattributessrctemplatesgitattributes   gitignoresrctemplatesgitignore ","theseyan/mpack-zig":"messagepack bindings for zig / msgpack.org[zig]  messagepack for zig highlevel apis for mpackhttpsgithubcomludocodempack a fast compliant encoderdecoder for the messagepackhttpsmsgpackorg binary format built and tested with zig version 0130   simple and easy to use   secure against untrusted data   lightweight suitable for embedded   extremely fasthttpsgithubcomludocodeschemalessbenchmarksspeeddesktoppc  table of contents  installationinstallation  usageusage  apiapi  writerwriter  treetree  treecursortreecursor  readerreader  cursorcursor  testingtesting  benchmarksbenchmarks  installation bash  replace version with the latest release eg v010 zig fetch httpsgithubcomtheseyanmpackzigarchiverefstagsversiontargz  copy the hash generated and add mpackzig to buildzigzon zig  dependencies   mpack   url  httpsgithubcomtheseyanmpackzigarchiverefstagsversiontargz hash  hash      api as there is currently no proper documentation i recommend checking out the testshttpsgithubcomtheseyanmpackzigtreemaintest to refer for examples the source code is also wellcommented  writer  note  zeroallocating api all writes are flushed to userprovided buffer the simplest way to incrementally write a messagepack encoded message to a buffer writing should always start with startmap and end with finishmap values should always be written immediately after respective keys after writing is done call deinit to flush the written bytes to the underlying buffer for purezig code it can be useful to directly encode a struct or any supported type using the writeanywriteanyexplicit methods if you already have a parsed tree of nodes using tree api and need to serialize a nested child map node to its own messagepack buffer use the writemapnode method which accepts a treenode internally it uses the writer and treecursor apis it is also possible to write preencoded messagepack object bytes as value to a larger object via writeencodedobject this is particularly useful when creating a larger structure that embeds smaller encoded structures wihout having to decode and reencode everything zig const writer  mpackwriter var buffer 1024u8  undefined var writer  writerinitbuffer try writerstartmap3 try writerwritestringname  key try writerwritestringsayan  value try writerwritestringage  key try writerwriteuint32100  value try writerwritestringlocation  and so on try writerstartmap2 try writerwritestringx try writerwritedouble123535 try writerwritestringy try writerwritedouble12341234 try writerfinishmap try writerfinishmap  flush buffered writes to stream try writerdeinit  results in an encoded message equivalent to the following json json  name sayan age 100 location  x 123535 y 12341234    the following writer methods are available  writeany  serialize any supported data type including structs value must be known at comptime  writehashmap  write a stringarrayhashmap as a map value  writenumber  infer the type of number at comptime  writenull  writebool  writeint8 writeint16 writeint32 writeint64  writeuint8 writeuint16 writeuint32 writeuint64  writefloat writedouble  writenumberexplicit  infer the type of number at comptime but value is runtimeknown  writestring  writebytes  writeextension  read more on messagepack extensionshttpsgithubcommsgpackmsgpackblobmasterspecmdextensiontypes  startarray  start writing an array count must be known upfront  startmap  start writing a map length must be known upfront  finisharray finishmap  close the last opened arraymap  writeanyexplicit  when value is unknown at comptime but type is known  writemapnode  encode a parsed nodetypemap node back to binary  writeencodedobject  write a preencoded messagepack object as value  stat  returns information about underlying buffer  tree  note  by default nodes of the parsed tree are allocated on the heap as required automatically  to avoid dynamic allocations you can create a reuseable pool with preallocated nodes  stringsbinaryextension values are zerocopy and point to the original buffer hence are only valid as long as the buffer lives treebased reader can be used to read data explicitly and with random access get a item by path eg parentsmotherchildren0name deserialize a message to a zig struct or traverse the tree using treecursor zig pub const tree  struct  pub fn initallocator stdmemallocator data const u8 pool pool tree pub fn deinitself tree void pub fn getbypathself tree path const u8 node pub fn readanyself tree comptime t type struct  value t arena stdheaparenaallocator  pub fn cursorself tree cursor  a preallocated pool of nodes to avoid dynamic allocations in hot paths pub const pool  struct   creates a pool of preallocated nodes for use with init  this helps avoid slow dynamic allocations in hot paths pub fn initallocator stdmemallocator size usize pool  destroys the pool and frees the underlying memory pub fn deinitself pool void   pub const node   pub const nodetype  enum  null bool int uint float double string bytes array map extension missing  pub fn gettypeself node nodetype pub fn isvalidself node bool pub fn isnullself node bool pub fn getboolself node bool pub fn getintself node i64 pub fn getuintself node u64 pub fn getfloatself node f32 pub fn getdoubleself node f64 pub fn getstringself node const u8 pub fn getbytesself node const u8 pub fn getextensiontypeself node i8 pub fn getextensionbytesself node const u8 pub fn getarraylengthself node u32 pub fn getarrayitemself node index u32 node pub fn getmaplengthself node u32 pub fn getmapkeyatself node index u32 node pub fn getmapvalueatself node index u32 node pub fn getmapkeyself node key const u8 node    treecursor a treecursor can be used to traverse through a trees nodes in order zig var cursor  try treecursor   or a cursor starting from any nested map node var cursor  try treecursorinitnestedmapnode  it is nonallocating and returns items onebyone via the next method when all items are exhausted ","allyourcodebase/boost-libraries-zig":"boost libraries using build.zig  boost libraries using zig buildsystem boost librarieshttpsboostio using buildzig replacing the cmakehttpscmakeorg and b2httpswwwbfgroupxyzb2 build system  important  for c projects zig c uses llvmlibunwind  llvmlibc staticlinking by default  except for msvc target nostdlib  requirements  zighttpsziglangorgdownload v0140 or master  how to use build libraries bash  build noheaderonly libraries  zig build doptimizedebugreleasesafereleasefastreleasesmall  dtargettripletarget  summary allnew  dcontext  djson  dsystem  dcontainer  dcobalt  dfilesystem   helper bash projectspecific options dtargetstring the cpu architecture os and abi to build for dcpustring target cpu features to add or subtract ddynamiclinkerstring path to interpreter on the target system doptimizeenum prioritize performance safety or binary size supported values debug releasesafe releasefast releasesmall datomicbool build boostatomic library default false dcharconvbool build boostcharconv library default false dcobaltbool build boostcobalt library default false dcontainerbool build boostcontainer library default false dcontextbool build boostcontext library default false dexceptionbool build boostexception library default false dfiberbool build boostfiber library default false dfilesystembool build boostfilesystem library default false diostreamsbool build boostiostreams library default false djsonbool build boostjson library default false dlogbool build boostlog library default false dnowidebool build boostnowide library default false dprocessbool build boostprocess library default false dpythonbool build boostpython library default false drandombool build boostrandom library default false dregexbool build boostregex library default false dserializationbool build boostserialization library default false dstacktracebool build booststacktrace library default false dsystembool build boostsystem library default false durlbool build boosturl library default false dwavebool build boostwave library default false dsharedbool build as shared library default false   or use in new zig project make directory and init bash  zig init  add in buildzigzon boostlibrarieszig package  zig fetch saveboost githttpsgithubcomallyourcodebaseboostlibrarieszig  add in buildzig zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const boostdep  bdependencyboost  target  target optimize  optimize  const boostartifact  boostdepartifactboost forboostartifactrootmoduleincludedirsitems includedir  try exerootmoduleincludedirsappendballocator includedir   if not headeronly link library exelinklibraryboostartifact    license see licenselicense ","seyhajin/webgpu-wasm-zig":"🚀 a minimal webgpu example written in zig, compiled to webassembly (wasm). 🛠️ ideal for experimenting and preparing for native development without install dependencies (dawn, wgpu-rs). 404 not found","sackosoft/zig-luajit-build":"a package to compile luajit using the zig toolchain. install to access the luajit c api. for zig api see https://github.com/sackosoft/zig-luajit div aligncenter  zigluajitbuild used to compile and link the native luajitluajit c api into zig  applications ubuntu build status badgehttpsimgshieldsiogithubactionsworkflowstatussackosoftzigluajitbuildbuildubuntuymllabellinux20build windows build status badgehttpsimgshieldsiogithubactionsworkflowstatussackosoftzigluajitbuildbuildwindowsymllabelwindows20build github licensehttpsimgshieldsiogithublicensesackosoftzigluajitbuild  todo capture attention with a visualization diagram demo or other visual placeholder here placeholder  div luajit is a fork from the lualua project  lua is a powerful efficient lightweight embeddable scripting language luajit httpsluajitorgindexhtml lua httpswwwluaorgabouthtml  are you looking for a zig interface to the luajit c api this package does not contain zig language bindings to the c api this package only handles building and linking the luajit library into a zig application if youre looking to run lua on luajit in your zig application youre probably looking for one of these projects 1 sackosoftzigluajithttpsgithubcomsackosoftzigluajit  zig language bindings luajit  preferred solution when only one lua runtime luajit is required built on top of zigluajitbuild 2 natecraddockzigluahttpsgithubcomnatecraddockziglua  zig language bindings for lua 5x and luau and luajit  more mature project maintained by nathan craddock has some quirks as a result of supporting all lua runtimes with the same zig api  zig version the main branch targets zigs master nightly deployment last tested with 0140dev34606d29ef0ba  installation  usage install using zig fetch this will add a luajitbuild dependency to your buildzigzon file bash zig fetch saveluajitbuild githttpsgithubcomsackosoftzigluajitbuild  next in order for your code to import the luajit c api youll need to update your buildzig to 1 get a reference to the luajitbuild dependency which was added by zig fetch 2 get a reference to the luajitbuild module containing the native luajit c api 3 attach that module as an import to your library or executable so that your code can reference the c api zig  1 reference the dependency const luajitbuilddep  bdependencyluajitbuild  target  target optimize  optimize linkas  static  or dynamic to link as a shared library   2 reference the module containing the luajit c api const luajitbuild  luajitbuilddepmoduleluajitbuild  set up your library or executable const lib    const exe     3 add the module as an import available via importc or any other name you choose here librootmoduleaddimportc luajitbuild  or exerootmoduleaddimportc luajitbuild  now the code in your library or executable can import and access the luajit c api zig const c  importc  access luajit functions via c pub fn main void  const state cluastate  clualnewstate if state l  clualopenlibsl clualdostring l  printhello world      configuration this package supports one configuration option shown in the example above  linkas controls how luajit is linked  static build and link luajit as a static library default  dynamic build and link luajit as a shared library  license some files in this repository were copied or adapted from the natecraddockzigluahttpsgithubcomnatecraddockziglua project any files copied or adapted from that project have a comment describing the attribution at the top such files are shared by nathan craddock under the mit license in ziglualicensehttpsgithubcomnatecraddockzigluablob90dab7e72173709353dcaaa6d911bed7655c030dlicense all other files are released under the mit license in zigluajitbuildlicenselicense ","guidorice/libgeos.zig":"zig bindings for the geos c library; compile libgeos in your build.zig.  libgeoszig zighttpsziglangorg bindings for the geos c library libgeoshttpslibgeosorg  geos geometry engine open source is a cc library for spatial computational geometry of the sort generally used by geographic information systems software geos is a core dependency of postgis qgis gdal and shapely  geos version 3102capi1160  zig version  091 0100dev  build requires only zig dont forget to cloneinit the submodule shell git clone recursesubmodules httpsgithubcomguidoricelibgeosziggit cd libgeoszig zig build   tests shell zig build test   examples shell  zig build help  zig build runex1 geometry a polygon0 0 10 0 10 10 0 10 0 0 geometry b polygon5 5 15 5 15 15 5 15 5 5 intersectiona b polygon 10 10 10 5 5 5 5 10 10 10   known issues  blocker the libgeos library uses c stdruntimeerror which is not currently captured by the zig wrapper code as a result there is no way to recover from some error conditions for example failing to parse some wkt formatted string see issue 9httpsgithubcomguidoricelibgeoszigissues9  roadmap  x minimal buildzig builds libgeos entirely using zig compiler and build system  x create example exe using this package as a zig library  x port libgeos c examples to zig from srcgeosexamples  x ex 1srcexamplesex1zig reads two wkt representations and calculates the intersection prints it out and cleans up  x ex 1 threadsafesrcexamplesex1threadsafezig  x ex 2srcexamplesex2zig reads one geometry and does highperformance prepared geometry operations to place random points inside it  x ex 3srcexamplesex3zig build a spatial index and search it for a nearest pair    solution for stdruntimeerror conditions see known issues    new zig idiomatic wrapper for libgeos c api alternatively port to zignative    new geojson readerwriter which speaks libgeos types and full support for feature properties reference geos geojson support notes herehttpslibgeosorgspecificationsgeojson    new zig projects which utilize these geospatial or geometric primitives  notes see also vendorgeosreadmesrcvendorgeosreadmemd for how libgeos is updated within this repo ","allyourcodebase/nasm":"nasm with the build system replaced by zig this is a fork of nasmhttpsnasmus packaged for zig unnecessary files have been deleted and the build system has been replaced with buildzig original readme follows  nasm the netwide assembler  masterhttpstravisciorgnetwideassemblernasmsvgbranchmasterhttpstravisciorgnetwideassemblernasm many many developers all over the net respect nasm for what it is a widespread thus netwide portable thus netwide very flexible and mature assembler tool with support for many output formats thus netwide now we have good news for you nasm is licensed under the simplified 2clause bsd licensehttpsopensourceorglicensesbsd2clause this means its development is open to even wider society of programmers wishing to improve their lovely assembler visit our nasmushttpswwwnasmus website for more details with best regards the nasm crew ","dimdin/zig-recover":"zig panic recover zig panic recover  recover calls a function and regains control of the calling thread when the function panics or behaves undefined recover is licensed under the terms of the mit licenselicense how to use  recover call calls function with args if the function does not panic will return the called functions return value if the function panics will return errorpanic  const recover  importrecover try recovercallfunction args  prerequisites  1 enabled runtime safety checks such as unreachable index out of bounds overflow division by zero incorrect pointer alignment etc 2 in the root source file define panic as recoverpanic or override the default panic handler and call recover panicked  pub const panic  recoverpanic  3 excluding windows linking to c standard library is required example  returns errorpanic because function division panics with runtime error division by zero  fn divisionnum u32 den u32 u32  return num  den  try recovercalldivision 1 0  testing  for recover to work for testing you need a custom test runner with a panic handler  pub const panic  importrecoverpanic  to test that foo0 panics  test foo0 panics  const err  recovercallfoo 0 stdtestingexpecterrorerrorpanic err   proper usage   recover is useful for testing panic and undefined behavior runtime safety checks  it is not recommended to use recover as a general exception mechanism ","ominitay/zigvale":"a zig implementation of the stivale2 boot protocol  zigvale zigvale is a zig implementation of the stivale2 boot protocol to be used both in kernels and bootloaders the specification along with c header files may be found herehttpsgithubcomstivalestivale  example visit zigvalebareboneshttpsgithubcomominitayzigvalebarebones for a barebones kernel demonstrating how to use zigvale  add to your project zigvale is available on aquilahttpsaquilared1ominitayzigvale zpmhttpszigpmpackagezigvale and astrolabehttpsastrolabepmpackageominitayzigvale073  gyro gyro add ominitayzigvale  zigmod  aquila zigmod aq add 1ominitayzigvale  zpm zigmod zpm add zigvale  zkg zkg add zigvale  git  submodule git submodule add httpsgithubcomominitayzigvale zigvale  clone git clone httpsgithubcomominitayzigvale  documentation to generate documentation run zig build docs zigs documentation generator is experimental and incomplete when documentation generation has improved somewhat i will host the documentation in the meantime you may both read the comments made manually and read the documentation in the stivale repositoryhttpsgithubcomstivalestivale ","kassane/winpthreads-zigbuild":"the winpthreads library for zig toolchain the winpthreads library for zig  buildhttpsgithubcomkassanewinpthreadszigbuildactionsworkflowsbuildymlbadgesvghttpsgithubcomkassanewinpthreadszigbuildactionsworkflowsbuildyml based on httpsgithubcomziglangzigissues10989 solved httpsgithubcomziglangzigpull22156 zig v0140 zig v06  v0130 toolchainmingw dont includes winpthreads this library provides posix threading apis for mingww64 for maximum compatibility winpthreads headers expose apis without the dllimport attribute by default if your program is linked against the dll you may define the winpthreadsusedllimport macro to add the dllimport attribute to all apis which makes function calls to them a bit more efficient how to use  requires zig v0120 or v0130  make a project bash mkdir yourprojectfolder cd yourprojectfolder  generate both exe and lib template w buildzig  buildzigzon zig init  get latest version committag or branch zig fetch githttpsgithubcomkassanewinpthreadszigbuildmain   add on current project bash  w buildzig  buildzigzon cd yourprojectfolder  get latest version zig fetch githttpsgithubcomkassanewinpthreadszigbuildmain  or committag  warn main branch changes commit hashes ","liyu1981/zcmd.zig":"zcmd is a single file lib to replace zig's std.childprocess.run with the ability of running pipeline like bash..  zcmdzig zcmd is a single file lib zcmdzig to replace zigs stdchildprocessrun it has almost identical api like stdchildprocessrun but with the ability of running pipeline like bash example like execution of single command replacement of zigs stdchildprocessrun zig const result  try zcmdrun allocator  allocator commands  const const u8  uname a     the differences to stdchildprocessrun is it will take commands instead of single command it can run a bash like pipeline like follows to recursively find and list the latest modified files in a directory with subdirectories and times zig const result  try zcmdrun allocator  allocator commands  const const u8  find  type f exec stat f m n     sort nr   head 1     it can also accept an input from outside as stdin to command or command pipeline like follows zig const f  try stdfscwdopenfiletestsbiginputtxt  defer fclose const content  try freadtoendallocallocator maxoutput defer allocatorfreecontent const result  try zcmdrun allocator  allocator commands  const const u8 cat  wc lw   stdininput  content   when there is something failed inside pipeline we will report back stdout and stderr just like bash like below example zig const result  try zcmdrun allocator  allocator commands  const const u8  find nonexist   wc lw    defer resultdeinit try testingexpectequalslices u8 resultstdout  0 0n  try testingexpectequalslices u8 resultstderr find nonexist no such file or directoryn   please check examplezcmdapphttpsgithubcomliyu1981zcmdzigtreemainexamplezcmdapp for an example on how to use zcmdzig  use zcmdzig in buildzig originally zcmdzig is functions i wrote in buildzig to auto generating files with commands so it is important that can use this in buildzig so zcmdzig exposed itself for buildzig too to use that we will need to normally introduce zcmdzig to buildzigzon see usage below then in your buildzig do following to use it zig  when import in buildzig the zcmd is exposed in nested const zcmd const zcmd  importzcmdzcmd  then next can use zcmdrun as above  please check examplezcmdbuildapphttpsgithubcomliyu1981zcmdzigtreemainexamplezcmdbuildapp for detail version how to use in this way  usage  through zig package manager use following bash in your project folder with buildzigzon  zig fetch save httpsgithubcomliyu1981zcmdzigarchiverefstagsv022targz  you can change the version v010 to other version if there are in releasehttpsgithubcomliyu1981zcmdzigreleases page  or simply just copy zcmdzig file to your project it is a single file lib with no dependencies  zig docs zig docs is hosted in github pages at httpsliyu1981githubiozcmdzighttpsliyu1981githubiozcmdzig please go there to find what apis zcmdzig provides  coverage zcmdzig is rigorously tested run unit tests at repo checkout root folder with zig test srczcmdzig for coverage test as kcov is working in a way of debug every line and record it can not work with zcmd tests zcmd tests will fork many sub processes and if one of them be stopped the whole pipeline hangs i am still in searching of whats the best method to cover ","karlseguin/otp.zig":"an totp library for zig 404 not found","paoda/bit-string":"this repository has no description.  bit string a library to check and extract values from integers based on a bit string primarily intended for my emulator instruction decoding but maybe someone else can find a use for it  example zig const std  importstd test doc test  const value u8  0b10001011 try stdtestingexpectequaltrue match10001011 value try stdtestingexpectequalfalse match11111011 value try stdtestingexpectequaltrue match11011 value  const ret  extract1000aaaa value try stdtestingexpectequalasu4 0b1011 reta   const ret  extract1aaa1aaa value try stdtestingexpectequalasu6 0b000011 reta   const ret  extract1abcd value try stdtestingexpectequalasu3 0b1 reta try stdtestingexpectequalasu3 0b0 retb try stdtestingexpectequalasu3 0b1 retc try stdtestingexpectequalasu3 0b1 retd     syntax  token  meaning  description        0  clear bit  in the equivalent position the values bit must be cleared  1  set bit  in the equivalent position the values bit must be set  az  variable  given the 4bit bit string 1aa0 the value 0b1010 would produce the variable a with the value 0b01    ignored  in the equivalent position the values bit does not matter    ignored  underscores are completely ignored during parsing use to make bit strings easier to read eg 11111111  notes  this library does the majority of its work at comptime due to this you cannot create strings to match against at runtime  variables do not have to be sequential this means the 5bit bit string 1aa0a with the value 0b10101 will produce the variable a with the value 0b011 ","jedisct1/zig-morus":"morus-1280-128 implementation in zig.  morus cipher for zig this is a zig implementation of morushttpscompetitionscryptoround3morusv2pdf morus1280128 morus is a fast authenticated cipher for platforms without hardware aes acceleration it performs especially well on webassembly compared to alternatives its performance is comparable to aesocb without using aes instructions benchmark results on x8664 macbook pro 24 ghz core i9 single core text morus 5890 mibs aes128ocb 5824 mibs  benchmark results for webassembly wavm text aes128gcm 176 mibs aes128ocb 300 mibs xchacha8poly1305 319 mibs aegis128l 807 mibs rocca 854 mibs morus 3505 mibs  morus is the fastest cipher on raspberry pi 4 and possibly other arm devices without crypto extensions text aes128gcm 41 mibs aes128ocb 81 mibs xchacha8poly1305 159 mibs aegis128l 168 mibs rocca 221 mibs morus 713 mibs  on platforms with aes acceleration aegishttpsjedisct1githubiodraftaegisaeaddraftirtfcfrgaegisaeadhtmlavailable in the standard library as stdcryptoaeadaegisaegis128l and roccahttpsgithubcomjedisct1zigrocca have higher performance benchmark on rocket lake xeon e2386g text aes128ocb 10173 mibs aes256ocb 7792 mibs morus 11069 mibs rocca 16274 mibs aegis128l 21206 mibs 170 gbs  warning morus doesnt provide 128bit confidentiality even though the best know attackshttpseprintiacrorg2019172pdf are impractical ","lawrence-laz/jaysan":"a fast json serializer h1 aligncenter img srchttpsuploadwikimediaorgwikipediacommonsthumbcc9jsonvectorlogosvg160pxjsonvectorlogosvgpng width64br jay br h1 jaysan is a fast json library written in zig currently supports serialization only zig var gpa  stdheapgeneralpurposeallocator const foo  struct  foo i32 bar const u8  const string  try jsonstringifyalloc gpaallocator foo foo  123 bar  hello world    foo123barhello world  md benchmark 1 zigstdjson time mean   1419 ms  11 ms user 1404 ms system 10 ms range min  max 1401 ms  1441 ms 20 runs benchmark 2 zigjaysan time mean   468 ms  13 ms user 462 ms system 04 ms range min  max 431 ms  492 ms 61 runs benchmark 3 rustserde time mean   469 ms  09 ms user 458 ms system 09 ms range min  max 459 ms  509 ms 62 runs summary zigjaysan 100  003 times faster than rustserde 303  009 times faster than zigstdjson  ","ikskuh/zig-uri":"a small uri parser that parses uris after rfc3986  zig uri parser a small uri parser that parses uris after rfc3986httpstoolsietforghtmlrfc3986  notice this library is deprecated  this library is now part of zig std library available as stduri since 87b2234httpsgithubcomziglangzigcommit87b223428a8953b6af9bea61ff4cc905821c0557   usage example zig var link  try uriparsehttpsgithubcommasterq32ziguri  linkscheme  https  linkhost  githubcom  linkpath  masterq32ziguri  ","nektro/zig-zorm":"an orm-ish library for zig.  zorm the orm library for zig wip  example usage srcmainzigsrcmainzig  built with  zighttpsgithubcomziglangzig master  zigmodhttpsgithubcomnektrozigmod package manager  httpsgithubcomvrischmannzigsqlite  add me   zigmod aq add 1nektrozorm   license agpl30 ","knadh/zig-releaser":"a simple hack to use goreleaser to build, release, and publish zig projects.  goreleaser v2 official support  see httpsgoreleasercomquickstart  zigreleaser old goreleaser v1 zigreleaser is a hack that allows zig programs to be built packaged and released with goreleaserhttpsgoreleasercom a tool for publishing go programs here is an examplehttpsgithubcomknadhcsv2jsonreleases for a zig program published to github with goreleaser the changelog and artefacts are all automatically generated by goreleaser this hack has only been tested with github but should work with other release targets goreleaser supports  how to use  install goreleaserhttpsgoreleasercominstall  setup the github tokenhttpsgithubcomsettingstokensnew with repo perms  copy goreleaser and goreleaseryml from this repo to the root of the zig project  edit goreleaseryml for the project generally the binary goos files fields  edit buildsh script to tweak the zig build flags once the project is ready for release add a semver tag git tag a v010 m v010  dry run sh goreleaser snapshot skippublish clean  the releases will appear in the dist directory  publish sh goreleaser snapshot skippublish clean  ","inspectorboat/localasm":"local assembly viewer for zig  localasm we have godbolt at home  a local assembly output viewer integrated with the zig build system  installation and usage localasm currently only supports 0140dev 1 run zig fetch to add the localasm package to your buildzigzon manifest sh zig fetch save githttpsgithubcominspectorboatlocalasm  2 optional add a special declaration to the root file of the module you would like to analyze zig pub const functionstoanalyze   square fib   if this declaration is not present localasm will instead emit assembly for all functions in the root source file 3 use localasm to add build steps in your buildzig script zig pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const module  bcreatemodule rootsourcefile  bpathsrcmainzig target  target optimize  optimize  localasmaddassemblyoutputb module  target  target   optional analyze multiple modules const othermodule  bcreatemodule rootsourcefile  bpathsrcrootzig target  target optimize  optimize  localasmaddassemblyoutputb othermodule   defaults to releasefast if left out optimize  releasesafe target  bgraphhost  enable a step to output raw assembly without cleaning  extremely noisy off by default enablerawasmstep  true  renames the step  defaults to rawasm useful if you want to analyze multiple modules hence multiple addassemblyoutput calls rawasmstepname  librawasm rawasmfilename  librawasms  enable a step to output clean assembly  on by default enablecleanasmstep  true cleanasmstepname  libasm cleanasmfilename  libasms  enable a step that sends cleaned assembly to llvmmca for analysis  on by default enablemcastep  true mcastepname  libmca mcafilename  libmcatxt    4 run zig build asm to get your assembly output sh cat zigoutasmasms mainsquare pushrbp movrbp rsp moveax ecx imuleax ecx poprbp ret  5 optional run zig build mca to feed the assembly output into llvmmca sh cat zigoutasmmcatxt iterations 100 instructions 2900 total cycles 3484 total uops 4800 dispatch width 6 uops per cycle 138 ipc 083 block rthroughput 80  any arguments passed to zig build mca will be forwarded to llvmmca for example use zig build mca  timeline to enable a timeline view of program execution this step requires llvmmca to be installed which can be acquired at releasesllvmorghttpsreleasesllvmorg  why not just use godbolt  due to zigs lazy analysis getting nonexport functions to get emitted is a pain  you have to use a hack like const foo const anyopaque  ptrcastfunction which gets irritating to type every time localasm does this for you automatically by wrapping the module you pass into addassemblyoutput and also filters out the dummy constants emitted  if any code is split into multiple files has library dependencies or is part of a larger project getting it into godbolt can difficult integrating with the zig build system solves this  running locally means you get to use your personal editor setup which i personally find to be a large improvement to godbolts rather cramped ui  known limitations  currently only x86 assembly cleanup is suppported compilerexplorer has a repositoryhttpsgithubcomcompilerexplorerasmparserblobmainsetupsh that already handles assembly parsing but it is written in c if anybody would feels inclined to port it to allyourcodebasehttpsgithubcomallyourcodebase please let me know and i will integrate it into this package","ringtailsoftware/zeptolibc":"some basic libc functions for working with c code in zig  zeptolibc a few of the most essential libc functions needed when working with c code in zig much of the code is taken from ziglibchttpsgithubcommarler8997ziglibc zeptolibc provides among others  malloc calloc realloc free  printf fprintf snprintf  strncmp strchr strncpy  abs fabs sin cos sqrt pow floor ceil  memset memmove zeptolibc is not intended to implement the full c library and does the bare minimum to support io operations just printf the aim is to allow simple porting of existing c code to freestandingbaremetal environments such as wasm and embedded systems all zeptolibc functions start with the prefix zepto eg zeptomalloc so as to not clash with any existing c functions the file zeptolibch provides defines for mapping malloc  zeptomalloc  how to use for a complete example see httpsgithubcomringtailsoftwarezeptolibcexample first we add the library as a dependency in our buildzigzon file zig fetch save githttpsgithubcomringtailsoftwarezeptolibcgit and we add it to buildzig file zig const zeptolibcdep  bdependencyzeptolibc  target  target optimize  optimize  exerootmoduleaddimportzeptolibc zeptolibcdepmodulezeptolibc exeaddincludepathzeptolibcdeppathsrc   usage add include zeptolibch to your c code c include zeptolibch void mygreetingvoid  printfhello worldn   setup zeptolibc from zig and call the c code zeptolibcinit may be passed null for both write function and allocator a null allocator will cause malloc to always return null a null write function will silently drop written data zig const std  importstd const zeptolibc  importzeptolibc const c  cimport cincludegreetingc  fn writefndataconst u8 void    stdiogetstdoutwriterwritedata catch 0  pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator  init zepto with a memory allocator and a write function used for stdout and stderr zeptolibcinitallocator writefn cmygreeting   ","tensorush/zig-sieve":"zig implementation of sieve cache eviction algorithm.  zigsieve  zig implementation of sieve cache eviction algorithmhttpscachemongithubiosievewebsite  usage  add sieve dependency to buildzigzon sh zig fetch save githttpsgithubcomtensorushzigsieve   use sieve dependency in buildzig zig const sievedep  bdependencysieve  target  target optimize  optimize  const sievemod  sievedepmodulesieve compilerootmoduleaddimportsieve sievemod   benchmarks macbook m1 pro  sequence the time to cache and retrieve integer values sh  zig build bench  s sequence 23042us   composite the time to cache and retrieve composite values sh  zig build bench  c composite 33417us   composite normal the time to cache and retrieve normallydistributed composite values sh  zig build bench  n composite normal 99708us  ","kj4tmp/lizpack":"a messagepack library for zig  lizpack testshttpsgithubcomkj4tmplizpackactionsworkflowsmainymlbadgesvg a messagepack library for zig 1 zero allocations 1 zero encoding errors 1 simple control flow 1 all messages validated for you a simple api zig lizpackencode lizpackencodebounded lizpackencodealloc lizpackdecode lizpackdecodealloc  combines with your definition of your message structure zig const customercomplaint  struct  userid u64 status enumu8  received reviewed awaitingresponse finished     default formats  zig type  messagepack type        bool  bool   null  nil   u3u45 i6  integer   t  nil or t   enum  integer   nt  n length array of t   nxt  n1 length array of t ending in x   nu8  str   vectorn t  n length array of t   struct  map str field value   union enum  map single keyvalue pair   t  n length array of t   xt  n  1 length array of t ending in x   u8  str   xu8  str ending in x   t  t   str is the default messagepack type for u8 because it is the smallest for short slices unsupported types  zig type  reason        union untagged  decoding cannot determine active field and neither can you   error  i can add this if someone asks perhaps as str  note pointer types require allocation to decode  customizing formats you can customize how types are formatted in message pack  zig type  available encodings        enum  string int   u8nu8 vectorn u8  string int array   struct  map array   union enum  map single keyvalue pair active field    struct key  value   map array   n struct key  value   map array  see examplesexamplesexampleszig for how to do it  manual encoding  decoding if you require the finest level of control over how data is encoded and decoded the lizpackmanual api may suit your use case see examplesexamplesexampleszig for how to do it  examples zig const std  importstd const lizpack  importlizpack test  const customercomplaint  struct  userid u64 status enumu8  received reviewed awaitingresponse finished   var out 1000u8  undefined const expected customercomplaint   userid  2345 status  reviewed  const slice u8  try lizpackencodeexpected out  try stdtestingexpectequalexpected lizpackdecodetypeofexpected slice    more examples can be found in examplesexamples  installation to add lizpack to your project as a dependency run sh zig fetch save githttpsgithubcomkj4tmplizpack  then add the following to your buildzig zig  assuming you have an existing executable called exe const lizpack  bdependencylizpack  target  target optimize  optimize  exerootmoduleaddimportlizpack lizpackmodulelizpack  and import the library to begin using it zig const lizpack  importlizpack   zig version please refer to the minimumzigversion field of the buildzigzonbuildzigzon  todo    refactor use of hassentinel    refactor use of stdbuiltintypepointersentinel ","edqx/dishwasher":"a non-spec-compliant, but probably pretty fast, xml parser for zig.  dishwasher a fairly fast xml parser for zighttpsziglangorg note that this parser isnt strictly speccompliant however it will probably work with most wellformed xml documents  features  x pretty speedy  x reader apifriendly  x can populate structs  x can populate dynamic values  x compiletime parsing  x diagnostics for malformed documents    stringification coming soon  benchmarks here are the results from the given benchmarks on my pc i914900kf in different optimisation modes when parsing the opengl xml spec documenthttpsgithubcomkhronosgroupopenglregistryblobmainxmlglxml fully  mode  min  max  avg    debug  100ms  280ms  131ms   releasesafe  13ms  25ms  15ms   releasesmall  18ms  50ms  30ms   releasefast  7ms  27ms  13ms  all times are averaged over 100 runs rounded to the nearest 2sf  usage dishwasher has 4 apis 3 of which will be most useful  parsing apiparsingapi  for parsing an entire xml document at runtime  populate apipopulateapi  for mapping an xml document to a given struct  comptime parsing and populate apicomptimeparsingandpopulateapi  for parsing an entire xml document at compile time  scanner apiscannerapi  for iterating through xml symbols from a slice or reader  parsing api dishwasher lets you parse an xml document from either an entire slice or a reader into a treelike structure that represents all nodes all of the parse methods create an arena which is returned back to you so that you can deinitialise it when you no longer need the data  parse from a slice zig const ownedtree  dishwasherparsefromsliceallocator xmltext defer ownedtreedeinit  all strings and lists will be freed stddebugassertownedtreetreechildren0  elem   parse from a reader zig const ownedtree  dishwasherparsefromreaderallocator filereader defer ownedtreedeinit stddebugassertownedtreetreechildren0  elem   diagnostics you can also get basic information about invalid documents using the parse diagnostics struct and passing it into either parsefromslicediagnostics or parsefromreaderdiagnostics zig var diagnostics  dishwasherparsediagnosticsinitallocator defer diagnosticsdeinit const parsed  try dishwasherparsefromreaderdiagnosticsallocator filereader diagnostics defer parseddeinit for diagnosticsdefectsitems defect  stddebugprint from   defectkind defectrangestart defectrangeend     tree api the returned tree has the following signature zig const tree  struct  pub const node  unionenum  pub const elem  struct  pub const attr  struct  name const u8 value const u8  tagname const u8 attributes const attr tree tree  get an attribute given its name pub fn attributebynameself elem needle const u8 attr pub fn attrself elem needle const u8 attr  get the value of an attribute given its name note that if the  attribute has no value eg button disabled this will  still return null use attr or attributebyname in those  cases pub fn attributevaluebynameself elem needle const u8 const u8 pub fn attrvalueself elem needle const u8 const u8  pub const text  struct  contents const u8  return the text without any whitespace at the beginning or end pub fn trimmedself text const u8  pub const comment  struct  contents const u8  elem elem text text comment comment  children const node  find an element child by its tag name pub fn elementbytagnameself tree needle const u8 nodeelem pub fn elemself tree needle const u8 nodeelem  allocate a slice for all of the element children of a given tag name  to free the returned slice you can just call allocatorfreeelements  where elements is the returned slice pub fn elementsbytagnameallocself tree allocator stdmemallocator needle const u8 nodeelem pub fn elemsallocself tree allocator stdmemallocator needle const u8 nodeelem  get an element by the value of one of its attributes pub fn elementbyattributevalueself tree needlename const u8 needlevalue const u8 nodeelem pub fn elembyattrself tree needlename const u8 needlevalue const u8 nodeelem  return the inner text not including the elements of the tree note that the  result will be entirely unformatted pub fn concattextallocself tree allocator stdmemallocator const u8  return the inner text not including the elements of the tree but without  any whitespace at the start or end pub fn concattexttrimmedallocself tree allocator stdmemallocator const u8    populate api often its useful to be able to populate a given struct with values from an xml document that is reading the document into the struct dishwasher comes with a shaping api so you can dictate how the document should be read into the struct simply declare an xmlshape on the struct zig const job  struct  title const u8 startdate const u8 enddate const u8  const person  struct  pub const xmlshape   name  contenttrimmed age   attribute age  jobs   elements job  startdate   attribute startdate  enddate   attribute enddate  title  contenttrimmed fired  attributeexists   location   oneof  element house content   element work content  none  apprentice   maybe  element apprentice person   children   elements child person   name const u8 age const u8 jobs struct  startdate const u8 enddate const u8 title const u8 fired bool  location unionenum  house const u8 work const u8 none void  apprentice person children person  pub const register  struct  pub const xmlshape   people   elements person person   people person  const register  try diswasherpopulateregisterinitfromsliceallocator xml","chriscbr/zig-fractions":"simplify, convert, and do math with fractions in zig  zigfractions a zig library for performing math with fractions where each fraction is represented by a pair of integers compatible with zig 013 stable supported apis  convertion from floats or numeratordenominator pairs fromfloat init  convertion to floats and integers tot  formatting tostring tostringalloc format  negation absolute value negate abs  addition subtraction multiplication division add sub mul div  comparison eql eqlabs eqlzero order orderabs  simplifying simplify  installation first run the following  zig fetch save githttpsgithubcomchriscbrzigfractions  then add the following to buildzig zig const zigfractions  bdependencyzigfractions  exerootmoduleaddimportzigfractions zigfractionsmodulezigfractions  then you can use the library in your zig project zig const fraction  importzigfractionsfraction var f1  try fractionfromfloatasf32 25 const f2  try fractioninit1 5 false try f1mulf2  25  15  12 stddebugprintn f1  12   contributing pull requests are welcome ","cryptocode/stitch":"append resources to your executables img alignright height120 srchttpsuserimagesgithubusercontentcom34946442232327201294224c28502423bb2cb663ca88ccfc1png img srchttpsuserimagesgithubusercontentcom3494644223061320160de5adc63044f1884d9d36bb46fdc1fsvg width24 height24nbsp img srchttpsuserimagesgithubusercontentcom34946442230613198ca5c938a613b412f8d978ce8f19aeb1fsvg width24 height24nbsp img srchttpsuserimagesgithubusercontentcom34946442230613203858cb47128594e6e8ef961b03c36c085svg width24 height24 stitch is a tool and library for zig and c for adding and retrieving resources to and from executables why not just use embedfile  embed stitch serves a different purpose namely to let build systems and users of your software create selfcontained executables for example instead of requiring users to install an interpreter and execute mylisp fiblisp they can simply run fib or fibexe resoures can be anything such as scripts images text templates config files and other executables  some use cases  self extracting tools like an installer  create executables for scripts written in your interpreted programming language  include a sample config file which is extracted on first run the user can then edit this  an image in your own format thats able to display itself when executed  building the project to build with zig 013 use the zigversion tagrelease to build with zig 014 or master use the main branch last tested with zig version 0140dev3470711b0fef5 zig build will put a bin and lib directory in your output folder eg zigout  binstitch is a standalone tool for attaching resources to executables this can also be done programmatically using the library  liblibstitch is a library for reading attached resources from the current executable and for adding resources to executables like the standalone tool  using the tool this example adds two scripts to a lisp interpreter that supports through the stitch library reading embedded scripts bash stitch mylisp stdlisp fiblisp output fib fib 8 21  resources can be named explicitly bash stitch mylisp stdstdlisp fibonaccifiblisp output fib  if a name is not given the filename without path is used the stitch library supports finding resources by name or index the output flag is optional by default resources are added to the original executable first argument  stitching programmatically lets say you want your interpreted programming language to support producing binaries an easy way to do this is to create an interpreter executable that reads scripts attached to itself using stitch you can provide interpreter binaries for all the oses you wanna support or have the zig build file do this if your user is building the interpreter in the example below a lisp interpreter uses the stitch library to support creating selfcontained executables bash mylisp createexe sqlclientlisp output sqlclient  the resulting binary can now be executed  sqlclient  you can make the mylisp binary understand stitch attachments and then make a copy of it and stitch it with the scripts alternatively you can have separate interpreter binaries specifically for reading stitched scripts  using the library from c include the stitchh header and link to the library heres an example using the included c test program bash zig buildexe capitestctestc lzigoutlib lstitch icapiinclude ctest   binary layout the binary layout specification can be used by other tools that wants to parse files produced by stitch without using the stitch library specificationspecreadmemd ","ringtailsoftware/zoridor":"a quoridor game for terminal and web  zoridor a terminal and web version of the quoridorhttpsenwikipediaorgwikiquoridor board game wasm4httpswasm4org version on wasm4 branchhttpsgithubcomringtailsoftwarezoridortreewasm4 play on the web at httpsringtailsoftwaregithubiozoridor or play the wasm4 cart at httpsringtailsoftwaregithubiozoridorcarthtml docdemogif quoridor tutorials  httpswwwyoutubecomwatchv39t3l6hnfmg  httpswwwyoutubecomwatchvfddmegry9g  httpswwwyoutubecomwatchv6isruhn0hc0  running get zighttpsziglangorgdownload terminal version zig build run web version zig build dwebtrue  zig build serve  zigout p 8000 browse to httplocalhost8000  development autorebuild and reload on change watchexec r stopsignal sigkill e zightmlcssjszon w src zig build dwebtrue  zig build serve  zigout p 8000  terminal mode controls  you are player 1 your objective is to move your red pawn from the top of the board to the bottom of the board  player 2 starts at the bottom and is attempting to reach the top of the board  on each turn you can either move your pawn or add one fence piece to the board you have 10 to start with  moving a pawn  use the cursor keys to choose where to move to your pawn may only move one square on each turn and cannot move diagonally  the   mark where your pawn will move and is coloured green for a valid move and red for invalid  once you have selected a move press enter to move the pawn  adding a fence  press tab to switch from pawn to fence mode  use the cursor keys to choose where to add the fence  fences must not cross other fences or completely block either player from reaching their goal an invalid fence position will be shown in red  to rotate the fence press space  once you have positioned the fence press enter to place it  command line options help zig build run  h to watch machine vs machine matches forever zig build run  1 machine 2 machine f on exit a record of all moves is printed in both glendenning format and base64 the base64 format can be reloaded with zig build run  l jcnjujqxkry2sa  theory for a comprehensive examination of playing quoridor see lisa glendennings thesishttpswwwlabrifrpersorenaultworkingteachingprojetsfilesglendenningugradthesispdf ","mnemnion/runeset":"fast utf-8 codepoint sets for zig.  runeset sets of utf8 characters this library offers a compact data structure for generalized1 utf8 encoded codepoints the design is based on an implicit data structurehttpsenwikipediaorgwikiimplicitdatastructure2 which uses popcount and bit masking to check membership quickly with minimal branching and without having to decode the utf8 into another format for instance a codepoint this design is original in the sense that i invented it there may be prior art its remarkably difficult to search for utf8 character sets and find papers on set data structures so i cant say with high confidence that its truly novel in a sense its an obvious extension of the widespread practice of using a pair of u64 bitmasks to detect a set of ascii values what i can say is its effective the runeset struct is just a slice of u64 offering a few variations on set membership tests depending on how confident you are that the string its testing is valid utf8 and what you would like the test to do in the event that it isnt also supported are the fundamental set operations equality subset union intersection and difference all of the three combining forms produce a new runeset and must be given an allocator the runeset is immutable by design and as such doesnt support adding or removing codepoints to an alreadycreated set this would be possible to implement in principle but i dont happen to have a use for mutable adds and removes and therefore didnt write them you can create a runeset containing a single character and via union or difference either add or subtract that character if you would like this would create a new runeset with just that character added or removed the data structure is very fast the test suite with extensions contains 5mb of sample data with a 20mb extra collection and performs a multitude of operations on that data on the order of a dozen per string in releasefast mode the main suite of 5mb concludes in roughly a second on an m1 with the annex including fuzzing the creation function 224 times a complete run is over in six seconds give or take a few milli about 23rds of that is the fuzzing while i have yet to set up definitive benchmarks its clear that membership testing using runeset has a throughput over 100 mbsec on modern machines potentially substantially higher than this ill update this with better numbers when i get around to benchmarking it the focus has been on implementing the library and assuring good test coverage for real character sets it is also quite sparing of memory the cjk ideographs block of unicode consisting of 22992 codepoints is represented as a runeset in 338 words dense ranges such as that block can of course be tested by decoding the tested sequence into a codepoint and checking if its in that range but the combination of generality compactness and speed offered by the runeset is unique speaking of test coverage the library has 100 line coverage which you may verify by running zig build cov provided you have kcovhttpsgithubcomsimonkagstromkcov installed to run the extended suite including the fuzzer use zig build dtestmore test this will take an appreciable amount of time in the default debugmode builds as it will trigger the 244 assertions which gird the library  roadmap i intend to add some ability to write out the data structure whether as binary data zig source code or potentially both as an allocating data structure it isnt currently possible to generate a runeset at comptime and many applications of them will use character sets known in advance which may as well be built into the rodata of programs rather than constructed at runtime from strings i also plan to wrap all of the major functionality in ccompatible data structures and functions for use wherever the c abi is spoken other than that i consider the library fully implemented and featurecomplete odds are good however that more opensource code which makes use of the runeset as a foundation will be forthcoming 1 generalized here has a similar meaning to its use in wtf8httpssimonsapingithubiowtf8 except that runeset can also encode socalled overlong encodings as well as surrogates paired vs unpaired is a meaningless distinction for a codepoint set this falls out of the design its capable of encoding those sequences and i saw no reason to impose a performance burden in order to prevent it on the contrary should you want to represent the set of all overlong encodings perhaps to detect them and raise an error a runeset is a fine way to do it a set which does not contain overlong encodings or surrogates will never match against them so this seeming laxity comes with no disadvantages the five and sixbyte sequences from pike and thompsons original fss utf8 of 1993 are not supported as such what would constitute lead bytes for those sequences are rejected as invalid it would be possible to extend the runeset data structure to include these if there were ever any point in so doing 2 that the runeset is implicit doesnt make it the smallest possible encoding for every subset of utf8 for example the cjk unified ideographs block could be represented as two numbers and for some crafted inputs such as one in 64 characters throughout the unicode range a bitmask of one bit per character would be smaller as well it means that the structure is implicit to the data without indirection and that in full generality it isnt possible to represent utf8 sequences more compactly compared to the information theoretic lowerbound our overhead is limited to one word used to store one of the offsets as an important optimization ","games-by-mason/glslang-zig":"glslang ported to the zig build system.  glslang zig glslang ported to the zig build system contributions or bug reports are welcome if behavior differs from official build system  usage see shadercompilerhttpsgithubcomgamesbymasonshadercompiler for example usage  version see buildzigzonbuildzigzon for current version info  known differences  the official build process has a web target for the glslang artifact but this project does not contributions are welcome  the official build process symlinks glslang to glslangvalidator this build outputs glslangvalidator instead of glslang and does not provide a symlink because the library artifact is already named glslang  the tests are not built  compiler flags for exceptions rtti etc are not configurable see buildzigbuildzig for current values  how to change the glslang version the version of glslang is set in buildzigzonbuildzigzon glslang depends on spirvheaders and spirvtools when changing the glslang version you may need to update these dependencies to find out if this is necessary check your glslangs knowngoodjson glslang and spirvtools official build processes generate headers at compile time these are cached in the generated directory and can be regenerated via the official build processes ","eldesh/iter-zig":"a basic iterator library written in zig  iterzig iterzig is a lazy style generic iterator combinator library written in zig where the iterator means that the types enumrating all element of a set of values  support this library is developped with  debian x8664 104  zig 0100 and zigmod r80  zig 091 and zigmod r79  build sh zig build   unit test to performs unit tests of iterzig sh zig build test   example an example program using iterzig is provided the program can be performed with sh zig build example  source code of this program is srcmainzig  generate docs to generate documentations sh zig build doc  a html documents would be generated under the docs directory  iterator concept iterator is a generic concept that objects that enumrating a set of values especially in this library iterator is a value of a kind of types that satisfies follow constraints the constraints are  have self type  have item type  have next method takes self and returns item where the self type specifies the type itself equals to this the item type represents the type of elements returns from the iterator and the next method returns a next value of the container if the next value is not exists null must be returned the order of occurence of values are implementation defined however all values must occur exactly once before null is returned  features  meta function the type constraints required as an iteratoriteratorconcept is able to be checked by isiterator function statically zig comptime assertisiteratorsliceiteru32 comptime assertisiteratoru32  when you implement a new type to be an iterator it must ensure that isiterator returns true  container iterators iterzig provides several basic iterators that wraps standard containers  arrayiter  sliceiter  arraylistiter  singlylinkedlistiter  boundedarrayiter  tailqueueiter for example an iterator on a slice is able to be used as follows zig var arr  u32 1 2 3  var iter  sliceiteru32newarr0 try expectequalasu32 1 iternext try expectequalasu32 2 iternext try expectequalasu32 3 iternext try expectequalasu32 null iternext  further const variations are defined for each containers these iterators behaves as same to nonconst variations except for returns const pointers  arrayconstiter  sliceconstiter  arraylistconstiter  singlylinkedlistconstiter  boundedarrayconstiter  tailqueueconstiter zig var arr  u32 1 2 3  var iter  sliceconstiteru32newarr0 iternext  1  error cannot assign to constant  note that these iterators not own container values into it the user must release the memory holding the container if necessary  iterators to containers iterator to container converters are defined for some std containers  slicefromiter  arraylistfromiter  boundedarrayfromiter  singlylinkedlistfromiter these converters consume the input iterator and build a container the constructed container contains all the elements of the iterator and no other elements  range iterator range creates a range value such that it represents a range of numbers for example range0 10 means that the numbers from 0 to 10 which is mathematics is denoted as 010 in particular range instantiated with integral type to be iterator zig var rng  rangeasu32 0 3 try expectequalasu32 0 rngnext try expectequalasu32 1 rngnext try expectequalasu32 2 rngnext try expectequalasu32 null rngnext  similarly rangefrom creates an instance of rangefrom to represents an endless sequence of numbers eg rangefromasu32 0 creates an endless sequence of natural numbers 012 zig var rng  rangefromasu32 0 try expectequalasu32 0 rngnext try expectequalasu32 1 rngnext try expectequalasu32 2 rngnext   when range or rangefrom is instantiated with a type of floating numbers it would not be an iterator it is just a range of values zig comptime assertconceptisiteratorrangerangef64 comptime assertconceptisiteratorrangerangefromf64 comptime assert rangerangeasf64 20 30contains25 comptime assertrangerangeasf64 20 30contains15   iterator operators all iterators defined in this library provide iterator functions below  peekable  position  cycle  copied  cloned  nth  last  flatmap  flatten  partialcmp  cmp  le  ge  lt  gt  sum  product  eq  ne  max  maxby  maxbykey  min  minby  minbykey  reduce  skip  scan  stepby  fold  tryfold  tryforeach  foreach  takewhile  skipwhile  map  mapwhile  filter  filtermap  chain  enumerate  all  any  take  count  find  findmap  inspect  fuse  zip these functions are almost same to functions on iterator trait of rusthttpsdocrustlangorgstditertraititeratorhtml except for experimental api  adaptor style iterator some functions above return an iterator from the iterator itself for that case the functions are implemented in adaptor style for example the map function returns a new iterator object map rather than apply a function to each elements from the iterator zig var arr  u32 1 2 3  var iter  sliceiteru32newarr0 fn incrxu32 u32  return x1   calculations have not yet been performed var map mapsliceiteru32 fn u32 u32  itermapincr try expectequalasu32 2 mapnext  incr is performed try expectequalasu32 3 mapnext  incr is performed try expectequalasu32 4 mapnext  incr is performed try expectequalasu32 null mapnext   implementing iterator iterzig allows library users to implement a new iterator type by their self further it is easy to implement all functions showed in iterator operatorsiteratoroperators to your new iterator type using deriveiterator for example lets make an iterator counter which counts from 1 to 5 zig const counter  struct  pub const self  this pub const item  u32 count u32 pub fn new self  return  count  0   pub fn nextself self item  selfcount  1 if selfcount  6 return selfcount return null    now we can use it as an iterator zig comptime assertisiteratorcounter var counter  counternew try expectequalasu32 1 counternext try expectequalasu32 2 counternext try expectequalasu32 3 counternext try expectequalasu32 4 counternext try expectequalasu32 5 counternext try expectequalasu32 null count","ratakor/axe":"a logging library  axe  a fully customizable dropin replacement for stdoptionslogfn with support for multiple file logging custom writer supported buffering json time custom format colors automatic tty detection windows support nocolor support clicolorforce support source location and thread safety multiple mutex interface available screenshotpng  usage add it to an existing project with this command sh zig fetch save githttpsgithubcomratakoraxe  then add the module your buildzig zig const axe  bdependencyaxe moduleaxe exerootmoduleaddimportaxe axe  check examplezigexampleexamplezig for how to use it api documentationhttpsratakorgithubioaxe   todo  add a way to combine multiple loggers into one  ","nektro/zig-mime":"this repository has no description.  zigmime ","jedisct1/zig-bounded-array":"boundedarray module for zig.  boundedarray for zig a boundedarray is a structure containing a fixedsize array as well as the length currently being used it can be used as a variablelength array that can be freely resized up to the size of the backing array if youre looking for a zig equivalent to rusts super useful arrayvec this is it it is useful to pass around small arrays whose exact size is only known at runtime but whose maximum size is known at comptime without requiring an allocator bounded arrays are easier and safer to use than maintaining buffers and active lengths separately or involving structures that include pointers they can also be safely copied like any value as they dont use any internal pointers zig var actualsize  32 var a  try boundedarrayu8 64initactualsize var slice  aslice  a slice of the 64byte array var aclone  a  creates a copy  the structure doesnt use any internal pointers   update archived the main point of that fork was to keep the length being a usize because returning a different type was a footgun adding lengths in particular could easily trigger an overflow however that change was eventually revertedhttpsgithubcomziglangzigcommit85747b266aac8a2ff7fea4a4b18f722133544ad7 so applications should just go back to using the type from the standard library ","octopus-foundation/uuid.zig":"uuid v4 implementation in pure zig. no allocations  uuid v4 rfc 4122 compliant uuid v4 implementation in zig  features  zero dependencies  generate random uuids v4  parse from stringbytes  format to stringbytes  no allocations  supports cryptographic rng  tested on zig 0140dev  install bash zig fetch save httpsgithubcomoctopusfoundationuuidzigarchiverefstags000targz  in your buildzig zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const uuid  bdependencyuuid  target  target optimize  optimize  const exe  baddexecutable name  example rootsourcefile  bpathsrcmainzig target  target optimize  optimize  exerootmoduleaddimportuuid uuidmoduleuuid binstallartifactexe    usage zig const uuid  importuuidv4  generate random uuid var prng  stdrandomdefaultprnginit0 const id  uuidrandomprngrandom  format as string var buf 36u8  undefined uuidtostringid buf  550e8400e29b41d4a716446655440000  parse from string const parsed  try uuidfromstring550e8400e29b41d4a716446655440000  convert tofrom bytes var bytes 16u8  undefined uuidtobytesid bytes const frombytes  try uuidfrombytesbytes  with crypto random const cryptoid  uuidrandomstdcryptorandom ","softprops/zig-termsize":"terminal size matters h1 aligncenter termsize h1 div aligncenter terminal size matters div  cihttpsgithubcomsoftpropszigtermsizeactionsworkflowsciymlbadgesvghttpsgithubcomsoftpropszigtermsizeactionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropszigtermsize releasehttpsimgshieldsiogithubvreleasesoftpropszigtermsize zig supporthttpsimgshieldsiobadgezig01202f0130blacklogozig   features termsize is a zig library providing a multiplatform interface for resolving your terminals current size in rows and columns on most unix systems this is similar invoking the stty1 program requesting the terminal size  examples zig const std  importstd const termsize  importtermsize pub fn main void  stddebugprint any termsizetermsizestdiogetstdout      installing create a new exec project with zig initexe copy the echo handler example above into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save githttpsgithubcomsoftpropszigtermsizev010  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  termsize      uri to download  url  httpsgithubcomsoftpropszigtermsizearchiverefstagsv010targz    hash verification  hash  currenthash       the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigtermsizearchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigtermsizearchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption    dereference termsize dep from buildzigzon  const termsize  bdependencytermsize   target  target  optimize  optimize  moduletermsize var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize     add the termsize module to executable  exerootmoduleaddimporttermsize termsize binstallartifactexe     for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024 ","softprops/zig-retry":"♻️ retry faillible zig functions h1 aligncenter  zig retry h1 div aligncenter a retry library for fault tolerant zig applications div  mainhttpsgithubcomsoftpropszigretryactionsworkflowsciymlbadgesvghttpsgithubcomsoftpropszigretryactionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropszigretry releasehttpsimgshieldsiogithubvreleasesoftpropszigretry zig supporthttpsimgshieldsiobadgezig0130blacklogozighttpsziglangorgdocumentation0130 a goal of any operation should be a successful outcome this package gives operations a better chance at achieving that   installing create a new exec project with zig init copy an example from the examples directory into your into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save httpsgithubcomsoftpropszigretryarchiverefstagsv010targz  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  jwt      uri to download  url  httpsgithubcomsoftpropszigretryarchiverefstagsv010targz    hash verification  hash         the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigretryarchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigretryarchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference dep from buildzigzon  const retry  bdependencyretry   target  target  optimize  optimize  moduleretry var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the module to executable  exerootmodeaddimportretry retry binstallartifactexe    examples see examples directory   for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024 ","jnordwick/zig-string":"zig string library that includes small string optimization on the stack 404 not found","liyu1981/jstring.zig":"a reusable string lib for myself with all familiar methods methods can find in javascript string  jstringzig  target create a reusable string lib for myself with all familiar methods methods can find in javascript string  reason 1 string is important we all know so a good string lib will be very useful 2 javascript string is in my opinion the most battle tested string library out there strike a good balance between features and complexity the javascript string specs and methods this file use as reference can be found at httpsdevelopermozillaorgenusdocswebjavascriptreferenceglobalobjectsstring all methods except those marked as deprecated such as anchor big blink etc are implemented in zig way  integration with pcre2 regex one highlight of jstringzig is that it integrates with pcre2httpswwwpcreorg to provide match matchall and more just like the familar feeling of javascript string here are some examples of how regex can be used zig var str1  try jstringunmanagednewfromslicearenaallocator hellohelloworld var results  try str1splitbyregexarenaallocator l 0 0 try testingexpectequalresultslen 1 try testingexpectresults0eqlslicehellohelloworld results  try str1splitbyregexarenaallocator l 0 1 try testingexpectequalresultslen 4 try testingexpectresults0eqlslicehe try testingexpectresults1eqlsliceohe try testingexpectresults2eqlsliceowor try testingexpectresults3eqlsliced   usage bash zig fetch save httpsgithubcomliyu1981jstringzigarchiverefstags011targz  check example folder for a sample project zig const std  importstd const jstring  importjstring pub fn main u8  var yourname  brk  var jstr  try jstringjstringnewfromslicestdheappageallocator name is zig defer jstrdeinit const m  try jstrmatchname is name 0 true 0 0 if mmatchsucceed  const r  mgetgroupresultbynamename break brk try jstrslice asisize intcastrstart asisize intcastrstart  rlen   unreachable  defer yournamedeinit try stdiogetstdoutwriterprintnhello sn yourname return 0   in order to run this example from the git clone repo you will need bash cd jstirngrepoexamples zig fetch save   to update your local zig cache about jstring zig build run   buildzig when use jstringzig in your project as it integrates with pcre2 will need to link your project to libpcre8 jstringzig provide a build time function to easy this process zig  in your buildzig const jstringbuild  importjstring  const jstringdep  bdependencyjstring  exeaddmodulejstring jstringdepmodulejstring jstringbuildlinkpcreexe jstringdep  again check example folder for the usage  performance jstringzig is built with performance in mind though benchmark is still in developing but the initial result of allocatefree 1m random size of strings shows a 70 advantage comparing to c20s stdstring bash benchmark  zigoutbinbenchmark zig createrelease  ooooo  avg 16464000ns  min 14400000ns  max 20975000ns  cpp createrelease  ooooo  avg 56735400ns  min 56137000ns  max 57090000ns   jstringzig is built with doptimizereleasefast and cpp is built with stdc20 o2 check current benchmark method herehttpsgithubcomliyu1981jstringzigblobmaintoolsbenchmarkmainzig  docs check the auto generated zig docs herehttpsliyu1981githubiojstringzig  tests jstring is rigorously tested bash scriptpcretestsh srcjstringzig  to run all tests or check kcov report herehttpsliyu1981githubiojstringzigcovindexhtml the current level is 100  license mit license  ","flyfish30/zig-pico-cmake":"a pico_sdk zig package that build zig projects by use the raspberry pi pico sdk 404 not found","simonlschlee/zig15game":"a 15 puzzle game implemented with raylib.  zig15game a zighttpsziglangorgdownload 15 puzzle game based on 15 puzzle gamehttpsziggitdevt15puzzlegame4350 by chris boesch changed from a consoleterminal implementation to a raylibhttpswwwraylibcom implementation added simple raylib gui and sound effects if you are a vim user or want to train vim keys play with hjkl otherwise use wasd or arrow keys  play game screenshotmediascreenshot000pnghttpssimonlschleegithubiozig15game httpssimonlschleegithubiozig15game  discussion ziggit topic for discussion httpsziggitdevtraylib15game5233 if you have ideas for improvements you can use ziggit or open an issue  install bash git clone httpsgithubcomsimonlschleezig15gamegit cd zig15game zig build run  tested with zig version 0130  other raylib projects zigraylibhttpsgithubcomsimonlschleezigraylib  license public domain or mit ","hendriknielaender/zlog":"🪵 structured logging library for zig  warning  still work in progress  zlog  highperformance logging in zig mit licensehttpsimgshieldsiobadgelicensemitbluesvghttpsgithubcomhendriknielaenderzlogblobheadlicense github code size in byteshttpsimgshieldsiogithublanguagescodesizehendriknielaenderzlog prs welcomehttpsimgshieldsiobadgeprswelcomebrightgreensvghttpsgithubcomhendriknielaenderzlogblobheadcontributingmd img srclogopng altzlog logo alignright width20 zlog is a highperformance extensible logging library for zig designed to offer both simplicity and power in logging for systemlevel applications inspired by the best features of modern loggers and tailored for the zig ecosystem zlog brings structured efficient and flexible logging to your development toolkit  key features  high performance minimizes overhead ensuring logging doesnt slow down your application  asynchronous logging nonblocking logging to maintain application performance  structured logging supports json and other structured formats for clear queryable logs  customizable log levels tailor log levels to fit your applications needs  redaction capabilities securely redact sensitive information from your logs  extensible architecture plug in additional handlers for specialized logging eg file network  crossplatform compatibility consistent functionality across different platforms  intuitive api a simple clear api that aligns with zigs philosophy  getting started  installation 1 declare zlog as a dependency in buildzigzon diff  name  myproject version  100 paths   dependencies    zlog    url  httpsgithubcomhendriknielaenderzlogarchivecommittargz      2 add it to your buildzig diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption  const opts   target  target optimize  optimize   const zlogmodule  bdependencyzlog optsmodulezlog const exe  baddexecutable name  test rootsourcefile   path  srcmainzig  target  target optimize  optimize   exeaddmodulezlog zlogmodule exeinstall    3 get zlog package hash   zig build myprojectbuildzigzon620 error url field is missing corresponding hash field url  httpsgithubcomhendriknielaenderzlogarchivecommittargz  note expected hash  hash  4 update buildzigzon package hash value diff  name  myproject version  100 paths   dependencies   zlog   url  httpsgithubcomhendriknielaenderzlogarchivecommittargz  hash  hash      basic usage zig const zlog  importzlog  set up your logger var logger  zlogloggerinitallocator zloglevelinfo zlogoutputformatjson handler  here is a basic usage example of zlog zig  simple logging loggerlogthis is an info log message  asynchronous logging loggerasynclogthis is an error log message   structured logging zig  log with structured data loggerinfotest message kvkeyvalue kvkeyvalue key  key1 value  kvvalue string  value1   kvkeyvalue key  key2 value  kvvalue int  42   kvkeyvalue key  key3 value  kvvalue float  314      contributing the main purpose of this repository is to continue to evolve zlog making it faster and more efficient we are grateful to the community for contributing bugfixes and improvements read below to learn how you can take part in improving zbench  contributing guide read our contributing guidecontributingmd to learn about our development process how to propose bugfixes and improvements and how to build and test your changes to zlog  license zlog is mit licensedlicense ","hexops-graveyard/mach-system-sdk":"directx 12 headers for mingw/zig, cross-compile dx12/metal/etc with zig, etc.  machsystemsdk more libraries for crosscompilation with zig a hrefhttpshexopscomimg alignright althexops logo srchttpsrawgithubusercontentcomhexopsmediamasterreadmesvgimga  updated directx 12 headers for use with mingwzig  crosscompile directx apps targetting windows  cross compile metal apps targetting macosios intel or apple silicon  cross compile openglvulkan apps targetting linux not other oss sorry  what is this one thing i care about extremely with mach enginehttpsgithubcomhexopsmach is that youre able to cross compile for any os with nothing more than zig and git and while we can build most things from source glfw and even the directx shader compiler there are a few system headers  libraries where really we just need a copy of them machsystemsdk is how mach engine gets a copy of them via the zig build system although it was intended for mach specifically and i wouldnt be surprised if one day zig provides better options out of the box i realize others might benefit from this and so ive made it easy for anyone to use  what does it provide depending on the target os systemsdkzig will automatically git clone the relevant system sdk for you and include it  sdkwindowsx8664 7mb  updated directx 12 headers and prior versions for use with zigmingw when specifying a dtargetx8664windowsgnu target  directx libraries such as dxgilib and dxguidlib  sdklinuxx8664 40mb  x11xcbwayland librariesheaders as static as possible  opengl and vulkan headers  generated wayland protocol sources  sdkmacos113 198mb and sdkmacos120 149mb  a nearly full copy of the macos 113 and 120 xcode sdks with just a few particularly large frameworks excluded  pretty much every framework header etc that you need to develop macos and ios applications for intel and apple silicon  symlinks mostly eliminated for ease of use on windows the build script will git clone these sdks for you pin them to a specific git revision denoted in the systemsdkzig file so they are versioned and even prompt for xcode license agreement in the case of macos sdks into the appdata directory  usersslimsaglibraryapplication supporthexops   single file  oneliner to use get systemsdkzighttpsgithubcomhexopsmachblobmainglfwsystemsdkzig into your codebase however you prefer i suggest just copying it for now its a single file in your buildzig  const systemsdk  importsystemsdkzig  systemsdkincludeb step   where step is the exe  lib youre building  shared between zig projects the sdks are cloned into your appdatahexops directory to ensure they are shared across projects and you dont end up with multiple copies prior to use the build script will git reset to the target revision  customization if you dont like what is provided in the sdk repositories ive tried to make it as easy as possible to switch to your own sdk repos just pass options zig systemsdkincludeb step  githuborg  myorg linuxx8664revision  ab7fa8f3a05b06e0b06f4277b484e27004bfb20f windowsx8664revision  5acba990efd112ea0ced364f0428e6ef6e7a5541   and set the revisions to the git revisions of your forks of the sdk repositorieshttpsgithubcomhexopsqmachsdktypealllanguagesort  is this the right way to do this should i be using this to be clear i dont think this is the perfect way or 100 ideal way to handle this i am positive that the zig community will eventually land on better solutions here for example generating updated directx 12 headers for mingwzig requires patching microsofts idl files running them through the wine widl compiler and then some storing even a few binaries in git is not ideal even if we do clone with depth 1 but if you care about that developer experience as immensely as i do i hope youll see a bit of reason behind the madness use at your own peril  issues please file issuescomplaints in the main mach repositoryhttpsgithubcomhexopsmachissues ","mnemnion/ztap":"ztap: tap producer for zig build test  ztap the test anything protocolhttpstestanythingorg is a simple venerable and widelyused format for reporting the output of tests ztap is a zig library for running and reporting tests in the tap 14 format  compatibility ztap requires zig 014  use this can be used as the main unit testing step or as a custom step instructions will assume the latter but are easily adapted for the former case add to buildzigzon in the usual fashion sh zig fetch save httpsgithubcommnemnionztaparchiverefstagsv090targz  youll need a test runner  la srcztaprunnerzig zig const std  importstd const builtin  importbuiltin const ztap  importztap  this gives tapcompatible panic handling pub const panic  stddebugfullpanicztapztappanic pub fn main void  ztapztaptestbuiltin stdprocessexit0   do be sure to exit with 0 since the protocol interprets nonzero as a test failure add something of this nature to buildzig zig  ztap test runner step const ztapunittests  baddtest name  ztaprun rootsourcefile  bpathsrctestrootfilezig target  target optimize  optimize testrunner   path  bpathsrcztaprunnerzig mode  simple    to put the runner in zigout etc binstallartifactztapunittests const runztaptests  baddrunartifactztapunittests  to unilaterally run tests add this runztaptestshassideeffects  true if blazydependencyztap  target  target optimize  optimize  ztapdep  ztapunittestsrootmoduleaddimportztap ztapdepmoduleztap  const ztapstep  bstepztap run tests with ztap ztapstepdependonrunztaptestsstep  that should do the trick see the first link for an example of what to expect in the way of output  use notes ztap is simply an output format for zigs test system and no changes should be necessary to use it as such if errorskipzigtest is returned ztap will issue the  skip directive zig doesnt support a todo for tests not that it should necessarily but tap does so if errorztaptodo is returned ztap will issue  todo zigs test runner will treat the latter as any other error in the event that zig adds a todo error to the test system ztap will support that also the ztappanic function will add a comment to the tap output naming the test and issue the bail out directive which is proper for a fatal error it then calls the default panic handler which does the accustomed things using stderr  roadmap ztap does what it needs to my intention is to use it use by others is encouraged as well until im fairly convinced it does nothing weird or untoward or until six months have passed whichever is longer it will then be declared 10 and will not change further unless tap or zig require it to no changes to the interface at any of these points are likely  why though everything speaks tap ci speaks tap distros speak tap your editor speaks tap if you find yourself wanting to integrate with some or all of these things ztap will tap your zig also if you print to stdout ztap will not hang your unit tests that doesnt make it a good idea tap harnesses ignore what they dont grok but it cant help things and it can screw them up it does mean that tests will complete in the event that stdout is printed to ","opensvm/zindexer":"solana indexer for clickhouse in zig  zindexer multinetwork solana validator monitor licensehttpsimgshieldsiobadgelicensemitbluesvg languagehttpsimgshieldsiobadgelanguagezigorangesvg a highperformance memoryefficient solana validator monitoring system written in zig designed for highthroughput lowlatency block ingestion and realtime analytics across multiple solana virtual machine svm networks simultaneously  features   multinetwork support simultaneously index and monitor multiple solana networks mainnet devnet testnet   realtime data processing stream transactions blocks and account updates in realtime   comprehensive indexing track transactions instructions account changes token transfers and more   clickhouse integration store and analyze data using the highperformance clickhouse database   defi  nft tracking specialized indexing for defi protocols and nft marketplaces   security monitoring detect suspicious activities and potential security threats   high performance zerocopy parsing and efficient memory management for blazingfast indexing  architecture            solana network   solana network   solana network   mainnet   devnet   testnet                     websocket clients           parser engine           clickhouse storage       data model zindexer stores the following data types 1 blocks basic block information including slot blockhash leader etc 2 transactions transaction details including signatures status fees etc 3 instructions program instructions with program ids and parsed data 4 accounts account state changes and balance updates 5 tokens token transfers mints burns and balance changes 6 nfts nft mints transfers sales and metadata 7 defi protocolspecific events for various defi platforms 8 security suspicious activities and potential security threats  getting started  prerequisites  zig 0110 or later  clickhouse server local or remote  access to solana rpc nodes  installation 1 clone the repository bash git clone httpsgithubcomyourusernamezindexergit cd zindexer  2 build the project bash zig build dreleasefast  3 configure your rpc nodes  edit srcrpcnodesjson to add your rpc endpoints  edit srcwsnodesjson to add your websocket endpoints 4 set up clickhouse bash scriptsapplyschemash   running the indexer bash  set environment variables optional export clickhouseurlhttplocalhost8123 export clickhouseuserdefault export clickhousepass export clickhousedbsolana  run the indexer zigoutbinzindexer   configuration  rpc nodes configuration the rpcnodesjson file defines the http rpc endpoints for each network json  networks   name mainnet nodes  httpsapimainnetbetasolanacom httpssolanaapiprojectserumcom    name devnet nodes  httpsapidevnetsolanacom       websocket nodes configuration the wsnodesjson file defines the websocket endpoints for each network json  networks   name mainnet nodes  wssapimainnetbetasolanacom wsssolanaapiprojectserumcom    name devnet nodes  wssapidevnetsolanacom       database schema zindexer creates the following tables in clickhouse  blocks blocklevel information  transactions transaction details  instructions program instructions  accounts account state changes  programexecutions program execution statistics  accountactivity account activity metrics  various token nft and defispecific tables  use cases 1 validator monitoring  track validator performance across multiple networks  monitor block production and transaction processing  analyze network health and performance 2 defi analytics  track liquidity and volume across dexes  monitor lending protocols and yield farms  analyze token flows and price movements 3 nft market analysi","brookjeynes/progress":"a simple thread safe progress bar and spinner library  progress a simple thread safe progress bar and spinner library recordinghttpsgithubcomuserattachmentsassets227297c415a54c68a8bc49d7e1505a79  adding to your program 1 fetch the package zig fetch save githttpsgithubcombrookjeynesprogress 2 add to your buildzig zig const progress  bdependencyprogress moduleprogress exerootmoduleaddimportprogress progress   minimal example zig const std  importstd const progressbar  importprogressbar const progressspinner  importprogressspinner pub fn bar void  const stdout  stdiogetstdoutwriter var pb  progressbarinit10 stdoutany  while pbisfinished  pbadd1 try pbrender stdtimesleepstdtimensperms  150   pub fn spinner void  const stdout  stdiogetstdoutwriter var ps  progressspinnerinitstdoutany  symbols  progressspinnerpredefinedsymbolsdefault  var iterations usize  0 while psisfinished  iterations  1 try psrender if iterations  20 try psfinish stdtimesleepstdtimensperms  150    you can find more examples in the examples folder for more information see the source code or documentation zig build docs  contributing contributions issues and feature requests are always welcome this project is using the latest stable release of zig 0130 ","ikskuh/slf":"the simple linking format   simple linking format slf is a very simple object file format that can be used to link programs that dont require distinct sections for code and data  documentation  binary formatdocsmoduleformatmd  available tools  slfld is the standalone linker that can be used to link object files into a flat binary  slfobjdump is a dumper for slf files it can list all sections as well as dump the raw binary data  available apis srcslfzig is a package that exports several apis  slfview allows introspection of inmemory slf files  slflinker allows linking slf files together  slfbuilder allows the creation of new slf files  project status buildhttpsgithubcommasterq32slfactionsworkflowscrossbuildymlbadgesvghttpsgithubcommasterq32slfactionsworkflowscrossbuildyml disclaimer feature complete but still highly experimental  todo    add better diagnostics    add support for objectfile names    support exporting other file types  x flat binary    intel hex ","kassane/anotherbuildstep":"zig build add-on (add more toolchains [llvm-based] support)  anotherbuildstep aka abs  overview anotherbuildstep is a project designed to leverage the zig build system buildzig for building projects with various other toolchains this allows developers to use zig as a unified build system across different environments and toolsets  todo  x ldc2 support  x flangnew support  x rustc no cargo support    rustc cargo support need to figure out how to get the cargo build system to work  x swiftc6 support  required  zighttpsziglangorgdownload v0130 or master  supported  ldc2httpsldcdevelopersgithubio v1380 or latestci  flanghttpsflangllvmorg aka flangnew llvm1813 or master  rustchttpswwwrustlangorgtoolsinstall stable or nightly  swifthttpsswiftorgdownload v60 or mainsnapshots  usage make new project or add to existing project in project folder add this package as dependency on your buildzigzon bash  zig fetch saveabs githttpsgithubcomkassaneanotherbuildstep   add const abs  importabs in buildzig zig const std  importstd  get buildzig from pkg to extend your buildzig project only pub content module const abs  importabs  dlang const ldc2  absldc2  fortran const flang  absflang  rust const rustc  absrust  swift const swiftc  absswift  zigcc wrapper const zcc  abszcc pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const exedlang  try ldc2buildstepb  name  dexample target  target optimize  optimize sources   srcmaind  dflags   w   bdefaultstepdependonexedlangstep  or const exefortran  try flangbuildstepb  name  fortranexample target  target optimize  optimize sources   srcmainf90  usezigcc  true zccoptions  try zccbuildoptionsb target  bdefaultstepdependonexefortranstep  or const exerust  try rustcbuildstepb  name  rustexample target  target optimize  optimize source  bpathsrcmainrs rflags   c panicabort   bdefaultstepdependonexeruststep  or const exeswift  try swiftbuildstepb  name  swiftexample target  target optimize  optimize sources   examplesmainswift  usezigcc  true zccoptions  try zccbuildoptionsb target  bdefaultstepdependonexeswiftstep   ","javiorfo/zig-syslinfo":"linux sysinfo zig library  zigsyslinfo linux sysinfo zig library  caveats  c libs dependencies asound libnm glib20  required zig version 013  this library has been developed on and for linux following open source philosophy  usage zig const std  importstd const syslinfo  importsyslinfo pub fn main void   disk const disk  try syslinfodiskusage stddebugprintdisk free dn diskfree stddebugprintdisk blocks dn diskblocks stddebugprintdisk files dn diskfiles stddebugprintdisk files free dn diskfilesfree stddebugprintdisk perc used d2n try diskpercentageused  cpu const cpu  syslinfocpu const cpuusage  try cpuusage stddebugprintcpu user dn cpuusageuser stddebugprintcpu nice dn cpuusagenice stddebugprintcpu idle dn cpuusageidle stddebugprintcpu system dn cpuusagesystem stddebugprintcpu iowait dn cpuusageiowait const cpuinfo  try cpuinfo defer cpuinfodeinit stddebugprintcpu vendor id sn cpuinfovendorid stddebugprintcpu model dn cpuinfomodel stddebugprintcpu model name sn cpuinfomodelname stddebugprintcpu microcode sn cpuinfomicrocode stddebugprintcpu cores dn cpuinfocpucores stddebugprintcpu family dn cpuinfocpufamily stddebugprintcpu cache size sn cpuinfocachesize stddebugprintcpu perc used d2n try cpupercentageused  thermal const thermal  syslinfothermal const thermalinfo  try thermalinfo stddebugprintthermal zone0 dn thermalinfozone0 stddebugprintthermal zone1 dn try thermalgettemperaturefromzonethermalzoneone stddebugprintthermal zone2 dn try thermalgettemperaturefromzoneid2  memory const memory  try syslinfomemoryusage stddebugprintmem free dn memoryfree stddebugprintmem total dn memorytotal stddebugprintmem cached dn memorycached stddebugprintmem buffers dn memorybuffers stddebugprintmem available dn memoryavailable stddebugprintmem free swap dn memoryfreeswap stddebugprintmem total swap dn memorytotalswap stddebugprintmem perc used d2n try memorypercentageused  volume const vol  try syslinfovolumestate  receives a struct default values are default and master stddebugprintvol card name sn volcardname stddebugprintvol volume dn volvolume stddebugprintvol minimum dn volmin stddebugprintvol maximum dn volmax stddebugprintvol is muted bn volmuted  network const net  try syslinfonetworkstate stddebugprintnet ssid sn netssid stddebugprintnet ssid len dn netssidlen stddebugprintnet ipv4 sn netipv4 stddebugprintnet ipv4 len dn netipv4len stddebugprintnet mask dn netmask stddebugprintnet signal strength dn netsignalstrength stddebugprintnet connection speed dn netconnectionspeed stddebugprintnet connection type dn netconnectiontype    installation  in your buildzigzon zig dependencies   syslinfo   url  httpsgithubcomjaviorfozigsyslinfoarchiverefsheadsmastertargz  hash  hash suggested  the hash will be suggested by zig build     in your buildzig zig const dep  bdependencysyslinfo  target  target optimize  optimize  exerootmoduleaddimportsyslinfo depmodulesyslinfo exelinklibc exelinksystemlibraryasound exelinksystemlibrarylibnm exelinksystemlibraryglib20    donate  bitcoin qrhttpsrawgithubusercontentcomjaviorfoimgmastercryptobitcoinpng 1gqdj63rdpe4ejkujhi166fayigvhu5r7v  paypalhttpswwwpaypalcomdonatehostedbuttonidfa7sglsct2h8g ","alichraghi/jigar":"case convertion library for ziguanas  jigar logomedialogopng case convertion library for ziguanas supports lower case upper case macrocase traincase snakecase snakecamel snakepascal kebabcase kebabpascal camelcase and pascalcase  usage zig const jigar  importjigar pub fn main void  var myhello  hello world jigarsnakecasemyhello  results helloworld   ","softprops/zig-jwt":"a jwt library for zig h1 aligncenter zig jwt h1 div aligncenter a a hrefhttpsjwtiojwta library for zig div  mainhttpsgithubcomsoftpropszigjwtactionsworkflowsciymlbadgesvghttpsgithubcomsoftpropszigjwtactionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropszigjwt releasehttpsimgshieldsiogithubvreleasesoftpropszigjwt zig supporthttpsimgshieldsiobadgezig0130blacklogozighttpsziglangorgdocumentation0130   installing create a new exec project with zig init copy an example from the examples directory into your into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save httpsgithubcomsoftpropszigjwtarchiverefstagsv010targz  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  jwt      uri to download  url  httpsgithubcomsoftpropszigjwtarchiverefstagsv010targz    hash verification  hash         the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigjwtarchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigjwtarchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference dep from buildzigzon  const jwt  bdependencyjwt   target  target  optimize  optimize  modulejwt var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the module to executable  exerootmodeaddimportjwt jwt binstallartifactexe    examples see examples directory   for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024 ","allyourcodebase/wayland":"wayland ported to the zig build system  cihttpsgithubcomallyourcodebasewaylandactionsworkflowsciyamlbadgesvghttpsgithubcomallyourcodebasewaylandactions  wayland this is waylandhttpsgitlabfreedesktoporgwaylandwayland packaged for zighttpsziglangorg  installation first update your buildzigzon   initialize a zig build project if you havent already zig init zig fetch save githttpsgithubcomallyourcodebasewaylandgit12312  you can then import wayland in your buildzig with zig const wayland  bdependencywayland  target  target optimize  optimize  const waylandserver  waylandartifactwaylandserver const waylandclient  waylandartifactwaylandclient const waylandegl  waylandartifactwaylandegl const waylandcursor  waylandartifactwaylandcursor  makes sure we get waylandscanner for the host platform even when crosscompiling const waylandhost  bdependencywayland  target  bhost optimize  stdbuiltinoptimizemodedebug  const waylandscanner  waylandhostartifactwaylandscanner  ","ziglibs/zig-windows-console":"zig windows console stuff  zigwindowsconsole  tools for all your zig  windows console needs   usage  add this to your buildzig and check out exampleseventszig for a quick 5 minute primer   try it  bash  build it zig build demo  ","kassane/asio":"asio c++ library (uses zig build-system)  asio standalone for zig package manager mvp  original source httpsgithubcomchriskohlhoffasio  how to use  download zig v014 or higherhttpsziglangorgdownload  make on your project buildzig  buildzigzon file eg  buildzig zig const asiodep  bdependencyasio    as declared in buildzigzon target  target  the same as passing dtarget to the librarys buildzig script optimize  optimize  ditto for doptimize  const libasio  asiodepartifactasio   has the location of the dependency files asio  your executable config exelinklibrarylibasio   link libasio exeinstalllibraryheaderslibasio   get copy asio headers to zigoutinclude   buildzigzon bash  saveasio overwrite latest git commit no need manually update  zig fetch saveasio githttpsgithubcomkassaneasio  or add manually to your buildzigzon file zig  name  example version  010 paths   dependencies   asio   url  httpsgithubcomkassaneasioarchivetagcommithashtargz  or url  githttpshttpsgithubcomkassaneasiocommithash hash  multihash  sha2562     bash  zig project helper projectspecific options dtargetstring the cpu architecture os and abi to build for dcpustring target cpu features to add or subtract ddynamiclinkerstring path to interpreter on the target system doptimizeenum prioritize performance safety or binary size supported values debug releasesafe releasefast releasesmall dsharedbool build the shared library default false dsslbool build asio with openssl support default false dtestsbool build tests default false   more info about zigpkg  httpsgithubcomziglangzigpull14265  httpsgithubcomziglangzigissues14307 ","allyourcodebase/lz4":"lz4 ported to the zig build system cihttpsgithubcomallyourcodebaselz4actionsworkflowsciyamlbadgesvghttpsgithubcomallyourcodebaselz4actions  lz4 this is lz4httpsgithubcomlz4lz4 packaged for zighttpsziglangorg  installation first update your buildzigzon   initialize a zig build project if you havent already zig init zig fetch save githttpsgithubcomallyourcodebaselz4git11003  you can then import lz4 in your buildzig with zig const lz4dependency  bdependencylz4  target  target optimize  optimize  yourexelinklibrarylz4dependencyartifactlz4  ","allyourcodebase/aflplusplus":"zig build for afl++  aflplusplus cicishdciurl lclcshdlcurl  zig build for aflplusplushttpsgithubcomaflplusplusaflplusplus  arrowdown dependencies requires a build of llvm you can either get one from your favorite package manager or build it yourselfhttpsgithubcomziglangzigwikihowtobuildllvmlibclangandliblldfromsource  rocket usage sh git clone httpsgithubcomallyourcodebaseaflplusplusgit cd aflplusplus zig build   100 easy source fuzzing with afl for help fuzzing your executables see kristoffitzigaflkithttpsgithubcomkristoffitzigaflkit  markdown links  cishd httpsimgshieldsiogithubactionsworkflowstatusallyourcodebaseaflplusplusciyamlbranchmainstyleforthebadgelogogithublabelcilabelcolorblack ciurl httpsgithubcomallyourcodebaseaflplusplusblobmaingithubworkflowsciyaml lcshd httpsimgshieldsiogithublicenseallyourcodebaseaflplusplussvgstyleforthebadgelabelcolorblack lcurl httpsgithubcomallyourcodebaseaflplusplusblobmainlicense ","jedisct1/zig-alzette":"implementation of the alzette box and the crax block cipher in zig.  zigalzette implementation of the alzette box and crax block cipher in zig  references  alzette a 64bit arxboxhttpseprintiacrorg20191378pdf ","neurocyte/notcurses-zig":"zig bindings and packaging for notcurses  zig bindings and package for notcurses this package provides build scripts and basic wip bindings for building notcurses applications in zig see srcncinputtestzig for a basic example application should generally build with zig nightly ","jetzig-framework/jetkv":"key-value store designed for local development  jetkv jetkv is a keyvalue store written in zig intended for use in development and production web servers basic inmemory and ondisk backends are provided for local development and a valkeyhttpsvalkeyio backend is provided for production all backends are exposed by a unified interface jetkv can be used for  background job queuing  persistent data storage  cache jetkv is used by the jetzig web frameworkhttpsjetzigdev to provide a zerosetup inprocess keyvalue store for all of the above  checklist  whitecheckmark inmemory storage  whitecheckmark string value storage  whitecheckmark array value storage  whitecheckmark array popqueue implementation  whitecheckmark ondisk storage  whitecheckmark valkey backend  whitecheckmark key expiry valkey only at the moment  x shared memory  usage  valkey backend recommended for production zig var kv  try jetkv backend  valkey valkeybackendoptions   poolsize  8 buffersize  8192  initallocator   memory backend recommended for local development zig var kv  try jetkv backend  memory initallocator   file backend recommended for local development where persistent storage is required when using the file allocator jetkvinit receives an allocator in order to provide a consistent api but does not perform any allocations it is therefore possible to pass undefined instead of an allocator when using the file allocator the file passed as the path field is locked on startup zig var kv  try jetkv backend  file filebackendoptions    path to storage file jetkv stores all data in a single platformagnostic file path  pathtojetkvdb  set to true to clear the store on each launch truncate  false  set the size of the ondisk hash table each address is currently 4 bytes  use jetkvaddressspacesize to guarantee a valid size if address size changes in future addressspacesize  jetkvaddressspacesize4096  initallocator   keyvalue operations all operations are identical for file memory and valkey backends with the exception of putexpire which is not supported by the file backend operations are o1 complexity for memory and file backends see valkey commands referencehttpsvalkeyiocommands for valkey operation complexity read operations receive an allocator to allow separation of internal allocation and value reads eg you may want to use one allocator for the kv stores internal storage and a stack fallbackarena allocator for reading values zig  put some strings into the kv store try kvputfoo baz try kvputbar qux  append and prepend create a new array if one does not already exist try kvappendexamplearray quux try kvprependexamplearray corge if try kvgetallocator foo value   baz allocatorfreevalue  if try kvfetchremoveallocator bar value   qux allocatorfreevalue   remove a string from the kv store does not remove arrays try kvremovefoo if kvpopallocator examplearray value   quux allocatorfreevalue  if kvpopfirstallocator examplearray value   corge allocatorfreevalue    testing launch valkey console docker compose up  run tests console zig build test   implementation  valkey native zig adapter for valkeyhttpsvalkeyio implementing resp 3httpswwwmankiercom7valkeyprotocol benchmark console zig build doptimizereleasefast run   memory the memory backend uses a zig stdstringhashmap of const u8 for string storage and stddoublylinkedlistconst u8 for array storage  file the file backend implements a fixedsized hash table at the beginning of the file hash collisions are resolved as singlylinked lists arrays are implemented as doublylinked lists each index in the hash table references a location in the file which provides address information  value type  next linked item for collision resolution  next array item  previous array item  end array item  key length  initial key length  value length  initial value length  key  value values are inserted with a relative amount of overallocation to allow reuse of space when replacing values keys have a maximum length of 1024 bytes in order to allow key comparison to operate exclusively on the stack reference counting is used to allow truncating the file when the store becomes empty  license mitlicense ","neurocyte/flow-themes":"themes compiler for flow control, the text editor  flowthemes themes compiler for flowcontrol the text editor  requirements  zig 013  hjson installed in your path  build zig build this will download and compile all the themes and create a zig module in zigout that can be referenced as a dependency from another projects buildzigzon ","nektro/zig-leven":"measure the difference between two slices using the levenshtein distance algorithm  zigleven measure the difference between two slices using the levenshtein distance algorithm adapted from httpsgithubcomsindresorhusleven  built with  zig master  httpsgithubcomziglangzig  zigmod package manager  httpsgithubcomnektrozigmod  install  zigmod aq add 1nektroleven   usage pub fn levencomptime t type alloc stdmemallocator a const t b const t max usize usize  future todo unicode support for strings  license mit ","distreat/zig-csv":"a library for parsing, creating, and manipulating csv data.  zigcsv a library for parsing creating and manipulating csv data  features  avoiding memory leaks  flexible and simplistic api  example zig const std  importstd const csv  importzigcsv const allocator  stdheapallocator  parse csv data var table  csvtableinitallocator csvsettingsdefault defer tabledeinit try tableparse idanimalshorthand 0dogd 1catc 2pigp   print all animals const columnindexesanimal  try tablefindcolumnindexesbykeyallocator animal defer allocatorfreecolumnindexesanimal var animals  tablegetcolumnbyindexcolumnindexesanimal0 while animalsnext animal  stddebugprints animalvalue   replace a value const columnindexesid  try tablefindcolumnindexesbykeyallocator id defer allocatorfreecolumnindexesid const rowindexesid2  try tablefindrowindexesbyvalueallocator columnindexesid0 2 defer allocatorfreerowindexesid2 try tablereplacevaluerowindexesid20 columnindexesanimal0 porcupine  delete a column try tabledeletecolumnbyindexcolumnindexesid0  export back to csv const exported  try tableexportcsvallocator defer allocatorfreeexported  more examples can be found in srctestszig  docs the documentation is created in the directory docs when running zig build documentationhttpsdistreatgithubiozigcsv ","mattnite/zig-libssh2":"compile libssh2 in your build.zig  libssh2 build package cihttpsgithubcommattniteziglibssh2actionsworkflowsciymlbadgesvghttpsgithubcommattniteziglibssh2actionsworkflowsciyml  like this project if you like this project or other works of mine please consider donating to or sponsoring mehttpsgithubcomsponsorsmattnite on github hearthttpsgithubcomsponsorsmattnite  how to use this repo contains code for your buildzig that can statically compile libssh2  link to your application in order to statically link libssh2 into your application zig const libssh2  importpathtolibssh2zig pub fn buildb stdbuildbuilder void    const lib  libssh2createb target optimize const exe  baddexecutable name  myprogram rootsourcefile   path  srcmainzig   liblinkexe   ","mattnite/glob":"small library for globing file paths  glob small library for globing file paths ","karlseguin/localize.zig":"icu message parser and renderer 404 not found","games-by-mason/structopt":"argument parsing for zig.  structopt this is the argument parser i use in my engine and various supporting tools its a work in progress im adding features to it as i need them ","peterhellberg/art":"art is a zig module used to build webassembly binaries rendering to a html canvas.  art art art is a zighttpsziglangorg  module used to build webassemblyhttpswebassemblyorg binaries rendering to a html canvashttpsdevelopermozillaorgenusdocswebapicanvasapi  important  you might want to install the artinithttpsgithubcompeterhellbergartinit tool  and use that instead of manually creating the files needed to use this library  usage you can have zig build retrieve the art module if you specify it as a dependency  create a buildzigzon that looks something like this zig  name  artcanvas version  000 fingerprint  0x0000000000 paths   dependencies   art   url  httpsgithubcompeterhellbergartarchiverefstagsv009targz      note  if you leave out the hash then zig build will tell you that it is missing the hash and what it is  another way to get the hash is to use zig fetch this is probably how you should do it   download indexhtml and scriptjs from artinit console wget httpsrawgithubusercontentcompeterhellbergartinitrefsheadsmaincontentindexhtml wget httpsrawgithubusercontentcompeterhellbergartinitrefsheadsmaincontentscriptjs   then you can add the module in your buildzig like this zig const std  importstd const numberofpages  4 pub fn buildb stdbuild void  const exe  baddexecutable name  artcanvas rootsourcefile  bpathsrccanvaszig target  bresolvetargetquery cpuarch  wasm32 ostag  freestanding  optimize  releasesmall strip  true  exerootmoduleaddimportart bdependencyart moduleart exerootmoduleexportsymbolnames  const u8 start update draw fps width height offset  exeentry  disabled exeexportmemory  true exeinitialmemory  stdwasmpagesize  numberofpages exemaxmemory  stdwasmpagesize  numberofpages exestacksize  512 binstallartifactexe    in your srccanvaszig you should now be able to zig const art  importart var canvas artcanvas16 9   export fn start void  artloghello from zig  export fn updatepad u32 void    pad  autofix  export fn draw void  canvasclear 0x7c 0xaf 0x3c 0xff   export fn fps usize  return 60  export fn width usize  return canvaswidth  export fn height usize  return canvasheight  export fn offset u8  return canvasoffset   ","allyourcodebase/libmp3lame":"libmp3lame with the build system replaced by zig 404 not found","softprops/zig-iter":"iterators for zig h1 aligncenter zig iter h1 div aligncenter iterators for zig div  mainhttpsgithubcomsoftpropszigiteractionsworkflowsciymlbadgesvghttpsgithubcomsoftpropszigiteractionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropszigiter releasehttpsimgshieldsiogithubvreleasesoftpropszigiter zig supporthttpsimgshieldsiobadgezig0130blacklogozighttpsziglangorgdocumentation0130  whats next if you are coming to zig from any variety of other languages we welcome you you might be asking the questions like how can i transform this zig collection how can i filter out elements and other perfectly valid questions based on what you might be used to from where you are coming from the answer in zig is it depends but youll likely be using a for loop and allocating a copy of the collection you have on hand lets use a very simple example doubling the value of an array of elems that you may do something later with ill just print it out for simplicity but youll likely be doing something more useful zig const elems  i32 1 2 3    conjure an allocator for the list below var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator   allocate a new list to hold the data of the transformation dont forget to deallocate it var buf  try stdarraylisti32initcapacityallocator elemslen defer bufdeinit for elems elem  bufappendassumecapacityelem  2    capture a ref to the slice of data you want dont forget to deallocate it const doubled  try buftoownedslice defer allocatorfreedoubled   do something with it for doubled elem  stddebugprintd elem   the simple example above quickly becomes much more complicated as additional transformations and filtering is required if you are coming to zig from another language you are probably used to expressing this with something like elemsmap with this library you can almost have that too below is an equivalent program but sans required additional allocations and zigs required memory deallocation zig var elems  i32  1 2 3    create an interator and apply a transformation var doubled  iterfromelems thenmapi32 struct  fn funcn i32 i32  return n  2  func   do something with it while doublednext elem  stddebugprintd elem   i say almost because  zig does not support closures but it does support functions as arguments so we can emulate these to a certain degree with struct fn references  some changes to usingnamespacehttpsgithubcomsoftpropszigiterissues1 facilitate the need for an itermediatory method we use then to access and chain iterator methods if zig brings that back in a different form this librarys then will no longer been nessessary the following functions create iterators  fromzigtype  create an iterator for a native zig type were expanding the list of types supported  fromfnreturntype init func  create an iterator from a generator func  oncevalue  create an iterator that only repeats once  repeatvalue  create an iterator that repeats a given value indefinitely the following methods are available when calling then on iterator types  chainother  extends one iterator with another  cycle  repeats an iterator indefinitely  filterfunc  filters an iterator by testing a func predicate  foldreturntype init func  reduces an iterator down to a single value  mapreturntype func  transforms an iterator by applying func  skipn  skip the first n elems of an iterator  taken  take only the first n elems of an iterator  zipiter  create an iterator yielding a tuple of iterator values likely more to come note nothing is allocated behind the scenes if you do need to take the results and store the result in an allocatoed type simply do what you would do with any iterator feed it values of next zig var elems  i32  1 2 3  var doubled  iterfromelems thenmapi32 struct  fn funcn i32 i32  return n  2  func  now go ahead feed the result into a list   conjure an allocator for the list below var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator   allocate a new list to hold the data of the transformation dont forget to deallocate it var buf  try stdarraylisti32initcapacityallocator elemslen defer bufdeinit while doublednext elem  bufappendassumecapacityelem  2    capture a ref to the slice of data you want dont forget to deallocate it const copied  try buftoownedslice defer allocatorfreecopied   examples for more examples see the examples directory   installing create a new exec project with zig init copy an example from the examples directory into your into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save httpsgithubcomsoftpropszigiterarchiverefstagsv010targz  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  iter      uri to download  url  httpsgithubcomsoftpropszigiterarchiverefstagsv010targz    hash verification  hash         the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigiterarchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigiterarchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference dep from buildzigzon  const iter  bdependencyiter   target  target  optimize  optimize  moduleiter var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the module to executable  exerootmodeaddimportiter iter binstallartifactexe     for budding ziglings does this look interes","lukeharwood11/openai-proxz":"a zig openai api client library div aligncenter h1proxzh1 img srchttpsimgshieldsiobadgezig014023f7a41dlogoziglogocolor23f7a41d  img srchttpsimgshieldsiobadgezig0130whitelogoziglogocolorwhite  img srchttpsimgshieldsiobadgelicensemitblue  br  br  an openai api library for the zig programming language div   features   an easy to use interface similar to that of openaipython  builtin retry logic  environment variable config support for api keys org ids project ids and base urls  response streaming support  integration with the most popular openai endpoints with a generic requestrequeststream method for missing endpoints  installation to install the latest version of proxz run bash zig fetch save githttpsgithubcomlukeharwood11openaiproxz  to install a specific version run bash zig fetch save httpsgithubcomlukeharwood11openaiproxzarchiverefstagsversiontargz   note  to install the latest version compatible with zig v0130 use   bash  zig fetch save httpsgithubcomlukeharwood11openaiproxzarchiverefstagsv010targz   and add the following to your buildzig zig const proxz  bdependencyproxz  target  target optimize  optimize  exerootmoduleaddimportproxz proxzmoduleproxz   usage  documentation    proxz docs httpsproxzmleacademy   openai api docshttpsplatformopenaicomdocsapireference  client configuration zig const proxz  importproxz const openai  proxzopenai  zig  make sure you have an openaiapikey environment variable set  or pass in a apikey field to explicitly set var openai  try openaiinitallocator  defer openaideinit   chat completions  regular zig const chatmessage  proxzchatmessage var response  try openaichatcompletionscreate model  gpt4o messages  chatmessage  role  user content  hello world     this will free all the memory allocated for the response defer responsedeinit stdlogdebugs responsechoices0messagecontent   streamed response zig var stream  try openaichatcompletionscreatestream model  gpt4omini messages  chatmessage  role  user content  write me a poem about lizards make it a paragraph or two    defer streamdeinit stddebugprintn  while try streamnext val  stddebugprints valchoices0deltacontent  stddebugprintn    embeddings zig const inputs  const u8 hello foo bar  const response  try openaiembeddingscreate model  textembedding3small input  inputs   dont forget to free resources defer responsedeinit stdlogdebugmodel snnumber of embeddings dndimensions of embeddings d  responsemodel responsedatalen responsedata0embeddinglen    models  get model details zig var response  try openaimodelsretrievegpt4o defer responsedeinit stdlogdebugmodel is owned by s responseownedby   list all models zig var response  try openaimodelslist defer responsedeinit stdlogdebugthe first model you have available is s responsedata0id   configuring logging by default all logs are enabled for your entire application to configure your application and set the log level for proxz include the following in your mainzig zig pub const stdoptions  stdoptions loglevel  debug  this sets your app level log config logscopelevels  stdlogscopelevel  scope  proxz level  info  set to debug warn info or err     all logs in proxz use the scope proxz so if you dont want to see debuginfo logs of the requests being sent set level  err this will only display when an error occurs that proxz cant recover from  contributions contributions are welcome and encouraged submit an issue for any bugsfeature requests and open a pr if you tackled one of them  building docs bash zig build docs  ","travisstaloch/clarp":"a command line argument parsing library in zig  why was this project archived complexity bloat and long compile times  recommended alternatives  httpsgithubcomgamesbymasonstructopt  httpsgithubcomtravisstalochflagset  about derive command line parsers from union and struct types provides nested context aware usage text similar to the zig compiler works with existing data structures you may not control  features  field types  int bool enum float optional array slice  integer fields may be parsed as utf8 by setting clarpoptionsfieldsfieldnameutf8  nested unions and structs  help  usage  automatically printed on parsing errors  very customizable  nested and context aware showing only one level of help info at once  written to parseoptionserrwriter default stdionullwriter  accessible from any print method stddebugprinthelp parseresult  diagnostics which clearly point to parsing errors  easily dump parse results  from any print method stddebugprint parseresult  derive short names by setting clarpoptionsderiveshortnames and override them with fieldoptionshort  apply clarpoptions to types you dont control with parsewithoptions  rename long names with fieldoptionlong  long and short options can be parsed with any of these forms  long  short        foo value  f value   foovalue  fvalue   foovalue  fvalue   overview union types create alternative commands commands match field names exactly struct types create sequences of options options match field names with leading dashes such as textcolor for field textcolor named options can be parsed out of order unnamed positional parsing may be enabled by setting clarpoptionsfieldsfieldnamepositional tuple types create unnamed sequences and are parsed strictly by position bool fields create flags and may be specified as flag or truefalse when unnamed they are always optional and default to false slice fields require an allocator and consume input until an argument is found which starts with  or end of arguments clarpoptionsendmarker may also be used to mark the end of fields arguments this may be necessary with unnamed positional fields an allocator can be passed as parseoptionsallocator  zig version this package is developed with zig master branch there are also tagged releaseshttpsgithubcomtravisstalochclarptags for previous compiler versions  usage you can find many examples in the testssrctestszig  add clarp dependency  fetch console  0120  zig fetch save httpsgithubcomtravisstalochclarparchiverefstags0120targz  013  nightly  zig fetch save httpsgithubcomtravisstalochclarparchivecommit hashtargz  this will add the following zig  buildzigzon dependencies   clarp   url  httpsgithubcomtravisstalochclarparchivecommithashtargz hash       modify buildzig zig  buildzig pub fn buildb stdbuild void  const exe  baddexecutable const clarp  bdependencyclarp moduleclarp exerootmoduleaddimportclarp clarp    full example this program creates a parser and dumps the result to stderr it is available heresrctestdemozig and can be run with  zig build testdemo  args zig const std  importstd const clarp  importclarp pub fn main void  var arena  stdheaparenaallocatorinitstdheappageallocator defer arenadeinit const allocator  arenaallocator const argparser  clarpparserunionenum  cmd1 struct  foo const u8 pub const clarpoptions  clarpoptionsthis fields   foo   desc  foo description     cmd2 struct  enum  a b   a  pub const clarpoptions  clarpoptionsthis fields   cmd1   desc  cmd1 description short  c1  cmd2   desc  cmd2 description short  c2      const args  try stdprocessargsallocallocator const parsed  argparserparseargs  errwriter  stdiogetstderrwriterany  catch e switch e  errorhelpshown  return else  return e  stddebugprintn parsed  access parse result switch parsedresult  cmd1   cmd2       clarpoptionssrcclarpzigl29 when a struct or union contains a pub const clarpoptions declaration it changes parsing behavior nested structs and unions may declare their own clarpoptions  parseoptionssrcclarpzigl59 runtime parsing options the second argument to clarpparsertparse  parseroptionssrcclarpzigl66 comptime global parsing options the second argument to clarpparser  help flags by default if an arg is help help or h context aware usage is displayed you may change the help flags by passing an enum type for parseroptionshelptype console  zigoutbintestexe help usage testexe command commands cmd1 c1 cmd1 description cmd2 c2 cmd2 description general options help help h print command specific usage  notice how this message is derived from the unionenum passed to clarpparser above and that its clarpoptions declaration affects the output adding the c1 and c2 shorts and descriptions  command specific help console  zigoutbintestexe cmd1 help usage testexe cmd1 options cmd1 description options foo string foo description general options help help h print command specific usage   command line examples here are some results from the argparser we defined above in full examplefullexample  long names console  zigoutbintestexe cmd1 foo opt1 value cmd1 foo opt1 value   short names console  zigoutbintestexe c1 foo opt1 value cmd1 foo opt1 value  zigoutbintestexe c2 b cmd2 0 b   diagnostics console  zigoutbintestexe foo usage testexe command commands cmd1 c1 cmd1 description cmd2 c2 cmd2 description general options help help h print command specific usage error at argument 1 foo  error unknowncommand  stack trace omitted  ","by-nir/aws-lambda-zig":"🟠 write aws lambda functions in zig programming language  aws lambda runtime for zig zig v014 devhttpsimgshieldsiobadgezigv014devblacklogoziglogocolorf7a41d zig v014  master branch mit licensehttpsimgshieldsiogithublicensebynirawslambdaziglicense write aws lambda functions in the zig programming language to achieve blazing fast invocations and cold starts  quick startquickstart   documentationdocumentation   demosdemos  features  x runtime api    extensions api    telemetry api  x response streaming  x cloudwatch  xray integration    lifecycle hooks    dependency injection  x build system target configuration    managed build step    testing utilities  services events feel free to open an issue for additional integrations or better contribute a pull request    unified http  x lambda urls    api gateway    s3    sqs    sns    dynamodb    data firehose  benchmark using zig allows creating small and fast functionsbr  minimal hello world demohelloworld arm64 256 mib amazon linux 2023   11ms cold start invocation duration   15ms warm invocation duration   12 mib max memory consumption   036 mib function size zip  tip  check out aws sdk for zighttpsgithubcombynirawssdkzig for a  comprehensive zigbased aws cloud solution  quick start 1 add a dependency to your project replace version with the desired version tag console zig fetch save githttpsgithubcombynirawslambdazigversion  2 configure the build script 3 implement a handler function either an event handler or a streaming handler 4 build a handler executable for the preferred target architecture console zig build release darchx86 zig build release darcharm  5 archive the executable into a zip console zip qj lambdazip zigoutbinbootstrap  4 deploy the zip archive to a lambda function  configure it with amazon linux 2023 or other osonly runtime  use you prefered deployment method console cli sam or any ci solution  build script zig const std  importstd const lambda  importawslambda pub fn buildb stdbuild void  const optimize  bstandardoptimizeoption preferredoptimizemode  releasefast   add an architecture confuration option and resolves a target query const target  lambdaresolvetargetqueryb lambdaarchoptionb  add the handler executable const exe  baddexecutable name  bootstrap  the executable name must be bootstrap rootsourcefile  bpathsrcmainzig target  target optimize  optimize  linklibc  true  uncomment if glibc is required  strip  true  uncomment if no stack traces are needed  binstallartifactexe  import the runtime module const runtime  bdependencyawslambda modulelambda exerootmoduleaddimportawslambda runtime    event handler zig const lambda  importawslambda  entry point for the lambda function pub fn main void   bind the handler to the runtime lambdahandlehandler    eeach event is processed separetly the handler function  the function must have the following signature fn handler ctx lambdacontext  metadata and utilities event const u8  raw event payload json  const u8  return hello world    documentation  build this library provides a runtime module that handles the lambda lifecycle and communication with the execution environment to use it follow the following requirements  import the lambda runtime module this library provides and wrap a handler function with it  build an executable named bootstrap and archive it in a zip file  use amazon linux 2023 runtime  managed target aws lambda supports two architectures x8664 and arm64 based on graviton2 in order to build the event handler correctly and to squeeze the best performance the build target must be configured accordingly the mananged target resolver sets the optimal operating system architecture and specific cpu supported features call lambdaresolvetargetquerystdbuild arch to resolve the target for the given architecture either x86 or arm to add a cli configuration option call lambdaarchoptionstdbuild the following and pass the result to lambdaresolvetargetquery it can then by set through darchx86 or darcharm defaults to x86 when to manualy used  example build script zig const std  importstd const lambda  importawslambda pub fn buildb stdbuild void  const optimize  bstandardoptimizeoption preferredoptimizemode  releasefast   add an architecture cli option or hard code either x86 or arm const arch lambdaarch  lambdaarchoptionb  managed architecture target resolver const target  lambdaresolvetargetqueryb arch  add the handlers executable const exe  baddexecutable name  bootstrap  the executable name must be bootstrap rootsourcefile  bpathsrcmainzig target  target optimize  optimize  linklibc  true  uncomment if glibc is required  strip  true  uncomment if no stack traces are needed  binstallartifactexe  import the runtime module const runtime  bdependencyawslambda modulelambda exerootmoduleaddimportawslambda runtime    event handler the event handler is the entry point for the lambda function the library provides a runtime that handles the event lifecycle and communication with the lambdas execution environment with it you can focus on imlementing only the meaningful part of processing and responding to the event since the library manages the lifecycle it expects the handler to have a specific signature note that response streamingresponsestreaming has a dedicated lifecycle and handler signature zig const lambda  importawslambda  entry point for the lambda function  eeach event is processed separetly the handler function pub fn main void   bind the handler to the runtime lambdahandlehandlersync   alternatively for asynchronous handlers lambdahandleasynchandlerasync   fn handlersync ctx lambdacontext  metadata and utilities event const u8  raw event payload json  const u8   process the event payload and return a response payload return switchpayloadlen  0  empty payload else  event   fn handler","allyourcodebase/lua":"lua build system ported to build.zig  lua  547  warning due to a bug in the 0130 release of the zig compiler you will need the development version of zig in order to build the lua54dll on windows  build instructions to build all targets run sh zig build   build artifacts  name  artifact      lua  the main lua library   luaexe  the lua interpreter   luac  the lua bytecode compiler   compile options  name  type  description        release  bool  optimize for end users   shared  bool  build as shared library   usereadline  bool  readline support for linux   using in a zig project to add to a zig project run  zig fetch save httpsgithubcomallyourcodebaseluaarchiverefstags547targz  then add the following to your buildzig zig const luadep  bdependencylua  target  target release  optimize  debug  const lualib  luadepartifactlua  ","paoda/hamt":"hash array mapped trie as defined in phil bagwell (2001). ideal hash tries    hash array mapped trie a barebones implementation of this paperhttpsinfoscienceepflchrecord64398 by phil bagwell  usage as an example zig const std  importstd const expectequal  stdtestingexpectequal const hasharraymappedtrie  importhamthasharraymappedtrie const stringtrie  hasharraymappedtrieconst u8 void stringcontext const stringcontext  struct   note this definition is required  todo i could just grab the typeinfohashfnfnreturntype right pub const digest  u64 pub inline fn hashkey const u8 digest  return stdhashwyhashhash0 key  pub inline fn eqlleft const u8 right const u8 bool  return stdmemeqlu8 left right   test  const pair  stringtriepair const allocator  stdtestingallocator var trie  try stringtrieinitallocator defer triedeinitallocator try trieinsertallocator hello  try expectequalaspair  key  hello value    triesearchhello try expectequalaspair null triesearchworld    building build in release mode with zig build doptimziereleasesafe ","basdp/skia-zig":"zig bindings for the skia 2d graphics library p aligncenter h1 aligncenterskia zig bindingsh1 p p aligncenter a hrefhttpsgithubcombasdpskiazigactionsworkflowsbuildymlimg srchttpsgithubcombasdpskiazigactionsworkflowsbuildymlbadgesvg a p p aligncenterzig bindings for the famous a hrefhttpsskiaorgskia 2d graphics libraryap  overview this repository provides zig bindings to the skia c api it builds skia for multiple platforms and exposes the raw c headers to be used directly in zig projects no wrappers are providedthis is a lowlevel binding to the c layer only this repository is using the skia fork from the mono projecthttpsgithubcommonoskia as they actively maintain a c wrapper for skia which is c only we need c wrappers to bridge to zig  features  prebuilt skia binaries  exposes the raw skia c api headers to zig  easy to import and use directly from zig code without any dependencies or extra build steps  project status warning this wrapper is in a very early stage and is not stable for production use also not all features and plaforms are implemented  x skia build for windows x8664    skia build for macos x8664    skia build for macos apple silicon    skia build for linux  getting started  usage 1 import the skiazig package into your project bash zig fetch save httpsgithubcombasdpskiazigreleaseslatestdownloadskiazigpackagezip  2 add the dependency to your buildzig file somewhere below baddexecutable or whatever you are building zig const skiadep  bdependencyskiazig  target  target optimize  optimize  exerootmoduleaddimportskiazig skiadepmoduleskiazig  3 you can now import skiazig in your zig code zig const skia  importskiazig pub fn main void  const grglinterface  skiagrglinterfacecreatenativeinterface defer skiagrglinterfaceunrefgrglinterface const grcontext  skiagrdirectcontextmakeglgrglinterface orelse return errorskiacreatecontextfailed defer skiagrdirectcontextfreegpuresourcesgrcontext const glinfo  skiagrglframebufferinfot ffboid  0 fformat  glrgba8  const samples cint    get from gl or something const stencilbits cint    get from gl or something const backendrendertarget  skiagrbackendrendertargetnewgl640 480 samples stencilbits glinfo orelse return errorskiacreaterendertargetfailed const colortype  skiargba8888skcolortype const colorspace  null const props  null const surface  skiasksurfacenewbackendrendertargetptrcastgrcontext backendrendertarget skiabottomleftgrsurfaceorigin colortype colorspace props orelse return errorskiacreatesurfacefailed defer skiasksurfaceunrefsurface const canvas  skiasksurfacegetcanvassurface orelse unreachable while  app is running   skiaskcanvasclearcanvas 0xffffffff const fill  skiaskpaintnew orelse return errorskiacreatepaintfailed defer skiaskpaintdeletefill skiaskpaintsetcolorfill 0xff0000ff skiaskcanvasdrawpaintcanvas fill  your skia drawing here skiaskcanvasflushcanvas     setting your abi to msvc on windows skia requires the msvc abi on windows so make sure you target that abi there are two possible options to do so only one of these is necessary 1 set the target from the command line while building bash zig build dtargetx8664windowsmsvc  2 or better yet replace the const target   line in your buildzig file zig const target  bstandardtargetoptions defaulttarget   abi  if bgraphhostresultostag  windows msvc else null    ","neurocyte/flow-syntax":"syntax highlighting module used by flow and zat  flowsyntax syntax highlighting module used by flowhttpsgithubcomneurocyteflow zathttpsgithubcomneurocytezat and zinehttpsgithubcomkristoffitzine ","paulocampana/random_variable":"rng, density, probability, survival and quantile functions for various distributions.  imagepng for over 30 probability distributions this library provides  random variable generation  density probability survival and quantile functions mathematical functions are tested for high precision and rng tested to correctly fit the distribution  installation builds static library with header file optionally run tests bash  zig build doptimizereleasefast  zig build test  zig build correctness doptimizereleasefast   documentationhttpspaulocampanagithubiorandomvariable  importing zig module bash  zig fetch save githttpsgithubcompaulocampanarandomvariable  zig  buildzig const rvdep  bdependencyrandomvariable  target  target optimize  optimize  const rvmod  rvdepmodulerandomvariable exerootmoduleaddimportrandomvariable rvmod  zig  mainzig const rv  importrandomvariable  ","dweiller/zig-wfc":"an implementation of the wave function collapse algorithm in zig  zigwfc an implementation of the wave function collapse algorithm in zig a generic library implementing the wave function collapse algorithm this library exposes a generic core algorithm which produces tilings given a collection of tiles and associated adjacency constraints as well a tile generator for implementing the overlapping mode see the original implementationhttpsgithubcommxgmnwavefunctioncollapse for an overview of the algorithm and links to other resources  using zigwfc you can use zigwfc in a zig project with the zig build system include a dependency in your buildzigzon eg  dependencies   zigwfc   url  httpsgithubcomdweillerzigwfcarchivecommithashtargz hash  zigpackagehash    then retrieve the wfc module from the dependency in your buildzig  pub fn buildb stdbuild void    snip  const wfc  bdependencyzigwfc modulewfc  assuming you have a stdbuildstepcompile called exe that wants to do wfc exeaddmodulezigwfc wfc   you can ascertain the correct value for zigpackagehash by leaving that field out initially this make zig report the correct hash value  wfc core wfc is sometimes considered as having two different modes overlapping and tiled i think is description is a little misleading i would rather say the wfc is a tiling generator or maybe even more generally a graph colouring algorithm and the overlapping mode merely one of several processing pipelines that can be used to achieve various effects a good explanation how the core tiling algorithm relates to the overlapping mode can be found herehttpswwwgridbugsorgwavefunctioncollapse another processing pipeline of particular interest i havent yet seen talked about is what could be called the iterative mode if we want to keep the nomenclature of modes which allows for generating largescale structurelargescalestructure which are usually considered outside the scope of wfc the most common situation is generating a 2d or 3d cubic tiling and this library is currently restricted to 2dimensional rectangular tilings  features and todos  x generic core algorithm you can use with any set of 2d tilesedge constraints forming a rectangular grid  x generate tiles from image overlapping mode  x seeded generation  generation constraints  x maximum tile count ie max number of times a tile can be used    minimum tile count ie min number of times a tile can be used    connectivity constraints ie forces tiles to be part of the same regionpath    distance constraints distance between particular tiles and of paths    tile symmetry groups    iterative pipeline    ndimensional rectangular tilings    hexagonal grid  iterative pipeline helper utilities for the iterative pipeline is not yet implemented but are planned for the future this pipeline is a fairly general idea that produces intermediate tilings that are used to seed the next stage  largescale structure wfc does not generally produce largescale structures as the constraints it considers are all local however the core tiling algorithm can be used to generate largescale structure fairly easily using an iterative strategy the basic idea is to first generate a low resolution tiling which is used to seed subsequent tile generation the increase in resolution naturally leads to the initial tiling producing largescale structure for example say you wanted to generate a 2d tiling with some largerscale structure that includes houses roads and grass including more specialised tiles for the boundary regions between the road and a front lawn like a footpath you could start by generating a seed tiling at a lower resolution that has the tiles property and road you then expand this tiling into a higher resolution one initially seeded with house footpath and grass tiles in the regions associated to property tiles and road tiles seeded where the road tiles were the adjacency constraints for footpath can then require that they border road tiles and grass tiles surround house tiles this guarantees a minimum size for each largescale property which are grassy regions possibly with house tiles inside them more passessubtile types could be added for improved internal structure of a property eg to make house tiles form a connected region or to add a driveway  contributing contributions are welcome as are issues requestingsuggesting better documentation or api and new features feel free to open issues and send prs ","jnordwick/anycast":"one cast to rule them all 404 not found","nektro/zig-iana-tlds":"list of official iana top level domain names  zigianatlds list of official iana top level domain names httpsdataianaorgtldtldsalphabydomaintxt  license mit ","srmadrid/zml":"zig mathematics library  zml zig mathematics library a zig numerical and symbolic mathematics library  warning this library is in the early stages of development and is not yet ready for use breaking changes are to be expected every commit and only the most basic functionality is currently implemented  current features  numerical system  ndimensional arrays  broadcasting  elementwise operations  views  blas implementation  gemm tests fail on debug mode but pass on all release modes  symbolic system  nothing implemented yet  installation to use this library in your project run bash zig fetch save githttpsgithubcomsrmadridzml  and add it to your buildzig file zig const zml  bdependencyzml  exerootmoduleaddimportzml zmlmodulezml   notes this library is in the early stages of development and is not yet ready for use breaking changes are to be expected every commit and only the most basic functionality is currently implemented see current featurescurrentfeatures for more information ","fig-eater/zig-function-overloading":"explicit function overloading for the zig programming language  explicit function overloading for zig simple onefile nodependency explicit function overloading for zig this all runs during compile time so running overloaded functions shouldnt have any runtime overhead  install  using zig package manager run zig fetch save httpsgithubcomfigeaterzigfunctionoverloadingarchiverefsheadsmaintargz within your project directory run this again if you ever want to update the dependency then add an import to the module which needs overloading to your buildzig this code is an example of how you might do this zig const overloadingdependency  bdependencyoverloading  target  target optimize  optimize   in a default project compilestep might be lib or exe  replace the first overloading here to avoid namespace conflicts or to change the name of the import for your project compilesteprootmoduleaddimportoverloading overloadingdependencymoduleoverloading   manually download srcoverloadingzigsrcoverloadingzig and save in your project import directly using importpathtooverloadingzig or see buildzigbuildzig for an example of how to use this as a local module  usage  import the overloading module or overloadingzig if saved locally  call overloadingmake with a tuple of functions make will return a function which when called will call a function in the tuple with corresponding argument types  all functions passed in the tuple must have the same return type  functions in the tuple cannot have the same arguments as others in the tuple  if a function takes no arguments pass  into the overloaded function to call it  if a function takes multiple arguments pass the arguments in a tuple  if a function takes void as its only argument pass in  into the overloaded function to call it example zig const std  importstd const overloading  importoverloading fn addnoargs u32  return 0  fn addu32a u32 u32  return a  fn addu8sliceas const u8 u32  var total u32  0 for as a total  a return total  fn addoptionalu32a u32 u32  return if a aval return aval else 0  fn addptru32aptr u32 u32  return aptr  fn addu32i32a u32 b i32 u32  return a  asu32 intcastb  fn printnoargs void  stddebugprintno argsn   fn printvoid void void  stddebugprintvoidn   fn printu32a u32 void  stddebugprintdn a  fn printu8slicea const u8 void  stddebugprintsn a  fn printu32u32a u32 b u32 void  stddebugprintd dn  a b   const myadd  overloadingmake addnoargs addu32 addu8slice addoptionalu32 addptru32 addu32i32  const myprint  overloadingmake printnoargs printvoid printu32 printu8slice printu32u32  pub fn main void  const optionalwithval u32  555 const optionalwithnull u32  null var a u32  5   myadd  returns 0   myadd2  returns 2   myaddabc  returns 294   myaddoptionalwithval  returns 555   myaddoptionalwithnull  returns 0   myadda  returns 5   myadd 5 20   returns 25 myprint  prints no args myprint  prints void myprint2  prints 2 myprinthello  prints hello myprint 3 4   prints 3 4   see examplezigsrcexamplezig for another example  license licensed under the unlicense see included licenselicense file or httpsunlicenseorg attribution to fig  figeater  groakgames is appreciated but not required ","jedisct1/zig-hctr2":"hctr2 length-preserving encryption algorithm for zig  hctr2 for zig an implementation of the hctr2httpseprintiacrorg20211441pdf lengthpreserving encryption system hctr2 is a tweakable superpermutation  it does not use a nonce although it supports an optional tweak of any size  it does not add an authentication tag but changing a single bit anywhere in the plaintext alters the entire ciphertext hctr2 was originally designed for disk encryption particularly for encrypting file names it also has many other use cases including key wrapping and protocols such as lora where nonces and authentication tags would be too large to authenticate individual messages ","games-by-mason/spirv-reflect-zig":"spirv-reflect bindings for zig.  spirvreflectzig a port of spirvreflecthttpsgithubcomkhronosgroupspirvreflect to the zig build system and a zig api for the library  status the static library is built nearly identically to the official cmake as for the zig api the port was very simple and as far as i know all functionality from the original library is exposed i only use a small portion of the functionality myself though mostly related to descriptor set bindings if i missed anything contributions or issues are welcome its also possible that i was overly conservative with some pointer types  usage the simplest way to use the library is via the zig api zig code zig const spvr  importspirvreflect var module  spvrshadermoduleinitspv catch err panicerrornameerr defer moduledeinit  shadermodule contains the reflection data the static library is also exported if you want access to the c api  spirvreflect version  upgrade process the version of spirvreflect built is set in buildzigzon to upgrade the static library simply update this version if you are also using the zig api youll need to also update any public enums or structures that were changed in srcroot i recommend looking at a diff to see what changed you can run the tests to check for obvious mistakes in this process ","d4c7/zarg":"[wip] zarg is a minimalist and efficient command-line parsing library written in zig  spdxfilecopyrighttext 20232025 david castaon belloso d4c7protonme spdxlicenseidentifier eupl12 this file is part of zarg project httpsgithubcomd4c7zarg   zarg zarg former zigargueando is a minimalist and efficient commandline parsing library written in zig it is designed to offer a convenient way of parsing commandline arguments in a simple yet powerful manner with zarg you can easily set options flags and positional arguments for your commandline applications version 001 for zig 030  warning this is a work in progress you should expect breaking changes and bugs   features  parses commandline arguments into an autogenerated struct  automatic generation of usage and help text including headers footers types  support for flags options and positional arguments  support for multioption arguments  you can define the separator between options and arguments  provides builtin support for basic and complex argument types including enums and json  offers the ability to define and use custom argument types  includes default validators for arguments reducing the boilerplate code  enables users to define and use custom validation rules for arguments  choose between halting at the first encountered problem or collecting all problems  highly customizable and easy to use  lightweight with no dependencies  leverages zigs powerful compiletime feature as much as possible  autocomplete support  documentation un analizador de lnea de comandos en zig  parte ihttpsd4c7githubiozigzagueandopostsunanalizadordelineadecomandosenzig1 un analizador de lnea de comandos en zig  parte iihttpsd4c7githubiozigzagueandopostsunanalizadordelineadecomandosenzig2  install to use zarg in your project you need to add the dependency to your buildzigzon bash  zig fetch save githttpsgithubcomd4c7zarg  then you could add the module to to your buildzig file zig const zarg  bdependencyzarg  target  target optimize  optimize  exerootmoduleaddimportzarg zargmodulezarg   usage define a struct that defines the commandline arguments help texts headers and types you want to parse zig const clp  comptime zargcommandlineparserinit header                               params  zargparam help long  help short  h help  shows this help  flag long  version help  output version information and exit  flag long  verbose short  v help  enable verbose output  option long  port short  p parser  tcpport default  1234 help  listening port  option long  host short  h parser  tcphost default  localhost help  host name  positional parser  dir default   check  checkdir mode  readonly f   desc  this command starts an http server and serves static content from directory dir footer  more info httpsd4c7githubiozigzagueando   the field params in the struct defines the option and positional arguments then in your main function use the parse function to parse the commandline arguments zig var s  clpparseargsallocator defer sdeinit if shelprequested  try sprinthelpstdiogetstderrwriter return  if shasproblems  try sprintproblemsstdiogetstderrwriter allproblems return  stddebugprintdir sn sargpositional stddebugprintport dn sargport stddebugprinthost sn sarghost  output sample txt  sample help                          usage sample hhelp version vverbose pporttcpport hhosttcphost dir this command starts an http server and serves static content from directory dir h help shows this help version output version information and exit v verbose enable verbose output p porttcpport listening port default value 1234 h hosttcphost host name default value localhost tcpport tcp port value between 0 and 65535 use port 0 to dynamically assign a port can use base prefix 0x0o0b tcphost tcp host name or ip dir directory more info httpsd4c7githubiozigzagueando  detailed error reporting with allproblems mode txt  zigoutbinsamplecomplete cblack k p 70000 vv samplecomplete  unsupported value black of type color for option c invalidenum cblack at arg 1  unrecognized option k k at arg 2  unsupported value 70000 of type tcpport for option p overflow 70000 at arg 4  unexpected repeated flag v vv at arg 5  expected between 1 and 5 directorys but found 0  expected allocopt  expected 1 array1a1s but found 0  expected between 1 and 2 array1a2s but found 0  expected 1 array1ans but found 0 try zigoutbinsamplecomplete help for more information  view more examples in the examplesexamples folder you can build the samples using  zig build examples   misc  run tests  zig test srctestszig   generate a coverture report require kcov installed  zig build cover  view the report  firefox zigoutcovertureindexhtml  note since the zig compiler exclusively compiles functions that are explicitly called or referenced and comptime can lead to substantial portions of code not being included in the runtime the coverage results only reflect the extent to which the utilized functions are covered  autocomplete you can provide easily an autocompleter for a zarg command line parser  how it works to enable autocompletion a command is compiled that analyzes the command line and suggests completion options based on the cursor position in that line this command also allows installing a lightweight autocompletion script for a specific shell which will call the autocompletion command for the heavy processing you can integreate in the same command or using a separate one which is the recommended way the autocompleter analizes your provided commandlineparser and suggest completions for  short option names  long option names  option argument types  positional argument types the builtin supported argument types are  file autocomplete with a file  dir autocomplete with a directo","travisstaloch/diff-zimilar":"a port of the dtolnay/dissimilar text diffing library to zig.  based on google's diff-match-patch   diffzimilar a port of dtolnaydissimilarhttpsgithubcomdtolnaydissimilar text diffing library to zighttpsziglangorg includes semantic cleanups based on googles diff match patch  goals  reduced memory footprint limited allocations  fast diffing maybe for use in zlshttpsgithubcomzigtoolszls  tools  diffit a simple diffing utility that can be run from the command line console  zig build run  filea fileb  console  zig build  zigoutbindiffit filea fileb  this shows ansi colored diffs  benchmark console  zig run lc oreleasefast srcbenchzig  filea fileb iterations  console  zig run lc oreleasefast srcbenchzig  tmpdissimilarbenchesdocument1txt tmpdissimilarbenchesdocument2txt 10 took 1363s for 10 diffs   usage zig test  const diff  importlibzig var arena  stdheaparenaallocatorinitstdheappageallocator const aalloc  arenaallocator  catch return just allows test to pass const filea  stdfscwdopenfilepathtofilea  catch return const fileb  stdfscwdopenfilepathtofileb  catch return const doca  try fileareadtoendallocaalloc stdmathmaxintu32 const docb  try filebreadtoendallocaalloc stdmathmaxintu32 var chunks  try diffdiffaalloc doca docb defer chunksdeinitaalloc    references  inspired by tomhoulezigdiffhttpsgithubcomtomhoulezigdiff  ported from dtolnaydissimilarhttpsgithubcomdtolnaydissimilar  google diff match patchhttpsgithubcomgooglediffmatchpatch  myers diff algorithmhttpsneilfrasernamewritingdiffmyerspdf  semantic cleanupshttpsneilfrasernamewritingdiff ","nektro/zig-tokenize":"a data-oriented-design built tokenizer  zigtokenize a dataorienteddesign built tokenizer ","catniped/stl-loader-zig":"a tiny simple zig library for loading stl files with binary and ascii support  stlloaderzig a tiny simple zig library for loading stl files with support for both ascii and binary representations  usage example usage provided in examplezigsrcexamplezig c const stlloader  importstlloader  const filepath const u8  filestl var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer   gpadeinit const mesh  try stlloaderloadstlallocator filepath defer allocatorfreemesh  do stuff with mesh  loading by default should be done thru dispatcher function which takes a path for the file relative to the cwd and automatically chooses which implementation of the reader to use if the type of the stl file is known at compile time or you wish to dispatch the functions manually note the offsets for the reader required before calling the functions  notes  at the time of writing this i am still quite new to zig so the code may not be perfect feel free to suggest improvements and bugfixes in the github issues ","dasimmet/wabt":"webassembly binary toolkit (wabt) and binaryen on the zig build system  webassembly tools on the zig build system uses the zighttpsziglangorg build system to build webassemblys binary c tools  building zig build zig build   add to your zig project bash zig fetch save githttpsgithubcomdasimmetwabtgit   webassembly binary toolkithttpsgithubcomwebassemblywabtgit   zigoutbinwasm2c help usage wasm2c options filename read a file in the webassembly binary format and convert it to a c source file and header   binaryenhttpsgithubcomwebassemblybinaryengit   zigoutbinwasmmerge help  wasmmerge infile1 name1 infile2 name2  merge wasm files into one   buildzig usage zig const wabt  importwabt  wasmopt const optimizedwasm lazypath  wabtwasmopt bpathmywasm  source path optimizedwasm  outbasename mvpfeatures oz c  extra args   wasm2wat const mywat lazypath  wabtwasm2wat optimizedwasm  source path mywat  outbasename   extra args  ","dianetc/zigthesis":"a property-based testing library for zig.   zigthesis a small library for falsifying a hypothesis the primary entry point into the library is the falsify function if this sounds eerily familiar to you it should inspiration for this library was taken directly from the initial commits of the very popular hypothesis libraryhttpsgithubcomhypothesisworkshypothesis similar to falsify in hypothesis you give it a predicate and a specification for how to generate arguments to that predicate and it gives you a counterexample currently test cases can be added in teststestfalsifyzig get started by building and running test examples via bash zig build zig build test  an example test and output zig fn weirddistributivex i32 y i32 z i32 bool  return x  y  z  x  y  z  try zigthesisfalsifyweirddistributive weird distributive  output  weird distributive failed for  1 1 0   zigthesis will return a success if no falsifying test case was found within maxdurationms currently set at 5 seconds initial remark this is tiny and doesnt do much for now next steps would be to make a simple foundation for generating and testing properties with 1 floats 2 arrays of floatsintegers 3 vectors 4 strings 5 user defined struct 6 enums slices pointers etc  status  currently mainzig only has an empty main function this is confusing is there a way refactor to make this more intuitive  implemented a bad shrinkinghttpspropertestingcombookshrinkinghtml mechanism more thought needs to be put into this currently shrinking in zigthesis is treated as a postfacto processhttpsdianetcgithubiomusingsinitialshrinking we must integrate shrinking into the generation process instead of afterwards in order to get minimizing falsifying cases my next obvious step was to have the generator produce not just a plain value but a structure call it a sample that contains both the generated value and a possibly lazy tree of shrink candidates that way if a property fails we can traverse the tree to quickly locate a minimal failing case this is easier said than done though ","ttytm/dmon-zig":"cross-platform zig module to monitor changes in directories.  dmonzig badgebuildstatus httpsimgshieldsiogithubactionsworkflowstatusttytmdmonzigciymlbranchmainlogogithublogocolorc0caf5labelcolor333 badgeversionlib httpsimgshieldsiogithubvtagttytmdmonziglogotasklogocolorc0caf5labelcolor333color badgeversionzig httpsimgshieldsiobadgezig0130cc742flogoziglogocolorc0caf5labelcolor333 badgebuildstatushttpsgithubcomttytmdmonzigactionsquerybranch3amain badgeversionlibhttpsgithubcomttytmdmonzigreleaseslatest badgeversionzig crossplatform zig module to monitor changes in directories it utilizes the dmonhttpsgithubcomseptagdmontabreadmeovfile c99 library  installation sh  projectspathyourawesomeprojct zig fetch save httpsgithubcomttytmdmonzigarchivemaintargz  zig  yourawesomeprojctbuildzig const std  importstd pub fn buildb stdbuild void    const dmondep  bdependencydmon  const exe  baddexecutable name  yourawesomeprojct    exerootmoduleaddimportdmon dmondepmoduledmon      usage example v const std  importstd const dmon  importdmon const print  stddebugprint const context  struct  triggercount u32  0  pub fn watchcb comptime ctx type  dmonwatchid action dmonaction rootdir 0const u8 filepath 0const u8 oldfilepath 0const u8 context ctx  void  printaction n action printroot sn rootdir printfile path sn filepath printold file path sn oldfilepath orelse  contexttriggercount  1  pub fn main void  dmoninit defer dmondeinit const watchpath  homeuserdocuments const id  dmonwatchcontext watchpath watchcb  recursive  true  ctx printstarting to watch s watcher id dn  watchpath id  while true  if ctxtriggercount  3 break    for a simple local example watching the cwd dmonzigexamplessrcmainzighttpsgithubcomttytmdmonzigblobmainexamplessrcmainzig sh  perform a lightweight filtered yet complete clone git clone recursive shallowsubmodules filterblobnone  httpsgithubcomttytmdmonzig   cd dmonzigexamples  sh  dmonzigexamples zig build run  ","softprops/zig-envy":"parse env variables into zig structs h1 aligncenter envy h1 div aligncenter deserialize environment variables into typesafe structs div  mainhttpsgithubcomsoftpropszigenvyactionsworkflowsmainymlbadgesvghttpsgithubcomsoftpropszigenvyactionsworkflowsmainyml license infohttpsimgshieldsiogithublicensesoftpropszigenvy releasehttpsimgshieldsiogithubvreleasesoftpropszigenvy zig supporthttpsimgshieldsiobadgezig0120blacklogozighttpsziglangorgdocumentation0120   features  fail fast on faulty application configuration  supports parsable std lib types out of the box  fail at compile time for unsupported field types  examples zig const std  importstd const envy  importenvy const config  struct  foo u16 bar bool baz const u8 boom u64  pub fn main void  var arena  stdheaparenaallocatorinitstdheappageallocator defer arenadeinit const allocator  arenaallocator const config  envyparseconfig allocator  catch err  stddebugprinterror parsing config from env any err return  stddebugprintlnconfig any  config      installing create a new exec project with zig initexe copy the echo handler example above into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use sh zig fetch save httpsgithubcomsoftpropszigenvyarchiverefstagsv021targz  to manually add it as follows diff  name  myapp version  010 dependencies      declare dep properties  envy      uri to download  url  httpsgithubcomsoftpropszigenvyarchiverefstagsv021targz    hash verification  hash  currenthash    paths      the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigenvyarchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigenvyarchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption    dereference envy dep from buildzigzon  const envy  bdependencyenvy   target  target  optimize  optimize  moduleenvy var exe  baddexecutable name  yourexe rootsourcefile  bpathsrcmainzig target  target optimize  optimize     add the envy module to executable  exerootmoduleaddimportenvy envy binstallartifactexe     for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2023 ","allyourcodebase/libpq":"postgresql's libpq ported to the zig build system  buildzig for libpq provides a package to be used by the zig package manager for c programs  status  architecture  os  linux  macos    x8664       arm 64  untested     refname  postgresql version  zig 015x  zig 014x  zig 013x    51643  rel164         51642  rel164         use add the dependency in your buildzigzon by running the following command zig zig fetch save githttpsgithubcomallyourcodebaselibpq51643  then in your buildzig zig const postgres  bdependencylibpq  target  target optimize  optimize  const libpq  postgresartifactpq  wherever needed exelinklibrarylibpq   options  dsslenum choose which dependency to use for ssl defaults to libressl supported values openssl libressl none ddisablezlibbool remove zlib as a dependency ddisablezstdbool remove zstd as a dependency   bump dependencies to update this project dependencies bash zig fetch saveupstream githttpsgithubcompostgrespostgresrel164 zig fetch save githttpsgithubcomallyourcodebaseopensslmain zig fetch save githttpsgithubcomallyourcodebaselibressl4002 zig fetch save githttpsgithubcomallyourcodebasezlibmain zig fetch save githttpsgithubcomallyourcodebasezstd157  ","calder-ty/multihash":"zig multihash implementation  multihash a library for creating serializing and deserializing multihasheshttpsmultiformatsiomultihash  contents  multihash multihash is the package for creating serializing and deserializing multihashes exposes two structs multihash and unsignedvarint  examples zig  bytes for multihash const input  u8 0x12 0x20 0x41 0xdd 0x7b 0x64 0x43 0x54 0x2e 0x75 0x70 0x1a 0xa9 0x8a 0x0c 0x23 0x59 0x51 0xa2 0x8a 0x0d 0x85 0x1b 0x11 0x56 0x4d 0x20 0x02 0x2a 0xb1 0x1d 0x25 0x89 0xa8  const result  try multihashdeserializeinput testingallocator defer resultdeinit   pkghash pkghash is a tool for generating hashes for zig packages it is forked from the pkghash utility in zaphttpsgithubcomzigzapzap the main purpose of forking was to add the ability to specify the exact files that would be included in the hash  usage  usage pkghash options options h help print this help and exit g git use git lsfiles f file file list list files to include in hash directories are included recursively does not work with g suboptions allowdirectory  calc hash even if no buildzig is present applies in nogit mode only suboptions for git tagtag  specify git tag to use in template defaults to tag pointing to head templatefilemd  specify markdown template to render   example bash pkghash f license src readmemd buildzig buildzigzon   acknowledgments portion of this code use code licensed by others mainzig copyright c 2023 rene schallner mit license ","allyourcodebase/nativefiledialog-extended":"nativefiledialog-extended ported to the zig build system cihttpsgithubcomallyourcodebasenativefiledialogextendedactionsworkflowsciyamlbadgesvghttpsgithubcomallyourcodebasenativefiledialogextendedactions  nativefiledialogextended this is nativefiledialogextendedhttpsgithubcombtzynativefiledialogextended packaged for zighttpsziglangorg  installation first update your buildzigzon   initialize a zig build project if you havent already zig init zig fetch save githttpsgithubcomallyourcodebasenativefiledialogextendedgit1211  you can then import nativefiledialogextended in your buildzig with zig const nfddependency  bdependencynativefiledialogextended  target  target optimize  optimize  yourexelinklibrarynfddependencyartifactnfd   dependencies see httpsgithubcombtzynativefiledialogextendedtreev121dependencies ","hasanpasha/zmpv":"libmpv bindings in zig  zmpv libmpv bindings in zig  usage  first fetch the package into your project bash zig fetch save httpsgithubcomhasanpashazmpvarchivedesiredcommothashtargz   import the package in your buildzig file zig const zmpvdep  bdependencyzmpv  target  target optimize  optimize  exerootmoduleaddimportzmpv zmpvdepmodulezmpv exelinksystemlibrarympv  in linux exelinklibc   example zig const std  importstd const zmpv  importzmpv const mpv  zmpvmpv pub fn main void  var gpa  stdheapgeneralpurposeallocator verboselog  true  defer  if gpadeinit  leak panicdetected memory leak  const allocator  gpaallocator const args  try stdprocessargsallocallocator defer stdprocessargsfreeallocator args if argslen  2  stddebugprintusage s filenamen args0 return  const filename  args1 const mpv  try mpvcreateallocator try mpvsetoptionosc flag  true  try mpvsetoptioninputdefaultbindings flag  true  try mpvsetoptioninputvokeyboard flag  true  try mpvinitialize defer mpvterminatedestroy try mpvcommandasync0  loadfile filename  try mpvrequestlogmessageserror try mpvobserveproperty1 fullscreen flag try mpvobserveproperty2 timepos int64 try mpvsetpropertyfullscreen  flag  true  while true  const event  mpvwaitevent1 const eventid  eventeventid switch eventid  shutdown endfile  break logmessage   const log  eventdatalogmessage stdlogdebugs s  logprefix logtext   propertychange getpropertyreply   const property  eventdatapropertychange if stdmemeqlu8 propertyname fullscreen  stdlogdebugfullscreen  propertydataflag  else if stdmemeqlu8 propertyname timepos  switch propertydata  int64  timepos  stdlogdebugtimepos  timepos  else      else       ","javiorfo/prettizy":"zig library to prettify json and xml strings  prettizy zig library to prettify json and xml strings  caveats  required zig version 013  this library has been developed on and for linux following open source philosophy  usage zig const std  importstd const prettizy  importprettizy pub fn main void   arena allocator is recommended to avoid internal leaks var gpa  stdheaparenaallocatorinitstdheappageallocator defer gpadeinit const allocator  gpaallocator const jsonstring  namejohnage30citynew yorkhobbiesreadingtraveling objfield12 const formattedjson  try prettizyjsonprettifyallocator jsonstring  stddebugprintsn formattedjson const xmlinput  xml version10 encodingutf8librarynamecity librarynamelocationaddressstreetmain ststreetnumber123numbercitymetropoliscitystatenystatezip12345zipaddresscoordinateslatitude407128latitudelongitude740060longitudecoordinateslocationbooksbook idb1titlethe great gatsbytitleauthorfirstnamef scottfirstnamelastnamefitzgeraldlastnameauthorpublicationyear1925publicationyeargenrefictiongenreisbn9780743273565isbnavailabilitystatusavailablestatuscopies5copiesavailabilitybookbookslibrary const formattedxml  try prettizyxmlprettifyallocator xmlinput  tabspace  4  stddebugprintsn formattedxml    installation  in buildzigzon zig dependencies   prettizy   url  httpsgithubcomjaviorfoprettizyarchiverefsheadsmastertargz  hash  hash suggested  the hash will be suggested by zig build     in buildzig zig const dep  bdependencyprettizy  target  target optimize  optimize  exerootmoduleaddimportprettizy depmoduleprettizy    donate  bitcoin qrhttpsrawgithubusercontentcomjaviorfoimgmastercryptobitcoinpng 1gqdj63rdpe4ejkujhi166fayigvhu5r7v  paypalhttpswwwpaypalcomdonatehostedbuttonidfa7sglsct2h8g ","javiorfo/zig-epub":"minimal zig library for creating epub files  zigepub minimal zig library for creating epub files  caveats  c libs dependencies libzip 1112httpsgithubcomnihatlibzip  required zig version 013  epub version 201  this library has been developed on and for linux following open source philosophy  overview this library will generate an epub with the following compressed files  metainf  containerxml  oebps  images  someimagepng  tocncx  contentopf  somechapterxhtml  stylesheetcss  mimetype  usage  simple example more examples herehttpsgithubcomjaviorfozigepubtreemasterexamples zig const std  importstd const epub  importepub pub fn main void  var gpa  stdheapgeneralpurposeallocator defer if gpadeinit  ok panicleak const allocator  gpaallocator var myepub  epubepubinitallocator  title  flying circus creator  johann gambolputty identifier   identifiertype  uuid value  d5b2b585566a4b9c9c5df99436e3a588   defer myepubdeinit var imagepaths  const u8 homeuserdownloadsimagejpg homeuserdownloadsimage2png  var section  epubsectioninitallocator chapter 1  raw  h1chapter 1h1nphellopnh1 idchapter11chapter 11h1  defer sectiondeinit try myepub setstylesheet raw  body  backgroundcolor 000000   setcoverimage path  homeuserdownloadscatsjpg imagetype  jpg  setimagesimagepaths setcover raw  div classcoverimg srcimagescatsjpg altcover imagediv  addsectiontypepreface  raw  pprefacepn  preface addsectionaddtoc text  chapter 11 referenceid  chapter11 build addsectionchapter 2  raw  h1chapter 2h1npbyepn  generatebookepub  this could be a existent path to some folder absolute or relative ex pathtobookepub    some info  only one level of subsection is available when using table of contents at the moment ex chapter 1  chapter 11 chapter 12 etc  an epub is just a compressed file using a tool like unzip or similar could be useful to see the content and files generated  every xhtml cover and sections will have the body tag with an id formed by the name of the section without spaces plus body helpful when using some css on it  ex section named chapter 1 will have body idchapter1body  installation  in buildzigzon zig dependencies   epub   url  httpsgithubcomjaviorfozigepubarchiverefsheadsmastertargz  hash  hash suggested  the hash will be suggested by zig build     in buildzig zig const dep  bdependencyepub  target  target optimize  optimize  exerootmoduleaddimportepub depmoduleepub exelinklibc exelinksystemlibraryzip    donate  bitcoin qrhttpsrawgithubusercontentcomjaviorfoimgmastercryptobitcoinpng 1gqdj63rdpe4ejkujhi166fayigvhu5r7v  paypalhttpswwwpaypalcomdonatehostedbuttonidfa7sglsct2h8g ","smallbraintime/asciitecture":"a simple text-based graphics game library for zig  asciitecture a simple textbased graphics game library for zig  currently it only supports linux examplehttpsgithubcomuserattachmentsassets9630f70fe137428eaf28495cd8116b4e  dependencies  zig 0130  libx11dev  libxrandrdev eg sudo apt install libx11dev libxrandrdev  run example zig build example  run tests zig build test  todo    add more tests and docs    add windows support    add grapheme clusters ","jaxron/zigache":"a customizable cache library in zig with multiple eviction policies. h1 aligncenter picture img width300 altzigache srcassetsimageszigachelogopng picture br a hrefhttpsgithubcomjaxronzigacheblobmainlicensemd img srchttpsimgshieldsiogithublicensejaxronzigachestyleflatsquarecolorf27523 a a hrefhttpsgithubcomjaxronzigacheactionsworkflowsciyml img srchttpsimgshieldsiogithubactionsworkflowstatusjaxronzigacheciymlstyleflatsquarecolorf27523 a a hrefhttpsjaxronmezigache img srchttpsimgshieldsiobadgezigachedocs00acd7svgstyleflatsquarecolorf27523 a a hrefhttpsgithubcomjaxronzigacheissues img srchttpsimgshieldsiogithubissuesjaxronzigachestyleflatsquarecolorf27523 a h1 p aligncenter embzigacheb is an efficient caching library built in a hrefhttpsziglangorgziga offering customizable cache eviction policies for various application needsem p   important  zigache is not in active development but will be maintained the library follows zig version 0140   table of contents   featuresfeatures   quickstartefb88fquickstart   examplesexamples   configurationefb88fconfiguration   benchmarksbenchmarks   licenselicense   faqfaq   features zigache offers a rich set of features to designed to meet various caching needs  multiple eviction algorithms  wtinylfu  tinylfu a highly efficient cache admission policyhttpsarxivorgabs151200727  s3fifo  fifo queues are all you need for cache evictionhttpsdlacmorgdoi10114536000063613147  sieve  sieve is simpler than lru an efficient turnkey eviction algorithm for web cacheshttpswwwusenixorgconferencensdi24presentationzhangyazhuo  lru  least recently used  fifo  firstinfirstout  extensive configuration options  configurable cache size with preallocation for performance tuning  ability to finetune cache policies eg tinylfu s3fifo  timetolive ttl support to expire cache entries  thread safety and sharding settings for concurrent environments  adjustable max load factor for the cache  heavy testing and benchmarking for stability and performancebenchmarks under various workloads   quickstart to use zigache in your project follow these steps 1 run this command in your projects root directory sh zig fetch save githttpsgithubcomjaxronzigachegit  2 in your buildzig add diff pub fn buildb stdbuild void   options const target  bstandardtargetoptions const optimize  bstandardoptimizeoption  build  const zigache  bdependencyzigache   target  target  optimize  optimize  modulezigache const exe  baddexecutable name  yourproject rootsourcefile  bpathsrcmainzig target  target optimize  optimize   exerootmoduleaddimportzigache zigache binstallartifactexe const runcmd  baddrunartifactexe runcmdstepdependonbgetinstallstep const runstep  bsteprun run the program runstepdependonruncmdstep   3 now you can import and use zigache in your code like this zig const std  importstd const cache  importzigachecache pub fn main void  var gpa stdheapgeneralpurposeallocator  init defer   gpadeinit const allocator  gpaallocator  create a cache with string keys and values var cache cacheconst u8 const u8   try initallocator  cachesize  1 policy  sieve  defer cachedeinit  your code   small back to toptableofcontentssmall   examples explore the usage scenarios in our examples directory  01  key typesexamples01keytypeszig  02  ttl entriesexamples02ttlentrieszig to run an example sh zig build exampleid zig build 01  small back to toptableofcontentssmall   configuration zigache offers flexible configuration options to adjust the cache to your needs zig var cache cacheconst u8 const u8  threadsafety  true  enable thread safety for multithreaded environments ttlenabled  true  enable timetolive ttl functionality maxloadpercentage  60  set maximum load factor for the cache 60 occupancy   try initallocator  cachesize  10000  maximum number of items the cache can store poolsize  1000  preallocated nodes to optimize performance shardcount  16  number of shards for concurrent access handling policy  sieve  eviction policy in use    for more detailed information refer to the full documentationhttpsjaxronmezigache small back to toptableofcontentssmall   benchmarks this benchmark uses a zipfian distributionhttpsenwikipediaorgwikizipf27slaw run on an intel core i78700 cpu using commit 7a12b1f of this library  note  these results are not conclusive as performance depends on workload and environment these benchmarks are comparing eviction policies within this library and not comparisons with other languages or libraries you can customize the benchmarks using various flags for details run zig build h details summarysingle threaded zipf 09 10m keyssummary  benchmark parameters sh zig build bench doptimizereleasefast  or sh zig build bench doptimizereleasefast dreplaytrue dshards1 dthreads1 dauto2050000 dzipf09 dkeys10000000 dduration10000   results  hit rate  picture img altzigache srcassetsimagesbenchmarks1hitratepng picture  average operation time nsop picture img altzigache srcassetsimagesbenchmarks1nsoppng picture  operations per second opss picture img altzigache srcassetsimagesbenchmarks1opsspng picture details details summarysingle threaded zipf 07 10m keyssummary  benchmark parameters sh zig build bench doptimizereleasefast dzipf07  or sh zig build bench doptimizereleasefast dreplaytrue dshards1 dthreads1 dauto2050000 dzipf07 dkeys10000000 dduration10000   results  hit rate  picture img altzigache srcassetsimagesbenchmarks2hitratep","nektro/zig-git":"inspect into the depths of your .git folder purely from zig 404 not found","nektro/zig-iso-639-languages":"zig package for iso 639 language codes  zigiso639languages iso 639 language codes httpswwwisoorgiso639languagecodeshtml  license 0bsd ","travisstaloch/kd-tree":"a k-d tree implementation in zig  about a kd treehttpsenwikipediaorgwikikdtree implementation ported from httpsgithubcomgishi523kdtree  api  floats only accepts arrays or homogenous structures of any zig float type  search for single nearest neighbor  search for k nearest neighbors  search for all neighbors within radius  visit all nodes with user provided context  validate all nodes  usage this package is meant to be consumed with the zig build systemhttpsziglangorglearnbuildsystem and imported as a module console  latest commit zig fetch savekdtree githttpsgithubcomtravisstalochkdtree  console  specific commit zig fetch savekdtree httpsgithubcomtravisstalochkdtreearchivecommithashtargz  zig  buildzig exerootmoduleaddimportkdtree bdependencykdtree modulekdtree  zig  myappzig const kdtree  importkdtree   example test this code is from srcrootzigsrcrootzig where there are also other similar tests and there is demo raylib appsrcmainzig too zig test basic usage  const mypoint  struct  x f32 y f32  const mypoints 8mypoint    x  27175806e0 y  25162528e0   x  30172718e0 y  11619115e1   x  39525537e0 y  29364395e1   x  70706835e0 y  79604106e0   x  26941679e0 y  19487169   x  37812352e0 y  83156556e1   x  7326651e1 y  12251115e0   x  8401675e1 y  29021428e0    todo const kdtree  importkdtreekdtree const tree  kdtreemypoint  var tree  try treeinitstdtestingallocator mypoints defer treedeinitstdtestingallocator  validate try treevalidate  visit var count u8  0 treevisit count struct  fn visit tree  treenode c u8 bool  c  1 return true  visit try testingexpectequalmypointslen count const target mypoint   x  5 y  5   nearest const nearest  treennsearchtarget try testingexpectequal0 nearestnearestpointidx  knn var knnresult 2u32  undefined try treeknnsearchstdtestingallocator target knnresult try testingexpectequal0 knnresult0 try testingexpectequal3 knnresult1  radius var radiussearchresults  stdarraylistu32initstdtestingallocator defer radiussearchresultsdeinit const radius  4 try treeradiussearchtarget radius radiussearchresults try testingexpectequal3 radiussearchresultsitemslen    demo console zig build run  screenshothttpsgithubcomuserattachmentsassetsec4a26a92c924f72aaed08c20c296a47 red is the target point and radius green  outlined is the closest neighbor green are the 5 nearest neighbors and blue are within the search radius if you want to run the demo app youll need to either have raylib available on your system or create a depsraylib folder and put librayliba there along with includeraylibhraymathhrlglh  bench console  benchsh unstable   zig build doptimizereleasefast  zigoutbinbench unstable init time 56034ms validate time 215078us nnsearch time 928us knnsearch time 838642us radiussearch time 485us time 57105ms size 100000  benchsh medianofmedians   zig build doptimizereleasefast  zigoutbinbench init time 15637ms validate time 250359us nnsearch time 929us knnsearch time 861343us radiussearch time 534us time 16767ms size 100000 ","hejsil/zig-crc":"this repository has no description. 404 not found","recursiveerror/espat":"simple driver to use esp32 boards as wifi module via at command firmware 404 not found","allyourcodebase/lmdb":"lmdb using the zig build system  lmdb lmdbhttpsgithubcomlmdblmdbtreemdbmasterlibrariesliblmdb using the zighttpsziglangorg build system  usage first update your buildzigzon elvish  initialize a zig build project if you havent already zig init  support for lmdb starts with v0931 and future releases zig fetch save httpsgithubcomallyourcodebaselmdbarchiverefstags09312targz  for latest git commit zig fetch save httpsgithubcomallyourcodebaselmdbarchiverefsheadsmaintargz  import lmdb dependency into buildzig as follows zig const lmdbdep  bdependencylmdb  target  target optimize  optimize strip  true lto  true linkage  static   using lmdb artifacts and module in your project zig const exe  baddexecutable name  exename rootsourcefile  bpathsrcmainzig target  target optimize  optimize strip  strip  exewantlto  lto const liblmdb  lmdbdepartifactlmdb const lmdbmodule  lmdbdepmodulelmdb exerootmoduleaddimportmdb lmdbmodule exelinklibraryliblmdb   supported on linux macos and windows  zig 0150dev  zig 0140 ","travisstaloch/date-zig":"fast calendar algorithms ported to zig  datezig a port of httpsgithubcomnakedibledatealgors to zig datealgors is based on httpsgithubcomcassionerieaf  support system time related related methods such as datetimetosystemtime and systemtimetodatetime currently only support posix based operating systems everything else such as rdtodate and datetord should work on any target and platform  todo  wasm zig build test dtargetwasm32wasi fwasmtime  windows zig build test dtargetx8664windows fwine  other non posix","kioz-wang/zargs":"another comptime-argparse for zig! let's start to build your command line!  zargs  other language readmezhcnmd another comptimeargparse for zig lets start to build your command line zig const std  importstd const zargs  importzargs const command  zargscommand const tokeniter  zargstokeniter pub fn main void  comptime var cmd command   name  demo usesubcmd  action description  this is a simple demo    cmdoptverbose u32  short  v optargoutput const u8  short  o long  out  comptime var install command   name  install  comptime var remove command   name  remove    cmdsubcmdinstallposargname const u8 subcmdremoveposargname const u8  var gpa stdheapgeneralpurposeallocator  init const allocator  gpaallocator var it  try tokeniterinitallocator  defer itdeinit   try itnext const args  cmdparseit catch err  stddebugprintfail to parse because of anyn err stddebugprintnsn cmdusage stdprocessexit1  switch argsaction  install  a  stddebugprintinstalling sn aname  remove  a  stddebugprintremoving sn aname   stddebugprintsuccess to do sn tagnameargsaction    background as a system level programming language there should be an elegant solution for parsing command line arguments ive basically looked at various open source implementations on the web both runtime parsing and compiletime parsing developing in a language with strong compiletime capabilities should minimize runtime overhead for compiletime i see two routes  given a parameter structure and additional parameter descriptions help messages etc then reflect the parser  directly describe all the information about the parameter then reflect the parameter structure and the parser i think the latter is much cleaner to use and whats there is basically the former hence zargs  installation  v013x only supports zig 0130httpsgithubcomziglangzigreleasestag0130 support for zig 0140httpsgithubcomziglangzigreleasestag0140 will be started with v0140 see release v0140httpsgithubcomkiozwangzargsmilestone1  fetch get the latest version bash zig fetch save githttpsgithubcomkiozwangzargs  get a tagged version eg v0130 bash  see httpsgithubcomkiozwangzargsreleases zig fetch save httpsgithubcomkiozwangzargsarchiverefstagsv0130targz   import use addimport in your buildzig eg zig const exe  baddexecutable name  yourapp rootsourcefile  bpathsrcmainzig target  bstandardtargetoptions optimize  bstandardoptimizeoption  exerootmoduleaddimportzargs bdependencyzargs modulezargs binstallartifactexe const runcmd  baddrunartifactexe runcmdstepdependonbgetinstallstep if bargs args  runcmdaddargsargs  const runstep  bsteprun run the app runstepdependonruncmdstep  after importing the zargs you will obtain the iterator tokeniter command builder command and universal parsing function parseany zig const zargs  importzargs   for more information and usage details about these three powerful tools please refer to the documentationapis  features  versatile iterators flexible for real and test scenarios  system iterator init get real command line arguments  general iterator initgeneral splits command line arguments from a oneline string  line iterator initline same as regular iterator but you can specify delimiters  list iterator initlist iterates over a list of strings short option prefixes  long option prefixes  connectors  option terminators  can be customized for iterators see presentationpresentation for usage scenarios  options arguments subcommands  terminology  option opt  single option singleopt  boolean option boolopt t  bool  accumulative option repeatopt typeinfot  int  option with argument argopt  option with single argument singleargopt t  option with fixed number of arguments arrayargopt nconst t  option with variable number of arguments multiargopt const t  argument arg  option argument optarg equivalent to option with argument  positional argument posarg  single positional argument singleposarg t  fixed number of positional arguments arrayposarg nconst t  subcommand subcmd  matching and parsing matching and parsing are driven by an iterator for options the option is always matched first and if it takes an argument the argument is then parsed for positional arguments parsing is attempted directly for arguments t must be the smallest parsable unit const u8  t  int  float  bool  enum by default stdmetastringtoenum is used but the parser method takes precedence  struct a struct with a parser method if t is not parsable a custom parser parsefn can be defined for the argument obviously a parser cannot be configured for a single option as it would be meaningless  default values and optionality options and arguments can be configured with default values default once configured the option or argument becomes optional even if not explicitly configured single options always have default values boolean options default to false and accumulative options default to 0 therefore single options are always optional  callbacks a callback callbackfn can be configured which will be executed after matching and parsing  subcommands a command cannot have both positional arguments and subcommands simultaneously  representation for the parser except for accumulative options and options with a variable number of arguments no option can appear more than once various representations are primarily supported by the iterator options are further divided into short options and long options  short option v  long option verbose options with a single argument can use a connector to link the option and the argument  short option ohello o hello  long option outputhello output hello  dropping the connector or whitespace for short options is not allowed as it results in poor readability for options with a fixed number of arguments connectors cannot be used and all arguments must be provided at once for example with ","aoemods/zig-essence":"zig impl of relic entertainment's essence formats  zigessence lowlevel minimal allocation implementation of relics funky formats in zig with comments and clearly named variables sgas headers should work for all versions of sgas but more highlevel code and complex operations are only tested on aoe4 sgas  getting sgatool you can grab a copy of sgatool the actually executable portion of zigessence from the latest successful ci run the latest release soon or by compiling the program yourself  compiling first install zighttpsziglangorg then bash git clone httpsgithubcomaoemodszigsga cd zigsga zig build  output in zigoutbin  or to run it right away useful for developers zig build sgatool  args   using as a library see toolssgatoolzig and buildzig for an example of how zigessence can be used as a library in zig  prior art credit where credits due thanks janne for the awesome blog posthttpsjanne252devcontent2021coh3prealphaextractsga as well as the sga viewer toolinghttpsgithubcomjanne252essencearchiveviewer that inspired this effort a dozen lines of documentation are based off of a table in jannes blog post 3  license mit all files in dump are also mit licensed and generated by other sga tools please do not add any official game archives to dump ","lukewilson2002/zig-gap-buffer":"a gap buffer implementation for zig.  zig gap buffer a gap buffer implementation for zig designed to be idiomatic the design of this code is styled after the standard library  feel free to just copy the gapbufferzig source file to your project if youd rather   what is a gap buffer a gap bufferhttpsenwikipediaorgwikigapbuffer is like a growable array but the reserved space is in the middle of the data separating two sides as opposed to being fixed at the end this data structure is efficient for inserting and deleting data in close proximity gap buffers are commonly used in text editors as a simpler method than say ropeshttpsenwikipediaorgwikiropedatastructure  on each side of the gap is a string the gap of the gap buffer should be at the same location as the cursor in the text editor when the cursor moves the gap moves moving the cursor causes no allocation because it is moving data from the right side of the gap to the left side inserting text appends to the data on the left side shrinking the gap deleting text grows the gap when data inserted exceeds the gap size more space is allocated  gap buffers are not efficient for large files for more information see the gap buffer wikipedia articlehttpsenwikipediaorgwikigapbuffer   examples  there are several examples of usage in the test section at the bottom of the gapbufferzig source file  but basically heres your getting started  zig const std  importstd const gapbuffer  importgapbuffergapbuffer  pub fn main void   whatever allocator you wish to use  var arena  stdheaparenaallocatorinitstdheappageallocator defer arenadeinit  var gb  try gapbufferinitarenaallocator   defer gbdeinit  arena frees data automatically   insert some text into the currently empty buffer try gbinsertsome text  line  0 col  0   var text  try gbtoslicearenaallocator  dont forget to free the string stddebugwarnn text  some text   ","nektro/zig-js":"[wip] an ecmascript module for zig.  zigjs an ecmascript module for zig currently includes a parser  progress  build summary 37 steps succeeded 3 failed 36434696 tests passed 16 skipped 1037 failed test transitive failure  run test 18171984 passed 159 failed 8 skipped   zig test debug native success 1m maxrss2g  run test 16241983 passed 351 failed 8 skipped   zig test debug native success 50s maxrss2g  run test 202729 passed 527 failed  zig test debug native success 50s maxrss2g   built with  zig 0130  see zigmodymlzigmodyml and zigmodlockzigmodlock  license mozilla public license version 20 copyright 2023 meghan denny ","luna1996/plib":"collection of multiple modules, which includes a parser generator and parsers generated by it.  plib plib short for parser library is a collection of multiple modules which includes a parser generator and parsers generated by it plib takes a pregenerated abnf1 structure as input to produce a parser parser will take raw text as input to generate the ast2 of it  note  contribution is much welcomed but beware that currently this is just a personal project for fun  warning  lack of comments and documents you need to dig into the bare code to use and knew the logic behind the library  modules  plib3 core module parser generator  abnf4 abnf file parserserializer abnf structure generator generate itself  toml5 toml file parserserializer follow toml v100 passed all tomltest7 tests  how to  generate abnf use following command to generate the abnf structure that defines abnf syntax  zig build dstepgenabnf dnamefilename  this command runs genabnfzig6 takes srcrawfilenameabnf and outputs srcgenfilenamezig  test module use following command to test modname module  zig build dsteptest dnamemodname   tomltest to test the toml module against tomltest7 first make sure tomltest is on your path then  zig build dsteptomltest  currently all tests is passed  tomltest v20240531 creporepozigplibzigoutbintomlencoderexe using embedded tests encoder tests 182 passed 0 failed tomltest v20240531 creporepozigplibzigoutbintomldecoderexe using embedded tests valid tests 182 passed 0 failed invalid tests 371 passed 0 failed   add new parser suppose you want to add a json parser maybe not since its included in std lib you should 1 add srcrawjsonabnf which contains jsons abnf definition 2 run zig build dstepgenabnf dnamejson to generate srcgenjsonzig 3 modify zigbuild and zigbuildzong if so desired to build a json module 4 add srcmodjsonrootzig which is the root source file of json module see srcmodtomlrootzigsrcmodtomlrootzig for example 5 if you are using vscode you might also want to modify vscodetasksjson  use as dependency in your buildzigzon add zig dependencies   plib   url  httpsgithubcomluna1996abnfarchivemaintargz    in your buildzig add zig const plibdep  bdependencyplib toml  true const plibmod  plibdepmoduleplib const tomlmod  plibdepmoduletoml mainmodaddimportplib plib mainmodaddimportplib toml  in your project add zig const plib  importplib const toml  importtoml  1 httpsenwikipediaorgwikiaugmentedbackuse28093naurform 2 httpsenwikipediaorgwikiabstractsyntaxtree 3 httpsgithubcomluna1996abnftreemainsrclib 4 httpsgithubcomluna1996abnftreemainsrcmodabnf 5 httpsgithubcomluna1996abnftreemainsrcmodtoml 6 httpsgithubcomluna1996abnftreemainsrcexegenabnfzig 7 httpsgithubcomtomllangtomltest","cryptocode/amazig":"maze generator based on the origin shift algorithm amazig is a nonallocating library for generating perfect mazes for games and puzzles using the origin shift algorithm a perfect maze is one where you can pick any pair of positions and be guaranteed that these two positions are joined by a unique path such a maze is a minimum spanning tree and it is thus free of loops and isolated areas you can still add such features using the generated maze as the starting point img width300 altimage srchttpsgithubcomuserattachmentsassetsbb56d5de80f044789aa09caf297fc1f2   the origin shift algorithm the origin shift algorithm was discussed in a january 2024 video by captainlumahttpswwwyoutubecomwatchvzbxkcdvv4g0 and turns out to be a rediscovery of an algorithm described in a 1988 paperhttpspeopleeecsberkeleyeduananth19871989mctreetheorempdf on markov chains by v anantharam its been noted that origin shift is essentially the aldousbroder algorithm in reverse the key property of origin shift is that the starting point is an already perfect maze and every iteration produces a new perfect maze during the maze generation we thus never have to ask if the maze is complete  it always is however since we usually start with a trivial maze we still run the algorithm steps quite a few times to make the maze look good  seeding the maze the fact that a perfect maze generator requires a perfect maze to begin with might be the reason why it took so long for someone to consider this approach however a baseline perfect maze is trivial to contruct programmatically regardless of size the initial maze is by convention one with the origin at the lowerright corner every node points to its right neighbor except for the last one on each row which points to its neighbor below for a 25 by 12 maze the initial state looks like this                                                                                                                                                                                                                                                                                                             o  any initial perfect maze will do and in some cases it may make sense to start off with a preselected perfect maze and then perhaps mutate it per some rules this can lead to some fun game ideas you should be able to convince yourself that wherever you start navigating in this maze youll end up at the origin the simple maze mutation algorithm below maintains this property no matter how often you iterate  point the current origin to a neighbor in any random direction  make the selected neighbor point to nothing thus also making it the new origin the direction can be picked by any means but a good prng is usually used after a number of iterations the maze paths may look something like this                                                                                                              o                                                                                                                                                                                                 pick any arrow at random and follow the path youll eventually end up at the origin note that were generating the paths here not the walls the library does however offer a wallified api to make it easy to render mazes for games and puzzles origin shift is not the most timeefficient maze generator though for typical maze sizes used in games and puzzles this is unlikely to be an issue for mazes that dont change at runtime you can also pregenerate the maze either through tooling or at compiletime origin shift is a simple algorithm which allows for mazes to mutate at runtime this might be handy in certain games and puzzles moreover the generated maze have directed edges for every single position already pointing towards the origin which may represent an exit or a final destination on a level or you can completely ignore the origin after maze generation  representation in memory the maze is represented as a simple rowmajor u32 slice of size rows  columns where each item is the offset to the neighbor it points to this is all the memory ever needed by the library and the buffer is provided by the library user if needed you can convert this representation into whatever suits your project  using the library the library requires zig 014 use zig fetch save url to update your zon file alternatively just copy libamazigzig to ","ziglibs/wavefront-obj":"a parser for wavefront object files  wavefrontobj a parser for wavefront object files  dependencies requires package zlmhttpsgithubcomziglibszlm to be present ","g41797/beanstalkz":"zig client for beanstalkd - simple and fast general purpose work queue logo1p0c8c0637jpg  zig client for beanstalkd cihttpsgithubcomg41797beanstalkzactionsworkflowsciymlbadgesvghttpsgithubcomg41797beanstalkzactionsworkflowsciyml beanstalkdhttpspmatseykanetsgithubiobeanstalkddocs is  simple and fast general purpose work queue  the beauty of beanstalkd is its absolute simplicity actually you can use just 3 commands  submitput job into the queue  takereserve job from the queue for processing  delete job from the queue zig  on producer side   try producerput1 0 120 job data  on worker side var job job   try jobinitallocator defer jobdeinit try workerreserve10 job  jobbody  contains job data  process job    jobid  contains job id try workerdeletejobid  beanstalkd is the part of main distros you can install it using appropriate package managerhttpspmatseykanetsgithubiobeanstalkddocsguideinstallationhtml and of course you can use beanstalkd with dockerhttpshubdockercomsearchqbeanstalkd if you dont have experience using beanstalkd its a good idea to read  beanstalkd protocolhttpspmatseykanetsgithubiobeanstalkddocsprotocol  beanstalkd faqhttpspmatseykanetsgithubiobeanstalkddocsresourcesfaqhtml  job job is opaque array of bytes beanstalkd does not force you to use a specific data format after being placed in a queue job can be in the following states  delayed waiting for timeout before moving to next state  ready for processing  reserved processed  buried failed  job lifecycle supported by beanstalkz txt put with delay delete  delayed x   kickjob or time passes  put v reserve delete  ready  reserved x       bury   kickjob v delete   buried x   delete x   tube instead of the term queue beanstalkd uses term tube this explains the picture above tube is named queue tubes are created on demand whenever they are referenced   if a tube is empty that is it contains no ready delayed or buried jobs   and no client refers to it it will be deleted if tube was not referenced beanstalkd creates default tube every tube has 3 subqueues  delay  contains jobs in delayed state  ready  contains jobs in ready or reserved states  bury deadletter  contains failed jobs  supported commands  name  description  api    usehttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl178  set current tubequeue  usetname const u8httpsgithubcomg41797beanstalkzblobmainsrcclientzigl116   puthttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl124  submit job to current tube  putpri u32 delay u32 ttr u32 job const u8httpsgithubcomg41797beanstalkzblobmainsrcclientzigl139   watchhttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl347  subscribe to jobs submitted to the tube  watchtname const u8httpsgithubcomg41797beanstalkzblobmainsrcclientzigl243   reservehttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl203  consume job  reservetimeout u32 job jobhttpsgithubcomg41797beanstalkzblobmainsrcclientzigl272   buryhttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl310  put job to the failedburied state  buryid u32 pri u32httpsgithubcomg41797beanstalkzblobmainsrcclientzigl308   kickjobhttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl424  put delayed or failed job to the ready state  kickjobid u32httpsgithubcomg41797beanstalkzblobmainsrcclientzigl342   ignorehttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl363  unsubscribe  ignoretname const u8httpsgithubcomg41797beanstalkzblobmainsrcclientzigl383   deletehttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl271  remove job from the system  deleteid u32httpsgithubcomg41797beanstalkzblobmainsrcclientzigl369   statehttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl465  get job state  stateid u32httpsgithubcomg41797beanstalkzblobmainsrcclientzigl198   connect  connect  connectallocator allocator addr const u8 port u16httpsgithubcomg41797beanstalkzblobmainsrcclientzigl48   disconnecthttpsgithubcombeanstalkdbeanstalkdblobmasterdocprotocoltxtl728  disconnect  disconnecthttpsgithubcomg41797beanstalkzblobmainsrcclientzigl84   installation add beanstalkz to buildzigzon bach zig fetch savebeanstalkz githttpsgithubcomg41797beanstalkz  add beanstalkz to buildzig zig const beanstalkz  bdependencybeanstalkz  target  target optimize  optimize  const lib  baddsta","dantecatalfamo/9p-zig":"9p2000 protocol implemented in zig  9pzig 9p2000 protocol clientserver implemented in zig  files  srcmainzig  test case  src9pzig  library  u9fsserversh  test server script  example  client zig const std  importstd const debug  stddebug const z9p  import9pzig pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit var allocator  gpaallocator  open connection const stream  try stdnettcpconnecttohostallocator 127001 5640 defer streamclose stddebugprintconnectedn   initialize client var client  z9psimpleclientallocator streamreader streamwriter defer clientdeinit  setup protocol try clientconnectstdmathmaxintu32  login to the server with name at endpoint returning a handle const root  try clientattachnull dante  defer rootclunk catch unreachable stddebugprintroot anyn  root   return a directory handle associated with the root const topdir  try rootwalk   stddebugprinttopdir anyn  topdir   open the directory for reading try topdiropen stddebugprintopened anyn  topdir   get directory information const stat  try topdirstat defer statdeinit stddebugprintstat anyn  stat  stddebugprintsize dn  statlength   example of reading a directory or file const buf  try topdirreaderreadallallocallocator 99999 defer allocatorfreebuf stddebugprintreader anyn  buf   list files and directories in a directory const files  try topdirfiles defer filesdeinit for filesstats s  stddebugprints s6 s6 d8 sn  smode suid sgid slength sname    close a handle deallocate it try topdirclunk  open another directory const tmp  try rootwalk tmp   create a file handle is now associated with the file try tmpcreatetesting  userread  true userwrite  true groupread  true worldread  true    delete the file associated with the handle deallocate it try tmpremove const passwd  try rootwalk etc passwd  defer passwdclunk catch unreachable try passwdopen const passdata  try passwdreaderreadallallocallocator 99999 defer allocatorfreepassdata stddebugprintetcpasswdnsn  passdata  const newfile  try rootwalk tmp  defer newfileremove catch unreachable  create a file and write to it try newfilecreatenewthingtxt  userwrite  true userread  true   perm  write  const tonsofdata  u8a  10000 try newfilewriterprinttonsofdata     server wip ","kassane/wolfssl":"wolfssl library - using zig build  wolfssl embedded ssltls library the wolfssl embedded ssl libraryhttpswwwwolfsslcomproductswolfssl formerly cyassl is a lightweight ssltls library written in ansi c and targeted for embedded rtos and resourceconstrained environments  primarily because of its small size speed and feature set it is commonly used in standard operating environments as well because of its royaltyfree pricing and excellent cross platform support wolfssl supports industry standards up to the current tls 13httpswwwwolfsslcomtls13 and dtls 13 is up to 20 times smaller than openssl and offers progressive ciphers such as chacha20 curve25519 blake2b and postquantum tls 13 groups user benchmarking and feedback reports dramatically better performance when using wolfssl over openssl wolfssl is powered by the wolfcrypt cryptography library two versions of wolfcrypt have been fips 1402 validated certificate 2425 and certificate 3389 fips 1403 validated certificate 4718 for additional information visit the wolfcrypt fips faqhttpswwwwolfsslcomlicensefips or contact fipswolfsslcom  why choose wolfssl there are many reasons to choose wolfssl as your embedded desktop mobile or enterprise ssltls solution some of the top reasons include size typical footprint sizes range from 20100 kb support for the newest standards ssl 30 tls 10 tls 11 tls 12 tls 13 dtls 10 dtls 12 and dtls 13 current and progressive cipher support including stream ciphers multiplatform royalty free and an openssl compatibility api to ease porting into existing applications which have previously used the openssl package for a complete feature list see chapter 4httpswwwwolfsslcomdocswolfsslmanualch4 of the wolfssl manual  notes please read  note 1 wolfssl as of 366 no longer enables sslv3 by default wolfssl also no longer supports static key cipher suites with psk rsa or ecdh this means if you plan to use tls cipher suites you must enable dh dh is on by default or enable ecc ecc is on by default or you must enable static key cipher suites with one or more of the following defines  wolfsslstaticdh wolfsslstaticrsa wolfsslstaticpsk  though static key cipher suites are deprecated and will be removed from future versions of tls they also lower your security by removing pfs when compiling sslc wolfssl will now issue a compiler error if no cipher suites are available you can remove this error by defining wolfsslallownosuites in the event that you desire that ie youre not using tls cipher suites  note 2 wolfssl takes a different approach to certificate verification than openssl does the default policy for the client is to verify the server this means that if you dont load cas to verify the server youll get a connect error no signer error to confirm failure 188 if you want to mimic openssl behavior of having sslconnect succeed even if verifying the server fails and reducing security you can do this by calling c wolfsslctxsetverifyctx wolfsslverifynone null  before calling wolfsslnew though its not recommended  note 3 the enum values sha sha256 sha384 sha512 are no longer available when wolfssl is built with enableopensslextra opensslextra or with the macro nooldshanames these names get mapped to the openssl api for a single call hash function instead the name wcsha wcsha256 wcsha384 and wcsha512 should be used for the enum name  wolfssl release 576 dec 31 2024 release 576 has been developed according to wolfssls development and qa process see link below and successfully passed the quality criteria httpswwwwolfsslcomaboutwolfsslsoftwaredevelopmentprocessqualityassurance note  enableheapmath is deprecated  in this release the default cipher suite preference is updated to prioritize tlsaes256gcmsha384 over tlsaes128gcmsha256 when enabled  this release adds a sanity check for including wolfssloptionsh or usersettingsh pr stands for pull request and pr number references a github pull request number where the code change was added  vulnerabilities  med an ocsp non stapling issue was introduced in wolfssl version 574 when performing ocsp requests for intermediate certificates in a certificate chain this affects only tls 13 connections on the server side it would not impact other tls protocol versions or connections that are not using the traditional ocsp implementation fix in pull request 8115  new feature additions  add support for rp2350 and improve rp2040 support both with rng optimizations pr 8153  add support for stm32mp135f including stm32cubeide support and hal support for sha2sha3aesrngecc optimizations pr 8223 8231 8241  implement renesas tsip rsa public encprivate support pr 8122  add support for fedoraredhat systemwide cryptopolicies pr 8205  curve25519 generic keyparsing api added with wccurve25519keytoder and wccurve25519keydecode pr 8129  crl improvements and update callback added the functions wolfsslcertmanagergetcrlinfo and wolfsslcertmanagersetcrlupdatecb pr 8006  for dtls add serverside stateless and cid qualityoflife api pr 8224  enhancements and optimizations  add a cmake dependency check for pthreads when required pr 8162  update osseed declarations for legacy compilers and fips modules boundary not affected pr 8170  enable wolfsslalwayskeepsni by default when using enablejni pr 8283  change the default cipher suite preference prioritizing tlsaes256gcmsha384 over tlsaes128gcmsha256 pr 7771  add srtpkdf fips module v600 to checkout script for release bundling pr 8215  make library build when no hardware crypto available for aarch64 pr 8293  update assembly code to avoid uintt types for better compatibility with older c standards pr 8133  add initial documentation for writing asn template code to decode berder pr 8120  perform full reduction in scmuladd for eddsa with curve448 pr 8276  allow sha3 hardware cryptography instructions to be explicitly not used in macos builds pr 8282  make kyber and mlkem available individually and together pr 8143  update configuration options to include kybermlkem and fix defines used in wolfsslgetcurvename pr 8183  make getshortint available with wolfsslasnextra pr 8149  improved test coverage and minor improvements of x509 pr 8176  add sanity checks for configuration methods ensuring the inclusion of wolfssloptionsh or usersettingsh pr 8262  enable support for building without tls notls provides reduced code size option for nontls users who want features like the certificate manager or compatibility layer pr 8273  exposed getverify functions with opensslextra pr 8258  mldsad","gonzooo/zig-editor-core":"eventually the core of an editor, interactive shell put on top. 404 not found","cold-bytes-games/wwise-zig":"zig bindings to audiokinetic wwise  wwisezig  zig bindings to audiokinetic wwise 202319 this package implement a native zighttpsziglangorg binding for audiokinetic wwisehttpswwwaudiokineticcomenproductswwise the included c binding is designed only to be used by the zig binding if you want to expand the c binding to be fully functional please submit any pull requests each function name structs and enums has been renamed to fit the zig coding style it should be easy to map to the wwise sdk documentationhttpswwwaudiokineticcomenlibraryedgesourcesdkidindexhtml each major version of wwise is contained within a branch select the correct branch and tag when importing the library with the zig package manager the library assumes that you installed wwise using the wwise launcher we do not distribute any binary from audiokinetic this is a 3rd party binding and it is not affiliated with audiokinetic join our discordhttpsdiscordappcomapiguilds1161009516771549374widgetpngstylebanner2httpsdiscordggjmxttncbys  zig version this library uses zig nominated 2024110machhttpsmachengineorgdocsnominatedzig to install using ziguphttpsgithubcommarler8997zigup sh zigup 0140dev2577271452d22   versioning info this binding mimic the versioning of wwise but add the zig binding version at the end example 202311zig1  2023  year  1  major wwise version  1  minor wwise version  zig1  zig binding version  supported platforms  platform  architecture  tested          windows  x86 msvc abi only     windows  x8664 msvc abi only     linux  x8664     linux  aarch64     android  arm64     android  arm     android  x86     android  x8664     mac  universal x8664 and aarch64     ios      tvos      on windows the default gnu abi is not supported always use the msvc abi  on windows we always use the latest supported visual studio currently 2022  no support for consoles yet  import it in your project 1 add this repo in your buildzigzon file youll need to add the hash and update the commit hash to the latest commit in the branch zig wwisezig   url  httpsgithubcomcoldbytesgameswwisezigarchive90cdc6877369b55af3ee2dfcf091dc547ed59f03targz hash  122053d2ec67ebe8a47b45ac32ddf41283b27c3519196b6730d9b826a463d1294299   2 import the dependency in your buildzig see the usage section for the list of available options zig const std  importstd const wwisezig  importwwisezig pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const wwisedependency  bdependencywwisezig  target  target optimize  optimize usecommunication  true usedefaultjobworker  true usespatialaudio  true usestaticcrt  true includefilepackageioblocking  true configuration  profile staticplugins  asconst const u8  aktonesource akparametriceqfx akdelayfx akpeaklimiterfx akroomverbfx akstereodelayfx aksynthonesource akaudioinputsource akvorbisdecoder   const exe  baddexecutable name  wwisezigdemo rootsourcefile   path  srcmainzig  target  target optimize  optimize  exerootmoduleaddimportwwisezig wwisedependencymodulewwisezig    usage available options  option  values  description          wwisesdk  const u8  override the path to the wwise sdk by default it will use the path in environment variable wwisesdk   configuration  debug profile release  which library configuration of wwise to use default profile   usestaticcrt  bool  on windows do you want to use the staticcrt build of wwise default true   usecommunication  bool  enable remote communication with wwise authoring disabled by default on release configuration so you can leave it true at all time default true   usedefaultjobworker  bool  enable usage of the default job worker given by audiokinetic default false   usespatialaudio  bool  enable usagee of the spatial audio module default false   stringstacksize  usize  stack size to use for functions that accepts akoschar and nullterminated strings default 256   includedefaultiohookdeferred  bool  include the default io hook deferred default false   includefilepackageiodeferred  bool  include the file package io hook deferred default false   staticplugins  const const u8  list of static plugins to link to default empty  we recommend using ak as your import name to match closely with the c api zig const ak  importwwisezig pub fn main void  var memorysettings akakmemsettings  undefined akmemorymgrgetdefaultsettingsmemorysettings try akmemorymgrinitmemorysettings defer akmemorymgrterm   you can also look at the integration demo ported to zig here for how the api is used in a sample application httpsgithubcomcoldbytesgameswwisezigdemo  handling akoschar and c nullterminated strings wwisezig is trying to save allocations when calling functions that accepts strings by using stackallocated space to convert to const akoscharconst char or use a fallback allocator if the string is bigger than the stack size you can customize the size allocated by modifying the stringstacksize when importing the dependency each function that handle strings looks similar to this zig pub fn dumptofilefallbackallocator stdmemallocator filename const u8 void  var stackcharallocator  commonstackcharallocatorfallbackallocator var allocator  stackcharallocatorget const filenameoschar  try commontooscharallocator filename defer allocatorfreefilenameoschar cwwisecakmemorymgrdumptofilefilenameoschar    handling c inheritance you can create derivated zig struct from wwise c clases that have virtual methods each binded class has a functiontable object like iakiohookdeferredbatch here zig pub const iakiohookdefe","allyourcodebase/zstd":"zstd ported to the zig build system cihttpsgithubcomallyourcodebasezstdactionsworkflowsciyamlbadgesvghttpsgithubcomallyourcodebasezstdactions  zstd this is zstdhttpsgithubcomfacebookzstd packaged for zighttpsziglangorg  installation first update your buildzigzon   initialize a zig build project if you havent already zig init zig fetch save githttpsgithubcomallyourcodebasezstdgit157  you can then import zstd in your buildzig with zig const zstddependency  bdependencyzstd  target  target optimize  optimize  yourexelinklibraryzstddependencyartifactzstd  ","jkoop/zigqlite":"an sqlite binding for zig.  zigqlite  note  forked from httpschiselappcomuserjavierrepositoryzigqlite an sqlitehttpssqliteorg binding for zighttpsziglangorg  install sh zig fetch save httpsgithubcomjkoopzigqlitearchivecommitzip  zig  buildzig before binstallartifactexe const zigqlite  bdependencyzigqlite  target  target optimize  optimize modulezigqlite exelinksystemlibraryc exelinksystemlibrarysqlite3  apt install libsqlite3dev exerootmoduleaddimportzigqlite zigqlite   usage see also the api documentationhttpsjoekoopcomzigqlite to open a database file at the given path creating it if needed zig var db  try sqlitedbopenallocator databasedb defer dbclose catch unreachable  todo figure out if i can handle this error or not  create a statment zig var stmt  try dbprepselect  from iguanas where name    the sql can include positional arguments like  or named arguments like argname once prepared the statement is executed with the exec function zig  var cursor  try stmtexecargs rowtype var cursor  try stmtexeczero struct  name u8 photourl u8   where args is a tuple or structure holding arguments to fill in the sql command if field names match named arguments they are used regardless of order otherwise the position in the tuple or struct determines the field it fills the rowtype parameter is a struct type each returned row will be a value of this type each field will hold a column from the row in order if there are more fields than columns the extra fields would be filled with their respective default value if declared in the struct the value returned by the stmtexec function is used to retrieve results row by row with the fetch function zig while try cursorfetch iguana  stddebugprintss picture is at sn  iguananame iguanaphotourl    ","games-by-mason/glfw-zig":"glfw ported to the zig build system.  glfw zig glfw ported to the zig build system contributions or bug reports are welcome if behavior differs from official build system a notable addition to the official options is provideheaders which fetches all windowing headers not already provided by zig from the official sources enabling cross compilation macos frameworks are not provided this option defaults to true  version see buildzigzonbuildzigzon for current version info  known differences  the library is always called libglfw3 in contrast with the official build process which sometimes names it libglfw3 and sometimes names it libglfw  tests documentation and examples are not built  some mingw build workarounds are not ported  the official build process gives shared library artifacts an icon that is not done here  known issues microsoft shuffled the button layouts for some of their controllers in a recent firmware update breaking existing mappings on linux this has been patchedhttpsgithubcommdqincsdlgamecontrollerdbpull764 in sdlgamecontrollerdb which glfw should pull in on the next release in the mean time you can manually apply the patch at runtime zig if cglfwupdategamepadmappings 030000005e040000120b00000f050000xbox series controllerab0bb1backb6dpdownh04dplefth08dprighth02dpuph01guideb8leftshoulderb4leftstickb9lefttriggera2leftxa0leftya1rightshoulderb5rightstickb10righttriggera5rightxa3rightya4startb7xb2yb3platformlinux 030000005e040000120b000015050000xbox series controllerab0bb1backb6dpdownh04dplefth08dprighth02dpuph01guideb8leftshoulderb4leftstickb9lefttriggera2leftxa0leftya1rightshoulderb5rightstickb10righttriggera5rightxa3rightya4startb7xb2yb3platformlinux   cglfwtrue  logwarnglfwupdategamepadmappings failed     how to change the glfw version the version of glfw is set in buildzigzonbuildzigzon the official build process for glfw generates some files at build time these have been cached in generated when changing glfw versions you may have to regenerate them via the official build process ","alexnask/lepto.zig":"date and time library for zig, inspired by c++20 std::chrono 404 not found","nektro/zig-zstd":"this repository has no description.  zigzstd zstd wrapper for zig httpsgithubcomfacebookzstd zstd version 150  license mit ","mattnite/tar":"tar library that has a bad interface ngl  tar tar library that has a bad interface ngl ","ikks/tldrtranslate":"a helper on tldrtranslation that uses argos  tldr helper translation this is a helper to translate tldr pageshttpstldrsh collaborators can introduce this tool in the workflow to speed up the translation processhttpsgithubcomtldrpagestldrblobmaincontributingmdtranslations take a look to see how the tool works httpsgithubcomuserattachmentsassetsb81b3895aa8d443b84d5057d9ecc4041  supported languages  ar  bn  ca  cs  da  de  es  fa  fi  fr  hi  id  it  ja  ko  nl  pl  ptbr  ptpt  ro  ru  sv  th  tr  uk  zh  zhtw the workflow is  tldrtranslate translates from english to the language you desire  with your team you can fix the output and make a pull request  download and usage  download for your platform from the releases pagehttpsgithubcomikkstldrtranslatereleases take the latest one  download argosapihttpsgithubcomjarocargosapi and argostranslatehttpsgithubcomargosopentechargostranslate and make the api run if you are having problems getting the api and argostranslate to run please ask in httpsappelementioroomtldrpagesmatrixorg  maybe there is someone that can put a server for your use  running suppose you aim to translate pagescommonargostranslatemd to it  you will run  tldrtranslate l it pagescommonargostranslatemd  tldrtranslate will output the translation to pagesitcommonargostranslatemd overwriting the file if it existed you can use relative or absolute paths as soon as you include the hierarchy beginning with the pages directory tldrtranslate takes into account the following envvars  lang if set and with a supported language is used unless tldrlang is set or l option is passed  nocolor if set the output with y option will not show colors respecting original format you can set the following envvars to change the default configurations  tldrlang defaults to es spanish  tldrargosapiurlbase defaults to localhost  tldrargosapiport defaults to 8000  tldresdbpath your spanish db to present singular verb tweak has no default each one of them is superseeded by the option of the command line  l es  h localhost  p 8000  d pathtotldrtranslationdb  building from source  you need zig 0130httpsziglangorgdownload to compile tldrtranslate  clone this repository and issue  zig build  under zigoutbin should be present tldrtranslate for your use  argosapihttpsgithubcomjarocargosapi translate instance running in port 8000  if you are translating to spanish download datahttpsigortamarapatinoorgtldrtranslateresourcesesdatamdbgz to tweak the verb inflection and use the d pathtodirectoryholdingdata if there is an error you will be instructed on how to install the inflection db feel free to clone and modify to suit your needs ideas bug reports and prs are welcome  running an argos api instance you will need to have python argostranslate and apiargos or docker and some gigas of space for the models and the needed infrastructure have an argosapihttpsgithubcomjarocargosapi locally to run it with your language pairs you can issue on your virtualenv  fastapi dev main   about languages  adding a language if your language is in the list of supported languages by argostranslate just download the required package to your running argosapi environment for example for portuguese argospm install translateenpt which happens to be the same for both pt or br if your language is not supported by argostranslate you can open an issue in argostranslatehttpsgithubcomargosopentechargostranslatediscussions91  adding common replacements for your language if your will is to have consistent translations there are some words that can be replaced before the translation process please look heredocslanguagereplacementsmd  resources  spanish verbs conversionhttpsigortamarapatinoorgtldrtranslateresourcesesdatamdbgz based on compjugador the data is covered by gpl and can be used optionally in the case of basic verbs inflection for spanish  argostranslatehttpsgithubcomargosopentechargostranslate with tons of work  argosapihttpsgithubcomjarocargosapi  tldr pageshttpstldrsh ","travisstaloch/flagset":"a command line flag parsing package  flagset a command line flag parsing package  goals simplicity fast compile times and small binary size with measured use of comptime  features  auto generated usagehelp text  format width specifier controls column width ie  25 sets width to 25  positional unnamed flags may occur in any position not just after named flags positional flags are always parsed in declaration order  compososition parse methods return unparsed args or a modified iterator this allows for composing flagsets by passing parseresultunparsedargs on to further parse methods with different flagsets  flag parsing stops when all flags have been parsed just before the first nonflag argument  is a nonflag argument or after the terminator   parse into pointers by passing optional runtime parseoptionsptrs fields  custom flag parsing with flagsetflagoptionsparsefn this also makes it possible to parse into other types such as structs  parse integers from utf8 strings by setting flagsetflagoptionsintfromutf8  abbreviated short bool flags abc is parsed the same as a b c  accept command line args as slice or iterator with parsefromslice and parsefromiter  supports any iterator with a fn next const u8 such as stdprocessargs stdmemtokenize stdmemsplit  use console zig fetch save githttpsgithubcomtravisstalochflagset  zig  buildzig const flagsetdep  bdependencyflagset  target  target optimize  optimize  exerootmoduleaddimportflagset flagsetdepmoduleflagset  srcdemozigsrcdemozig zig const std  importstd const flagset  importflagset pub fn main void  const flags  flagsetflag initbool flag  short  f desc  flag description  initu32 count  desc  count description  initenum  one two  enum  kind  positional desc  enum description  initconst u8 optstring  short  s desc  optstring description  initconst u8 string  desc  string description  initconst u8 posstr  kind  positional desc  posstr description  initu8 withdefault  desc  withdefault description defaultvalueptr  asu8 10   var args  try stdprocessargswithallocatorstdheappageallocator  todo use a better allocator defer argsdeinit var result  flagsetparsefromiterflags args  catch e switch e  errorhelprequested   stddebugprint 45 flagsetfmtusageflags full  usage demo options    return  else  return e  stddebugprintparsed n flagsetfmtparsedflags resultparsed  stddebugprintunparsed args   while resultunparsedargsnext arg stddebugprints  arg stddebugprintn    console  zig build demo  h usage demo options options help h show this message and exit flag noflag f flag description count u32 count description enumonetwo enum description optstring nooptstring s string optstring description string string string description posstrstring posstr description withdefault u8 withdefault description  zig build demo  flag count 10 two nooptstring string s posstr foo bar parsed flag count 10 two nooptstring string s posstr withdefault 10 unparsed args foo bar   more examples  srctestszigsrctestszig  references  httpsgithubcomgamesbymasonstructopt  httpspkggodevflag  todo  support parsing lists","tiawl/shaderc.zig":"shaderc packaged for @ziglang  shaderczig this is a fork of googleshaderc1 packaged for zig2  why this fork  the intention under this fork is to package googleshaderc1 for zig2 so  unnecessary files have been deleted  the build system has been replaced with buildzig  a cron runs every day to check googleshaderc1 then it updates this repository if a new release is available  how to use it the goal of this repository is not to provide a zig2 binding for googleshaderc1 there are at least as many legit ways as possible to make a binding as there are active accounts on github so you are not going to find an answer for this question here the point of this repository is to abstract the googleshaderc1 compilation process with zig2 which is not new comers friendly and not easy to maintain to let you focus on your application so you can use shaderczig  as raw no available example open an issue if you are interested in we will be happy to help you  as a daily updated interface for your zig2 binding of googleshaderc1 see here11 for a private usage  dependencies the zig2 part of this package is relying on the latest zig2 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  googleshaderchttpsgithubcomtiawlshaderczigblobtrunkreferencesshaderc  cicd reminder these repositories are automatically updated when a new release is available  tiawlspaceporn3 this repository is automatically updated when a new release is available from these repositories  googleshaderc1  tiawltoolbox4  tiawlglslangzig5  tiawlspirvzig6  tiawlspacepornactionbot7  tiawlspacepornactionci8  tiawlspacepornactioncdping9  tiawlspacepornactioncdpong10  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomgoogleshaderc 2httpsgithubcomziglangzig 3httpsgithubcomtiawlspaceporn 4httpsgithubcomtiawltoolbox 5httpsgithubcomtiawlglslangzig 6httpsgithubcomtiawlspirvzig 7httpsgithubcomtiawlspacepornactionbot 8httpsgithubcomtiawlspacepornactionci 9httpsgithubcomtiawlspacepornactioncdping 10httpsgithubcomtiawlspacepornactioncdpong 11httpsgithubcomtiawlspacepornblobtrunksrccompilerbindingsshadercshaderczig ","arats-io/zig-regex-oniguruma":"zig regex wrapper for oniguruma  zig regex wrapper for oniguruma using httpsgithubcomkkosoniguruma oniguruma is a modern and flexible regular expressions library it encompasses features from different regular expression implementations that traditionally exist in different languages  usage include the libregexoniguruma into the buildzigzon file  dependencies   libregexoniguruma   url  httpsgithubcomaratsiozigregexonigurumaarchiverefstagsv010targz hash  12201fd38f467e6c64ee7bca53da95863b6c05da77fc51daf0ab22079ede57cbd4e2    ","allyourcodebase/valgrind.h":"provides valgrind/valgrind.h  valgrindh this is a minimal source repository that provides c include valgrindvalgrindh   process although this file is technically autogenerated in the upstream repository the only thing that is populated during this configuration is the version numbers so in this package we simply hardcode those version numbers ","softprops/zig-bson":"zig library for working with bson data 🍃 h1 aligncenter zig bson h1 div aligncenter zig library bindings for a hrefhttpsbsonspecorgbsona a binary json serialization format div  mainhttpsgithubcomsoftpropszigbsonactionsworkflowsciymlbadgesvghttpsgithubcomsoftpropszigbsonactionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropszigbson releasehttpsimgshieldsiogithubvreleasesoftpropszigbson zig supporthttpsimgshieldsiobadgezig0130blacklogozighttpsziglangorgdocumentation0130  examples see examples directory   installing create a new exec project with zig init copy an example from the examples directory into your into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save httpsgithubcomsoftpropszigbsonarchiverefstagsv014targz  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  bson      uri to download  url  httpsgithubcomsoftpropszigbsonarchiverefstagsv014targz    hash verification  hash         the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigbsonarchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigbsonarchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference dep from buildzigzon  const bson  bdependencybson   target  target  optimize  optimize  modulebson var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the module to executable  exerootmodeaddimportbson bson binstallartifactexe     for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024 ","zhuyadong/closure.zig":"closure for zig.  closurezig now we can use closure in zig   example up value support zig const t  stdtesting var a i32  0  test upvalue   a 1  for a  p 1  v var clo  closureinittallocator struct  pub fn funcp i32 v i32 void  p  v    a 1  clocall clodeinit try texpecta  1   example up value  call argument zig const t  stdtesting var a i32  0 var b i64  0  notearg must be the first parameter and the type must be stdmetatuple  parameter1 for upvalue 5  va 6  vb clo  closureinittallocator struct  pub fn funcarg stdmetatuple i32 i64  va i32 vb i64 void  arg0  va arg1  vb    5 6  clocall a b  clodeinit try texpecta  5 and b  6   example up value on stack zig test upvalue on stack with call arg note dont need to call clodeinit here but its safe to call and its just do nothing clo  closuremakestruct  pub fn funcarg stdmetatuple i32 i64  va i32 vb i64 void  const pa const pb  arg pa  va pb  vb   stdmetatuple i32 i64  9 10  clocall a b  try texpecta  9 and b  10   example use invoke for return bool zig a  0 clo  closuremakestruct  pub fn funcarg tuplei32 bool  arg0  11 return false    try texpectcloinvokea  false try texpecta  11 clo  closuremakestruct  pub fn funcarg tuplei32 void  arg0  11     invoke on void return function always return true try texpectcloinvokea  true try texpecta  11   example make the parameters of the closure clearly readable zig const data  struct  clo closureofarg32  i32 arg64  i64 ret  i64  try stdtestingexpecttypeofdataclo  closure  more examples in source code heresrcrootzig ","olksdr/sentry-native":"sentry native packaged for zig.  sentry native this is the sentrynativehttpsgithubcomgetsentrysentrynative packaged for zighttpsziglangorg this is a build wrapper which prepars the library which can be linked and exposes the sentry native c api note this will work for simple usecases but this still needs more testing  installation first add the dependencies to your project shell  zig fetch save githttpsgithubcomolksdrsentrynativegit  and after you can import sentrynative in yout buildzig note the dash  is replaced with underscore  in the name zig const sentrynative  bdependencysentrynative  target  target optimize  optimize  only if you run on unixlike system you might want to link with libcurl deafult is false curl  true  only if you are on windows default false winhttp  true   link the sentry library to your exe exelinklibrarysentrynativeartifactsentry  add the imports to the root module so you can use those in your code eg  const sentry  importsentry exerootmoduleaddimportsentry sentrynativemodulesentry  you might have to install additional dependencies and makes sure the your dev environment is configured and all paths and includes are inplace different systems will have different requirements eg on windows you might have to install windowssdk and make sure that path is properly set up etc  maintenance when updating sentrynative to the new relase or commit make sure to check and update the list of file c files and also make sure that includes are correct when updating to the new release make sure to change also the version in the buildzig update fetching new sentrynative commit  known limitations currently only none or inproc enabled by default backends are supported  todo as part of this build the following items still on the list    support crashpad backend    support breakpad backend ","travisstaloch/static-map":"a generic hashmap backed by static memory  staticmap a generic hashmap in zig similar to stdarrayhashmap  use console zig fetch save githttpsgithubcomtravisstalochstaticmap  zig  buildzig const staticmap  bdependencystaticmap  exerootmoduleaddimportstaticmap staticmapmodulestaticmap  zig  mainzig test usage   const staticmap  importstaticmap  init const map  staticmapstaticstringmapu8 16 var map  mapinit  putgetcontains try mapputabc 1 try testingexpectmapcontainsabc try testingexpectequal1 mapgetabc  getorput const gop  mapgetorputabc try testingexpectequalexisting gopstatus gopvalueptr  2 try testingexpectequal2 mapgetabc  putassumecapacity mapputassumecapacitydef 3 try testingexpectequal3 mapgetdef  putnoclobber mapputnoclobberghi 4 try testingexpectequal4 mapgetghi  getptr mapgetptrdef  5 try testingexpectequal5 mapgetdef  count try testingexpectequal3 mapcount  iterator var iter  mapiterator var count u8  0 while iternext kv  count  1  try stdionullwriterprints   kvkey kvvalue   try testingexpectequalmapcount count    tests srctestszigsrctestszig console zig build test   bench this is a plot of data generated by srcbenchzigsrcbenchzig you can generate some data by running benchshbenchsh  releasefast screenshot4httpsgithubcomuserattachmentsassets2bc4b4ca571f4145873a8bf19f5c42c7  debug screenshot2httpsgithubcomuserattachmentsassets983c04d8fd2a4755ad69a8d94de3f28f  prior art httpsgithubcomvexucomptimehashmap ","nektro/zig-urlvalues":"this repository has no description.  zigurlvalues","leecannon/zig-pc_keyboard":"ps/2 keyboard decoder  zigpckeyboard a zig reimplementation of the pckeyboardhttpsgithubcomrustembeddedcommunitypckeyboard rust crate  how to get  gyro gyro add leecannonpckeyboard  zigmod zigmod aq add 1leecannonpckeyboard  git  submodule git submodule add httpsgithubcomleecannonzigpckeyboard zigpckeyboard  clone git clone httpsgithubcomleecannonzigpckeyboard ","liyu1981/tmpfile.zig":"a convenient util to use tmp files with zig  tmpfilezig  why so far as i found there is no good lib in zig for creating temp files so i write one for myself this util file provides methods to create temp dir or temp file in system temp folder less tedious and manageable see code for example zig var tmpfile  try thismoduletmpfile defer tmpfiledeinit  file will be deleted when deinit try tmpfilefwriteallhello world try tmpfilefseekto0 var buf 4096u8  undefined var readcount  try tmpfilefreadallbuf try testingexpectequalreadcount hello worldlen try testingexpectequalslicesu8 buf0readcount hello world  or complexer zig var tmpdir  try thismoduletmpdirowned defer  tmpdirdeinit tmpdirallocatordestroytmpdir  var tmpfile  try thismoduletmpfile tmpdir  tmpdir  defer tmpfiledeinit try tmpfilefwriteallhello world try tmpfilefseekto0 var buf 4096u8  undefined var readcount  try tmpfilefreadallbuf try testingexpectequalreadcount hello worldlen try testingexpectequalslicesu8 buf0readcount hello world var tmpfile2  try thismoduletmpfile tmpdir  tmpdir  defer tmpfile2deinit try tmpfile2fwriteallhello world2 try tmpfile2fseekto0 readcount  try tmpfile2freadallbuf try testingexpectequalreadcount hello world2len try testingexpectequalslicesu8 buf0readcount hello world2   useage use zig packager bash zig fetch save httpsgithubcomliyu1981tmpfilezigarchiverefsheadsmaintargz  or lock on any commit as bash zig fetch save zig fetch httpsgithubcomliyu1981zcmdzigarchivecommit hashtargz  this lib is also provided for buildzig use like zig  in buildzig const tmpfile  importtmpfiletmpfile   license mit ","malcolmstill/qbe-zig":"qbe (https://c9x.me/compile/) via zig  qbe via zig this repo provides qbe installable  dependable on via the zig package manager qbe can be consumed either as a binary or a library  qbe binary the qbezig provides an artifact qbe that some other module can depend on zig  depend on qbezig via a buildzigzon const qbe  bdependencyqbezig  target  target optimize  optimize   extract the qbe binary artifact const qbebin  qbeartifactqbe   qbe library the upstream qbe repository does not expose a anyway of using qbe as a library qbezig offers the ability to call qbe as library by more or less duplicating the existing mainc as libc and replacing the main function with libemit a tiny wrapper around libemit is then provided via srcqbezig to use qbe as a library in a zig project in your buildzig have something like zig  depend on qbezig via a buildzigzon const qbe  bdependencyqbezig  target  target optimize  optimize  const exe  baddexecutable  link against the static library exelinklibraryqbeartifactqbelib  expose to your exe code exerootmoduleaddimportqbezig qbemoduleqbezig  in your zig code import the module zig const qbe  importqbezig  call emit where you need zig qbeemittestssa tests  see example for full example of library usage ","freakmangd/bitmatch":"bitmatching in zig  bitmatch simple zig library based off of the rust crate bitmatchhttpsgithubcomporglezompbitmatch zig const match  bitmatch00ooaabb 0b00111001 orelse return errorexpectednonnull try stdtestingexpectequal0b11 matcho try stdtestingexpectequal0b10 matcha try stdtestingexpectequal0b01 matchb   installing  zig fetch save githttpsgithubcomfreakmangdbitmatch  buildzig zig const bitmatch  bdependencybitmatch  exerootmoduleaddimportbitmatch bitmatchmoduleroot   features the main functions of the library are bitmatch and bitmatchpacked both functions take a match string and a byte to match against the match string must be comptime known bitmatch returns struct each field is of type u8 bitmatchpacked returns packed structu8 each field is the smallest int type required to hold all bits matched by the fields identifier zig  nonpacked const match  bitmatchaaaab010 0b10001010 orelse return errorexpectednonnull try stdtestingexpecttypeofmatcha  u8 try stdtestingexpecttypeofmatchb  u8 try stdtestingexpectequal0b00001000 matcha try stdtestingexpectequal0b00000001 matchb  packed const match  bitmatchpackedaaaab010 0b10001010 orelse return errorexpectednonnull try stdtestingexpecttypeofmatcha  u4 try stdtestingexpecttypeofmatchb  u1 try stdtestingexpectequal0b1000 matcha try stdtestingexpectequal0b1 matchb  no identifiers const match  bitmatch00011010 0b00011010 orelse return errorexpectednonnull try stdtestingexpectequal0 sizeoftypeofmatch   match bits 0s and 1s in the match string are the only characters that decide whether a byte matches the pattern defined zig  this match returns null as were expecting the last bits to be 1011  the match fails here v if bitmatchaaaa1011 0b10101001  return errorexpectednull   identifiers an identifier refers to an alphabetic character inside the match string they are allowed to be in the range az and az an identifier captures the bits that share their position all identifiers will be fields of the return value there is a max of 8 identifiers per match string as this library assumes 8 bits in a byte zig const match  bitmatchaaaabbbb 0b01011010 orelse return errorexpectednonnull try stdtestingexpectequal0b0101 matcha try stdtestingexpectequal0b1010 matchb const match  bitmatchabcdefgh 0b01011010 orelse return errorexpectednonnull try stdtestingexpectequal0b0 matcha try stdtestingexpectequal0b1 matchb try stdtestingexpectequal0b0 matchc   try stdtestingexpectequal0b0 matchh  identifiers are casesensitive const match  bitmatchaaaaaaaa 0b00001111 orelse return errorexpectednonnull try stdtestingexpectequal0b0000 matcha try stdtestingexpectequal0b1111 matcha  identifiers can be split as many times as is necessary they will capture the bits that share their position and concat them zig const match  bitmatchaabbaabb 0b10010011 try stdtestingexpectequal0b1000 matcha try stdtestingexpectequal0b0111 matchb   underscores underscores in match strings are ignored and are more lenient than zigs integer literal underscores you can have as many as you want for the purposes of increasing readability these match strings function the same aaaabbbb aaaabbbb aaaabbbb  wildcards the  character is used as a wildcard matching either a 0 or 1 without capturing it zig const match  bitmatchaa 0b01001101 orelse return errorexpectednonnull try stdtestingexpectequal0b01 matcha  if the match string is less than 8 characters the match string is leftpadded with wildcards making aa01 equivalent to aa01 zig const match  bitmatchaa01 0b00001101 orelse return errorexpectednonnull try stdtestingexpectequal0b11 matcha   more examples see the bottom of srcinitzig for more testable examples you can run them with zig build test ","jiacai2050/zig-rocksdb":"rocksdb binding for zig 404 not found","isaac-westaway/zlog":"appplication-level logging library for zig overview  zlog is an applicationlevel logging library that provides some apis to write logging message to an output file my inspiration came from using googles glog library writing some cool applications with the ability to log actions easily so credits go to google this code was also taken from my zigwm project which needed logging to figure out what was going on  tip  like glog this library is also threadsafe getting started  you can install the library by running bash zig fetch save githttpsgithubcomisaacwestawayzlog  then add the dependency in your buildzig file zig const zlog  bdependencyzlog  target  target optimize  optimize  exerootmoduleaddimportzlog zlogmodulezlog  usage   quickstart you can get started by initializing the logging file zig pub fn main void  var gpa  stdheapgeneralpurposeallocator defer stddebugassertgpadeinit  ok var allocator  gpaallocator try loggerinitializeloggingallocator  absolutepath  homeisaacwestawaydocumentszigzlog filename  log   severity  info   defer loggerlogclose   and then log a message to the logfile zig  var log  loggerlog const str const u8  world const timestamp i64  stdtimetimestamp const currenttime const u8  loggertimestamptodatetimeallocator timestamp defer allocatorfreecurrenttime try loginfomain hello s  str  try logwarnmain current timestamp d  timestamp  try logerrmain hello s at s  str currenttime   will crash the program upon logging try loggerlogfatalmain i am crashing now   output  infomain202491703157t250650hello world warnmain202491703157t250650current timestamp 1726533117 errormain202491703157t250650hello world at 202491703157 fatalmain202491703157t250650i am crashing now   using a custom prefix zig  the callback must have these two arguments fn testlogprefixallocator stdmemallocator loglevel const u8 const u8  const currenttime  loggertimestamptodatetimeallocator stdtimetimestamp const str u8  stdfmtallocprintallocator s some extra messages such as the time s   loglevel currenttime  catch  return undefined  return str  pub fn main void  var gpa  stdheapgeneralpurposeallocator defer stddebugassertgpadeinit  ok var allocator  gpaallocator try loggerinitializeloggingallocator  absolutepath  homeisaacwestawaydocumentszigzlog filename  log   severity  info   try loggerinstalllogprefixtestlogprefix defer loggerlogclose var log  loggerlog const str const u8  world const timestamp i64  stdtimetimestamp const currenttime const u8  loggertimestamptodatetimeallocator timestamp defer allocatorfreecurrenttime try loginfomain hello s str try logwarnmain current timestamp d timestamp try logerrmain hello s at s  str currenttime   will crash the program upon logging try loggerlogfatalmain i am crashing now    output  info some extra messages such as the time 202491703251 hello world warn some extra messages such as the time 202491703251 current timestamp 1726533171 error some extra messages such as the time 202491703251 hello world at 202491703251 fatal some extra messages such as the time 202491703251 i am crashing now  todo   some better test cases","travisstaloch/case":"a case conversion and detection library in zig with a c api  case a case conversion and detection library in zig cases supported camelcase pascalcase snakecase constantcase kebabcase headercase lower case upper case capital case  libzigsrclibzig uses readers and writers throughout supports nonallocating and comptime use  tocase reader writer  converts to case from reader into writer  oftext  return case of text may be unknown  buftobuf case text  writes converted text to buf in specified case  alloctoallocator case text  allocates a buffer and writes converted text to buffer in specified case  alloctoz  same as allocto but null terminated  comptimetocase text  allocates buffer at comptime  comptimetolencase text len  same as comptimeto but allows user to specify buffer len  lengthcase text  returns length needed to convert text to case  iscameltext  true if text case is camel similar methods for each case  upperreader writer opts camelreader writer  conversion functions for each case upper lower and capital have an additional opts param  toextcase reader writer opts there are variants of all to methods such as toext lengthext these are for upper lower and capital cases when you want to specify options  opts options  fill  string used to replace non alpha numeric characters default empty when empty dont replace non alpha numeric characters  apostrophe  keep  remove default keep  c api  capizigsrccapizig  exports methods similar to most public zig methods above  casehsrccaseh  case enum guaranteed to be in sync with case enum in libzig  tests  zig build test runs the following  testszigsrctestszig  pretty thorough zig tests which also test the c api methods  testcsrctestc  a small demo program which exercises the c api  build  zig build creates zigoutliblibcasea and zigoutincludecaseh  zig package manager support  related nbubnacasehttpsgithubcomnbubnacase  inspiration thanks to cmgriffinghttpsgithubcomcmgriffing for suggesting this ","matthewjohnheath/zunit":"quantities with units of measure for unit-safe arithmetic in zig  zunit this is a library for creating and operating upon floatingpoint values with units of measure attached eg 82 centimetres as a f32 or 200 seconds as a comptimefloat its aims are 1 catch errors in dimensions or units at compile time 2 never have unexpected type mismatches due to floating point errors 3 have expected ziglike behaviour peertype resolution for scalar types and no hidden conversions  the rules  you can add subtract or compare only quantities with the same units zig try testingexpectmetres10gtmetres10 try testingexpectpixels10subpixels05eqlpixels05 will not compile if below is uncommented try testingexpectmetres10gtpixels10 try testingexpectmetres10ltinches10   you can convert only between properties of the same dimensions  zig try testingexpectbytes10convertbitoff32eqlbits80  will not compile if the following isi uncommented try testingexpectbytes10convertmoleoff32eqlmoles80   you can multiply and divide all quantities with ordinaryordinaryexplanation units by other such quantities and by floats the return type of the operation will be worked out for you zig const speed  metres125divseconds025 try testingexpectspeedeqlmetrepersecondtimes50 try testingexpectspeedmul20eqlmetrepersecondtimes100   you can raise quantities to an arbitrary rational power providing the power is known at compile time zig try testingexpectmetreoff32init20powi3eqlmetretothe3times80 try testingexpectsecondoff32init40root2eqlsecondroot2times20   at runtime values are just floats and operations are just floating point operations  you can apply scalar multiples to units to create new units eg kilometres or furlongs from metres degrees from radians zig pub const rot  radiantimesfloatprefix20  stdmathpi pub const rot  rottimes pub const degree  rottimesintprefix360reciprocal pub const degrees  degreetimes test degrees  const epsilon  00000001 try testingexpectstdmathapproxeqabsf32 degrees1800convertradianoff32value stdmathpi epsilon    you can create new base units as needed zig const iguana  baseunitiguana const rateofiguanas  iguanatimes10divseconds05 try testingexpectrateofiguanaseqliguanapersecondtimes20   normal zig peertype resolution should apply between the scalar types as long as the units are right zig try testingexpectmetreoff16init20eqlmetreoff64init20   unexpected type mismatches due to floatingpoint errors on powers scalar prefixes etc cannot possibly occur  a nameordinaryexplanationa the exception is properties with an offset from their base unit like degrees celsius and fahrenheit the maths and physics of multiplying these without first converting them to the base unit is too weird ","kassane/standalone-server":"asio standalone c++ http/s server (uses zig build-system)  standaloneserver a very simple fast multithreaded platform independent http and https server and client library implemented using c17 and asio standalone created to be an easy way to make rest resources available from c applications  requires  zighttpsziglangorgdownload toolchain v0140 or master  features  asynchronous request handling  thread pool if needed  platform independent  http11 supported including persistent connections  https supported  chunked transfer encoding and serversent events  can set timeouts for requestresponse and content  can set max requestresponse size  sending outgoing messages is thread safe  client creates necessary connections and perform reconnects when needed  usage see httpexamplescppexampleshttpexamplescpp or httpsexamplescppexampleshttpsexamplescpp for example usage the following server resources are setup using regular expressions to match request paths  post string  responds with the posted string  post json  parses the request content as json and responds with some of the parsed values  get info  responds with information extracted from the request  get match09  matches for instance match123 and responds with the matched number 123  get work  starts a thread simulating heavy work and responds when the work is done  get  a special defaultresource handler is called when a request path does not match any of the above resources this resource responds with the content of files in the webfolder if the request path identifies one of these files  dependencies  standalone asio  for https openssl libraries installation instructions for the dependencies needed to compile the examples on a selection of platforms can be seen below default build with standalone asio is assumed  debian based distributions sh sudo aptget install libssldev   arch linux based distributions sh sudo pacman s openssl   macos sh brew install openssl   compile and run choose releasetype  releasesafereleasefastreleasesmall compile with a c17 compliant compiler like zig c eql to clang stdliblibc fuseldlld sh zig build doptimizereleasetype   http run the server and client examples zig build httpexamples doptimizereleasesafe direct your favorite browser to for instance httplocalhost8080  https before running the server an rsa private key serverkey and an ssl certificate servercrt must be created run the server and client examples zig build httpsexamples doptimizereleasesafe direct your favorite browser to for instance httpslocalhost8080  contributing contributions are welcome either by creating an issue or a merge request however before you create a new issue or merge request please search for previous similar issues or requests a response will normally be given within a few days  acknowledgments main author ole christian eidheimhttpsgithubcomeidheim  original project simplewebserver  gitlabhttpsgitlabcomeidheimsimplewebserver","benburkert/freestanding.zig":"a zig utility module for os-less (freestanding) stuff  freestanding a zig utility module for osless freestanding stuff  freestandingdebuginfo print a stacktrace in a custom panic handler zig pub fn panicmsg const u8  stdbuiltinstacktrace  usize noreturn  printstacktracereturnaddress frameaddress catch  fatal  fn printstacktracereturnaddress usize frameaddress usize void  var debuginfo  try freestandingdebuginfoinitallocator  defer debuginfodeinit return debuginfoprintstacktracewriter returnaddress frameaddress   see examplesriscvstacktrace for more details  cd examplesriscvstacktrace  zig build run panic kaboom usersbenburkertasdfinstallszigmasterlibstddebugzig0422000 0x8002fbe6 in panicanon8140 riscvstacktrace usersbenburkertsrcgithubcombenburkertfreestandingzigexamplesriscvstacktracesrcrootzig0042009 0x8002fbce in bar riscvstacktrace usersbenburkertsrcgithubcombenburkertfreestandingzigexamplesriscvstacktracesrcrootzig0038008 0x8002fbb6 in foo riscvstacktrace usersbenburkertsrcgithubcombenburkertfreestandingzigexamplesriscvstacktracesrcrootzig0034008 0x8002fb9e in main riscvstacktrace usersbenburkertsrcgithubcombenburkertfreestandingzigexamplesriscvstacktracesrcrootzig0030009 0x8002fb86 in start riscvstacktrace usersbenburkertsrcgithubcombenburkertfreestandingzigexamplesriscvstacktracesrcrootzig0019005 0x80000010 in start riscvstacktrace   be sure to export the debugstart  debugend symbols see examplesriscvstacktracesrcrootld ","ryoga-exe/ac-library-zig":"zig implementation of atcoder library  aclibraryzig aclibraryzig is a zig implementation of atcoder library acl ","bcrist/microbe":"embedded zig framework for arm microcontrollers 404 not found","mattnite/zig-mbedtls":"compile mbedtls in your build.zig  mbedtls build package cihttpsgithubcommattnitezigmbedtlsactionsworkflowsciymlbadgesvghttpsgithubcommattnitezigmbedtlsactionsworkflowsciyml  like this project if you like this project or other works of mine please consider donating to or sponsoring mehttpsgithubcomsponsorsmattnite on github hearthttpsgithubcomsponsorsmattnite  how to use this repo contains code for your buildzig that can statically compile mbedtls  link to your application in order to statically link mbedtls into your application zig const mbedtls  importpathtombedtlszig pub fn buildb stdbuildbuilder void    const lib  mbedtlscreateb target optimize const exe  baddexecutable name  myprogram rootsourcefile   path  srcmainzig  target  target optimize  optimize  liblinkexe   ","ikskuh/zig-ihex":"an intel hex loader written in zig  zig intel hex parser a loader for the intel hexhttpsenwikipediaorgwikiintelhex format used in embedded development  features  supports all 6 record types  raw record parser parseraw  userfriendly preprocessor parsedata  pedantic and lax parsing  example zig fn processdatax void offset u32 data const u8 void  stddebugwarnread slice  0xx xn  offset data   pub fn main void  var file  try stdfscwdopenfiledataexampleihex  read  true write  false  defer fileclose var entrypoint  try ihexparsedatafilereader ihexparsemode pedantic  true   error processdata if entrypoint ep  stddebugwarnentry point 0xxn ep   ","ziglana/solana-zig-program-template":"minimal solana zig program template  solanazigprogramtemplate minimal solana zig program template ","andrewrk/libvorbis":"libvorbis with the build system replaced by zig this is a fork of vorbishttpsgithubcomxiphvorbis packaged for zig unnecessary files have been deleted and the build system has been replaced with buildzig original readme follows   vorbis gitlab build statushttpsgitlabxiphorgxiphvorbisbadgesmasterpipelinesvghttpsgitlabxiphorgxiphvorbispipelines travis build statushttpstravisciorgxiphvorbissvgbranchmasterhttpstravisciorgxiphvorbis appveyor build statushttpsciappveyorcomapiprojectsstatusgithubxiphvorbisbranchmastersvgtruehttpsciappveyorcomprojectrillianvorbis vorbis is a general purpose audio and music encoding format contemporary to mpeg4s aac and twinvq the next generation beyond mpeg audio layer 3 unlike the mpeg sponsored formats and other proprietary formats such as realaudio g2 and windows flavor of the month the vorbis codec specification belongs to the public domain all the technical details are published and documented and any software entity may make full use of the format without license fee royalty or patent concerns this package contains  libvorbis a bsdstyle license software implementation of the vorbis specification by the xiphorg foundation httpsxiphorg  libvorbisfile a bsdstyle license convenience library built on vorbis designed to simplify common uses  libvorbisenc a bsdstyle license library that provides a simple programmatic encoding setup interface  example code making use of libogg libvorbis libvorbisfile and libvorbisenc  whats here  this source distribution includes libvorbis and an example encoderplayer to demonstrate use of libvorbis as well as documentation on the ogg vorbis audio coding format youll need libogg distributed separately to compile this library a more comprehensive set of utilities is available in the vorbistools package directory  lib the source for the libraries a bsdlicense implementation of the public domain ogg vorbis audio encoding format  include library api headers  debian rulesspec files for building debian deb packages  doc vorbis documentation  examples example code illustrating programmatic use of libvorbis libvorbisfile and libvorbisenc  macosx project files for macos x  win32 win32 projects files and build automation  vq internal utilities for trainingbuilding new lspresidue and auxiliary codebooks  contact  the ogg homepage is located at httpsxiphorgogg vorbiss homepage is located at httpsxiphorgvorbis up to date technical documents contact information source code and prebuilt utilities may be found there  building   building from master  development source is under git revision control at httpsgitlabxiphorgxiphvorbisgit you will also need the newest versions of autoconf automake libtool and pkgconfig in order to compile vorbis from development source a configure script is provided for you in the source tarball distributions autogensh configure make and as root if desired make install this will install the vorbis libraries static and shared into usrlocallib includes into usrlocalinclude and api manpages once we write some into usrlocalman documentation building requires xsltproc and pdfxmltex  building from tarball distributions  configure make and optionally as root make install  building rpm packages  after normal configuring make dist rpm ta libvorbisversiontargz  building with cmake  ogg supports building using cmakehttpscmakeorg cmake is a meta build system that generates native projects for each platform to generate projects just run cmake replacing yourprojectgenerator with a proper generator from a list herehttpscmakeorgcmakehelplatestmanualcmakegenerators7html cmake g yourprojectgenerator  note that by default cmake generates projects that will build static libraries to generate projects that will build dynamic library use buildsharedlibs option like this cmake g yourprojectgenerator dbuildsharedlibs1  after projects are generated use them as usual  building on windows  use proper generator for your visual studio version like cmake g visual studio 12 2013   building on mac os x  use xcode generator to build framework run cmake g xcode dbuildframework1   building on linux  use makefile generator which is default one cmake  make  license  this file is part of the oggvorbis software codec source code use distribution and reproduction of this library source is governed by a bsdstyle source license included with this source in copying please read these terms before distributing the oggvorbis source code is copyright c 19942020 by the xiphorg foundation httpsxiphorg ","zetaframe/zva":"zig vulkan allocator (zva).  zig vulkan allocator zva a zig vulkan memory allocator for use in zetaframehttpsgithubcomzetaframezetaframe uses snektrons vulkan bindings  usage in buildzig zig const zva  importpath to pkgzigpkgpath to zva root path to generated vulkan bindings stepaddpackagezvapkg  ","reykjalin/log_to_file.zig":"have zig's `std.log` log to a file instead of to stdout  logtofilezig an easy way to change the default stdlog functions to write to a file instead of logging to stdout simply add this to your project via and stdlog functions will write to a file called log in your current working directory  note   this is not a logging library  it offers a function you can pass to zigs stdoptionss logfn so stdlog calls write to a  file instead of stdout  usage 1 install the library by running zig fetch save httpsgitsrhtreykjalinlogtofilezigarchive100targz in your project 2 add the library as a dependency in your projects buildzig zig pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const ltfdep  bdependencylogtofile  target  target optimize  optimize  const exe  baddexecutable name  app rootsourcefile  bpathsrcmainzig target  target optimize  optimize  exerootmoduleaddimportlogtofile ltfdepmodulelogtofile  3 set the log function in your main project zig const ltf  importlogtofile pub const stdoptions stdoptions   logfn  ltflogtofile   now whenever you call the stdlog functions they should be written to a log file in your current working directory  configuration if youd like to write logs to a different path you can configure that by adding this to your root source file typically srcmainzig or similar zig  relative to current working directory pub const logtofilepath  logsapplog  absolute path pub const logtofilepath  varlogsapplog  ","furpu/jwt.zig":"zig json web token package.  jwtzig zig implementation of json web tokens rfc 7519httpsdatatrackerietforgdochtmlrfc7519  claims claim verification is not implemented yet future work includes adding features to verify aud exp iat and nbf claims as described in section 4httpsdatatrackerietforgdochtmlrfc7519section41 of the rfc  algorithms  supported  alg parameter  description      none  no digital signature or mac value included     hs256  hmac using sha256 hash algorithm     hs384  hmac using sha384 hash algorithm     hs512  hmac using sha512 hash algorithm     es256  ecdsa using p256 curve and sha256 hash algorithm     es384  ecdsa using p384 curve and sha384 hash algorithm     es512  ecdsa using p521 curve and sha512 hash algorithm     ps256  rsassapss using sha256 hash algorithm     ps384  rsassapss using sha384 hash algorithm     ps512  rsassapss using sha512 hash algorithm     rs256  rsassapkcs1v15 using sha256 hash algorithm     rs384  rsassapkcs1v15 using sha384 hash algorithm     rs512  rsassapkcs1v15 using sha512 hash algorithm  ","oittaa/uuid-zig":"universally unique identifiers (uuids)  uuidzig universally unique identifiers uuids rfc 9562httpswwwrfceditororgrfcrfc9562html if uuids are required for use with any security operation within an application context in any shape or form then uuidv4 should be utilized uses stdcryptorandom to generate uuids cihttpsgithubcomoittaauuidzigactionsworkflowsciyamlbadgesvghttpsgithubcomoittaauuidzigactionsworkflowsciyaml  example zig const std  importstd const uuid  importuuidzig pub fn main void   generate const uuidv1  uuiduuid1 stddebugprintn uuidv1 const uuidv3  uuiduuid3uuidnamespacedns wwwexamplecom stddebugprintn uuidv3 const uuidv4  uuiduuid4 stddebugprintn uuidv4 const uuidv5  uuiduuid5uuidnamespaceurl httpsziglangorg stddebugprintn uuidv5 const uuidv6  uuiduuid6 stddebugprintn uuidv6 const uuidv7  uuiduuid7 stddebugprintn uuidv7  parse const myuuid  try uuidfromstring017f22e279b07cc398c4dc0c0c07398f stddebugprintn myuuid stddebugprintdn myuuidbytes     zig run examplezig 843ca0f0e21111ef9b7bd1c49c4f52c1 5df418813aed351588a72f4a814cf09e 53ca499531be4398b2c08ad34104f0eb 708762e7188c5d58b008f4d694f0bf6d 1efe211843cb634c9fcfc2765e4be199 0194cb25b3b27b33ac3831349ded7498 017f22e279b07cc398c4dc0c0c07398f  1 127 34 226 121 176 124 195 152 196 220 12 12 7 57 143    uuid version 4 uuidv4 is meant for generating uuids from truly random or pseudorandom numbers  uuidv4 field and bit layout  0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   randoma    randoma  ver  randomb   var randomc    randomc     randoma the first 48 bits of the layout that can be filled with random data occupies bits 0 through 47 octets 05  ver the 4bit version field set to 0b0100 4 occupies bits 48 through 51 of octet 6  randomb 12 more bits of the layout that can be filled random data occupies bits 52 through 63 octets 67  var the 2bit variant field set to 0b10 occupies bits 64 and 65 of octet 8  randomc the final 62 bits of the layout immediately following the var field to be filled with random data occupies bits 66 through 127 octets 815  uuid version 7 uuidv7 features a timeordered value field derived from the widely implemented and wellknown unix epoch timestamp source the number of milliseconds since midnight 1 jan 1970 utc leap seconds excluded generally uuidv7 has improved entropy characteristics over uuidv1 or uuidv6 monotonicity each subsequent value being greater than the last is the backbone of timebased sortable uuids this implementation uses method 3 replace leftmost random bits with increased clock precision from the rfc and ensures timestamp increments before creating a new uuid  uuidv7 field and bit layout  0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   unixtsms    unixtsms  ver  randa   var randb    randb     unixtsms 48bit bigendian unsigned number of the unix epoch timestamp in milliseconds occupies bits 0 through 47 octets 05  ver the 4bit version field set to 0b0111 7 occupies bits 48 through 51 of octet 6  randa the additional clock precision available on the system to substitute 12 random bits immediately following the timestamp occupies bits 52 through 63 octets 67  var the 2bit variant field set to 0b10 occupies bits 64 and 65 of octet 8  randb the final 62 bits of pseudorandom data to provide uniqueness occupies bits 66 through 127 octets 815 ","thehonesthare/zkinder":"a pattern matching library for zig a library that implements pattern matching in fully userland zig tested on zig version 0140dev1391e084c46ed but should probably work on master  code example zig const ki  importzkinder const bind  kibind const   ki const thing struct  age u32 birth u64 pos struct  x u8 y u8    age  3 birth  2 pos  x  90 y  20 const m  kimatchthing  bind puts the value of the variable in the result const res  marmage  3 birth  bindhello pos  x  bindx y  20 try stdtestingexpectequal2 reshello try stdtestingexpectequal90 resx const res2  marmage  3 birth  bindhello pos  bindpos try stdtestingexpectequal2 res2hello try stdtestingexpectequal90 res2posx try stdtestingexpectequal20 res2posy  this arm doesnt match because age  2 will return null const res3  marmage  2 birth  bindhello pos  bindpos try stdtestingexpectequalnull res3   will match on anything const res4  marmage   birth   pos  x   y  bindy try stdtestingexpectequal20 res4y   current features  arbitrary nested patterns  structs  unionenum todo more testing  enums todo more testing  ints floats bools todo more testing  optionals todo more testing  match on double optionals using nonnull  arrays  can even match on a subarray using refrest see custom array matchers  single item pointers patterns match on the child type  slices  support same features as arrays plus different length patterns  matching for no exhaustive checking single arm  extracting values out via bind  matching aginst anything via   matching on integer ranges via range  extracting values out only if it matches a predicate with bindif  support for creating your own match predicates  both bind and  use no special casing you could implement yourself  any custom matcher must be of type fn comptime type custommatcher  the impl will take in this type pass in the type it needs to bind to and collect all the needed captures  todo make like 10x more ergonomic  planned features  matching on vectors others maybe  optimize this so its not just willy nilly checking basically  exhaustive patterns hardmode  unreachable pattern errors if i feel like it  more helper match predicates such as partial ref  safety check for ensuring a match only ever matches on one branch  custom matchers a custom matcher is any function of the form fn comptime type matcher where the input is the type it is being matched against bindname and  are both custom matchers implementable you could just as easily implement for example in the pattern age  2 birth   pos    is actually a function which will take the types of thingbirth and thingpos respectively matcher is defined as such zig pub const matcher  struct  captures type trybind fn self matcher valptr anytype outptr anytype bool   captures is a struct type where each field is an output the matcher produces this is needed for features like bind all fields are combined using comptime into one giant struct that is returned from the arm trybind is where all the magic happens  self allows you to access the captures field  valptr is a pointer to the field being matched against the fields type will be the same type that was passed into the custom matcher  outptr lets you write to the out of the arm if you had any captures for example outptrhello  2 would write 2 to the hello field of the output you can only write to fields that were already declared as captures  return true if the value in valptr matches whatever criteria you want or false if not  custom array matchers these are similar to custom matchers but they only work in array or slice patterns refrestname is a custom array matcher instead of having to have a pattern for the entire length of the array you can match over part of it you can only have custom array matcher per arrayslice pattern test match arrays  const list  u8 0 9 100 140  const m  comptime matchlist const res  marm 0 9 100 bindnum  const res2  marm refrestfirst2 100 140  const res3  marm bindhead refresttail  const res4  marm 1 refresttail  const res5  marm 0 refrestmiddle 140  try stdtestingexpectequal140 resnum try stdtestingexpectequalslicesu8  0 9  res2first2 try stdtestingexpectequal0 res3head try stdtestingexpectequalslicesu8  9 100 140  res3tail try stdtestingexpectequalnull res4 try stdtestingexpectequalslicesu8  9 100  res5middle   to make your own you need a thing of type fn comptime type comptime usize subslicematcher the first parameter is the child type of the array or slice and the second is the length of the array or null if it is a slice subslicematcher has a captures field similar to a custom matcher as well as a trybind fn the only difference is that instead of valptr it will take subslice if the matched against type is an array subslice will be a pointer to the subarray that is not matched against in the rest of the pattern if the matched againt type is a slice subslice will be the subslice that is not matched against in the rest of the pattern ","thevilledev/chibihash-zig":"chibihash in zig - a small, fast 64-bit hash function  chibihash64zig a zig port of chibihash64httpsgithubcomnrkchibihash  a small fast 64bit hash function see the article chibihash a small fast 64bit hash functionhttpsnrkneocitiesorgarticleschibihash for more information all credit for the algorithm goes to nrkhttpsgithubcomnrk  features  simple 64bit hash function  supports both v1 and v2 of the hash function  hashmap implementation  thoroughly tested with known test vectors  usage  const std  importstd const chibihash64v1  importchibihash64v1zig const chibihash64v2  importchibihash64v2zig  basic hashing v1 const hash  chibihash64v1hashhello world 0  using hashmap v1 var map  chibihash64v1hashmapconst u8 i32initallocator defer mapdeinit  basic hashing v2 const hash  chibihash64v2hashhello world 0  using hashmap v2 var map  chibihash64v2hashmapconst u8 i32initallocator defer mapdeinit  see exampleexamplezig for a complete example run it with zig build runexample  license mit ","traxar/spade":"a library for sparse and dense tensor operations.  spade a library for sparse and dense tensor operations  table of contents  installationinstallation  usageusage  dependenciesdependencies  installation in your zigproject run zig fetch save httpsgithubcomtraxarspadearchiverefstagsv002targz then add spade as an import to your root modules in buildzig zig fn buildb stdbuild void   set build options  const spade  bdependencyspade   define exe  exerootmoduleaddimportspade spademodulespade    usage zig const std  importstd const assert  stddebugassert const spade  importspade const t  spadetensortypef32 tensor base type supports arbitrary element types const v  tdense0 vector const mcol  tdense 0 1  column major matrix const mrow  tdense 1 0  row major matrix  elementwise functions for tensor operations const op  spadeop  but you can also define your own  fn adda anytype b anytype typeofa  b  return a  b   matrix multiplication fn mulres anytype a anytype b anytype void  const res  typeofres const a  typeofa const b  typeofb if res  mcol and res  mrow compileerrorres must be of type mcol or mrow if a  mcol and a  mrow compileerrora must be of type mcol or mrow if b  mcol and b  mrow compileerrorb must be of type mcol or mrow resfadd opmul  at1 2 bt0 2   pub fn main void  var gpa  stdheapgeneralpurposeallocator defer if gpadeinit  leak panicmemory leaked const allocator  gpaallocator const a  try mcolinit 2 3  allocator allocate 2 x 3 matrix defer adeinitallocator aset 0 0  1 setting elements 1 by 1 aset 0 1  2 aset 0 2  3 aset 1 0  1 aset 1 1  2 aset 1 2  3  a   1 2 3   1 2 3  const b  try mcolinit 4 3  allocator allocate 4 x 3 matrix defer bdeinitallocator bfundefined opid 0 fill with zeros bclamp0 2 2fundefined opid 1 fill the lower half of the matrix asserttypeofbclamp0 2 2  mcol clamp gives a sub tensor of same type bsub1 0fundefined opid 2 fill the first column of the matrix asserttypeofbsub1 0  v sub gives a sub tensor of lower dimension   2 0 0   b   2 0 0    2 1 1    2 1 1  const c  try mcolinit 2 4  allocator allocate 4 x 3 matrix defer cdeinitallocator mulc a bt0 1  c  a  bt asserttypeofbt0 1  mrow t swaps 2 dimensions const stdoutfile  stdiogetstdoutwriter var bw  stdiobufferedwriterstdoutfile const stdout  bwwriter try stdoutprinta  bt n  for 02 i  for 04 j  try stdoutprint  cat i j   try stdoutprintn   try bwflush   you can find this demo project herehttpsgithubcomtraxarspadedemo  dependencies  zig 0140 ","tammoippen/zig-plotille":"plot graphs and histograms in the terminal.  example workflowhttpsgithubcomtammoippenzigplotilleactionsworkflowsmainymlbadgesvg  zigplotille draw in the terminal  use colors ansi 8bit or true color if your terminal allows  have a canvas for general braille dots drawing  have a crappy hist implementation todo insert link  have a figure for scatter plots histograms line plots also supports text and vline vspan hline hspan reimplementation of the python plotillehttpsgithubcomtammoippenplotille with the intention to at some point provide a capi as well for usage for now have a look at the examples and also in the code tests ","nektro/zig-color":"this repository has no description. 404 not found","garrisonhh/nix-zig-packager":"package zig 0.11.0+ projects for nix  nixzigpackager are you annoyed with zig 0110 incompatibility with nix me too this is a fix before the zig compiler people figure it out which im sure they will  adding to your flake this flake provides an overlay which provides buildzig11package heres a simple flake to build a zig project for x8664linux unfortunately you will still need to use the impure flag for this to work nix  inputszigpackagerurl  githubgarrisonhhnixzigpackager outputs   self nixpkgs zigpackager   let system  x8664linux pkgs  import nixpkgs  inherit system overlays   zigpackageroverlaysdefault   in  packagessystemdefault  pkgsbuildzig11package  src  self inherit system    ","opensvm/zup":"zig api server  zup server a highperformance http and websocket server framework written in zig designed for building scalable web applications with builtin parallel computing capabilities via spice integration  features   multithreaded http server with automatic cpu core detection   websocket support with automatic upgrade handling   keepalive connection support for improved performance   integration with spice for parallel computing tasks   builtin benchmarking tools   comprehensive test suite  installation 1 ensure you have zig 0110 or later installed 2 clone the repository bash git clone httpsgithubcomyourusernamezupgit cd zup   building build the project using zigs build system bash zig build  this will create the following executables in zigoutbin  server the main server executable  exampleserver an example server implementation  benchmark benchmarking tool  usage  running the server start the server on localhost8080 bash zig build run  or run directly bash zigoutbinserver   example server run the example server implementation bash zig build example   running tests run the test suite bash zig build test  run frameworkspecific tests bash zig build testframework   benchmarking run http benchmarks bash zig build bench   api documentation  http server the core server provides a simple interface for handling http requests zig const std  importstd const server  importmainzigserver pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator const address  try stdnetaddressparseip127001 8080 var server  try serverinitallocator address defer serverdeinit try serverstart    websocket support the server automatically handles websocket upgrades and provides a simple messagebased api zig  websocket frame handling example const ws  importwebsocketzig  echo server implementation while true  const frame  try wsreadmessagestream defer allocatorfreeframepayload switch frameopcode  text binary  try wswritemessagestream framepayload close  break else       framework module the framework module provides additional utilities for building web applications zig const framework  importframework  initialize router var router  try frameworkrouterinitallocator defer routerdeinit  add routes try routerget handleroot try routerpostapidata handledata   performance the server is designed for high performance  multithreaded architecture utilizing all available cpu cores  keepalive connection support  efficient websocket implementation  integration with spice for parallel computing tasks  contributing contributions are welcome please feel free to submit a pull request  license this project is licensed under the mit license  see the license file for details ","eddineimad0/tomlz":"a toml parser written in zig a toml parser written in zig that targets v10 specs of toml  supported zig versions  0140httpsziglangorgdocumentation0140  test suite coverage tomltesthttpsgithubcomtomllangtomltest is a languageagnostic test suite to verify the correctness of toml parsers and writers the parser fails 2 tests in the invalid set that involves dotted keys the 2 tests expect the parser to reject a niche confusing use case of toml dotted keys however they are accepted by the parser this might get fixed in the future but for now its not a priority  usage zig const std  importstd const toml  importtomlz const io  stdio pub fn main void  var gpaallocator  stdheapgeneralpurposeallocator defer stddebugassertgpaallocatordeinit  ok const allocator  gpaallocatorallocator  the toml parser takes an allocator and uses it internally for all allocations var p  tomlparserinitgpaallocatorallocator  when done deinit the parser to free all allocated resources defer pdeinit const tomlinput  message  hello world   the toml parser accepts a iostreamsource as an input source  the streamsource should live as long as the parser var tomlstream  iostreamsource constbuffer  iofixedbufferstreamconst u8 buffer  src pos  0    use parse to start parsing the input source var parsed  pparsetomlstream catch  stdlogerrthe stream isnt a valid toml document nerr  handle error   parsed is of type tomltomltable which is an alias to  stdstringhashmaptomlvalue  tomltomlvalue type is a union with the following fields  pub const tomlvalue  uniontomltype   boolean bool  integer i64  float f64  string const u8  array tomlvalue  table tomltable  tablesarray tomltable  datetime datetime    aside from datetime all other types are standard zig types  all data returned by the parser is owned by the parser and  will be freed once deinit is called or if parse is called again  consider cloning anything you need to outlive the parser var iter  parsediterator while iternext pair   the key is of type const u8 stddebugprintns   pairkeyptr switch pairvalueptr    do whatever      build options the buildzig file contains various options that can be used to customize the behaviour of the parser when building check it out for more details ","mattnite/version":"small library for semver  version small library for semver ","nektro/zig-yaml":"this repository has no description.  zigyaml","leecannon/zig-bootboot":"a zig'ified bootboot header file  zigbootboot this repo contains a zigified bootboothttpsgitlabcombztsrcbootboot header file  how to get  gyro gyro add leecannonbootboot  zigmod zigmod aq add 1leecannonbootboot  git  submodule git submodule add httpsgithubcomleecannonzigbootboot zigbootboot  clone git clone httpsgithubcomleecannonzigbootboot ","divergentclouds/portmidi-zig":"a zig wrapper for portmidi  portmidizig a zig wrapper for portmidi  dependencies  portmidihttpsgithubcomportmidiportmidi  made for commit 103beb1httpsgithubcomportmidiportmiditree103beb136ca9833d47d3f3a150364330d78638e7 other versions may or may not work  see also  porttimezighttpsgithubcomdivergentcloudsporttimezig ","andy5995/zigdeck":"a library that creates and shuffles a deck of cards from which you can draw linux cihttpsgithubcomandy5995zigdeckactionsworkflowslinuxymlbadgesvghttpsgithubcomandy5995zigdeckactionsworkflowslinuxyml  zigdeck a library that creates and shuffles a deck of cards from which you can draw tested with the the development version of zighttpsziglangorg may not build with the last release  example zig  initialize the deck this must be done before shuffle var deck  deckinit try stdtestingexpectequalsuitclubs deckcards0suit try stdtestingexpectequalfaceace deckcards0face try stdtestingexpectequalsuitspades deckcards48suit try stdtestingexpectequalfaceking deckcards51face  seed the random number generator var rng  stdranddefaultprnginitasu64 intcaststdtimemillitimestamp  shuffle deckshuffledeck rngrandom  draw one card const card  deckgettopcarddeck orelse return try stdtestingexpectequalsuitclubs cardsuit try stdtestingexpectequalfacequeen cardface stddebugprinttop card suit   value  n  cardsuit cardface   this library is used by zigpokerhandshttpsgithubcomandy5995zigpokerhands ","griush/zig-opengl-example":"minimal example using gflw/opengl/zm made in zig  triangle example simple opengl example in zig using zm zigglfw zigglgen  usage run in the root zig build run ","dweiller/zli":"simple cli parsing for zig  zli zli is a cli argument parsing module for zig the aim is to provide cli parameters in a simple declarative way and have zli parse them as well as generate help and version flags and usage error messages  features  x short options  boolean short options be be given in clusters eg ls lhf  the last short option in a cluster may take an argument as the next command line word eg tar xf filetar  x long options  arguments to long options may be the next command line word or separated from the option by an equals sign  x automatic handling of help and version options  x typed argument parsing  supports booleans floats integers enums u8 and su8 for some sentinel s  x gitstyle subcommands  usage a usage example is given by srcmainzig cli parameters are declared like so zig const argspec  zliarg  name   long   full  file short  f   shorthelp  file name type  const u8   name   short  a  shorthelp  short only option type  u8   name   long   full  areallylongarg   shorthelp  how does this look type  enum  yes no    name   long   full  complicated short  k   shorthelp  this option is very complicated and the short help message included here is so long that we want some nice line breaking to occur   name   long   full  flag1 short  1   shorthelp  just a flag type  bool   name   short  2  shorthelp  another flag type  bool   const version  stdsemanticversion major  0 minor  0 patch  0  const cli  zliclicommandzliexampleapp  parameters  argspec version  version   cli parameters can then be parsed with try cliparseallocator the autogenerated help message generated by the example is  zliexampleapp 000 options f file file name a short only option areallylongarg how does this look k complicated this option is very complicated and the short help message included here is so long that we want some nice line breaking to occur 1 flag1 just a flag 2 another flag help print this help message version print version information  which can you can see by running zig build run  help to use zli in a project you can use the zig package manager by using httpsgithubcomdweillerzliarchivecommitshatargz as the dependency url and then grabbing the zli module eg add zli to your buildzigzon sh zig fetch savezli httpsgithubcomdweillerzliarchivecommitshatargz  buildzig zig pub fn buildb stdbuild void    snip  const exe    your executable const zli  bdependencyzlimodulezli exerootmoduleaddimportzli zli   snip    ","jiacai2050/zig-jemalloc":"zig allocator baked by jemalloc 404 not found","malcolmstill/biscuit-zig":"biscuit implementation for zig  biscuitzig  warning  the implementation is wip and should not be used in production zig implementation of httpswwwbiscuitsecorg  usage  authorizing a token zig var biscuit  try biscuitfrombytesallocator token rootpublickey defer biscuitdeinit var authorizer  try biscuitauthorizer defer authorizerdeinit var errors  stdarraylistauthorizererrorinitallocator defer errorsdeinit try authorizerauthorizeerrors   attenuating a token zig var biscuit  try biscuitfrombytesallocator token rootpublickey defer biscuitdeinit var authorizer  try biscuitauthorizer defer authorizerdeinit var errors  stdarraylistauthorizererrorinitallocator defer errorsdeinit try authorizerauthorizeerrors  ","g41797/syslog":"zig syslog client logosyslogzigremovebgpng  centerzig syslog clientcenter center cihttpsgithubcomg41797syslogactionsworkflowsciymlbadgesvghttpsgithubcomg41797syslogactionsworkflowsciymlwikihttpsimgshieldsiobadgewikipedia23000000svgstyleforthebadgelogowikipedialogocolorwhitehttpsenwikipediaorgwikisyslog img srchttpsimgshieldsiobadgelinuxfcc624styleflatlogolinuxlogocolorblack width48 height24nbsp img srchttpsimgshieldsiobadgemacos000000styleflatlogoapplelogocolorwhite width48 height24nbsp img srchttpsimgshieldsiobadgewindows0078d6styleflatlogowindowslogocolorwhite width48 height24nbsp center this is a sysloghttpsenwikipediaorgwikisyslog client library for zig      protocols  udp tcp   rfc  subset of rfc5424httpsdatatrackerietforgdochtmlrfc5424   tested on  mac windows linux  for the curious it explained sysloghttpswwwpaesslercomitexplainedsyslog  hello zig when client code calls zig loggerwriteinfohello zig  syslog clientsrcsyslogzig sends following text message to syslog receiver process   1901 20241009t0907110000 blkf zigprocess 18548 1  hello zig  lets see what this message consist of  value  rfc definition  description    190  prival  prioritypriority   1  version  always 1   20241009t0907110000  timestamp  fulldate t fulltime   blkf  hostname  hostname or    zigprocess  appname  application name provided by caller   18548  procid  process id or    1  msgid  message id  sequential number generated automatically     structureddata  always    hello zig  msg  message   priority  priority  facility  8  severity facility represents the machine process that created the syslog event  rfc5424facility  value  description        kern  0  kernel messages   user  1  random userlevel messages   mail  2  mail system   daemon  3  system daemons   auth  4  securityauthorization messages   syslog  5  messages generated internally by syslogd   lpr  6  line printer subsystem   news  7  network news subsystem   uucp  8  uucp subsystem   cron  9  clock daemon   authpriv  10  securityauthorization messages private   ftp  11  ftp daemon   local0  16  local use 0   local1  17  local use 1   local2  18  local use 2   local3  19  local use 3   local4  20  local use 4   local5  21  local use 5   local6  22  local use 6   local7  23  local use 7  severity describes the severity level of the syslog message in question  level  rfc5424severity  description       0 emerg  system is unusable  1 alert  action must be taken immediately  2 crit  critical conditions  3 err  error conditions  4 warning  warning conditions  5 notice  normal but significant condition  6 info  informational  7 debug  debuglevel messages   quiz what are facility and severity of hello zig message  for leisure time  what is sysloghttpswwwauvikcomfranklyitblogwhatissyslog  syslogng open source editionhttpswwwsyslogngcomproductsopensourcelogmanagement  the rocketfast system for log processinghttpswwwrsyslogcom  old brave syslogdhttpslinuxdienetman8syslogd  kafka syslog connectorhttpswwwconfluentiohubconfluentinckafkaconnectsyslog  nats syslog connectorhttpsgithubcomg41797syslog2nats  installation add syslog to buildzigzon bach zig fetch savesyslog githttpsgithubcomg41797syslog  add syslog to buildzig zig const syslog  bdependencysyslog  target  target optimize  optimize  const lib  baddstaticlibrary librootmoduleaddimportsyslog syslogmodulesyslog const libunittests  baddtest libunittestsrootmoduleaddimportsyslog syslogmodulesyslog  import syslog zig const syslog  importsyslog   usage  configuration syslog uses following configuration zig pub const syslogopts  struct   application name const u8  zigprocess fcl rfc5424facility  local7  transport proto protocol  udp addr const u8  127001 port u16  514    initialization zig var logger syslogsyslog   try loggerinitstdtestingallocator  name  runner fcl  daemon port  12345  defer loggerdeinit  after initialization you can call syslog on different threads  logging there are two groups of apis  write message is straight text zig pub inline fn writeseverityslog syslog msg const u8 void   loggerwritedebughello zig   print message will be formatted before send zig pub inline fn printseverityslog syslog comptime fmt const u8 msg anytype void   const name  world loggerprintdebughello s name   filtering set filter zig  disable send messages with info  debug severities loggersetfilterinfo disable send messages wi","opensvm/supabase-zig":"supabase zig client  supabasezig a zig client library for supabasehttpssupabasecom providing a typesafe and memoryefficient way to interact with your supabase backend  features   authentication full support for emailpassword authentication   database operations powerful query builder for database interactions   storage file upload download and management capabilities   realtime subscribe to database changes in realtime   rpc call postgres functions directly   performance zeroallocation where possible with careful memory management   type safety leverage zigs compiletime features for typesafe operations  installation add this library to your buildzigzon zig  name  yourproject version  010 dependencies   supabase   url  httpsgithubcomyourusernamesupabasezigarchiverefstagsv010targz  add the appropriate hash here      quick start zig const std  importstd const supabase  importsupabase pub fn main void   initialize allocator var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator  create supabase client const config  supabasesupabaseconfiginit yoursupabaseurl yoursupabaseanonkey  var client  try supabasesupabaseclientinitallocator config defer clientdeinit  example query data var query  try clientfromtodos select limit10 defer querydeinit const result  try clientexecutequeryquery defer resultdeinit    authentication zig  sign up const session  try clientsignupuserexamplecom password123 defer sessiondeinitallocator  sign in const session  try clientsigninuserexamplecom password123 defer sessiondeinitallocator  sign out try clientsignoutsessionaccesstoken   database operations the query builder provides a fluent interface for database operations zig  select with filters var query  try clientfromusers selectid name email eqactive true limit20  insert data const user  jsonvalue object   name  john doe email  johnexamplecom  try clientbatchinsertusers jsonvalueuser  update data try clientbatchupdateusers jsonvalueupdateduser  delete data try clientbatchdeleteusers const u8userid1 userid2   storage operations zig  initialize storage client var storage  try storageclientinitallocator client bucketname defer storagedeinit  upload file try storageuploadpathtofiletxt filedata  download file const data  try storagedownloadpathtofiletxt defer allocatorfreedata  list files const files  try storagelistnull defer  for files file filedeinitallocator allocatorfreefiles    error handling the library uses zigs error union type for robust error handling zig const result  clientsigninuserexamplecom password123 catch err switch err  errorautherror  handleautherror errornetworkerror  handlenetworkerror errorinvalidcredentialserror  handleinvalidcredentials else  handleothererror    memory management this library follows zigs memory management principles  all resources must be explicitly freed using deinit  memory is allocated using the provided allocator  no global state or hidden allocations  contributing contributions are welcome please feel free to submit a pull request  license add your chosen license here","nikomalik/wyhash":"wyhash implementation in zig  wyhash  zig implementation github repo issueshttpsimgshieldsiogithubissuesnikomalikwyhashstyleflat github repo starshttpsimgshieldsiogithubstarsnikomalikwyhashstylesocial  overview wyhash is a fast highquality portable noncryptographic hash function known for its exceptional speed and randomness quality this repository provides a native zig implementation of wyhashproject is also open for people to add to and improve please check the issues to view requested features why wyhash   extremely fast performance across different architectures   highquality randomness and strong avalanche effect   minimal code size and efficient memory usage   used in databases networking and highperformance applications   basic usage zig const wyhash  importwyhash const std  importstd pub fn main void  const r u64  0x001020120 const res  wyhashwhashhello world r stddebugprintwyhashhello world   n  r res      installation add this to your buildzigzon zig dependencies   wyhash   url  httpsgithubcomnikomalikwyhasharchiverefsheadsmaintargz the correct hash will be suggested by zig    and add this to you buildzig zig const wyhash  bdependencywyhash  target  target optimize  optimize  exemodaddimportwyhash wyhashmodulewyhash  you can then import the library into your code like this zig const wyhash  importwyhash    installation2 bash git clone httpsgithubcomnikomalikwyhashgit mv wyhash pathtoyourprojectdirectory    benchmarks wyhash is one of the fastest hash functions available benchmarks against murmurhash3 xxhash and cityhash show superior performance in most cases   credits original wyhash wang yi repo httpsgithubcomwangyifudanwyhash ","fobersteiner/ntp-client":"ntp client cli in zig   coding utf8   zighttpsimgshieldsiobadgezigf7a41dstyleflatlogoziglogocolorwhitehttpsziglangorg testshttpsgithubcomfobersteinerntpclientactionsworkflowsruntestsymlbadgesvghttpsgithubcomfobersteinerntpclientactionsworkflowsruntestsyml license mithttpsimgshieldsiobadgelicensemityellowsvghttpsgithubcomfobersteinerntpclientblobmasterlicense  ntp client command line app to query an ntphttpsdatatrackerietforgdochtmlrfc5905 server eg to verify your os clock setting or get the time independent of your os clock or mess with your local ntp server  usage  building the binary note v0018 and greater requires at least zig 0140dev1411a670f5519 to build sh zig build dexe releasesafesmallfast  build and run debug zig build dexe run  library tests zig build test   ntp library currently targets sntp rfc4330httpsdatatrackerietforgdochtmlrfc4330 does not implement the full ntp spec srcntpzig can be used independently in other projects it is exposed via this projects buildzig and buildzigzon files other dependencies of the binary are lazy ie they wont be fetched if you use only the library in another project  usage of the binary sh usage ntpclient options options s server ntp server to query default poolntporg v protocolversion ntp protocol version 3 or 4 default 4 4 ipv4 use ipv4 instead of the default ipv6 srcip ip address to use for sending the query default 00  ipv6 autoselect srcport udp port to use for sending the query default 0  any port dstport udp port of destination server default 123 z timezone timezone to use in console output default utc j json print result in json i interval interval for repeated queries in seconds default null  oneshot operation a all query all ip addresses found for a given server url default false  stop after first h help show this help and exit   demo output sh zig build run dexe  4 z local  text  server name poolntporg server address 18541106152123  li0 vn4 mode4 stratum2 poll0 0 s precision25 29 ns id 0x6c6735c0 server root dispersion 518 us root delay 5599 us  server last synced  20240827t0936350130461500200 t1 packet created  20240827t0944242032948030200 t2 server received  20240827t0944242090606830200 t3 server replied  20240827t0944242092718920200 t4 reply received  20240827t0944242156171570200 timezone displayed europeberlin  offset to timserver 0000 s 290 us roundtrip delay 0012 s 12111 us  result flags 0 ok    compatibility and requirements developed  tested mostly on debian linux on an x86 machine windows worked last time i tested buildzig links libc for this mac os might work cant test this  zig version this package tracks zig 0140dev master might not compile with older versions  dependencies  flagshttpsgithubcomjoegmflags for command line argument parsing  zdthttpsgithubcomfobersteinerzdt to display timestamps as timezonelocal datetimes  license mit see the license file in the root directory of the repository ","harmony-co/zuws":"opinionated zig bindings for uwebsockets  zuws opinionated zig bindings for uwebsocketshttpsgithubcomunetworkinguwebsockets  installation zuws is available using the zig fetch command sh zig fetch save githttpsgithubcomharmonycozuws  to add it to your project after running the command above add the following to your buildzig file zig const zuws  bdependencyzuws  target  target optimize  optimize  exerootmoduleaddimportzuws zuwsmodulezuws   note  you can disable the default debug logs by passing debuglogs  false as an option  usage zig const uws  importzuws const app  uwsapp const request  uwsrequest const response  uwsresponse pub fn main void  const app  try appinit defer appdeinit try appgethello hello listen3000 null  fn hellores response req request void    req const str  hello worldn resendstr false    grouping grouping is not something provided by uws itself and instead is an abstraction we provide to aid developers the grouping api has a comptime and a runtime variant most of the time you will want to use the comptime variant but for the rare cases where adding routes at runtime dynamically is needed the functionality is there  creating groups at comptime zig const app  try appinit defer appdeinit const mygroup  appgroupinitcomptimev1 getexample somehandler  this will create the following route  v1example appcomptimegroupmygroup   creating groups at runtime zig const app  try appinit defer appdeinit var gpa stdheapgeneralpurposeallocator  init const allocator  gpaallocator var mygroup  appgroupinitallocator v1 try mygroupgetexample somehandler  this will create the following route  v1example try appgroupmygroup  we highly recommend you deinit the group  after you dont need it anymore mygroupdeinit   combining groups together we provide 2 different ways of combining groups together  grouping zig const app  try appinit defer appdeinit const api  appgroupinitcomptimeapi const v1  appgroupinitcomptimev1 getexample somehandler   apigroupv1  this will create the following route  apiv1example appcomptimegroupapi   merging zig const app  try appinit defer appdeinit const v1  appgroupinitcomptimev1 getexample somehandler const v2  appgroupinitcomptimev2   v2mergev1  this will create the following route  v2example appcomptimegroupv2 ","paoda/zba-gdbstub":"gdb server for debugging guest code in paoda/zba  zbagdbstub this is a gdbstub server for paodazba because i dont want to import a c library and i love reinventing the wheel i guess  scope this is tailor made for targeting the gba anything that isnt necessary for stepping through armv4t code isnt included this means lots of hardcoded values and assumptions that would be really awful for any halfway decent gdbstub implementation this project will have succeeded as soon as i use it to determine why rhythm heaven is stuck in an infinite loop ","jedisct1/zig-base91":"base91 encoding for zig.  base91 for zig an implementation of the base91 encoding scheme written in zig it enables you to convert binary data to a base91encoded string and vice versa  overview  space efficiency base91 produces shorter encoded strings compared to base64 which can be advantageous when minimizing data size is a priority  performance tradeoff although base91 is more spaceefficient its encodingdecoding operations are generally slower than those of base64 this tradeoff should be considered based on your applications requirements  considerations  when to use opt for base91 when reducing the size of encoded data is critical such as in bandwidthconstrained environments or when storing large volumes of encoded data  when to avoid if your application is performancesensitive and the encodingdecoding speed is paramount base64 might be a more suitable alternative ","silversquirl/zig-xed":"intel x86 encoder decoder library, as a zig package  zig package for intel xed this package compiles intels x86 encoder decoder library using the zig build system there is no dependency on python all generated code is committed into this repository directly ","ringtailsoftware/zvterm":"zig binding for libvterm, a terminal emulator core  zvterm a zig wrapper for libvtermhttpswwwleonerdorgukcodelibvterm exposing a small subset in a native zig api build with zig 0140 just enough to build a working toy terminal emulator sdlzvtermdemogif see exampleshelloworldzig for usage see sdlzvterm for a janky terminal implementation in sdl zig  setup an 80x24 terminal var term  try zvterminitallocator 80 24 defer termdeinit  get a writer to send data to the terminal var writer  termgetwriter  write terminal escape codes try writerprintx1b1010hhello world   read back the screen state for each xy position for 0termheight y  for 0termwidth x  const cell  termgetcellx y  paint cellcharu8 using cellfg and cellbg colours     to build and run the simple demo zig build helloworld to build and run the sdl demo terminal cd sdlzvterm zig build run  use first we add the library as a dependency in our buildzigzon file zig fetch save githttpsgithubcomringtailsoftwarezvtermgit and add it to buildzig file zig const zvtermdep  bdependencyzvterm  target  target optimize  optimize  exerootmoduleaddimportzvterm zvtermdepmodulezvterm   status theres plenty to add in order to make a real terminal emulator libvterm is capable but the zig api needs extending to do more  unicode  bell  more selective damage callbacks to know which areas of screen to redraw ","zigster64/datastor.zig":"data persistence library for zig  datastorzig fast  light data persistence layer for zig  version log  dec 2023  v000  init project  jan 2024  v020  new key types serial  uuid  string  intended use is for  object persistence using local storage for edge  iot  local game world etc  thread safe for use in a single process only  persist table timeseries and tree structured data  situations where using an external db would be overkill  where performance is more important than general flexibility on disk format uses s2s format for object storage see httpsgithubcomziglibss2s s2s is battle tested code but it does lack a few types that it can serialize out of the box you can code around this easy enough but its something you should be aware of   not intended for   any situation where the entire dataset will not fit in memory  scalable multiprocess database backends  general purpose data persistence datastor has a highly opinionated approach to dealing with static vs timeseries data that may not suit the way your data is structured  current data format uses native usize quite a bit so the datafiles are not 100 portable between machines with different word sizes for any of the not intended use cases above best look at options such as sqlite duckdb for embedded dbs or server based postgresql w timeseriesdb extensions over the network references  postgres libraries for zighttpgithubcomkarlseguinpgzig  duckdb libraries for zighttpgithubcomkarlseguinzuckdbzig  sqlite for zighttpsgithubcomsearchqlanguagezig20sqlitetyperepositories  mysql for zighttpsgithubcomsearchqlanguagezig20mysqltyperepositories  redis for zighttpsgithubcomsearchqlanguagezig20redistyperepositories   project scope  how it works datastorzig provides an embedded object persistence api for collections of zig types in concept a datastor is a light comptime wrapper around your struct that provides   an ordered hashmap collection of elements synched to disk  crud operations against that collection  a single primary key stored as extra metadata against the usersupplied struct  primary keys can be one of  serial number uuid custom string  timeseries extension to provide each record in a table with an unlimited audit trail of state transitions  timeseries handy functions to get element state at a point in time  events over a period etc  handles tagged union data so each table may store multiple variants of a type but still using a strict schema across types  handles tree structured data so you can optionally overlay a heirachy on top of your collection  utility functions for tree data to reparent nodes or move nodes up and down within their parent block the example directory contains a large number of example scenarios datastores and reports the wiki contains a structured walk through tutorial for how to use the different datastore types   types of datastore  table datatabledata for 2d tables where each row is an instance of your data struct with additional metadata to record the key etc example a table of customer information  tree datatreedata for tree structured data where each row is an instance of your data struct with additional metadata that references the parent row example a tree of projects within a heirachy of projects  timeseries datatimeseriesdata for streaming  event  state transition data where each row is an instance of your event data with additional metadata to reference the parent record and a timestamp for when the record was created example lets say we have a game with a table of monster we can add a timeseries datastore which tracks the xy location and current hitpoints of any monster at each turn in the game this keeps the original monster table unmodified and tracks an audit trail of state transitions for all monsters in a separate timeseries array   operations on a datastore  function  description  notes    load  loads the datastore from disk    save  saves the datastore to disk    items record  returns an ordered arraylist of all items in the datastore  caller owns the arraylist must free after use   appendvalue key  add an item to the datastore will compute a new primary key for the record  returns the value of the newly computed primary key for the new record   putkey value  updates the value of the record with the given key   getkey record  returns the record with the given key   deletekey  deletes the record with the given key  deleted records are kept on disk but marked as invalid   vacuum  vacuum will strip out all deleted records from the datastore and renumber the serial primary keys plus any referenced records in timeseries datastores   selectfilterfn record  returns an ordered arraylist of all the items that match the given filter the filter is a function that takes the record value and returns true if it matches  caller owns the arraylist and must free after use   migrateoldstruct newstruct  converts existing datastores from the old record structure to a new record structure    types of keys  serial tables with a serial primary key when a new record is added to a table it automatically gets assigned to number of records  1  uuid uuid primary keys generate a new random uuidv4 value when new records are created  string a string key is a custom usergenerated key for new records the owning structure must define a function to generate a new key based on the record contents and the record number for table datastores  pub fn newidself allocator recordnumber const u8 for tree datastores optionally include this function  pub fn newnodeidself allocator parentkey recordnumber siblingcount const u8  or fallback to newid if newnodeid is not provided   table data a table is a collection of records where each record is mapped to a zig struct and has a unique key that identifies that record records are stored on disk in insert order and retrieving all the records from the store are also in the original insert order create a table type function description  notes    tableitemtype type  returns a new type representing a table datastore with a serial key   tablewithkeyitemtype keytype type  returns a new type representing a table datastore with the specified key type  key can be one of serial uuid string  init  deinit a table function description  notes    initallocator filename table  returns a new instance of a table with the associated file   deinit  frees up memory allocated by the table this includes memory allocated for each record  if the base struct for th","peterino2/zig_regex":"a regex implementation.  zig regex a fairly quick regex implementation done a while back for learning purposes ill just clean it up and put it out there this one is largely implemented with tagged unions and recursive descent rather than a state machine or a byte gobbler so it shows you actually can write zig programs in a fairly functional manner in fact its pretty damn nice for it you can test the library with zig zig test gregexzig  usecases can be found in the zig file itself but heres a simple usecase zig var testrestr  name  var find  try refindoncetestrestr date 20770624 name adam jensen occupation killan alloc defer finddeinit  find has an arraylist of regex objects this should be deinitialized when out of scope printsn  findtext   this will print out the entire string  the result supports groups printfindgroupsitems1  sn findgroupsitems0text printfindgroupsitems2  sn findgroupsitems0text  in terms of sequences a few of the most commonly supported sequences are supported      capture mode operators respectively zero or more one or more zero or one    create a match group does not support nesting   or match group match any union of elements within  az sequence range match  predefined semantic groups  s  whitespace capital version is inverted  w  alphanumeric  d  digits   single term negation negates matches that are a single term does not work on  groups or but will work on orgroups  negative lookahead is not supported note this is the first thing ive ever actually written in zig so theres a few growing pains in visible in the code ","theseyan/lmdbx-zig":"zig bindings for libmdbx (a fork of lmdb)  lmdbxzig zig bindings for libmdbxhttpslibmdbxdqdkfaru a fork of lmdb mostly ported from ziglmdbhttpsgithubcomcanvasxyzziglmdb built and tested with zig version 0130  libmdbx is an extremely fast compact powerful embedded transactional keyvalue databasehttpsenwikipediaorgwikikeyvaluedatabase with a specific set of properties and capabilities  focused on creating unique lightweight solutions  libmdbx is superior to legendary lmdbhttpssymascomlmdb in terms of features and reliability not inferior in performance in comparison to lmdb libmdbx make things just work perfectly and outofthebox not silently and catastrophically break down  table of contents  installationinstallation  usageusage  apiapi  environmentenvironment  transactiontransaction  databasedatabase  cursorcursor  benchmarksbenchmarks  installation bash  replace version with the latest release eg v010 zig fetch httpsgithubcomtheseyanlmdbxzigarchiverefstagsversiontargz  copy the hash generated and add lmdbxzig to buildzigzon zig  dependencies   lmdbx   url  httpsgithubcomtheseyanlmdbxzigarchiverefstagsversiontargz hash  hash      targets lmdbxzig officially supports crosscompiling to the following target triples  x8664linuxgnu x8664macos x8664windowsgnu  aarch64linuxgnu aarch64macos aarch64windowsgnu successful compilation on other targets is not guaranteed but might work  usage a libmdbx environment can either have multiple named databases or a single unnamed database to use a single unnamed database open a transaction and use the txnget txnset txndelete and txncursor methods directly zig const lmdbx  importlmdbx pub fn main void  const env  try lmdbxenvironmentinitpathtodb  defer envdeinit const txn  try lmdbxtransactioninitenv  mode  readwrite  errdefer txnabort try txnsetaaa foo create try txnsetbbb bar upsert try txncommit   to use named databases open the environment with a nonzero maxdbs value then open each named database using transactiondatabase which returns a database struct with dbgetdbsetdbdeletedbcursor methods you dont have to close databases but theyre only valid during the lifetime of the transaction zig const lmdbx  importlmdbx pub fn main void  const env  try lmdbxenvironmentinitpathtodb  maxdbs  2  defer envdeinit const txn  try lmdbxtransactioninitenv  mode  readwrite  errdefer txnabort const widgets  try txndatabasewidgets  create  true  try widgetssetaaa foo create const gadgets  try txndatabasegadgets  create  true  try gadgetssetaaa bar create try txncommit    api  environment zig pub const environment  struct  pub const options  struct  geometry databasegeometry  null maxdbs u32  0 maxreaders u32  126 readonly bool  false writemap bool  false nostickythreads bool  false exclusive bool  false noreadahead bool  false nomeminit bool  false liforeclaim bool  false nometasync bool  false safenosync bool  false mode u16  0o664  pub const info  struct  mapsize usize maxreaders u32 numreaders u32 autosyncperiod u32 autosyncthreshold u64 dbpagesize u32 mode u32 syspagesize u32 unsyncvolume u64  pub const databasegeometry  struct  lowersize isize  1 uppersize isize  1 sizenow isize  1 growthstep isize  1 shrinkthreshold isize  1 pagesize isize  1  pub fn initpath 0const u8 options options environment pub fn deinitself environment void pub fn transactionself environment options transactionoptions transaction pub fn syncself environment void pub fn statself environment stat pub fn infoself environment info pub fn setgeometryself environment options databasegeometry void    transaction zig pub const transaction  struct  pub const mode  enum  readonly readwrite  pub const options  struct  mode mode parent transaction  null txntry bool  false  pub fn initenv environment options options transaction pub fn abortself transaction void pub fn commitself transaction void pub fn getself transaction key const u8 const u8 pub fn setself transaction key const u8 value const u8 flag databasesetflag void pub fn deleteself transaction key const u8 void pub fn cursorself database cursor pub fn databaseself transaction name 0const u8 options databaseoptions database    database zig pub const database  struct  pub const options  struct  reversekey bool  false integerkey bool  false create bool  false  pub const stat  struct  psize u32 depth u32 branchpages usize leafpages usize overflowpages usize entries usize  pub const setflag  enum  create update upsert append appenddup  pub fn opentxn transaction name 0const u8 options options database pub fn getself database key const u8 const u8 pub fn setself database key const u8 value const u8 flag setflag void pub fn deleteself database key const u8 void pub fn cursorself database cursor pub fn statself database stat    cursor zig pub const cursor  struct  pub const entry  struct  key const u8 value const u8  pub fn initdb database cursor pub fn deinitself cursor void pub fn getcurrententryself cursor entry pub fn getcurrentkeyself cursor const u8 pub fn getcurrentvalueself cursor const u8 pub fn setself cursor key const u8 value const u8 void pub fn setcurrentvalueself cursor value const u8 void pub fn deletecurrentkeyself cursor void pub fn gotonextself cursor const u8 pub fn gotopreviousself cursor const u8 pub fn gotolastself cursor const u8 pub fn gotofirstself cursor const u8 pub fn gotokeyself cursor","tiawl/glfw.zig":"@glfw packaged for @ziglang  glfwzig this is a fork of hexopsglfw1 which is itself a fork of glfwglfw2  why this forkception  the intention under this fork is the same as hexops13 had when they forked glfwglfw2 package it for zig3 so  unnecessary files have been deleted  the build system has been replaced with buildzig however this repository has subtle differences for maintainability tasks  no shell scripting  a cron runs every day to check glfwglfw2 then it updates this repository if a new release is available  no support for macos  how to use it the goal of this repository is not to provide a zig3 binding for glfwglfw2 there are at least as many legit ways as possible to make a binding as there are active accounts on github so you are not going to find an answer for this question here the point of this repository is to abstract the glfwglfw2 compilation process with zig3 which is not new comers friendly and not easy to maintain to let you focus on your application so you can use glfwzig  as raw see glfw examples herehttpsgithubcomtiawlcimguizigblobtrunkexamples  as a daily updated interface for your zig3 binding of glfwglfw2 see here14 for a private usage  important note the current usage of this repository is centered around tiawlcimguizig3 compilation so for your usage it could break because some files have been filtered in the process if it happens open an issue this repository is open to potential usage evolution  dependencies the zig3 part of this package is relying on the latest zig3 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  glfwglfwhttpsgithubcomtiawlglfwzigblobtrunkreferencesglfw  cicd reminder these repositories are automatically updated when a new release is available  tiawlcimguizig4 this repository is automatically updated when a new release is available from these repositories  glfwglfw2  tiawltoolbox5  tiawlvulkanzig6  tiawlwaylandzig7  tiawlx11zig8  tiawlspacepornactionbot9  tiawlspacepornactionci10  tiawlspacepornactioncdping11  tiawlspacepornactioncdpong12  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomhexopsglfw 2httpsgithubcomglfwglfw 3httpsgithubcomziglangzig 4httpsgithubcomtiawlcimguizig 5httpsgithubcomtiawltoolbox 6httpsgithubcomtiawlvulkanzig 7httpsgithubcomtiawlwaylandzig 8httpsgithubcomtiawlx11zig 9httpsgithubcomtiawlspacepornactionbot 10httpsgithubcomtiawlspacepornactionci 11httpsgithubcomtiawlspacepornactioncdping 12httpsgithubcomtiawlspacepornactioncdpong 13httpsgithubcomhexops 14httpsgithubcomtiawlspacepornblobtrunksrcspacepornbindingsglfwglfwzig ","bratishkaerik/zig-ebuilder":"tool for distro maintainers to generate package recipes for zig projects  spdxfilecopyrighttext 2024 bratishkaerik spdxlicenseidentifier cc010   zigebuilder reuse statushttpsapireusesoftwarebadgegithubcombratishkaerikzigebuilderhttpsapireusesoftwareinfogithubcombratishkaerikzigebuilder zigebuilder generates package recipes for system package manager it consumes buildzig and buildzigzon files to fetch dependencies and find  modules and artifacts from dependencies and project itself  user options and system integration options gitcommit dependencies urls githttps are automatically converted to tarball download urls https if possible currently recognized services codeberg github gitlab mach mirror and sourcehut if host is unknown they are archived in one archive called tarballtarball from now on which is then stored in cache directory and path is printed to the user  important  currently there is no official way to declare information about  licenses homepage and description in buildzigzon so we  cant extract it you will need to fill it manually after generation   for now i recommend to use reuse toolinghttpsreusesoftware  for authors and users and wait for resolution of  httpsgithubcomziglangzigissues14342 result is then print to stdout supported formats are ebuilds for gentoobased distros with zigeclass see httpsgithubcomgentoogentoopull37283  note  in theory nothing prevents changing it to be useful for other distros too  for now as a workaround you can use customtemplate option below  usage for compilation you need zig 014  for using at runtime you can use zig 013 014 or latest master commit tested with 0150dev279460d4a3 console  zig build  executable build runners and default template will be installed in zigout fetched dependencies and tarballtarball are stored in cache directory by default xdgcachehomezigebuilder or homecachezigebuilder console  zigebuilder options path  example for httpsgithubcomnatecraddockzf console  zigebuilder zigusrbinzig0130 minlevelerr   zf0102ebuild  bash  copyright 2024 gentoo authors  distributed under the terms of the gnu general public license v2  generated by zigebuilder 001 eapi8 declare r a zbsdependencies libxev12207b7a5b538ffb7fb18f954ae17d2f8490b6e3778a9e30564ad82c58ee8da52361targzhttpsgithubcommitchellhlibxevarchivef6a672a78436d8efee1aa847a43a900ad773618btargz vaxis1220de23a3240e503397ea579de4fd85db422f537e10036ef74717c50164475813cetargzhttpsgithubcomrockoragerlibvaxisarchiverefstagsv051targz zg122055beff332830a391e9895c044d33b15ea21063779557024b46169fb1984c6e40targzhttpscodebergorgatmanzgarchivev0132targz zigaio1220a55aedabdd10578d0c514719ea39ae1bc6d7ed990f508dc100db7f0ccf391437targzhttpsgithubcomcloudefzigaioarchiveb5a407344379508466c5dcbe4c74438a6166e2catargz zigimg1220dd654ef941fc76fd96f9ec6adadf83f69b9887a0d3f4ee5ac0a1a3e11be35cf5targzhttpsgithubcomzigimgzigimgarchive3a667bdb3d7f0955a5a51c8468eac83210c1439etargz zigwin321220da4cab188b7b0e351de67626ca0dcadceddd16ca5997cfb578697f0525a59dactargzhttpsgithubcommarlersoftzigwin32archive4a78e716ae6496f52d9ddaf4fda2c4bb692631cdtargz  zigslot013 inherit zig descriptionwrite manually homepagewrite manually srcuri write manually main download url of your package here zbsdependenciessrcuri   list licenses by yourself  license slot0 keywordsamd64 srcconfigure  local myzbsargs  here you have list of options that are exposed by buildzig  pass use flags and default values here   pie build a position independent executable  withtui build tui   dpiebool  dwithtuibool  zigsrcconfigure   path is a buildzig file or directory containing it if it is not set current directory will be used zigebuilder will also try to find buildzigzon file nearby you can also check most important options below to check all of them see help output zig specify zig executable to use for zigslot zig fetch and zig build default is to use zig from path fetch choose fetch mode  none skip all fetching dependencies will not be parsed in this case  plain default fetch all dependencies  hashed use optimized fetching from httpsgithubcomziglangzigpull21589 zig needs to be patched before zigbuildadditionalargs pass additional args to zig build useful if you need to pull step config which depends on some conflicting user option or if some option is required and have no default console  zigebuilder  zigbuildadditionalargs dbackendx11  zigebuilder  zigbuildadditionalargs dbackendwayland  zigebuilder  zigbuildadditionalargs dbackendarcan  customtemplate specify file with custom ztlhttpsgithubcomkarlseguinztl template  licenses reuse statushttpsapireusesoftwarebadgegithubcombratishkaerikzigebuilderhttpsapireusesoftwareinfogithubcombratishkaerikzigebuilder this project is reusecomplianthttpsgithubcomfsfereusetool text of licenses can be found in licenses directorylicenses short overview  generator itself is licensed under eupl12  some snippets from zig upstream and modified build runners are licensed under upstream mit  buildzig buildzigzon and default ztl templates are licensed under 0bsd  this readme and ci files are licensed under cc01 comparison of used licenseshttpsinteroperableeuropeeceuropaeulicencecompareeupl12mit0bsdcc010 ","cksac/faker-zig":"a faker library for zig  fakerzig a faker library for zig  examples zig const faker  importfaker const std  importstd const en  fakerlocaleen const base  fakerlocalebase const print  stddebugprint fn genericstypecomptime t type type  return struct  data t   pub fn main void   create faker with locales and random const allocator  stdheappageallocator var rng  stdranddefaultprnginit0 const f  faker locales   en base  initallocator rngrandom  primitive types const u8val  fdummyu8 printu8val  n u8val const f32val  fdummyf32 printf32val  n f32val  arrays and vectors const arrval  fdummy3u8 printarrval  n arrval const multidimarrval  fdummy23u8 printmultidimarrval  n multidimarrval const vecval  fdummyvector4 i32 printvecval  n vecval  struct const point  struct  x f32 y f32  const pointval  fdummypoint printpointval  n pointval const genericval  fdummygenericstypeu8 printgenericval  n genericval  enum const enumtype  enum  ok notok  const enumval  fdummyenumtype printenumval  n enumval  union const uniontype  unionenumtype  ok u8 notok void  const unionval  fdummyuniontype printunionval  n unionval  strings const strval  fdummyconst u8 printstrval  sn strval  customization const blogunmanaged  struct  const self  this id u32 tag const u8 title u8 body u8 pub fn deinitself self allocator allocator void  allocatorfreeselftitle allocatorfreeselfbody  pub const fakerfields  struct  pub const tag   color human  pub const title   lorem words  min  5 max  10   pub fn bodycomptime opt anytype f fakerfakeropt u8  return floremwords min  20 max  30     const blog  fdummyblogunmanaged defer blogdeinitfallocator stddebugprintblogid dn blogid stddebugprintblogtag sn blogtag stddebugprintblogtitle sn blogtitle stddebugprintblogbody sn blogbody  user impls const nonnulloption  struct  pub fn is comptime t type  bool  return typeinfot  optional  pub fn dummycomptime t type comptime opt anytype f fakerfakeropt t  const info  typeinfotoptional return fdummyinfochild   const user  struct  const self  this id u32 friends stdarraylistu8 pub fn deinitself self void  if selffriends v vdeinit   const f2  fakerfaker locales   en base  userimpls  nonnulloption initallocator rngrandom const userval  f2dummyuser defer uservaldeinit printuserval  n userval    credit fakerzig was inspired by and use locale data generated from fakerjsfaker v810httpsgithubcomfakerjsfaker commit httpsgithubcomcksacfakerzigcommit5a5f9072541bab9ce4728a03b1126298f81a9260  orignal fakerjsfaker license faker  copyright c 20222023 this software consists of voluntary contributions made by many individuals for exact contribution history see the revision history available at httpsgithubcomfakerjsfaker permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the software to deal in the software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense andor sell copies of the software and to permit persons to whom the software is furnished to do so subject to the following conditions the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software the software is provided as is without warranty of any kind express or implied including but not limited to the warranties of merchantability fitness for a particular purpose and noninfringement in no event shall the authors or copyright holders be liable for any claim damages or other liability whether in an action of contract tort or otherwise arising from out of or in connection with the software or the use or other dealings in the software  from httpsgithubcomfakerjsfakercommita9f98046c7d5eeaabe12fc587024c06d683800b8 to httpsgithubcomfakerjsfakercommit29234378807c4141588861f69421bf20b5ac635e based on fakerjs copyright marak squires and contributor what follows below is the original license  fakerjs  copyright c 2020 marak squires httpgithubcommarakfakerjs fakerjs was inspired by and has used data definitions from  httpsgithubcomstympyfaker  copyright c 20072010 benjamin curtis  httpsearchcpanorgjasonkdatafaker007  copyright 20042005 by jason kohles permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the software to deal in the software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense andor sell copies of the software and to permit persons to whom the software is furnished to do so subject to the following conditions the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software the software is provided as is without warranty of any kind express or implied including but not limited to the warranties of merchantability fitness for a particular purpose and noninfringement in no event shall the authors or copyright holders be liable for any claim damages or other liability whether in an action of contract tort or otherwise arising from out of or in connection with the software or the use or other dealings in the software ","weskoerber/mac_address":"a cross-platform library to retrieve the mac address from your network interfaces without libc. testhttpsgithubcomweskoerbermacaddressactionsworkflowstestyamlbadgesvghttpsgithubcomweskoerbermacaddressactionsworkflowstestyaml docshttpsgithubcomweskoerbermacaddressactionsworkflowsdocsyamlbadgesvghttpsgithubcomweskoerbermacaddressactionsworkflowsdocsyaml  macaddress a crossplatform library to retrieve the mac address from your network interfaces without libc  requirements  zighttpsgithubcomziglangzig compiler 0120 or newer1  install first add the dependency to your buildzigzon using zig fetch console zig fetch save githttpsgithubcomweskoerbermacaddressmain  then import macaddress into your buildzig zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const macaddress  bdependencymacaddress  target  target optimize  optimize modulemacaddress const myexe  baddexecutable name  myexe rootsourcefile  bpathsrcmainzig target  target optimize  optimize  myexerootmoduleaddimportmacaddress    usage see the examples directory for example usage example executables can be built by setting the examples option to true zig const macaddress  bdependencymacaddress  target  target optimize  optimize examples  true modulemacaddress   crossplatform support  macaddress api  linux  windows          getall       getallnoloopback         supported    planned    not supported  1 shameless plug if youre using a unixlike operating system or wsl on windows consider using a zig compiler version manager i wrote called zvmhttpsgithubcomweskoerberzvm once downloaded and in your path just run zvm install 0120 or zvm install master to get the latest nightly ","tardy-org/secsock":"async tls (secure socket) for the tardy runtime  secsock this is an implementation of securesocket a wrapper for the tardy socket type that provides tls functionality  supported tls backends  bearsslhttpsbearsslorggitwebpbearsslasummary an implementation of the ssltls protocol rfc 5346 written in c  s2ntlshttpsgithubcomawss2ntls an implementation of ssltls protocols by aws experimental  installing compatible zig version 0140 compatible tardyhttpsgithubcomtardyorgtardy version v030 latest release 010  zig fetch save githttpsgithubcomtardyorgsecsockv010  you can then add the dependency in your buildzig file zig const secsock  bdependencysecsock  target  target optimize  optimize modulesecsock exerootmoduleaddimportsecsock   contribution we use nix flakes for managing the development environment nix flakes provide a reproducible declarative approach to managing dependencies and development tools  prerequisites  install nixhttpsnixosorgdownload bash sh curl l httpsnixosorgnixinstall daemon   enable flake supporthttpsnixoswikiwikiflakes in your nix config confignixnixconf experimentalfeatures  nixcommand flakes  getting started 1 clone this repository bash git clone httpsgithubcomtardyorgsecsockgit cd secsock  2 enter the development environment bash nix develop  this will provide you with a shell that contains all of the necessary tools and dependencies for development once you are inside of the development shell you can update the development dependencies by 1 modifying the flakenix 2 running nix flake update 3 committing both the flakenix and the flakelock  license unless you explicitly state otherwise any contribution intentionally submitted for inclusion in secsock by you shall be licensed as mpl20 without any additional terms or conditions ","seyhajin/llvm-ir-zig":"🚀 a minimal example to create and execute a llvm ir module in zig. 404 not found","bandithedoge/cairo.zig":"cairo packaged for zig  cairohttpscairographicsorg packaged for zig this repo builds cairo using zigs build system and c compiler frontend its primary use is to simplify crosscompiling and static linking for zigplughttpsgithubcombandithedogezigplug these are not language bindings you still have to use cairos c headers to do anything useful with this in your own projects several packages in the pkg directory were copied from ghosttyhttpsgithubcomghosttyorgghosttytreemainpkg ","andrewrk/libogg":"libogg with the build system replaced by zig this is a fork of ogghttpsgithubcomxiphogg packaged for zig unnecessary files have been deleted and the build system has been replaced with buildzig ","chanyon/minimd-zig":"simple markdown parser  simplemarkdownparse   markdown grammar  headline   heading1  h1h1  heading2  h2h2  heading3  h3h3  heading4  h4h4  heading5  h5h5  heading6  h6h6   paragraph  hello world phello worldp   strong  test  strongteststrong test  emtestem test  strongemtestemstrong hello  strongteststrong   blockquote   hello  blockquotehelloblockquote   hello   world   blockquotehelloblockquoteworldblockquoteblockquote    separation line    hr   link  linkhttpsgithubcom  a hrefhttpsgithubcomlinka httpsgithubcom  a hrefhttpsgithubcomhttpsgithubcoma   image  imgassetsimgphillymagicgardenjpg  img srcassetsimgphillymagicgardenjpg altimg  imageassetsimgshipjpghttpsgithubcomchanyon  a hrefhttpsgithubcomchanyonimg srcassetsimgshipjpg altimagea   delete line  test  pstestsp hellotestworld  phellostestsworldp   code  test  codetestcode  test   code test code   width 100px height 100px fontsize 16px color ccc    precodebrbr width 100pxbr height 100pxbr fontsize 16pxbr color cccbrbrcodepre    footnote  test1 1 ooooo  ptesta idsrc1 hreftarget11ap section pa idtarget1 hrefsrc11a ooop section   task list     task one  x task two   table   syntax  description  test          header  title  will   paragraph  text  why     unordered list   test  test2  test3  test4  test5  test6   ordered list  1 test 1 test2 1 test3 2 test4 2 test5 3 test6   escape characters   test test      test      done  x   x   x   x html  x footnote  x task list   x   x html tag inline style  x  c   x ","allyourcodebase/tracy":"tracy ported to the zig build system  cihttpsgithubcomallyourcodebasetracyactionsworkflowsbuildymlbadgesvghttpsgithubcomallyourcodebasetracyactions  tracy profiler this is tracyhttpsgithubcomwolfpldtracy packaged for zighttpsziglangorg  installation install zig 0130 and then run the following command bash zig build installprofiler zigoutbintracyprofiler  you can also directly run the tracy profiler with the run step bash zig build run   system dependencies most systems will already have the necessary dependencies installed by default  client  ws232 windows  dbghelp windows  advapi32 windows  user32 windows  execinfo freebsd  profiler  other tools  ws232 windows  dbghelp windows tracyupdate only  ole32 windows  uuid windows  shell32 windows  appkit macos  uniformtypeidentifiers macos  libgl linux  libegl linux not required when using dlegacy  libxkbcommon linux not required when using dlegacy  libdbus1 linux can be disabled with dnofileselector or dportalfalse  libgtk30 linux only required when using dportalfalse  system integrations tracy has been ported with support for zigs system integration optionshttpsziglangorgdownload0120releasenoteshtmlabilitytodeclareoptionalsystemlibraryintegration  cross compilation  windows cross compiling to windows works out of the box it can even connect to a client that is running a different host linux bash zig build dtargetx8664windows zig build run dtargetx8664windows fwine  run the tracy profiler with wine   macos cross compiling to macos can successfully produce a binary whether it is functional has not been tested bash zig build dtargetaarch64macos dnofileselector file zigoutbintracyprofiler   linux cross compiling to linux is currently not possible because of the dependency on libgl and libegl ","zhuyadong/xterm256.zig":"print text with xterm256 style readmecnmd  englishreadmemd  print text with xterm256 colors and styles  install in the project root directory shell zig fetch githttpsgithubcomzhuyadongxterm256zig savexterm256  if you want to install a specific version shell zig fetch githttpsgithubcomzhuyadongxterm256zigref id savexterm256   usage examples zig const xterm  importxterm256  print hello in red xtermprintfg  red hello   print hello in red with a white background xtermprintfg  r5 bg  white hello   print hello with color number 222 xtermprintfg  x222 hello   print hello in bold red xtermprintfg  red style  bold hello   if there is a prefix only the prefix part will be colored xtermprintfg  red prefixerror  something wrong   save the sequence to print hello in red to buf var buf 128u8  undefined   try xtermbufprintbuf fg  red hello   complex style const complexstyle   fg  x222 bg  b  5 g  5 style  bold underline prefix  complex  xtermprintcomplexstyle hello    style definition format zig  fg  color bg  color style  style1 style2  prefixprefix text   where color can be one of the following formats  colorname  r05 g05 b05  gray023  in the rgb format you can omit 12 of r g b colorname includes the following items  x16255  black  red  green  yellow  blue  magenta  cyan  white  brightblack  brightred  brightgreen  brightyellow  brightblue  brightmagenta  brightcyan  brightwhite style includes the following items  bold  italic  underline  slowblink  rapidblink  reverse  invisible  strikethrough","crispy-strawberry/string.zig":"a rust like string type for zig  an allocated string type inspired by rusts string type implementation mostly ported from rust  provides helper functions that make working with strings easier  i try to keep names consistent with stdarraylist   using with package manager 1 create buildzigzon in the project root if you dont already have one 2 add the barebones skeleton thishttpspastebincomkkf6kfri if you dont know what it looks like 3 inside the dependencies section add   string   url  githttpsgithubcomcrispystrawberrystringzigmain   4 run zig build and wait for zig to complain about the hash 5 copy the provided hash and add it besides the url like   string   url  repo url hash  the provided hash   6 in your buildzig add  zig const string  bdependencystring  optimize  optimize target  target   replace exe with whatever you are using exeaddmodulestring stringmodulestring  7 now in your source files you can use string by zig const string  importstringstring  8 enjoy    examples zig const helloworld  try stringfromstrallocator hello world  stddebugprintn helloworldisascii  ","nektro/zig-licenses-text":"full license text from https://spdx.org/licenses/.  ziglicensestext full license text from httpsspdxorglicenses  built with  httpsgithubcomziglangzig master  httpsgithubcomnektrozigmod package manager  httpsgithubcomtruemedianzfetch  httpsgithubcomnektrozigjson  install  zigmod aq add 1nektrolicensestext   license mit ","nektro/zig-signal":"this repository has no description.  zigsignal","softprops/zig-doh":"dns over https client h1 aligncenter zig doh h1 div aligncenter a dns over https client interface div  mainhttpsgithubcomsoftpropszigdohactionsworkflowsciymlbadgesvghttpsgithubcomsoftpropszigdohactionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropszigdoh releasehttpsimgshieldsiogithubvreleasesoftpropszigdoh zig supporthttpsimgshieldsiobadgezig0130blacklogozighttpsziglangorgdocumentation0130  examples see examples directory   installing create a new exec project with zig init copy an example from the examples directory into your into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save httpsgithubcomsoftpropszigdoharchiverefstagsv010targz  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  doh      uri to download  url  httpsgithubcomsoftpropszigdoharchiverefstagsv010targz    hash verification  hash         the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigdoharchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigdoharchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference dep from buildzigzon  const doh  bdependencydoh   target  target  optimize  optimize  moduledoh var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the module to executable  exerootmodeaddimportdoh doh binstallartifactexe     for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024","mkindberg/babel":"a library for building language servers in zig  babel a framework for writing or at least prototyping language servers in zig it allows you to register callbacks that will be called when notifications or requests are received in addition to this it will also keep track of and automatically update the documents being edited and lets you generate plugins for nvim and vscode  usage  creating the server zig const std  importstd const lsp  importlsp const builtin  importbuiltin  set the global log function to lsplog in order to use the lsp protocol  for logging pub const stdoptions   loglevel  if builtinmode  debug debug else info logfn  lsplog   file specific state const state  struct  fn init state  return     create an alias for the server type an instance of state will be available  in each callback const lsp  lsplspstate pub fn main u8  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator  information about the server that will be passed to the client const serverdata  lsptypesserverdata serverinfo   name  servername version  010   var server  lspinitallocator serverdata defer serverdeinit  register wanted callbacks they need to be registered before the server starts serverregisterdocopencallbackhandleopendoc serverregisterdocclosecallbackhandleclosedoc serverregisterdocchangecallbackhandlechangedoc serverregisterhovercallbackhandlehover  start the server it will run until it gets a shutdown signal from the client const res  serverstart return res   all callbacks takes at least two parameters an arena allocator that will  be freed after the callback has finished and the reply has been sent and  a context struct containing the user provided state and the document fn handleopendocarena stdmemallocator context lspcontext void    arena stdloginfoopened s contextdocumenturi  the file local state should be initialized when a document is opened contextstate  stateinit   most resources related to the document will be freed automatically but the  user provided state needs to be handled manually fn handleclosedoc stdmemallocator context lspcontext void   deinitialize the state when the file is closed contextstatedeinit   most callbacks take additional arguments that might be useful like the  changes that triggered a change notification fn handlechangedoc stdmemallocator  lspcontext changes lsptypeschangeevent void  for changes change  stdloginfonew text s changetext    callbacks handling requests will have a nonvoid return value that will  be sent back to the client after the callback returns fn handlehover stdmemallocator context lspcontext position lsptypesposition const u8   a document provides some helper function that can be useful stdloginfohovering the word s at dd  contextdocumentgetwordposition n  positionline positioncharacter     build the server zig const std  importstd pub fn buildb stdbuild void   build the server const exe  baddexecutable name  servername rootsourcefile  bpathsrcmainzig   add the dependency towards babel const babel  bdependencybabel   allow the server to import the lsp module from babel const lsp  babelmodulelsp exerootmoduleaddimportlsp lsp binstallartifactexe  create a build target for generating minimal editor plugins const plugingenerator  baddexecutable name  generateplugins rootsourcefile  bpathplugingeneratorzig target  bhost  plugingeneratorrootmoduleaddimportlspplugins babelmoduleplugins bstepgenplugins generate pluginsdependonbaddrunartifactplugingeneratorstep    generate plugins zig const std  importstd const lspplugins  importlspplugins pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator  create a struct with information about the server used in the generated files  a lot of the information is optional depending on what is being generated const info  lsppluginsserverinfo name  servername description  description publisher  mkindberg languages  const u8zig repository  httpsgithubcommkindbergbabel sourceid  pkggithubmkindbergbabel version  010 license  mit   the plugins can be generated all at once try lsppluginsgenerateallocator info  or separately the plugins will be placed in a new dir called  editors with subdirectories for each editor try lsppluginsgeneratevscodeallocator info try lsppluginsgeneratenvimallocator info try lsppluginsgeneratemasonregistryallocator info   ","kassane/libbpf":"automated upstream mirror for libbpf stand-alone build. picture source mediapreferscolorscheme dark srcsetassetslibbpflogosidewaysdarkbgpng width40 img srcassetslibbpflogosidewayspng width40 picture libbpf github actions builds  testshttpsgithubcomlibbpflibbpfactionsworkflowstestymlbadgesvghttpsgithubcomlibbpflibbpfactionsworkflowstestyml coverityhttpsimgshieldsiocoverityscan18195svghttpsscancoveritycomprojectslibbpf codeqlhttpsgithubcomlibbpflibbpfworkflowscodeqlbadgesvgbranchmasterhttpsgithubcomlibbpflibbpfactionsqueryworkflow3acodeqlbranch3amaster ossfuzz statushttpsossfuzzbuildlogsstoragegoogleapiscombadgeslibbpfsvghttpsossfuzzbuildlogsstoragegoogleapiscomindexhtmllibbpf read the docshttpsreadthedocsorgprojectslibbpfbadgeversionlatesthttpslibbpfreadthedocsioenlatest  this is the official home of the libbpf library please use this github repository for building and packaging libbpf and when using it in your projects through git submodule libbpf authoritative source code is developed as part of bpfnext linux source treehttpskernelgooglesourcecompubscmlinuxkernelgitbpfbpfnext under toolslibbpf subdirectory and is periodically synced to github as such all the libbpf changes should be sent to bpf mailing listhttpvgerkernelorgvgerlistshtmlbpf please dont open prs here unless you are changing githubspecific parts of libbpf eg githubspecific makefile libbpf and general bpf usage questions  libbpf documentation can be found herehttpslibbpfreadthedocsioenlatestapihtml its an ongoing effort and has ways to go but please take a look and consider contributing as well please check out libbpfbootstraphttpsgithubcomlibbpflibbpfbootstrap and the companion blog posthttpsnakryikocompostslibbpfbootstrap for the examples of building bpf applications with libbpf libbpftoolshttpsgithubcomiovisorbcctreemasterlibbpftools are also a good source of the realworld libbpfbased tracing tools see also bpf core reference guidehttpsnakryikocompostsbpfcorereferenceguide for the coverage of practical aspects of building bpf core applications and bpf corehttpsnakryikocompostsbpfportabilityandcore for general introduction into bpf portability issues and bpf core origins all general bpf questions including kernel functionality libbpf apis and their application should be sent to bpfvgerkernelorg mailing list you can subscribe to it herehttpvgerkernelorgvgerlistshtmlbpf and search its archive herehttpslorekernelorgbpf please search the archive before asking new questions it very well might be that this was already addressed or answered before bpfvgerkernelorg is monitored by many more people and they will happily try to help you with whatever issue you have this repositorys prs and issues should be opened only for dealing with issues pertaining to specific way this libbpf mirror repo is set up and organized building libbpf  libelf is an internal dependency of libbpf and thus it is required to link against and must be installed on the system for applications to work pkgconfig is used by default to find libelf and the program called can be overridden with pkgconfig if using pkgconfig at build time is not desired it can be disabled by setting nopkgconfig1 when calling make to build both static libbpfa and shared libbpfso bash  cd src  make  to build only static libbpfa library in directory build and install them together with libbpf headers in a staging directory root bash  cd src  mkdir build root  buildstaticonlyy objdirbuild destdirroot make install  to build both static libbpfa and shared libbpfso against a custom libelf dependency installed in buildroot and install them together with libbpf headers in a build directory buildroot bash  cd src  pkgconfigpathbuildrootlib64pkgconfig destdirbuildroot make install  bpf core compile once  run everywhere  libbpf supports building bpf coreenabled applications which in contrast to bcchttpsgithubcomiovisorbcc do not require clangllvm runtime being deployed to target servers and doesnt rely on kerneldevel headers being available it does rely on kernel to be built with btf type informationhttpswwwkernelorgdochtmllatestbpfbtfhtml though some major linux distributions come with kernel btf already built in  fedora 31  rhel 82  opensuse tumbleweed in the next release as of 20200604  arch linux from kernel 571arch11  manjaro from kernel 54 if compiled after 20210618  ubuntu 2010  debian 11 amd64arm64 if your kernel doesnt come with btf builtin youll need to build custom kernel youll need  pahole 116 tool part of dwarves package which performs dwarf to btf conversion  kernel built with configdebuginfobtfy option  you can check if your kernel has btf builtin by looking for syskernelbtfvmlinux file shell  ls la syskernelbtfvmlinux rrr 1 root root 3541561 jun 2 1816 syskernelbtfvmlinux  to develop and build bpf programs youll need clangllvm 10 the following distributions have clangllvm 10 packaged by default  fedora 32  ubuntu 2004  arch linux  ubuntu 2010 llvm 11  debian 11 llvm 11  alpine 313 otherwise please make sure to update it on your system the following resources are useful to understand what bpf core is and how to use it  bpf core reference guidehttpsnakryikocompostsbpfcorereferenceguide  bpf portability and corehttpsnakryikocompostsbpfportabilityandcore  howto bcc to libbpf conversionhttpsnakryikocompostsbcctolibbpfhowtoguide  libbpftools in bcc repohttpsgithubcomiovisorbcctreemasterlibbpftools contain lots of realworld tools converted from bcc to bpf core consider converting some more to both contribute to the bpf community and gain some more experience with it distributions  distributions packaging libbpf from this mirror  fedorahttpssrcfedoraprojectorgrpmslibbpf  gentoohttpspackagesgentooorgpackagesdevlibslibbpf  debianhttpspackagesdebianorgsourcesidlibbpf  archhttpsarchlinuxorgpackagescorex8664libbpf  ubuntuhttpspackagesubuntucomsourcejammylibbpf  alpinehttpspkgsalpinelinuxorgpackagesnamelibbpf benefits of packaging from the mirror over packaging from kernel sources  consistent versioning across distributions  no ties to any specific kernel trans","vspefs/tellme-dev":"a zig package that (sort of) allows comptime polymorphism 404 not found","jnordwick/znh":"zig microbenchmarking harness: for generating microbenchmarks in zig, but way inferior to jmh 404 not found","tiawl/vulkan.zig":"vulkan headers packaged for @ziglang  vulkanzig this is a fork of hexopsvulkanheaders1 which is itself a fork of khronosgroupvulkanheaders2  why this forkception  the intention under this fork is the same as hexops10 had when they forked khronosgroupvulkanheaders2 package the headers for zig3 so  unnecessary files have been deleted  the build system has been replaced with buildzig however this repository has subtle differences for maintainability tasks  no shell scripting  a cron runs every day to check khronosgroupvulkanheaders2 then it updates this repository if a new release is available  how to use it the current usage of this repository is centered around tiawlglfwzig3 compilation but you could use it for your own projects headers are here and there are no planned evolution to modify them see tiawlglfwzig3 to see how you can use it  dependencies the zig3 part of this package is relying on the latest zig3 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  khronosgroupvulkanheadershttpsgithubcomtiawlvulkanzigblobtrunkreferencesvulkan  cicd reminder these repositories are automatically updated when a new release is available  tiawlglfwzig4 this repository is automatically updated when a new release is available from these repositories  khronosgroupvulkanheaders2  tiawltoolbox5  tiawlspacepornactionbot6  tiawlspacepornactionci7  tiawlspacepornactioncdping8  tiawlspacepornactioncdpong9  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomhexopsvulkanheaders 2httpsgithubcomkhronosgroupvulkanheaders 3httpsgithubcomziglangzig 4httpsgithubcomtiawlglfwzig 5httpsgithubcomtiawltoolbox 6httpsgithubcomtiawlspacepornactionbot 7httpsgithubcomtiawlspacepornactionci 8httpsgithubcomtiawlspacepornactioncdping 9httpsgithubcomtiawlspacepornactioncdpong 10httpsgithubcomhexops ","joachimschmidt557/zig-termbox":"a termbox implementation in zig  zigtermbox a workinprogress implementation of the termbox api in zighttpsziglangorg works with zig 0130 ","hendriknielaender/ansi-escape.zig":"ansi escape codes for manipulating the terminal h1 aligncenter img srcansiescapepng width40 height40 altansiescapezig logo titleansiescapezig logo h1 div aligncentera minimalistic zig library for working with ansi escape sequences this library provides utilities for cursor control screen manipulation and terminal resetting through a simple and efficient apibrbrdiv div aligncenter mit licensehttpsimgshieldsiobadgelicensemitbluesvghttpsgithubcomhendriknielaenderansiescapezigblobheadlicense github code size in byteshttpsimgshieldsiogithublanguagescodesizehendriknielaenderansiescapezig prs welcomehttpsimgshieldsiobadgeprswelcomebrightgreensvghttpsgithubcomhendriknielaenderansiescapezigblobheadcontributingmd div  features  cursor positioning and movement  screen and line erasure  terminal reset operations  easytouse lightweight api  installation 1 run the following command to fetch the ansiescapezig package shell zig fetch httpsgithubcomhendriknielaenderansiescapezigarchivecommittargz save  using zig fetch simplifies managing dependencies by automatically handling the package hash ensuring your buildzigzon file is up to date 2 add the module in buildzig diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption  const opts   target  target optimize  optimize   const ansimodule  bdependencyansiescape optsmoduleansiescape const exe  baddexecutable name  test rootsourcefile  bpathsrcmainzig target  target optimize  optimize   exerootmoduleaddimportansiescape ansimodule exeinstall     quick start zig const std  importstd const ansi  importansiescapeansi pub fn main void  const stdout  stdiogetstdoutwriter  print initial lines try stdoutprintline 1nline 2nline 3n   move up one line clear it and replace it try ansicursorupstdout 1 try ansieraselinestdout try stdoutprintupdated line 2n   hide cursor wait for user and then restore try ansicursorhidestdout try stdtimesleep1000000000  1 second try ansicursorshowstdout    api the ansiescapezig library offers a structured api organized into several key components cursor scroll erase and clear each component provides a set of functions to perform specific terminal manipulations the cursor struct allows precise control over cursor positioning and movement including absolute and relative movements hidingshowing the cursor and savingrestoring cursor positions the scroll struct enables scrolling the terminal content up or down by a specified number of lines the erase struct provides functions to clear parts of the screen or lines such as erasing the entire screen clearing lines or removing content above or below the cursor finally the clear struct includes functions to reset the terminal to its default state together these components offer a flexible and powerful api for managing terminal behavior through ansi escape codes ","nektro/zig-asn1":"zig parser for asn.1 der binary encoding.  zigasn1 zig parser for asn1 der binary encoding  itu x680httpswwwituintrecdologinpubasplangeidtrecx680202102ipdfetypeitems abstract syntax notation one asn1  itu x690httpswwwituintrecdologinpubasplangeidtrecx690202102ipdfetypeitems asn1 encoding rules ","echoptic/bitflags":"this repository has no description.  bitflags  usage add this to your buildzig zig const bitflags  bdependencybitflags  exerootmoduleaddimportbitflags bitflagsmoduleroot  and this to your source code zig const bitflags  importbitflags   example zig const std  importstd const assert  stddebugassert const bitflags  importbitflags  the bitflags function generates a struct that has all flags and needed padding const flags  bitflagsbitflagsenumu8   the value a at bit position 0 a  0b00000001  the value b at bit position 1 b  0b00000010  the value c at bit position 4 c  0b00010000  pub fn main void  const flags flags  bitcastasu8 0b10001  check which flags are used assertflagsa and flagsb and flagsc  you can also check flags like this but you need to make sure that there are  no unspecified bits present in the number or the result wont be correct assertstdmetaeqlflags  a  true c  true   if you dont think the input will contain only expected bit flags  you can use bitflagszerounused to set all padding fields to 0 assertstdmetaeqlbitflagszerounusedflags  a  true c  true     zig version support currently supported zig version is the latest master ","tiawl/toolbox":"a toolkit to package & maintain c apis for @ziglang  toolbox a toolkit to package  maintain c apis for zig2  important note this package was originally thought for the tiawlspaceporn1 dependencies chain it is actively used in it but it is also possible to use it in other projects however maybe some features are always binded to its original conception guideline for this reason this repository is open to breaking proposals so if you are using it for your own needs expect breaking but also documented changes for each release if you want to see how to use it you can check repositories list into the cicd reminder sectionhttpsgithubcomtiawltoolboxtreetrunkcicdreminder  dependencies the zig2 part of this package is relying on the latest zig2 release 0130 and will only be updated for the next one so for the 0140  cicd reminder these repositories are automatically updated when a new release is available  tiawlvulkanzig3  tiawlwaylandzig4  tiawlx11zig5  tiawlglfwzig6  tiawlcimguizig7  tiawlspirvzig8  tiawlglslangzig9  tiawlshaderczig10  tiawlonigurumazig15  tiawllibjqzig14 this repository is automatically updated when a new release is available from these repositories  tiawlspacepornactionci11  tiawlspacepornactioncdping12  tiawlspacepornactioncdpong13  documentation a minimal documentation is available herehttpsgithubcomtiawltoolboxblobtrunkdocmd  license this repository is dedicated to the public domain see the license file for more details 1httpsgithubcomtiawlspaceporn 2httpsgithubcomziglangzig 3httpsgithubcomtiawlvulkanzig 4httpsgithubcomtiawlwaylandzig 5httpsgithubcomtiawlx11zig 6httpsgithubcomtiawlglfwzig 7httpsgithubcomtiawlcimguizig 8httpsgithubcomtiawlspirvzig 9httpsgithubcomtiawlglslangzig 10httpsgithubcomtiawlshaderczig 11httpsgithubcomtiawlspacepornactionci 12httpsgithubcomtiawlspacepornactioncdping 13httpsgithubcomtiawlspacepornactioncdpong 14httpsgithubcomtiawllibjqzig 15httpsgithubcomtiawlonigurumazig ","srjilarious/testz":"a testing library for zig testz logoimagestestzpng version badgehttpsimgshieldsiobadgeversion061brightgreen zig version badgehttpsimgshieldsiobadgezig20version014023f7a41dlogozig license badgehttpsimgshieldsiobadgelicensemitblue  overview testz is a testing library for zig that provides some extra features compared to the built in unit testing  color output with both a verbose mode and nonverbose mode  a nonverbose mode where each test shows as a symbol for passed skipped or failed nonverbose outputimagesnonverboseoutputpng  in verbose mode you can see the name of each test run and how long it took to run failing test example verbose outputimagesverboseoutputpng  in both cases a test run summary lets you know how many tests ran and the overall time  easy filtering by group tag or test name itself  making it easier to set a breakpoint and debug a single test  provides a test runner utility function with argument parsing for a default use case  has a test discovery helper that searches for tests by finding public functions in a passed in module allowing tests to be skipped by prepending skip to the start of the function name  stack traces of relevant code only  skips stack frames from testz itself as well as main where the test runner is called  stack traces provide context lines around the stack frame testz runners are just another executable you setup in your buildzig with the library providing a number of helpers to make it as easy as possible to create tests debugging is simple since you can run your debugger just like with any normal flat executable and use the built in filtering to narrow down what test or set of tests gets run  example check the example program under example with a main program and a separate test program  test module a module of tests looks like zig const std  importstd const testz  importtestz pub fn allownontestzerrorstest void  const mem  try stdheappageallocatorallocu8 10 defer stdheappageallocatorfreemem try testzexpectequaltrue true  pub fn alwaysfailtest void  try testzfail  pub fn successtest void  try testzexpectequal12 12 try testzexpectequalstrhello hello try testzexpectnotequal10 20 try testzexpectnotequalstrhello world try testzexpecttruetrue try testzexpectfalsefalse  pub fn skiptest void   nothing to see here   the test functions are simply any public function in a module you pass into discovertests the testz library has a number of expectxyz functions you can use to make assertions in your code if one fails testz will capture the name of the failed test error message and stack trace with contextual lines  test runner this is a test runner program using the builtin testzrunner method that you could use in your project which handles standard argument parsing it also shows test discovery by passing in modules as groups to the discovertests method testsmainzig const std  importstd const testz  importtestz const discoveredtests  testzdiscovertests testzgroup name  expect tests tag  expect mod  importexpecttestszig  testzgroup name  misc tests tag  misc mod  importmisctestszig   pub fn main void  try testztestzrunnerdiscoveredtests   the function testszdiscovertests takes a tuple of either direct module imports or testzgroup structs which contain a group name and tag for filtering as well as the module to scan for test functions  a buildzig setup run zig fetch save httpsgithubcomsrjilarioustestz to add testz as a dependency in your buildzigzon file next in your buildzig you would create a new exe for your tests and add zig const testzmod  bdependencytestz   testsexerootmoduleaddimporttestz testzmodmoduletestz  see the project under example for how this looks in a simple dummy project  planned features the library has all of the initial features i set out to implement feel free to open an issue or open a pr if there is a feature youd like to see  roadmap  ideas    capture number of assertions in each test ","falsepattern/zig-glfw":"ziggified glfw bindings with 100% api coverage, zero-fuss installation, cross compilation, and more.  zigglfw perfected glfw bindings for zig with 100 api coverage zerofuss installation cross compilation and more  features  zerofuss installation crosscompilation at the flip of a switch and broad platform support  100 api coverage every function type constant etc has been exposed in a ziggified api  community maintained the mach enginehttpsmachengineorg project no longer uses glfw and so this project is now communitymaintained pull requests are welcome and will be reviewed some old documentation is available herehttpsmachengineorgv04pkgmachglfw most of which is replicated below  what does a ziggified glfw api offer  enums always know what value a glfw function can accept as everything is strictly typed and use the nice zig syntax to access enums like windowgetkeyescape instead of cglfwgetkeywindow cglfwkeyescape  slices instead of c pointers and lengths  generics so you can just use windowhint instead of glfwwindowhint glfwwindowhintstring etc  packed structshttpsziglangorgdocumentationmasterpackedstruct represent bit masks so you can use if joystickdown and joystickright instead of if joystick  cglfwhatdown and joystick  cglfwhatright etc  methods eg mywindowhint instead of glfwwindowhintmywindow   true and false instead of cglfwtrue and cglfwfalse constants  how do i use opengl vulkan etc with this youll need to bring your own library eg  opengl castholmzigglgenhttpsgithubcomcastholmzigglgen examplehttpsgithubcomslimsagmachglfwopenglexample  vulkan snektronvulkanzighttpsgithubcomsnektronvulkanzig examplehttpsgithubcomslimsagmachglfwvulkanexample  getting started first zig init to create a zig project then you will need to add machglfw to your buildzigzon and update your buildzig and srcmainzig files  buildzigzon machglfw uses the zig package manager to add it as a dependency run the following command sh zig fetch save githttpsgithubcomfalsepatternzigglfw  this will add an entry for zigglfw to your buildzigzon  buildzig add the following to your buildzig below your const exe  baddexecutable line zig  use zigglfw const glfwdep  bdependencyzigglfw  target  target optimize  optimize  exerootmoduleaddimportglfw glfwdepmodulezigglfw   srcmainzig heres an example program to get you started zig const std  importstd const glfw  importglfw  default glfw error handling callback fn errorcallbackerrorcode glfwerrorcode description 0const u8 void  stdlogerrglfw  sn  errorcode description   pub fn main void  glfwseterrorcallbackerrorcallback if glfwinit  stdlogerrfailed to initialize glfw s glfwgeterrorstring return errorglfwinitfailed  defer glfwterminate  create our window const window  glfwwindowcreate640 480 hello zigglfw null null  orelse  stdlogerrfailed to create glfw window s glfwgeterrorstring return errorwindowcreationfailed  defer windowdestroy  wait for the user to close the window while windowshouldclose  windowswapbuffers  render your graphics here glfwpollevents     a warning about error handling unless the action youre performing is truly critical to your application continuing further you should avoid terminating on glfw errors and log them instead unfortunately glfw must return errors for a large portion of its functionality on some platforms but especially for wayland in particular if you want your application to run well for most linux users you should eg merely log errors that are not critical here is a rough list of functionality wayland does not support  windowseticon  windowsetpos windowgetpos  windowiconify windowfocus  monitorsetgamma  monitorgetgammaramp monitorsetgammaramp for example windowgetpos will always return x0 y0 on wayland due to lack of platform support ignoring this error is a reasonable choice for most applications however errors like this can still be caught and handled zig const pos  windowgetpos  option 1 convert a glfw error into a zig error  heed our warning about wayland above though glfwgeterrorcode catch err  stdlogerrfailed to get window position error err return err  or fall back to an alternative implementation   option 2 log a humanreadable description of the error if glfwgeterrorstring description  stdlogerrfailed to get window position s description     option 3 use a combination of the above approaches if glfwgeterror err  const errorcode  errerrorcode  zig error const description  errdescription  humanreadable description stdlogerrfailed to get window position error s errorcode description     note that the above example relies on glfws saved error being empty otherwise previously emitted errors may be mistaken for an error caused by windowgetpos if your application frequently ignores errors it may be necessary to call glfwclearerror or defer glfwclearerror to ensure a clean slate for future error handling  glfw version we generally follow the latest master version of glfw as recorded herehttpsgithubcomfalsepatternglfw as this allows us to work with the glfw author to fix eg undefined behavior that zig catches and benefit from the latest  greatest changes  such as runtime x11wayland switching recently ","travisstaloch/combinatorics.zig":"a port of julia's combinatorics library along with miscellaneous related tools.  combinatoricszig an incomplete port of julias combinatorics libraryhttpsgithubcomjuliamathcombinatoricsjl along with miscellaneous related tools warning this library is very immature untested and may have bugs use at your own risk this library provides itertors over set permutations and combinations it also provides an nchooseksrcmisczig iterator combination set sizes are limited to 127 permutations and nthperm set sizes are limited to 34 for larger set sizes use nthpermbig permutationsbig nchoosekbig and combinationsbig  usage  get source  via gyrohttpsgithubcommattnitegyro package manager  in console   gyro add src github travisstalochcombinatoricszig  in buildzig  const pkgs  importgyropkgs  pkgsaddalltoexelibtests  otherwise copy relevent files from src into your project or git submodule the entire project  run tests to test this project console zig build test  or with gyro console gyro build test   examples look at the tests in permutationszigsrcpermutationszig combinationszigsrccombinationszig and misczigsrcmisczig tests are usually found at the bottom of the files or directly after the thing theyre testing  todo  export a c api  support larger sets by using big integers  x nthpermbig and permutationsbig  x nchoosekbig and combinationsbig","weskoerber/kewpie":"a simple query string parser for zig. testhttpsgithubcomweskoerberkewpieactionsworkflowstestyamlbadgesvghttpsgithubcomweskoerberkewpieactionsworkflowstestyaml docshttpsgithubcomweskoerberkewpieactionsworkflowsdocsyamlbadgesvghttpsgithubcomweskoerberkewpieactionsworkflowsdocsyaml  kewpie a simple query string parser for zig  getting started  prerequisites  zighttpsziglangorgdownload 0120 or newer  installation 1 add kewpie as a dependency in your project using zigs package manager console zig fetch save githttpsgithubcomweskoerberkewpiegit011  2 add kewpie module to your buildzig zig const kewpie  bdependencykewpie  target  target optimize  optimize  exerootmoduleaddimportkewpie kewpiemodulekewpie   usage  parse entire query string into a hash map zig const std  importstd const kewpie  importkewpie pub fn main void  var gpa  stdheapgeneralpurposeallocator defer if gpadeinit  ok panicleak const uri  try stduriparsehttpsexamplecomhelloworld const queryparams  try kewpieparsegpaallocator uri defer queryparamsdeinit if queryparamsgethello value   value holds the value world       parse the query string into an iterator zig const std  importstd const kewpie  importkewpie pub fn main void  const uri  try stduriparsehttpsexamplecomhelloworld var queryparams  kewpieiteruri while queryparamsnext param   param holds a queryparam struct      ","allyourcodebase/libmaxminddb":"zig build of libmaxminddb library.  libmaxminddb cicishdciurl lclcshdlcurl  zig build of libmaxminddb libraryhttpsgithubcommaxmindlibmaxminddb  rocket usage  add libmaxminddb dependency to buildzigzon sh zig fetch save httpsgithubcomallyourcodebaselibmaxminddbarchivegittagorcommithashtargz   use libmaxminddb dependency in buildzig zig const libmaxminddbdep  bdependencylibmaxminddb  target  target optimize  optimize  const maxminddbmod  libmaxminddbdepmodulemaxminddb compilerootmoduleaddimportmaxminddb maxminddbmod   markdown links  cishd httpsimgshieldsiogithubactionsworkflowstatusallyourcodebaselibmaxminddbciyamlbranchmainstyleforthebadgelogogithublabelcilabelcolorblack ciurl httpsgithubcomallyourcodebaselibmaxminddbblobmaingithubworkflowsciyaml lcshd httpsimgshieldsiogithublicenseallyourcodebaselibmaxminddbsvgstyleforthebadgelabelcolorblack lcurl httpsgithubcomallyourcodebaselibmaxminddbblobmainlicense ","simonlschlee/hamt":"hamt and stencilarrays implementation in zig  hamt and stencilarrays a workinprogress implementation of hamts hash array mapped tries and stencilarrays stencilvectors in zig based on the ideas presented in theses papers  ideal hash trees bagwell phil 2001httpsinfoscienceepflchrecord64398  runtime and compiler support for hamtshttpswwwoldcsutahedupltpublicationsdls21tzfpdf  description hamts are bitwise tries that have a compact memory layout they are useful data structures that can be used as a keyvalue mapping they also can be used as a persistent data structure which means that old versions keep working and different versions can share nodes this can be useful to implement things like undo or wherever it is helpful to keep old versions of a value without having to create full copies manually this implementation contains dynamic variants for runtime usage with both pointer and index support imperative and persistent old versions stay valid behavior based on user configuration it also has simplified static implementations that can be modified at comptime without needing an allocator and then frozen and queried at runtime if you have ideas for improvements feel free to open an issue  docs httpssimonlschleegithubiohamt  examples take a look at srcexamplezig for some example code you can run this after cloning this repository by running zig run srcexamplezig the documentation also contains usage examples in the form of doctests ","durobot/export_ppm":"a couple of functions to export data as a ppm/pgm image file from your zig code  exportppm just a couple of functions in zig that export image data rgbrgbagrayscalegrayscalealpha but alpha channel is ignored 8 or 16 bits per channel as ppmpgm files not enough code to be called a library ppm and pgm are very simple graphic file formats but they are widespread enough for popular editors like gimphttpswwwgimporg kritahttpskritaorg or adobe photoshophttpswwwadobecomcreativecloudfiletypesimagerasterppmfilehtml to be able to open them meaning you can quickly dump whatever you want from your zig programs as a ppmpgm file and open it in an editor see httpsenwikipediaorgwikinetpbmuseskinvector httpsnetpbmsourceforgenetdocppmhtml check out the tests in exportppmzig for examples of use testdatasrc folder contains png images i used as test data ignore them or use them however you want i release them in public domain exportppmzig is licensed under the mit licensehttpsenwikipediaorgwindexphptitlemitlicenseuseskinvector just drop exportppmzig into your project and add const eppm  importexportppmzig or use the zig package manager 1 in your projects buildzigzon in dependencies add zig exportppm   url  httpsgithubcomdurobotexportppmarchivegit commit hash 40 hex digitstargz hash  zig package hash 68 hex digits  use arbitrary hash get correct hash from the error   2 in your projects buildzig in pub fn build before binstallartifactexe add zig const eppm  bdependencyexportppm  target  target optimize  optimize  exerootmoduleaddimportexportppm eppmmoduleexportppm  3 add const eppm  importexportppmin your source files 4 build your project with zig build as you normally do","games-by-mason/zex":"a texture utility for zig.  zex a texture utility for zig  rationale games typically ship with a lot of texture data it may be tempting to ship texture data as images but image formats are typically a poor representation for texture data  image formats typically must be uncompressed before being uploaded to the gpu  image formats typically cant contain prebaked mipmapshttpsenwikipediaorgwikimipmap  image formats typically cant contain cubemapshttpsenwikipediaorgwikicubemapping  image formats typically do not indicate if their alpha is premultipliedhttpstomforsyth1000githubioblogwikihtml5b5bpremultiplied20alpha5d5d  etc texture formats like khronos ktxhttpswwwkhronosorgktx and microsofts ddshttpslearnmicrosoftcomenuswindowswin32direct3dddsdxgraphicsddspguide are designed for exactly this use case not only do these texture formats support the aforementioned features they also support lossy gpu compression formats that dont need to be decompressed because the gpu can sample from the compressed data increasing performance while decreasing memory usage while convenient these formats do not provide compression ratios competitive with normal image formats so it is typical to apply additional lossless compression in a strategy called supercompression typically one would attempt to apply the former lossy compression in such a way as to reduce entropy increasing the effectiveness of the lossless compression this high level strategy is effective but its hard to come by tools that make employing it easy so its typical for small games to either reinvent the wheel or miss out on the benefits of these formats entirely this library aims to fill that gap in particular zig is uniquely suited to make this process easy via its build system which can be extended with tools like zex to compress textures at build time automatically providing caching and parallelism  whats provided  command line tool the command line tool encodes can be called manually or automatically from zigs build system it can read any image format supported by stb imagehttpsgithubcomnothingsstbblobmasterstbimageh and encode it to the following formats  r8g8b8a8uint  r8g8b8a8srgb  r32g32b32a32sfloat  bc7srgbblock  bc7unormblock bc7 compression is achieved with bc7encrdohttpsgithubcomrichgel999bc7encrdo bc7 encoding optionally supports a reduced entropy mode and rate distortion optimization both of which typically increase the effectiveness of lossless compression supports premultiplying alpha while encoding output files are stored as ktx2httpswwwkhronosorgktx supercompression with ktx2s zlib mode is supported  library this package exports a ktx2 library for loading ktx2 files in engine  viewing textures zex is not a texture viewer and ktx2 files cant be opened in typical image editors this is to be expected since textures store a lot of data normal image editors dont expect in formats that dont make sense for normal interchange i recommend tacent viewhttpsgithubcombluescantacentview for inspecting textures  development links  ktx2 spechttpsregistrykhronosorgktxspecs20ktxspecv2htmlprohibitedformats  data format descriptor spechttpsregistrykhronosorgdataformatspecs13dataformat13html  reference ktx implementation and validatorhttpsgithubcomkhronosgroupktxsoftware  zex is a work in progress planned features for 10 can be found herehttpsgithubcomgamesbymasonzexmilestone1 ","johan0a/gc.zig":"a zig garbage collector interface for the bdwgc garbage collector.  note  dont use this for anything serious  gczig a zighttpsziglangorg garbage collector package that provides a garbage collector interface as well as the bdwgc boehm gchttpsgithubcomivmaibdwgc garbage collector and more  usage zig const ziggc  importziggc pub fn main void   create a new garbage collector interface const gc  ziggcbdwgarbagecollectorgc  coerce the gc interface to the standard allocator interface before passing it to arraylist var list  stdarraylistu8initgcallocator try listappendslicehello try listappendslice world stddebugprintsn listitems  the program will exit without memory leaks d   why use a specialized garbage collector interface gc br 1 it signals to the caller that the function was made with the intention of using a garbage collector 2 not yet implemented the garbage collector can benefit from more information being passsed in about the allocation for better performance for example if the allocationg contains pointers or not and that is not possible with the standard allocator interface otherwise the bdwgarbagecollector acts similarely to a standard allocator and can be used with the standard allocator interface by using gcallocatorself gc or bdwgarbagecollectorallocator  install 1 add ziggc to the depency list in buildzigzon sh zig fetch save httpsgithubcomjohan0agczigarchiverefstags020targz  2 config buildzig zig  const ziggc  bdependencyziggc  target  target optimize  optimize  exerootmoduleaddimportziggc ziggcmoduleziggc    license licensed under the mit licenselicense ","srmadrid/zgm":"zig graphics mathematics  zgm zig graphics mathematics a zig library for mathematics for graphics programming  current features  vectors  matrices  columnmajor  transformations are offered only for homogeneous coordinates ie 3x3 matrices work as 2d transformations and 4x4 matrices work as 3d transformations and no 2x2 or 3x3 matrices are provided for 2d or 3d transformations respectively  quaternions  colors all transformations assume a righthanded coordinate system  installation to use this library in your project run bash zig fetch save githttpsgithubcomsrmadridzgm  and add it to your buildzig file zig const zgm  bdependencyzgm  exerootmoduleaddimportzgm zgmmodulezgm  ","allyourcodebase/json-c":"json-c ported to the zig build system  buildzig for jsonc provides a package to be used by the zig package manager for c programs  status for now the hardcoded config assumes linux  refname  jsonc version  zig 012x  zig 013x  zig 014x    017  jsonc01720230812         018  jsonc01820240915         0181  jsonc01820240915         use add the dependency in your buildzigzon by running the following command bash zig fetch save githttpsgithubcomallyourcodebasejsonc0181  then in your buildzig zig const jsonc  bdependencyjsonc  target  target optimize  optimize  const libjsonc  jsoncartifactjsonc  wherever needed exelinklibrarylibjsonc  ","leecannon/zig-xbeam":"a very partial re-implementation of the rust crate crossbeam.  zigxbream this repo is a very partial pull requests welcome reimplementation of the rust crate crossbeamhttpsgithubcomcrossbeamrscrossbeam only the following types are implemented  data structures  xbeamqueuearrayqueue  a bounded mpmc queue that allocates a fixedcapacity buffer on construction  xbeamqueuearrayqueuenoalloc  an implementation of arrayqueue that does not allocate  utilities  xbeamutilsbackoff  for exponential backoff in spin loops  xbeamutilscachelinelength  replacement for the rust cachepadded used like this zig var aligned usize alignxbeamutilscachelinelength  0   contributions are welcome  how to use download the repo somehow then either  use a package manager  zigmodhttpsgithubcomnektrozigmod  zkghttpsgithubcommattnitezkg  add as package in buildzig  to buildzig add zig exeaddpackagepathxbeam zigxbeamsrcindexzig  or whatever the path is   then the package is available within any zig file zig const xbeam  importxbeam   import directly in any zig file add zig const xbeam  importzigxbeamsrcindexzig  or whatever the path is from that file  ","gonzooo/zig-humantime":"mini library for expressing integer time values in more human readable ways  zighumantime this library exports two functions to convert human readable time strings into integer values zig test 1h2m3s  const time  comptime seconds1h2m3s  compilelogtime  7446 testingexpectequaltime 3723  test 2h4m6s  const time  comptime seconds2h4m6s testingexpectequaltime 3600  2  4  60  6  test 1h2m3s in milliseconds  const formatstring  1h2m3s const time  millisecondsformatstring  compilelogtime  runtime value testingexpectequaltime comptime secondsformatstring  1000  test 5d4h3m2s  testingexpectequalseconds5d4h3m2s 446582  ","tiawl/oniguruma.zig":"oniguruma packaged for @ziglang  onigurumazig this is a fork of kkosoniguruma1 to package the libonig c api for zig2  why this fork  the intention under this fork is to package kkosoniguruma1 for zig2 so  unnecessary files have been deleted  the build system has been replaced with buildzig  a cron runs every day to check kkosoniguruma1 then it updates this repository if a new release is available  how to use it the goal of this repository is not to provide a zig2 binding for kkosoniguruma1 there are at least as many legit ways as possible to make a binding as there are active accounts on github so you are not going to find an answer for this question here the point of this repository is to abstract the kkosoniguruma1 compilation process with zig2 which is not new comers friendly and not easy to maintain to let you focus on your application so you can use onigurumazig  as raw no available example now  as a daily updated interface for your zig2 binding of kkosoniguruma1 no available exemple now  dependencies the zig2 part of this package is relying on the latest zig2 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  kkosonigurumahttpsgithubcomtiawlonigurumazigblobtrunkreferencesoniguruma  cicd reminder these repositories are automatically updated when a new release is available  tiawllibjqzig3 this repository is automatically updated when a new release is available from these repositories  kkosoniguruma1  tiawltoolbox4  tiawlspacepornactionbot5  tiawlspacepornactionci6  tiawlspacepornactioncdping7  tiawlspacepornactioncdpong8  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomkkosoniguruma 2httpsgithubcomziglangzig 3httpsgithubcomtiawllibjqzig 4httpsgithubcomtiawltoolbox 5httpsgithubcomtiawlspacepornactionbot 6httpsgithubcomtiawlspacepornactionci 7httpsgithubcomtiawlspacepornactioncdping 8httpsgithubcomtiawlspacepornactioncdpong ","kassane/libzmq":"zeromq core engine in c++, implements zmtp/3.1  zeromq build statushttpsgithubcomzeromqlibzmqactionsworkflowsciyamlbadgesvghttpsgithubcomzeromqlibzmqactionsworkflowsciyaml build statushttpsciappveyorcomapiprojectsstatuse2ks424yrs1un3wtsvgtruehttpsciappveyorcomprojectzeromqlibzmq coverage statushttpscoverallsioreposgithubzeromqlibzmqbadgesvgbranchmasterhttpscoverallsiogithubzeromqlibzmqbranchmaster conan centerhttpsshieldsioconanvzeromqhttpsconaniocenterzeromq  welcome the zeromq lightweight messaging kernel is a library which extends the standard socket interfaces with features traditionally provided by specialised messaging middleware products zeromq sockets provide an abstraction of asynchronous message queues multiple messaging patterns message filtering subscriptions seamless access to multiple transport protocols and more  supported platforms a nameplatforms libzmq is mainly written in c98 with some optional c11fragments for configuration either autotools or cmake is employed see below for some lists of platforms where libzmq has been successfully compiled on  supported platforms with primary ci  os and version  architecture  compiler and version  build system  remarks    android ndk r25  arm arm64 x86 x8664  llvm see ndk  autotools  draft   ubuntu 14045 lts trusty  amd64  clang 500  autotools  stable extras gssapi pgm norm c98 mode only   ubuntu 14045 lts trusty  amd64  gcc 484  autotools  stable draft extras gssapi pgm norm tipc ipv6 also pollerpoll pollerselect also valgrind and address sanitizer executions   ubuntu 14045 lts trusty  amd64  gcc 484  cmake 3122  stable   windows server 2012 r2  x86  visual studio 2008  cmake 3122  draft   windows server 2012 r2  x86  visual studio 2010 sp1  cmake 3122  draft   windows server 2012 r2  x86  visual studio 2012 update 5  cmake 3122  draft   windows server 2012 r2  x86 amd64  visual studio 2013 update 5  cmake 3122  draft stable x86 release only also pollerepoll   windows server 2012 r2  x86  visual studio 2015 update 3  cmake 3122  draft   windows server 2016  x86  visual studio 2017 1596  cmake 3133  draft   cygwin 300 on windows server 2012 r2  amd64  gcc 740  cmake 362  draft   msys2  on windows server 2012 r2  amd64  gcc 640  cmake   draft   mac os x 1013  amd64  xcode 941 apple llvm 910  autotools  stable draft   mac os x 1013  amd64  xcode 941 apple llvm 910  cmake 3114  draft  note the platforms are regularly updated by the service providers so this information might get out of date without any changes on the side of libzmq for appveyor refer to httpswwwappveyorcomupdates regarding platform updates for travisci refer to httpschangelogtraviscicom regarding platform updates  supported platforms with secondary ci  os and version  architecture  compiler and version  build system  remarks    centos 6  x86 amd64    autotools    centos 7  amd64    autotools    debian 80  x86 amd64    autotools    debian 90  arm64 x86 amd64    autotools    fedora 28  arm64 arm32 amd64    autotools    fedora 29  arm64 arm32 amd64    autotools    fedora rawhide  arm64 arm32 amd64    autotools    redhat enterprise linux 7  amd64 ppc64    autotools    suse linux enterprise 12 sp4  arm64 amd64 ppc64 s390x    autotools    suse linux enterprise 15  amd64    autotools    xubuntu 1204  x86 amd64 ","kassane/zbpf":"write bpf in zig  zbpf writing ebpf in zig thanks to zigs comptime and btf we can equip ebpf with strong type system both at comptime and runtime  notable advantages when writing ebpf program with zbpf  different available methods based on the type of programs context suppose you want to trace the kernel function pathlistxattrhttpsgithubcomtorvaldslinuxblob7475e51b87969e01a6812eac713a1c8310372e8afsxattrcl856l857 and heres its prototype  static ssizet pathlistxattrconst char user pathname char user list  sizet size unsigned int lookupflags  as you can see it has 4 input parameters and return type is ssizet with ctx  bpfkprobename  pathlistxattrctx you could retrieve the input parameter with ctxarg0 ctxarg1 ctxarg2 and ctxarg3 respectively and return value with ctxret the type will be consistent with the above prototype if you try to access a nonexisting parameter eg ctxarg4 you will get a compilation error this also applies to syscall with bpfksyscall tracepoint with bpftracepoint and fentry with bpffentry  no more tedious error handling when writing in c you always have to check the error conditions the return value of the helper function pointer validation  with zbpf you wont care about the these cases we handle it under the hood for you just focus on the business logic the following are some examples  bpfmap takes care bpf maps update and delete error  bpfperfeventarray handles event output failure  bpfringbuffer also handles space reservation  bpfxdp validates the pointer for you if some error happens you could get all the information file line number return value  you need to debug in the kernel trace buffer   sudo bpftool prog tracelog test11717 005 d21 10990692273976 bpftraceprintk error occur at srcbpfmapzig110 return 2   how to use  prerequisite  make sure the linux kernel is built with configdebuginfobtfy  the only runtime library is libc this is not even necessary if you build with musllibc  build  download the lastest zighttpsziglangorgdownload  clone this repostory  build with zig build dbpfpathtoyourbpfprogzig dmainpathtoyourmainzig for crosscompiling you could specify the target with dtargettarget the list of all supported targets could be retrieved by zig targets moreover you could specify the target kernel with dvmlinuxpathtovmlinux to extract btf from it otherwise current kernels btf will be used thats all the generated binary is located at zigoutbinzbpf feel free to run it on your target machine heres the documentations generated by zigs autodochttpstw4452852githubiozbpf for you reference  toolstrace trace is a tool built on top of zbpf framework to trace kernel functions and syscalls its heavily inspired by retsnoophttpsgithubcomanakryikoretsnoop one improvement i made which is also what i feel when using retsnoop is that trace support show parameters according its type thanks to the zig type system this is very helpful when debugging linux kernel for more details you could check the implementation bpf sidehttpsgithubcomtw4452852zbpfblobmainsrctracebpfzig and host sidehttpsgithubcomtw4452852zbpfblobmainsrctracezig you could specify the kernel functions you want to trace with zbpf build trace dkprobekernelfunctionname dkprobe and for system calls zbpf build trace dsyscallsyscallname dsyscall you could even mix them and heres a quick demo asciicasthttpsasciinemaorga620205svghttpsasciinemaorga620205  samples for each supported feature we have the corresponding unit test you could find them under samples bpf side and srctests host side build it with zig build test dtestname and run it with sudo zigoutbintest name  bpf side  host side      exit  sourcesamplesexitzig  sourcesrctestsexitzig panic  sourcesamplespaniczig  sourcesrctestspaniczig traceprintk  sourcesamplestraceprintkzig  sourcesrcteststraceprintkzig array  sourcesamplesarrayzig  sourcesrctestsarrayzig hash  sourcesampleshashzig  sourcesrctestshashzig perfevent  sourcesamplesperfeventzig  sourcesrctestsperfeventzig ringbuf  sourcesamplesringbufzig  sourcesrctestsringbufzig tracepoint  sourcesamplestracepointzig  sourcesrcteststracepointzig iterator  sourcesamplesiteratorzig  sourcesrctestsiteratorzig fentry  sourcesamplesfentryzig  sourcesrctestsfentryzig kprobe  sourcesampleskprobezig  sourcesrctestskprobezig kmulprobe  sourcesampleskmulprobezig  sourcesrctestskmulprobezig xdp ping  sourcesamplesxdppingzig  sourcesrctestsxdppingzig have fun ","nektro/zig-iso-3166-countrys":"zig package for iso 3166 country codes  zigiso3166countrys iso 3166 country codes httpswwwisoorgiso3166countrycodeshtml  license 0bsd ","travisstaloch/multi-bounded-array":"similar to std.multiarraylist() but backed by fixed size arrays  about similar to stdmultiarraylist but backed by fixed size arrays each field of t becomes an array with length buffercapacity to access the arrays as slices use itemsfield or constitemsfield useful when a struct of small arrays is desired with capacity that is known at compile time like stdboundedarray multiboundedarrays are only values and thus may be copied  usage console  zig fetch savemultiboundedarray githttpsgithubcomtravisstalochmultiboundedarraymain  zig  buildzig const dep  bdependencymultiboundedarray  optimize  optimize target  target  exerootmoduleaddimportmultiboundedarray depmodulemultiboundedarray  zig  mainzig const multiboundedarray  importmultiboundedarraymultiboundedarray var a  multiboundedarraystruct  int u8 float f32  64     example from tests in libziglibzig which also contains more tests zig test basic  const t  struct  int u8 float f32  var a  multiboundedarrayt 64 try testingexpectequal0 alen try aappend int  1 float  1  const mutints  aitemsint try testingexpectequalu8 typeofmutints  items slice constness is inherited try testingexpectequal1 mutintslen try testingexpectequal1 mutints0 mutints0  2 const aconstcopy  a mutints0  3 const constints  aconstcopyitemsint try testingexpectequalconst u8 typeofconstints  items slice constness is inherited try testingexpectequal2 constints0    todo  x support tagged unions and sorting  x add tests from stdmultiarraylist","games-by-mason/zcs":"a zig ecs.  zcs an entity component system written in zig  status functional but not yet performant check back soon components are currently stored as a struct of arrays this is simple and allows me to validate the interface and test suite im currently migrating 2pewhttpsgithubcommasonremaley2pew if im still happy with the api when this is done ill replace the simple soa backend with a memory layout that indexes on archetype indexing on archetype will allow iterating scenes with millions of entities and skipping everything that doesnt match the given archetype query for free once this is implemented ill remove the not yet performant warning  key features  persistent keys games often feature objects whose lifetimes depend on user input zcs features persistent keys for entities so theyre never dangling even after being destroyed zig assertfireballexistses assertfireballgetes sprite  null fireballdestroyimmediatelyes assertfireballexistses assertfireballgetes sprite  null   archetype based iteration games often feature behavior that is conditional on the runtime properties of objects archetype based iteration allows you to conveniently process only entities that match a given query zig var iter  esviewiteratorstruct  mesh const mesh transform const transform effects const effects  while iternext vw  vwmeshrendervwtransform vweffects    command buffers taking advantage of modern hardware requires utilizing multiple cores but this is challenging when object lifetimes are dynamic and dependent on user input by doing destructive operations through command buffers you can efficiently queue up work on multiple threads simultaneously in a safe manner you can also do this on a single thread while iterating to avoid invalidating your iterator zig  allocate a command buffer var cb  try cmdbufinitgpa es 1000 defer cbdeinitgpa es  get the next reserved entity by reserving entities up front the command buffer allows you to  create entities on background threads safely const e  entityreservecb  schedule an archetype change for the reserved entity this will assign it storage when the  command buffer executes eaddcb rigidbody  mass  20  eaddcb sprite  index  cat   execute the command buffer and then clear it for reuse this would be done from the main thread cbexecutees cbcleares   command buffer iteration its common for game systems to need to do work when objects are created or destroyed for example you may need to make adjustments to parent child relationships in a scene graph when an object is deleted this use case is often served via callbacks but callbacks have some major downsides  theyre hard to write the caller needs a clear understanding of the context in which the callback will run and if multiple are present on the same event they need to understand the order  theyre hard to debug because control flow is taken away from the caller  theyre hard to optimize theyre run one at a time not in batch instead since all work is typically done via command buffers this use case is served much more simply via command buffer iterators zig fn updatetransformses const entities cb const cmdbuf  for cbdestroyitems entity   process each entity scheduled for destruction  var iter  cbarchchangesiteratores while iternext change   process each archetype change     generics most ecs implementations use some form of generics to provide a friendly interface zcs is no exception and zig makes this easier than ever however when important types become generic it infects the whole code baseeverything that needs to interact with the ecs also needs to become generic or at least depend on an instantiation of a generic type this makes it hard to write modularlibrary code and presumably will hurt incremental compile times in the near future as such while zcs will use generic methods where its convenient types at api boundaries are typically not generic for example entities which stores all the ecs data is not a generic type zig var es entities  try initgpa  maxentities  10000 compbytes  8192  defer esdeinitgpa   extensions two extensions are supplied these only rely on the public interface of zcs an can be ignored if you dont need them but are demonstrations of the flexibility of the api  node node allows for linking objects to other objects in parent child relationships zig thrustercmdcb nodesetparent shiptooptional   var children  shipgetnodechildreniterator while childrennext child   do something with the child object  var parent  thrustergetnodeparent  do something with the parent  there is no maximum child count and adding children does not require allocating an array this is possible because node has links to  parent  firstchild  prevsib  nextsib this is an implementation detail you do not need to keep these values in sync you just need to either call this helper to execute your command buffer with awareness of node zig nodeexecimmediatefzes cb  or to look at the documentation of this method to see how to integrate it with your own command buffer executor  transform2d transform2d represents the position and orientation of an entity in 2d space if an entity also has a node its local space is relative to that of its parent if any zig vwtransformmovees cb vwrbvelscaleddeltas vwtransformrotatees cb fromanglevwrbrotationvel  deltas  world positions are always from the last sync to synchronize all world positions you can call sync all zig transformsyncallimmediatees  sync all will only visit dirty entities and their children this is possible by using zcs as an event system entities that have not been moved since the last sync dont affect the performance of the sync similarly to node transform2d integrates with the command buffer to automatically handle parents changing etc transform2d depends on geomhttpsgithubcomgamesbymasongeom for math  examples  documentation you can generate documentation with zig build docs this library is very new and as such there are not high quality examples yet you may be able to find some example code in 2pewhttpsgithubcommasonremaley2pewtreezcs which im porting to use this library but its currently incomplete ","0xrinegade/apz":"blazigly spicy http server  apz zig api ","bcrist/zig-percent-encoding":"percent (url) encoding and decoding for zig 404 not found","tiawl/x11.zig":"x11 headers packaged for @ziglang  x11zig this is a fork of hexopsx11headers1 which itself gather various x112 headers glfw3 needs  why this forkception  the intention under this fork is the same as hexops4 had when they opened their repository gather x112 headers and package them to compile glfw4 with zig5 however this repository has subtle differences for maintainability tasks  no shell scripting  a cron runs every day to check x112 repositories then it updates this repository if a new release is available  how to use it the current usage of this repository is centered around tiawlglfwzig3 compilation but you could use it for your own projects headers are here and there are no planned evolution to modify them see tiawlglfwzig3 to see how you can use it maybe for your own need some headers are missing if it happens open an issue this repository is open to potential usage evolution  dependencies the zig5 part of this package is relying on the latest zig5 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  xorgliblibx11httpsgithubcomtiawlx11zigblobtrunkreferencesx11  xorgliblibxcbhttpsgithubcomtiawlx11zigblobtrunkreferencesxcb  xorgprotoxcbprotohttpsgithubcomtiawlx11zigblobtrunkreferencesxcbproto  xorgliblibxcursorhttpsgithubcomtiawlx11zigblobtrunkreferencesxcursor  xorgliblibxexthttpsgithubcomtiawlx11zigblobtrunkreferencesxext  xorgliblibxfixeshttpsgithubcomtiawlx11zigblobtrunkreferencesxfixes  xorgliblibxihttpsgithubcomtiawlx11zigblobtrunkreferencesxi  xorgliblibxineramahttpsgithubcomtiawlx11zigblobtrunkreferencesxinerama  xkbcommonlibxkbcommonhttpsgithubcomtiawlx11zigblobtrunkreferencesxkbcommon  xorgprotoxorgprotohttpsgithubcomtiawlx11zigblobtrunkreferencesxorgproto  xorgliblibxrandrhttpsgithubcomtiawlx11zigblobtrunkreferencesxrandr  xorgliblibxrenderhttpsgithubcomtiawlx11zigblobtrunkreferencesxrender  xorgliblibxscrnsaverhttpsgithubcomtiawlx11zigblobtrunkreferencesxscrnsaver  cicd reminder these repositories are automatically updated when a new release is available  tiawlglfwzig6 this repository is automatically updated when a new release is available from these repositories  xorgliblibx112  xorgliblibxcb7  xorgprotoxcbproto8  xorgliblibxcursor9  xorgliblibxext10  xorgliblibxfixes11  xorgliblibxi12  xorgliblibxinerama13  xkbcommonlibxkbcommon14  xorgprotoxorgproto15  xorgliblibxrandr16  xorgliblibxrender17  xorgliblibxscrnsaver18  tiawltoolbox19  tiawlspacepornactionbot20  tiawlspacepornactionci21  tiawlspacepornactioncdping22  tiawlspacepornactioncdpong23  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomhexopsx11headers 2httpsgitlabfreedesktoporgxorgliblibx11 3httpsgithubcomglfwglfw 4httpsgithubcomhexops 5httpsgithubcomziglangzig 6httpsgithubcomtiawlglfwzig 7httpsgitlabfreedesktoporgxorgliblibxcb 8httpsgitlabfreedesktoporgxorgprotoxcbproto 9httpsgitlabfreedesktoporgxorgliblibxcursor 10httpsgitlabfreedesktoporgxorgliblibxext 11httpsgitlabfreedesktoporgxorgliblibxfixes 12httpsgitlabfreedesktoporgxorgliblibxi 13httpsgitlabfreedesktoporgxorgliblibxinerama 14httpsgitlabfreedesktoporgxkbcommonlibxkbcommon 15httpsgitlabfreedesktoporgxorgprotoxorgproto 16httpsgitlabfreedesktoporgxorgliblibxrandr 17httpsgitlabfreedesktoporgxorgliblibxrender 18httpsgitlabfreedesktoporgxorgliblibxscrnsaver 19httpsgithubcomtiawltoolbox 20httpsgithubcomtiawlspacepornactionbot 21httpsgithubcomtiawlspacepornactionci 22httpsgithubcomtiawlspacepornactioncdping 23httpsgithubcomtiawlspacepornactioncdpong ","ikskuh/zig-ode":"zig ode sdk  zigode ","nektro/zig-cookies":"this repository has no description.  zigcookies","thatdreche/spinlock":"a simple spinlock in zig  spinlock a simple spinlock in zig with the same api as stdthreadmutexhttpsziglangorgdocumentationmasterstdstdthreadmutex use this only if you need a spinlock use a proper mutex with os blessings otherwise  usage first add the package to your buildzigzon zig fetch savespinlock httpsgithubcomthatdrechespinlockarchivev100targz then add the following to your buildzig zig const spinlock  bdependencyspinlock  target  target optimize  optimize  exerootmoduleaddimportspinlock spinlockmodulespinlock  ","peter-barrow/shared-memory-zig":"unified interface to shared memory on linux, macos and windows  shared memory zig overview this library implements a unified interface to shared memory on linux macos and windows  features  crossplatform support linux freebsd windows  multiple implementation strategies memfd posix shm windows file mapping  typesafe shared memory segments  automatic memory layout management with headers  builtin existence checking  installation add the following to you buildzigzon replacing the url with the latest archive for example httpsgithubcompeterbarrowsharedmemoryzigarchive699c748fbb143733183760cc7e83ded098eac6d1zip and then replacing the hash with the latest commit hash  zig  name  myproject version  000 dependencies   sharedmemory   url   hash       or alternatively run  shell zig fetch save githttpsgithubcompeterbarrowsharedmemoryziggit  add the following to your buildzig  zig const sharedmemory  bdependencysharedmemory modulesharedmemory const exe  baddexecutable  this adds the sharedmemoryzig module to the executable which can then be imported with importsharedmemoryzig exerootmoduleaddimportsharedmemoryzig sharedmemory   dependencies for compatibility with windows this requires zigwin32httpsgithubcommarlersoftzigwin32 this codebase also uses the knownfoldershttpsgithubcomziglibsknownfolderstreemaster library to get the runtime directory on linux and freebsd when using the memfd backend  example  zig const shmem  importsharedmemory const teststruct  struct  id i32 float f64 string 20u8  const shmname  teststructwithstring const count  1 var shm  try shmemsharedmemoryteststructcreateshmname count defer shmclose shmdata0id  42 shmdata0float  314   stdfmtbufprintshmdata0string hello shm  catch unreachable  open the shared memory in another process var shm2  try shmemsharedmemoryteststructopenshmname defer shm2close try stdtestingexpectequalasi32 42 shm2data0id try stdtestingexpectapproxeqabsasf64 314 shm2data0float 0001 try stdtestingexpectequalstringshello shm stdmemslicetoshm2data0string 0  ","games-by-mason/dear_imgui_zig":"a zig interface to dear imgui  dear imgui zig a zig interface for dear imguihttpsgithubcomocornutimgui generated at build time from the json generated by dearbindingshttpsgithubcomdearimguidearbindings  which version of dear imgui is built see buildzigzon at the time of writing its a recent commit on the docking branch see dear imguis readme for info on dear imgui branches  how to use dear imgui import the dearimgui module provided by this package it exports dear imgui types and functions converted to standard zig syntax you can always check the generated file if you are unsure how the names map but it should be fairly straightforward  how to build dear imgui extensions the static library for dear imgui and supported backends are provided as artifacts under the same name as the zig modules you can link dear imgui extensions to these  how to use the backends right now this package only exports the vulkan backend dearimguivulkan contributions are welcome if youd like to add others the process should be fairly straightforward  how it works dearbindings generates a c wrapper for dear imgui and a json file detailing the declarations the results of executing dearbindings are cached in srccached to avoid a python dependency dearbindings is implemented in python at build time generatezig is called on the relevant json files to generate a zig module that links to the wrapper generated by dearbindings dearbindings does not provide enough data to generate perfect pointer types for all situations but a reasonable conservative heuristic is used to avoid c where possible this could be improved in the future through whitelists  how to change versions update buildzigzon and then if the headers changed regenerate them into srccached with dearbindingshttpsgithubcomdearimguidearbindings heres how to build cimguih sh python3 dearbindingspathdearbindingspy o srccachedcimgui dearimguipathimguih  heres how to build a backend using vulkan as an example sh python3 dearbindingspathdearbindingspy backend imconfigpath dearimguipathimconfigh o srccachedcimguiimplvulkan dearimguipathbackendsimguiimplvulkanh  if generatorzig fails you may need to add missing values to the enumeration stdjson does not provide helpful errors at the time of writing the easiest way to debug this is to comment out the actual generation code and all fields in header adding them back until you figure out which are causing the issue you can also debug the generator with the generate command  known differences  doesnt build binarytocompressedc  doesnt build misccppimguistdlibcpp  freetype mode not supported but easily could be  only the vulkan backend is provided as of now but others are easy to add  the vulkan backend assumes imguiimplvulkannoprototypes  the vulkan backend assumes dynamic rendering is available  vkversion13 or vkkhrdynamicrendering  we could add support for this conditional but it seems unlikely to get much use ","zigster64/dotenv.zig":"load env vars from .env files on boot   dotenvzig load env vars from env files on boot  on boot calling envinitalloc env will return an env that includes values from the env file lines starting with  are treated as comments all other lines will take the form  envvarnamevalue  lines that do not have a  sign will be skipped  install  zig fetch save githttpsgithubcomzigster64dotenvzigmain  then add to your buildzig zig const dotenv  bdependencydotenv  dependency options here  exerootmoduleaddimportdotenv dotenvmoduledotenv    microlibray alert  this is a microlibrary the code is trivial enough consider just copypasting the file dotenvzig into your project instead of adding yet another microdependency its only about 20 lines of code up to you  usage zig const dotenv  importdotenv pub fn main void   create an allocator var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer gpadeinit  init the dotenv object  this will read the env file at runtime var env  try dotenvinitallocator env defer envdeinit  gen env vars var databasehost  envgetdatabasehost orelse localhost var databasename  envgetdatabasename orelse zigzagdata  do stuff  change the value of the databasehost try envputdatabasehost postgreslocal    how it works on boot loads the env file and parses each line if the line contains an  char then it splits the line on that first  and then adds key  value to the environment uses stdprocessenvmap  which is an inmemory clone of the initial env ","gasinfinity/nzfat":"a very generic and configurable fat12/16/32 implementation with vfat support.   nzfat wip a very generic and configurable fat121632 implementation library with vfat support written in zig almost all the features are configurable from long filename support and the max number of characters it supports to the maximum supported fat type 121632 asciicasthttpsasciinemaorgazf1lmr1kpflkj7kxofwcuuipesvghttpsasciinemaorgazf1lmr1kpflkj7kxofwcuuipe   usage the library is not mature enough for production usage almost everything revolves around the type nzfatfatfilesystem and the function nzfatformatmake please see a basic exampleexamplesbasiczig or messy testing code that uses all its featuressrctestingmainzig   todo  small todos  x searching for 1 free entry in a directory aka short filename only  x searching for a free cluster linearly  x deletion of files and directories  x short filename alternatives for functions when using a vfat fatfilesystem  x searching for n free clusters for file and directory creation  x allocate new directory entries if no entries found and not in root fat1216 only  x allocate clusters for files  x creation of files and directories with short names  x api to modify dates and times and attributes in entries  x api for reading and writing file contents  x searching for n free entries in a directory and creation of directory entries with lfn entries if needed    finish crosssection long filename directory creation    api for moving files without copying  x create fat formatted media    finish fat32 formatting    proper fat unmounting    utility check and fix fat filesystem  x utility to write files given a buffer aka writeallbytes    comptime utility function to create directories and files given a comptime known path really useful    comptime utility function to search for directories and files given a comptime known path really useful  big todos  x reorganizerename things    think about how to handle errors while writing eg currently an error while allocating clusters will leave the fat table with dangling clusters    behaviour tests    rewrite codepage name handling    rewrite utf16 name handling    implement some sort of io cache or leave it to the blockdevice implementation    some sort of cache strategy for fat entries if requested    api freeze ","hendriknielaender/shuffling-allocator.zig":"a shuffling allocator  shufflingallocatorzig the shufflingallocator package provides a type that wraps an existing allocator and shuffles the order of heap allocations effectively randomizing the placement of heapallocated memory this randomization is useful for testing benchmarking and performance evaluation allowing you to decouple the effects of memory locality from performance metrics during code optimization or profiling  features  heap allocation shuffling randomizes the placement of heap allocations to avoid accidental memory locality reducing cache effects during performance testing  concurrency support designed to support multithreaded environments while maintaining proper synchronization using mutexes  customizable randomization uses a global random state to shuffle allocations across different size classes enhancing the reliability of performance tests  raw memory management provides custom alloc free resize and remap methods adhering to the zig standard librarys allocator interface  use cases  performance testing separate the impact of memory locality from other performance factors when benchmarking code changes  memory management research experiment with different allocation patterns and their impact on system performance  randomization for debugging randomize heap allocations to test for latent bugs or memoryrelated issues that depend on specific memory layouts  note on security use cases while randomizing heap allocation addresses certain memory access patterns that could influence performance this package is not designed for security purposes eg as a substitute for address space layout randomization aslr if youre looking for a solution focused on security hardening this package may not meet your needs due to design choices that prioritize performance over security  installation to use this package in your zig project you can simply import it zig const shufflingallocator  importshufflingallocatorshufflingallocator   api reference this is the primary type in this package implementing the standard stdmemallocator interface with the following methods  alloc allocates memory with randomized placement if the memory size is too large for shuffling it falls back to standard allocation  free frees the memory also randomizing its location in the heap  resize resizes the allocated memory without applying shuffling  remap remaps the memory without applying shuffling inspired by httpsgithubcomfitzgenshufflingallocator ","hendriknielaender/ulid.zig":"zig universally unique lexicographically sortable identifier  ulidzig zighttpsimgshieldsiobadgezigf7a41dstyleflatlogoziglogocolorwhitehttpsziglangorg github actions workflow statushttpsimgshieldsiogithubactionsworkflowstatushendriknielaenderulidzigunittestyml github releasehttpsimgshieldsiogithubvreleasehendriknielaenderulidzighttpsgithubcomhendriknielaenderulidzigreleases github code size in byteshttpsimgshieldsiogithublanguagescodesizehendriknielaenderulidzig a universally unique lexicographically sortable identifier ulid implementation for zig providing a robust and efficient way to generate unique identifiers that are both timebased and random  why ulid uuid can be suboptimal for many usescases because  it isnt the most character efficient way of encoding 128 bits of randomness  uuid v1v2 is impractical in many environments as it requires access to a unique stable mac address  uuid v3v5 requires a unique seed and produces randomly distributed ids which can cause fragmentation in many data structures  uuid v4 provides no other information than randomness which can cause fragmentation in many data structures  features  128bit compatibility with uuid  121e24 unique ulids per millisecond  lexicographically sortable  canonically encoded as a 26 character string as opposed to the 36 character uuid  uses crockfords base32 for better efficiency and readability 5 bits per character  case insensitive  no special characters url safe  monotonic sort order correctly detects and handles the same millisecond  test coverage  ulid generation validates timestamp and randomness  encoding ensures ulids are correctly encoded into base32 strings  decoding confirms accurate decoding from base32 strings  monotonicity tests that ulids generated within the same millisecond are monotonically increasing  overflow handling checks proper error handling when randomness overflows  edge cases validates behavior with maximum ulid values and invalid inputs  specification for detailed information on the ulid specification refer to the ulid specificationhttpsgithubcomulidspec  usage this library provides an implementation of ulid universally unique lexicographically sortable identifier generation and decoding in zig  generating a ulid you can generate a new ulid as a 26character crockfords base32 string zig const ulid  try ulidgenerate stddebugprintgenerated ulid sn ulid  this will output a unique lexicographically sortable string  decoding a ulid to decode a ulid string into its components timestamp and randomness zig const ulidstr  01an4z07by79ka1307sr9x4mv3 var decodedulid ulid  undefined try uliddecodeulidstr0 decodedulid stddebugprintdecoded ulid timestampd randomnessdn decodedulidtimestamp decodedulidrandomness   monotonic ulid generation to generate ulids with guaranteed monotonicity within the same millisecond use the ulidgenerator zig var generator  ulidmonotonicfactory const ulid  try generatorgeneratenull  passing null uses the current timestamp stddebugprintgenerated monotonic ulid sn ulid  this will ensure that if multiple ulids are generated in the same millisecond their randomness will be incremented to preserve order  handling errors this library defines several error types for ulid encodingdecoding such as  invalidlength  when the provided ulid string is not 26 characters long  invalidcharacter  when the ulid string contains invalid base32 characters  overflow  when the timestamp exceeds the maximum allowable value 48 bits ","alichraghi/basis-universal-zig":"zig binding of basis universal  note moved to httpsgithubcomhexopsmach  basis universal zig zig binding of basis universal compatible with v163httpsgithubcombinomialllcbasisuniversaltree1163  usage see test encodetranscode in srcmainzig for usage example ","arats-io/zuffy":"this repository has no description.  zig uffy library current zig uffy library do offer bunch of extra functionality work in progress if somewthing is not working feel free to contribute or open a issue require zig version 0140dev850ddcb7b1c1  usage include the zuffy into the buildzigzon file  zig fetch save httpsgithubcomaratsiozuffyarchiverefstagsvversiontargz dependencies   zuffy   url  httpsgithubcomaratsiozuffyarchiverefstagsv0114targz hash  12201fd38f467e6c64ee7bca53da95863b6c05da77fc51daf0ab22079ede57cbd4e2     list of modules  pools  x generic pool using allocator and the locker  x generic pool lock  memory free based on on implementation of kprottys from httpsgithubcomkprottyzap  x thread pool copied from kprottys from httpsgithubcomkprottyzap  bytes  x buffer  x utf8buffer stringbuilder   time and time zoneinfo  x time  x time zoneinfo  usage environment variable tz can be used to calculate a time for a different timezone  export tzeuropetiraspol 2023 nov 5th sun 223305477603 utc0300  in case if machine is not having a way to fetch desired zoninfo the library is considering embeded zipand gziped archive with all zone information  export tzeuropetiraspolzip 2023 nov 5th sun 223305477603 utc0300  note time zones infohttpswwwianaorgtimezones data are embeded zip and gziped having 92kb into the code  x nix systems    windows systems   archives  x zip  x archive extraction    archive creation    more archive formats to be added    lists  x circularlist fifo  lifo  x skiplist   eazy logger zlogsrczlogmd  contributing contributions of all kinds is welcome ","jerome-trc/viletech-2022":"doom source port and related technologies  viletech  about viletech is a collection of doomrelated rust technologies oriented towards the building of new tools game engines and games descending from id softwares id tech 1 engine the goals of the viletech project are as follows in descending order of priority 1 justforfunnoreallydev badgehttpsimgshieldsiobadgejustforfunnoreallydev9ffhttpsjustforfunnoreallydev 2 build a new doom source port that fulfills all my specific needs 3 publicly expose the technologies developed in service of 2 especially where some functionality did not already have an implementation in an available library beware that this project  is deep in development you should not assume that any of the code herein is even sound  is strictly a solo hobby project the code within this repository is going to be deeply disorganized for the foreseeable future  contents  assets contains noncode resources used by executable artifacts at runtime  c contains the c component of the viletech engine  inherited from dsdadoomhttpsgithubcomkraflabdsdadoom  pending translation to zig  client contains the code for the viletech engines zig executable  crates contains rust libraries associated with this project  demotest is a suite of integration tests for ensuring that the viletech engine is capable of running demoshttpsdoomwikiorgwikidemo with perfect accuracy  depend contains files git subtrees and submodules from other projects  doc contains documentation for developers  legal contains license information for outside code  libs contains zig libraries associated with this project  sample contains data used for automated testing   developer guide todo   licensing attribution a complete list of attributions and other thirdparty licensing information can be found hereattribmd all viletechoriginal source  ie that which is no way covered by the terms of the document provided above  is provided under either of  apache license version 20 licenseapachelicenseapache or httpswwwapacheorglicenseslicense20  mit license licensemitlicensemit or httpsopensourceorglicensesmit at your option ","rockorager/msgpack-zig":"msgpack encoding and decoding in zig | msgpack.org[zig]  msgpackzig msgpackzig provides a simple api for encoding and decoding msgpack data the api is designed to similar to stdjson msgpack inherently requires less allocation than json so the return values are slightly different  important  msgpackzig uses zig 0130  usage  note  refer to the documentationhttpsrockoragergithubiomsgpackzig for additional usage there are two main functions provided by msgpackzig zig  pack a given type as a msgpack value pub fn packcomptime t type writer stdioanywriter anyerrorvoid   unpack the next msgpack value from reader as type t pub fn unpackcomptime t type reader stdioanyreader anyerrorvoid   for packing any type which has a function signature msgpackpackself t writer stdioanywriter anyerrorvoid will use this function has for packing otherwise it will be packed using the defaults likewise unpacking types can implement msgpackunpackwriter stdioanywriter anyerrort to unpack from a stream or msgpackunpackfromvaluevalue msgpackvalue anyerrort to unpack from a msgpackvalue  value msgpack values are stored internally as a tagged union note that we impose a limitation on maps the keys must be strings similar to json the msgpack specification allows for any msgpack type to be a key zig pub const value  unionenum  i64 i64 u64 u64 f64 f64 nil void bool bool str const u8 bin const u8 array value map stdstringhashmapvalue ext struct  id i8 data const u8     roadmap    automatic unpacking of map to structs ","kassane/sanitizers-zig":"llvm sanitizers for zig-toolchain  llvm sanitizers for zig  description this is a collection of sanitizers for zig it is a work in progress  requirements  zighttpsziglangorgdownload v0130 or master  add  x addresssanitizer    memorysanitizer  x undefinedbehaviorsanitizer  x leaksanitizer  x realtimesanitizer llvm 20  supported platforms  x linux gnumusl    windows    macos  experimental realtime sanitizer llvm 20  note  this is an experimental feature and is not yet ready for production use  currently zig master version is llvm 19 my tests use zigfork w llvm 20 bash  zig build rtsan dtests realtime violation intercepted call to realtime unsafe function malloc in realtime context stack trace 0 0x00000102e659 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102e659 1 0x00000102bf80 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102bf80 2 0x00000102bef5 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102bef5 3 0x00000102c23c homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102c23c 4 0x00000102cdc1 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102cdc1 5 0x0000010891f7 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x10891f7 6 0x00000102b824 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102b824 7 0x00000102b7a2 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102b7a2 8 0x00000102b713 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102b713 9 0x00000102b42c homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102b42c 10 0x00000102b10e homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102b10e 11 0x00000102aeaa homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102aeaa 12 0x00000102adc8 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102adc8 13 0x00000102ae25 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102ae25 14 0x77feed58de07 usrliblibcso60x25e07 buildid 98b3d8e0b8c534c769cb871c438b4f8f3a8e4bf3 15 0x77feed58decb usrliblibcso60x25ecb buildid 98b3d8e0b8c534c769cb871c438b4f8f3a8e4bf3 16 0x00000102ad74 homekassanesanitizersllvmzigcacheo18b7cbe81f65f9f9049547f69b71a77etestrtsan0x102ad74 rtsan  run testrtsan failure error the following command exited with error code 1   references  officialdoc httpsclangllvmorgdocsrealtimesanitizerhtml  base httpsgithubcomrealtimesanitizerrtsan","bcrist/zig-tempallocator":"arena allocator for interactive programs and simulations 404 not found","cbilz/patch":"zig package for applying patches to files  zig package for applying patches to files work in progress feedback is welcome  goal this project will provide a zig package for applying diffs in git and unified formats to directory trees or individual files it will be free of system dependencies by default while allowing integration with git or gnu patch when needed  motivation one use case for this package will be to enable building c and c projects from pristine tarballs while applying patches for the host system bug fixes or other reasons this approach is more transparent to dependents compared to building from a forked version of the upstream source  rationale the package will expose outputs as artifacts via baddnamedlazypath and accept inputs as options via boptionlazypath  following the intended approachhttpsgithubcomziglangzigpull18778issuecomment1925660119 internally the package will use stdbuildsteprun instead of custom build steps in preparation for the separation of the build runner from the configure processhttpsgithubcomziglangzigissues20981 by default the package will use its own patch implementation to help dependents reduce their system dependencies every system dependency removed makes it easier to onboard new contributors however there will also be options via bsystemintegrationoption to use the system packageshttpsgithubcomziglangzigpull18778 git or gnu patch when appropriate such as when packaging or when build times or compatibility are of concern  next steps 1 complete implementation and review resource management  ensure a small number of file descriptors are open at any time  delete temporary directories on exit  clean up output directories in case of errors 2 create a test build step 3 add additional test cases to check the following behaviors  correct handling of quote wrapped paths  correct handling of patches with junk text between a hunk and the next header  rejection of invalid paths both wrapped and unwrapped  rejection of empty patches  rejection of patches without any headers  rejection of invalid headers  rejection of invalid hunks  rejection of multiple changes to the same file within a single git patch 4 fix bugs 5 implement the remaining characteristics described in the rationalerationale 6 update this readme 7 tag a release  requirements uses zig 0140dev3462edabcf619 ","nektro/zig-sqlite3":"sqlite3 wrapper for zig  zigsqlite3 sqlite3 wrapper for zig contains sqlite 3380 ","kassane/fiber":"userland threads uses zig build boostfiber    boostfiber provides a framework for microuserlandthreads fibers scheduled cooperatively the api contains classes and functions to manage and synchronize fibers similar to boostthread  a fiber is able to store the current execution state including all registers and cpu flags the instruction pointer and the stack pointer and later restore this state the idea is to have multiple execution paths running on a single thread using a sort of cooperative scheduling threads are preemptively scheduled  the running fiber decides explicitly when it yields to allow another fiber to run context switching  a context switch between threads costs usually thousands of cpu cycles on x86 compared to a fiber switch with less than 100 cycles a fiber can only run on a single thread at any point in time  boostfiber requires c11 ","dasimmet/zig-raspberry-pico-sdk":"this repository has no description.  raspberry picosdk on the zig buildsystem  requirements  zig 0130 or higher  libudevdev for libusb on linux the last zig version i built against ubuntu linux 2404 x8664 console foobar zig version 0140dev21646b2c8fc68   picotool this repo builds the raspberry picotool from the sdk source on the zig buildsystem console foobar zig build run picotool tool for interacting with rp2040rp2350 devices in bootsel mode or with an rp2040rp2350 binary synopsis picotool info b p d debug l a deviceselection picotool info b p d debug l a filename t type picotool config s key value g group deviceselection picotool config s key value g group filename t type picotool load ignorepartitions family familyid p partition n n u v x filename t type o offset deviceselection picotool link quiet verbose outfile t type infile1 t type infile2 t type infile3 t type p pad picotool save p deviceselection picotool save a deviceselection picotool save r from to deviceselection picotool verify deviceselection picotool reboot a u g partition c cpu deviceselection picotool otp listgetsetloaddumppermissionswhitelabel picotool partition infocreate picotool uf2 infoconvert picotool version s version picotool coprodis quiet verbose infile t type outfile t type picotool help cmd commands info display information from the target devices or file without any arguments this will display basic information for all connected rp2040 devices in bootsel mode config display or change program configuration settings from the target devices or file load load the program  memory range stored in a file onto the device link link multiple binaries into one block loop save save the program  memory stored in flash on the device to a file verify check that the device contents match those in the file reboot reboot the device otp commands related to the rp2350 otp onetimeprogrammable memory partition commands related to rp2350 partition tables uf2 commands related to uf2 creation and status version display picotool version coprodis postprocess coprocessor instructions in disassembly files help show general help or help for a specific command use picotool help cmd for more info   picotool zig build interface zig  buildzig const picosdk  importzigraspberrypicosdk const loadstep  picosdkloadb  firmware  lazypathtofirmwareuf2 execute  true sudo  boptionbool loadwithsudo run picotool load with sudo orelse false   bsteploaddependonloadstep  ","sbancuz/throw":"zig library to add metadata to errors  throw a fit a zig library to add some metadata to an error  install warning this is a joke of a library use it at your own risk sh zig fetch save githttpsgithubcomsbancuzthrow  zig  buildzig const throw  bdependencythrow  target  target optimize  optimize  exerootmoduleaddimportthrow throwmodulethrow   example zig const throw  importthrow const std  importstd const metadata  struct  bar usize  20  fn foo void  try throwfiterrorsad metadata bar  24   pub fn main void  foo catch  const r  throwreasonmetadata stddebugprinterror n r   error 24n    ","aleksandrshadrin/di.zig":"a simple and lightweight dependency injection container for zig. cihttpsgithubcomaleksandrshadrindizigactionsworkflowsciymlbadgesvghttpsgithubcomaleksandrshadrindizigactionsworkflowsciyml  zig di container  a simple and lightweight dependency injection di container for zig manage your dependencies effortlessly and keep your code clean  features  singletons one instance throughout the app  transients new instance every time  scoped services manage lifetimes within scopes  generics support work with generic types smoothly  error handling gracefully handle errors when creatingallocating services  object management implement your own logic for deinitializing resources which will be called by the service provider when freeing resources here examplehttpsgithubcomaleksandrshadrindizigblobmainexamplesdeinitzig  thread safety the service provider guarantees that singleton resolving is threadsafe for other usage if you need thread safety use scopes  support custom allocators for scopes   installation add the di module to your project using zig zon zig const didep  bdependencydi  target  target optimize  optimize  const dimodule  didepmoduledi const exe  baddexecutable exerootmoduleaddimportdi dimodule    usage initialize the container start by setting up the di container with an allocator zig const std  importstd const di  importdi const container  dicontainer pub fn main void  const allocator  stdheappageallocator var container  containerinitallocator defer containerdeinit  register your services here    register services choose how you want your services to behave  singleton one shared instance zig try containerregistersingletonmyservice   transient a new instance each time zig try containerregistertransientmyservice   scoped managed within a specific scope zig try containerregisterscopedmyservice   factories you can also register factories to create instances of your services this allows you to add multiple implementations zig try containerregistersingletonfactorybuilderfn   create a service provider after registering services create a provider to resolve them zig var serviceprovider  try containercreateserviceprovider defer serviceproviderdeinit   resolve services get instances of your services when needed zig const myservice  try serviceproviderresolvemyservice const myservices  try serviceproviderresolveslicemyservice  get all registered services of type myservice myservice if it was registered wihtout factory  all instances created by factories   handle generics handle generic types with ease zig  register try containerregistersingletonmyservice   resolve const genericservice  try serviceproviderresolvedigenericmyservice u8   using scopes manage scoped services within a controlled environment zig var scope  try serviceproviderinitscope defer scopedeinit const scopedservice  try scoperesolvemyservice  provide custom allocator if you dont want to use parents zig var allocator   var scope  try serviceproviderinitscopewithallocatorallocator    unresolve transient services or slices manually release a service if needed zig try serviceproviderunresolveresolvedservice try serviceproviderunresolveresolvedservices  resolved by resolveslice    example heres a quick example to get you started zig const std  importstd const di  importdi const container  dicontainer  example services const logger  struct  pub fn init logger  return logger  pub fn logself logger message const u8 void    self stdloginfos message   const database  struct  logger logger pub fn initlogger logger database  return database logger  logger   pub fn persistself database void  selfloggerloglog some job   pub fn main void  const allocator  stdheappageallocator var container  containerinitallocator defer containerdeinit  register services try containerregistersingletonlogger try containerregistertransientdatabase  create provider var provider  try containercreateserviceprovider defer providerdeinit  resolve services var db  try providerresolvedatabase  use services dbpersist   this example sets up a simple di container registers a logger as a singleton and database as a transient service then resolves and uses them more examples can be founded in examples folder use sh zig build runfilename    license this project is mit licensed see the license file for details ","nuiipointerexception/farbe":"a optimized color module and library for high performance applications.  farbe a optimized color module and library for high performance applications  features various different color formats are supported  rgba  hsla  hsv also we can  blending between colors  hexadecimal color parsing  comptime checks zig only  build  zig sh zig build dtypestaticdynamic dbindingccppzig  defaults  type  static  binding  zig  examples sh  zig zig build run dnameansi  c zig build run dnamec  cpp zig build run dnamecpp   usage  zig zig const farbe  importfarbe  create a new rgba color const red  farbergba0xff0000ff  blend two colors together const blue  farbergba0x0000ffff const purple  redblendblue  convert a color to a u32 value const u32value  redtou32  create a new hsla color const hsla  farbehsla00 10 05 10  convert a color to an hsla color const hsla  redtohsla  blend two colors together const blue  farbehsla2400  3600 10 05 10 const purple  redblendblue  convert a color to an rgba color const rgba  hslatorgba  create a new hsla color with opacity adjusted const faded  hslaopacity05  create a new hsla color with opacity adjusted const gray  hslagrayscale  fade out a color hslafadeout05   c  c use the farbehincludecfarbeh header file provided in the include directory c include farbeh  c farbehslat blue  farbehslacreate2400f3600f 10f 05f 10f  c farbehsla blue  farbehsla2400f3600f 10f 05f 10f   rust use the farbersincluderustsrclibrs crate provided in the include directory rust use farbershsla rgba let blue  hslanew2400f3600f 10f 05f 10f   license this project is licensed under the glplv3 license  see the licenselicense file for details","r4gus/ccdb":"cbor credential database format  cbor credential database format this document describes a format to store secrets at rest based on the cbor data format it is designed as an alternative to other file formats like kdbx used with keepass and keepassxc  source code  installation versions  zig version  ccdb version    0130  010 020   0140  030   module the ccdb module can be added to your projects by adding ccdb to your list of dependencies in buildzigzon zig dependencies    ccdb   url  httpsgithubcomr4gusccdbarchiverefstags010targz  adjust the hash if you use another version hash  12202413b8cfe91ea51f3680b8eaa5645870a6e3fabc5cb9076c80f8182ea1d4028f    alternatively you can use the following command which will automatically add ccdb as an dependency to your buildzigzon file bash  replace version tag with the version you want to use zig fetch save httpsgithubcomr4gusccdbarchiverefstagsversion tagtargz  you can then import the module within your buildzig zig const ccdbdep  bdependencyccdb  target  target optimize  optimize   create a exe or library and then exerootmoduleaddimportccdb ccdbdepmoduleccdb   command line tool you can manage a ccdb database from the command line using ccdbcmd run build zig doptimizereleasesmall to build the executable  documentation you can build the documentation by running bikeshed within the docs folder ","nektro/zig-flag":"config management for zig.  zigflag config management for zig  built with  zig master  httpsgithubcomziglangzig  zigmod package manager  httpsgithubcomnektrozigmod  httpsgithubcomnektrozigextras  install  zigmod aq add 1nektroflag   license mit ","nektro/zig-intrusive-parser":"core plumbing to make text or binary document parsers with data oriented design  zigintrusiveparser lochttpsslocxyzgithubnektrozigintrusiveparser licensehttpsimgshieldsiogithublicensenektrozigintrusiveparsersvghttpsgithubcomnektrozigintrusiveparserblobmasterlicense core plumbing to make text or binary document parsers with data oriented design  used by  httpsgithubcomnektrozigjson  httpsgithubcomnektrozigwebidl  license mpl20 ","sweetbbak/anyascii-zig":"a zig native port of the anyascii library for zig and c  anyasciizig a zig port of the anyascii c implementation converts unicode characters to their best ascii representation anyascii provides asciionly replacement strings for practically all unicode characters text is converted characterbycharacter without considering the context the mappings for each script are based on popular existing romanization systems symbolic characters are converted based on their meaning or appearance all ascii characters in the input are left unchanged every other character is replaced with printable ascii characters unknown characters and some known characters are replaced with an empty string and removed  symbols  input  output          emojis     crown palmtree   misc           5 x   letterlike       no m  as  this project uses zig mach 0140dev2577271452d22 but it is also compatible with  zig 0130  zig master as of 11125  use in your project bash  or pick a specific branch or commit zig fetch save httpsgithubcomsweetbbakanyasciizigarchiverefsheadsmainzip  in buildzig zig  add anyasciizig dependency const anyascii  bdependencyanyasciizig  target  target optimize  optimize  exerootmoduleaddimportanyascii anyasciimoduleanyascii   using the c library build the shared library and the static library bash zig build doptimizereleasefast  install the given header file at includeanyasciih and the shared object or static object to your prefered location c include includeanyasciih include stdioh include stdlibh static char actual int main  actual  malloc256 anyascii0xd55c actual   printfanyascii sn actual  han korean char output  malloc256 anyasciistringren franois lacte output printfanyasciistring sn output   you can try out the simple example in the example directory bash zig build doptimizereleasefast gcc o ascii exampleanyasciic  wall wextra werror os fpie  iinclude l zigoutlib  llibanyasciia lc ascii   examples  input  got        ren franois lacte  rene francois lacote   ble  blosse   trn hng o  tran hung dao   nry  naeroy     feidippidis      dimitris fotopoylos       boris nikolaevich eltsin      volodimir gorbulin     trgovishche     shenzhen     shenshuibu     hwaseongsi     huachengshi     saitama     qiyuxian      debre zeyt     dekemhare     dmnhwr     abovyan     samtredia       vrhm hlvy frnkl     say x ag     mymnsimh     thntln     porbmdr   links upstream anyascii that this project is ported from anyasciihttpsgithubcomanyasciianyascii used this project for reference anyasciigohttpsgithubcomanyasciigo learned about anyascii and got the idea from here zigzeddanyasciizighttpsgithubcomzigzeddanyasciizig ","notcalle/parzig":"parser combinator library for zig zignightlyhttpsgithubcomnotcalleparzigworkflowszignightlybadgesvghttpsgithubcomnotcalleparzigactionsqueryworkflow3azignightly zigv080httpsgithubcomnotcalleparzigworkflowszigv080badgesvghttpsgithubcomnotcalleparzigactionsqueryworkflow3azigv080  parzig a parser combinator library for zig  install  git submodule shell git submodule add httpsgithubcomnotcalleparzig libparzig  zig const parzig  pkg  name  parzig path  libparzigexportszig    import declaration for zkg zig pub const parzig  zkgimportgit httpsgithubcomnotcalleparzig main null    examples  party ghosts vs ghost parties zig usingnamespace importparzig const ghost  char const party  char const ghost   const party   test ghost party  const ghostparty  ghostseqparty const ghostparty  ghost  party const partyghost  party  ghost stdtestingexpectequalslices u8 ghostparty ghostpartyparseghostpartyvalue  stdtestingexpectnone  ghostpartyparsepartyghost    numeric expression evaluator zig usingnamespace importparzig const expression  parserstruct  pub fn parseinput input resulti32  return termoptaddsubseqtermmapevalexpression   const term  parserstruct  pub fn parseinput input resulti32  return factoroptmuldivseqfactormapevalterm   const factor  parserstruct  pub fn parseinput input resulti32  return optcharseqnumberorparenmapevalfactor   const number  parserstruct  pub fn parseinput input resulti32  return charrange0 9many1mapevalnumber   const paren  parserstruct  pub fn parseinput input resulti32  return charseqexpressionseqcharmapevalparen     test   stdtestingexpectequal resulti32some7  expressionparse1234    zig httpsziglangorg zkg httpsgithubcommattnitezkg ","durobot/zigstructprint":"small library to pretty-print zig structs (and arrays) zigstructprint small library to prettyprint zig structs and arrays zigstructprint is licensed under under the mit licensehttpsenwikipediaorgwindexphptitlemitlicenseuseskinvector and available from httpsgithubcomdurobotzigstructprint please note that only zig 0140dev1421f87dd43c1 give or take and up is supported because of this breaking changehttpsgithubcomziglangzigcommit0fe3fd01ddc2cd49c6a2b939577d16b9d2c65ea9 in the zig standard library if you need zigstructprint for an earlier version of zig get this versionhttpsgithubcomdurobotzigstructprintreleasestagv01beta instead to use either drop zspzighttpsgithubcomdurobotzigstructprintblobmainsrczspzig into your project or if you prefer zig package manager 1 in buildzigzon in dependencies add zig zigstructprint   url  httpsgithubcomdurobotzigstructprintarchivecommit hash 40 hex digitstargz hash  zig package hash 68 hex digits  use arbitrary hash get correct hash from the error   2 in buildzig in pub fn build before binstallartifactexe add zig const zsp  bdependencyzigstructprint  target  target optimize  optimize  exerootmoduleaddimportzigstructprint zspmodulezigstructprint  build with zig build as you normally do actually printing out your struct zig const zsp  importzigstructprint    const mystruct  struct  a i8  10 b u32  10 c 3u8  u8  1 2 3  d 2nested    f  100 g  hello   f  200 g  bye   e 3color   red green yellow  const nested  struct  f f32 g const u8  const color  enum  red yellow green   const ms  mystruct  zspprintstructms true 0  try false to get full type names  and the output is zig  a i8  10 b u32  10 c 3u8   1 2 3  d 2nested    f f32  10 g const u8  hello   f f32  20 g const u8  bye   e 3color   red green yellow   ","egegungordu/zig-fsrs":"zig implementation of fsrs  zigfsrs this is an implementation of fsrs45httpsgithubcomopenspacedrepetitionfsrs4ankiwikithealgorithm in zig this project is on zig 0130 zig const std  importstd const fsrs  importzigfsrs const card  fsrscard pub fn main void  var f  fsrsfsrsinit const initialcard  fsrscardinit var now  stdtimetimestamp  schedule the initial card var s  fscheduleinitialcard now  good was selected on new card const updatedcard  sselectgoodcard stddebugprintinitial cardnnn initialcard stddebugprintafter first rep goodnnn updatedcard    getting started  1 add zigfsrs to your own zig project fetch zigfsrs shell zig fetch save githttpsgithubcomegegungorduzigfsrs   2 add zigfsrs to your buildzig file zig const zigfsrs  bdependencyzigfsrs  exerootmoduleaddimportzigfsrs zigfsrsmodulezigfsrs  now you can import zigfsrs in your code zig const fsrs  importzigfsrs   basic usage  1 create a new fsrs instance zig var f  fsrsfsrsinit  the parameters are optional the parameters are  parameter  type  default value          requestretention  f32  09   maximuminterval  i32  36500   w  17f32   04872 14003 37145 138206 51618 12298 08975 0031 16474 01367 10461 21072 00793 03246 1587 02272 28755    2 create a new card zig const initialcard  fsrscardinit   3 schedule the card zig const reviewtime  stdtimetimestamp var scheduledcards  fscheduleinitialcard reviewtime  schedule will return a scheduledcards struct which contains the possible cards given the rating to select a card use the select method which will return a reviewedcard struct zig const good  scheduledcardsselectgood const newcard  goodcard   card fields  field  type  description          state  state  the state of the card can be new learning review or relearning   reps  i32  the number of repetitions of the card   lapses  i32  the number of times the card was remembered incorrectly   stability  f32  a measure of how well the card is remembered   difficulty  f32  the inherent difficulty of the card content   elapseddays  i64  the number of elapsed days since the card was last reviewed   scheduleddays  i64  the next scheduled days for the card   due  i64  the due date for the next review   lastreview  i64  the last review date of the card   examples to run the examples shell zig build example dexampleexamplename  check out the examplesexamples directory for more examples  development shell git clone httpsgithubcomegegungorduzigfsrsgit cd zigfsrs  to run the tests shell zig build test summary all  ","ooyeku/vigil":"a process supervision and management library for zig, inspired by erlang/otp's supervisor model.  vigil note api is subject to change hopefully for the better a process supervision and interprocess communication library for zig designed for building reliable distributed systems and concurrent applications  installation fetch latest release bash zig fetch save githttpsgithubcomooyekuvigilv020  add as a dependency in your buildzigzon zig const vigil  bdependencyvigil  target  target optimize  optimize  exerootmoduleaddimportvigil vigilmodulevigillib binstallartifactexe   getting started  running the example server see examplesvigilantserverexamplesvigilantserver for an example of a basic server implementation using the vigil librarys genserver and workergroup features bash zig build exampleserver   running the python test client see examplesvigilantservertestserverpyexamplesvigilantservertestserverpy for an example of a basic python client implementation bash zig build testserver zigoutbintestserver   basic usage zig const std  importstd const vigil  importvigil  initialize a mailbox var mailbox  vigilprocessmailboxinitallocator  capacity  100 maxmessagesize  1024  1024  1mb defaultttlms  5000  5 seconds priorityqueues  true enabledeadletter  true  defer mailboxdeinit  send a highpriority message const msg  try vigilmessageinit allocator statusupdate worker1 cpu usage high cpuwarning high 5000  5 second ttl  try mailboxsendmsg  process messages with priority handling while mailboxreceive received  defer receiveddeinit if receivedsignal signal  switch signal  cpuwarning  handlecpuwarningreceived healthcheck  sendhealthstatus else  handleothersignalreceived    else err switch err  erroremptymailbox  break else  return err   create a supervisor var supervisor  vigilsupervisorinitallocator  name  mysupervisor strategy  oneforone shutdowntimeoutms  5000  defer supervisordeinit  create a worker group var workergroup  vigilworkergroupinitallocator  name  myworkergroup size  5 mailboxcapacity  100 priority  high  defer workergroupdeinit  create a genserver var genserver  vigilgenserverinitallocator  name  mygenserver mailboxcapacity  100 priority  high  defer genserverdeinit  start the supervisor try supervisorstart  supervise the genserver try genserversupervisesupervisor mygenserver  start the worker group try workergroupstart  send a message to the genserver var msg  try vigilmessageinit allocator mymessage mysender mypayload info normal 5000  5 second ttl  try genservercastmsg  process messages with priority handling while mailboxreceive received  defer receiveddeinit if receivedsignal signal  switch signal  cpuwarning  handlecpuwarningreceived healthcheck  sendhealthstatus else  handleothersignalreceived    else err switch err  erroremptymailbox  break else  return err   stop the genserver try genserverstop  stop the worker group try workergroupstop  stop the supervisor try supervisorstop   requirements  zig 0130 or later  posixcompliant operating system  license mit  see the licenselicense file for details  contributing contributions are welcome please feel free to submit a pull request ","hendriknielaender/size.zig":"this repository has no description.  sizezig","bogwi/eruzero":"bullet-train fast hashmap for zig  eruzero bullettrain fast hashmap for zig eruzero aims to be a replacement for zigs standard hashmap the motivation was to create a simple and fast map based on an implicit data structure that works well with any key out of the box without providing context or a custom hasher the only exceptions are float and untagged union types floats can be hashed though a convenient and fast key wrapper that breaks the float on integer and memo parts with controlled precision is present in the tests part of the code eruzero supports the main stdhashmap api new features are dedicated update to an existing value scaling down the underlying memory when no longer needed basic operations on sets and automatic tombstone cleanup making the map very resistant to the problem  include in your project for buildzigzon zig  name  nameofyourpackage version  versionofyourpackage dependencies   eruzero   url  httpsgithubcombogwieruzeroarchivemastertargz hash  1220dbe03c05ad89578e952ed3f2ff1fa611495f770773c711979ac00e48fd2825e9     if the hash has changed you will get a gentle error hash mismatch where in the field found zig brings you the correct value for buildzig zig const eruzero  bdependencyeruzero  exeaddmoduleeruzero eruzeromoduleeruzero   bench benchmark is inspired by httpsgithubcomxacrimondashmap which has its benchmark ported of the libcuckoo benchmark there are four tests in total rh read heavy read 98 insert 1 remove 1 update 0  models caching of data in places such as web servers and disk page caches ex exchange read 10 insert 40 remove 40 update 10 replicates a scenario where the map is used to exchange data exh exchange heavy read 1 insert 98 remove 98 update 1 this test is an inverse of rh test hard for any map rg rapid grow read 5 insert 80 remove 5 update 10 a scenario where the map is used to collect large amounts of data in a short burst all tests except rg are designed to keep the map small the keys are rotated so the tests are tombstoneheavy especially the exh test at the end of the test on the default 1m ops the map has wrenched with 980k tombstones under the size of only 1 benchmark against zigs both hashmap and arrayhashmap can be called in the command line via  zig build bench  the default test runs on one million ops you can run it with any number of operations append the number as zig build bench  12345678 it is okay to format the number as 12345678 with an underscore unintentionally we can make the number too large which may not be what we want  performance and stats for each card the tests are run as four independent loops of 100 ops each until the specified cap is reached the results are interesting sure a map like eruzero which does not let deleted items accumulate will have a huge advantage over the one without such a heuristic also it seems that building a hashmap backed by an underlying arraylist is much more effective than talking directly to the allocator at least in zigs universe further discussion is needed we did this on u64 keys wyhash for both maps gpa allocator releasefast mode and apple m1 laptop if you have built a hashmap that supports zigs stdhashmap api and would like to see it included in the benchmark drop us a line you are very welcome tp throughput millions of operations per second rt runtime  time spent on the test in seconds aggregate this is an absolute measurement of an individual hashmaps throughput total number of ops the map has engaged through the four tests in a row divided by the combined runtime contrary to single tests measuring relative performances  hashmap benchmark 1000000 opseach test name tp mopssec rt sec  eruzero  rh  25146 0003977 ex  6316 0015832 exh  6425 0015563 rg  4746 0021070 aggregate  7087 0056442 arrayhashmap  rh  13960 0007163 ex  8152 0012268 exh  8163 0012250 rg  2466 0040544 aggregate  5538 0072225 hashmap  rh  6265 0015961 ex  1304 0076673 exh  828 0120821 rg  5706 0017524 aggregate  1732 0230980 hashmap benchmark 10000000 opseach test name tp mopssec rt sec  eruzero  rh  25621 0039030 ex  6219 0160800 exh  5997 0166756 rg  3606 0277308 aggregate  6212 0643895 arrayhashmap  rh  14178 0070530 ex  8429 0118637 exh  8380 0119330 rg  1761 0567956 aggregate  4564 0876454 hashmap  rh  6422 0155703 ex  1320 0757729 exh  834 1199348 rg  3686 0271328 aggregate  1678 2384107 hashmap benchmark 100000000 opseach test name tp mopssec rt sec  eruzero  rh  25813 0387407 ex  6579 1520057 exh  6278 1592761 rg  2691 3715796 aggregate  5543 7216020 arrayhashmap  rh  14443 0692390 ex  8605 1162134 exh  8447 1183876 rg  1779 5621304 aggregate  4619 8659705 hashmap  rh  6408 1560445 ex  1321 7567642 exh  834 11988912 rg  2586 3867002 aggregate  1601 24984001   conclusions based on the above data if you are building an application that is read heavy consider using the eruzero map which is specifically designed for static reading with occasional removals if you are building an application similar to the exchange test consider using arrayhashmap which has excellent removal performance and almost instant iteration over the entire map not tested here zigs hashm","interpunct/clap-zig-bindings":"manually written idiomatic zig bindings for clap audio api (mirror)  clapzigbindings zig bindings for the clap audio api this is a full handwritten translation everything is done to make the most of zigs type system currently covers 100 of the api as of clap version 122 this library does not cover draft extensions for an example on how to use this library see the clapbindingsexample git repo this is not a plugin framework  including as a dependency use the zig fetch command ie sh zig fetch save githttpsgitsrhtinterpunctclapzigbindings  then add the following to your buildzig zig const clapbindings  bdependencyclapbindings  exerootmoduleaddimportclapbindings clapbindingsmoduleclapbindings  this library currently targets zig version 0130  issue tracker browse tickets at httpstodosrhtinterpunctclapzigbindings if you have issues and there is no open ticket for them at the page above please send an email with your problems to my public inbox i will look into and make any needed tickets for them this does not require a sourcehut account  contributing patches and disscussion are are done via email on my public inbox this is funcitonality built in to git if this workflow is new to you please refer to httpsgitsendemailio i promise that it is quick and easy to both learn and set up  license clapzigbindings is distributed under lgplv3 see the license file clapzigbindings httpssrhtinterpunctclapzigbindings clapbindingsexample httpsgitsrhtinterpunctclapbindingsexample clap httpscleveraudioorg my public inbox httpslistssrhtinterpunctpublicinbox ","zigster64/jwt.zig":"a jwt library for zig h1 aligncenter zig jwt h1 div aligncenter a a hrefhttpsjwtiojwta library for zig div  this is a hard fork of githubcomsoftpropszigjwt differences are   allows you to decode a jwt that you dont have the secret for  fixes breaking changes from the latest 014 type name changes    installing create a new exec project with zig init copy an example from the examples directory into your into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save httpsgithubcomzigster64jwtzigarchiverefstagsv100targz  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  jwt      uri to download  url  httpsgithubcomzigster64jwtzigarchiverefstagsv100targz    hash verification  hash         the hash below may vary you can also depend any tag with httpsgithubcomzigster64jwtzigarchiverefstagsvversiontargz or current main with httpsgithubcomzigster64jwtzigarchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference dep from buildzigzon  const jwt  bdependencyjwt   target  target  optimize  optimize  modulejwt var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the module to executable  exerootmodeaddimportjwt jwt binstallartifactexe    examples see examples directory   for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024 ","kassane/wamr-zig":"zig bindings from webassembly micro runtime (wamr)  wamrzig  overview based on wamr rust sdkhttpsgithubcombytecodealliancewamrrustsdk it is the wrapper of wasmexporthhttpsgithubcombytecodealliancewasmmicroruntimeblobmaincoreiwasmincludewasmexporth but with zig style  requirements  zighttpsziglangorgdownload v0130 or master  cmakehttpscmakeorgdownload v3120 or master  llvm libshttpsgithubcomllvmllvmprojectreleases v1600 or master  core concepts  runtime it is the environment that hosts all the wasm modules each process has one runtime instance  module it is the compiled wasm or aot it can be loaded into runtime and instantiated into instance  instance it is the running instance of a module it can be used to call export functions  function it is the exported function  wasi concepts  wasiargs it is used to configure the wasi environment  preopen all files and directories in the list will be opened before the wasm or aot loaded  allowed address all ip addresses in the allowed address list will be allowed to connect with a socket  allowed dns  how to use  new project bash  create directory  mkdir projectname  cd projectname  zig init  add dependency in zon file  zig fetch savewamrzig githttpsgithubcomwamrzigwamrzig  add in buildzig zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const wamrzig  bdependencywamrzig  target  target optimize  optimize   your project exelibrootmoduleaddimportwamr wamrzigmodulewamr  ","marselester/maxminddb.zig":"maxmind db format reader in zig.  zig maxmind db reader this zig package reads the maxmind db formathttpsmaxmindgithubiomaxminddb its based on maxminddbrusthttpsgithubcomoschwaldmaxminddbrust implementation youll need maxminddbtestdatahttpsgithubcommaxmindmaxminddbtreemaintestdata to run examples and tests sh  git submodule update init  zig build test  zig build examplelookup zhcn   de  schweden ptbr  sucia es  suecia en  sweden ru   fr  sude ja     quick start add maxminddbzig as a dependency in your buildzigzon sh  zig fetch save githttpsgithubcommarselestermaxminddbzigmaster  add the maxminddb module as a dependency in your buildzig zig const mmdb  bdependencymaxminddb  target  target optimize  optimize  exerootmoduleaddimportmaxminddb mmdbmodulemaxminddb  see examplesexamples ","sorairolake/sysexits-zig":"the system exit codes as defined by <sysexits.h> for zig  spdxfilecopyrighttext 2023 shun sakai spdxlicenseidentifier apache20 or mit   sysexitszig cicibadgeciurl sysexitszig is a library that provides the system exit code constants as defined by sysexitsh this library is a port of sysexitsrs  usage add this package to your buildzigzon sh zig fetch save githttpsgithubcomsorairolakesysexitsziggit  add the following to your buildzig zig const sysexits  bdependencysysexits  exerootmoduleaddimportsysexits sysexitsmodulesysexits   documentation to build the documentation sh zig build doc  the result is generated in zigoutdocsysexits if you want to preview this run a http server locally for example sh python m httpserver d zigoutdocsysexits  then open httplocalhost8000 in your browser  zig version this library is compatible with zig version 0140  source code the upstream repository is available at httpsgithubcomsorairolakesysexitsziggit the source code is also available at  httpsgitlabcomsorairolakesysexitsziggit  httpscodebergorgsorairolakesysexitsziggit  changelog please see changelogadoc  contributing please see contributingadoc  similar projects  httpsgithubcomsorairolakesysexitsjl julia  httpsgithubcomsorairolakesysexitsrs rust you can discover more projects at httpsgithubcomsorairolakeawesomesysexits  license copyright c 2023 shun sakai see authorsadoc this library is distributed under the terms of either the apache license 20 or the mit license this project is compliant with version 32 of the reuse specification see copyright notices of individual files for more details on copyright and licensing information cibadge httpsimgshieldsiogithubactionsworkflowstatussorairolakesysexitszigciyamlbranchdevelopstyleforthebadgelogogithublabelci ciurl httpsgithubcomsorairolakesysexitszigactionsquerybranch3adevelopworkflow3aci sysexitsh httpsmanopenbsdorgsysexits sysexitsrs httpscratesiocratessysexits changelogadoc changelogadoc contributingadoc contributingadoc authorsadoc authorsadoc reuse specification httpsreusesoftwarespec ","bcrist/zig-bithelper":"zig utilities for low-level bit manipulation 404 not found","roastpie/zig-pkg":"zig package aggregator   zig package aggregator ","andrvv/lean":"⚡ blazing fast scientific computing library for zig  documentation coming soon ","joachimschmidt557/zig-smaz":"port of smaz string compression to zig  zigsmaz port of the smaz string compression algorithmhttpsgithubcomantirezsmaz to zighttpsziglangorg works with zig 0130 ","sea-grass/goku":"a static site generator written in zig.  goku goku is a static site generator written in zig  introduction a static site generator ssg is typically run on some input source to produce a folder of html files suitable for hosting on any http server goku aims to be a ssg that can operate on a variety of input sources to generate static sites of up to hundreds of thousands of pages  notice  note  goku is in its early stages the roadmap for features is prioritized on an asneeded basis if you want to use goku but its lacking a key feature you need feel free to check out the contributingcontributing section of the readme  requirements  officially supported zig 0140dev17108ee52f99c you can get it from the zig releases pagehttpsziglangorgdownload  installation use zig to build the application binary with a shell open in this projects directory  zig build doptimizereleasesafe  the goku binary will be available at zigoutbingoku  usage see the docssitepagesdocssitemd on how to scaffold your first goku site once youve set up your site you can use goku to build it  goku site o build  in the above example goku will scan sitepages recursively for all md files parse their yaml frontmatter for a slug and then place the built sites into the build folder according to each pages slug it will provide a build summary with the time elapsed and the source and destination directories once youve built the site you can try previewing it on your local machine using your preferred file server for example if you have python3 on your system you can try  sh c cd build python3 m httpserver   further work in its current form goku is very basic there is no support for theming asset management etc if theres a feature youd like to see please open a github issue  contributing contributions are welcome but i do request that if theres no open github issue regarding your ideal change that you open one first its likely that im already working on the feature so following this process helps to ensure that were not spending double the time  bug reports if you find a bug in the software please report it using the github issue tracker for this projects repository ","joachimschmidt557/zig-wcwidth":"[wip] implementation of wcwidth() in zig  zigwcwidth a port of wcwidthhttpsgithubcomjquastwcwidth to zig wcwidth works with zig 0140 ","zephyrchien/libev-zig":"zig binding for libev, with coroutine support. 404 not found","cbilz/gnu-m4-zig":"gnu m4 packaged for zig  gnu m4 packaged for zig work in progress  goal this project aims to provide a zig package for gnu m4 that runs on linux macos and windows without system dependencies the longerterm goal is to extract a reusable zig library for compiling projects that rely on autotools and gnulib  status compiles and appears to run correctly on my linux system when built in releasefast or releasesmall mode however with safety checks enabled the executable hits an illegal instruction immediately on startup presumably due to undefined behavior  next steps 1 fix the illegal instruction issue 2 port the test suite and integrate it as a build step 3 implement those configuration checks that do not depend on preprocessing compilation or execution of probing code exclude any unused or redundant checks 4 implement a lazyvalue system to allow other build steps to pass configuration values to configheader 5 implement remaining configuration checks again excluding unused or redundant ones 6 extract a reusable configuration library for projects using autotools or gnulib  requirements  uses zig 0140dev33671cc388d52  limitations  native language support is disabled ","mostik/ps":"linux proc/pid/stat  proc stat  install  zig fetch save httpsgithubcommostikpsarchivev001targz  zig buildzig const ps  bdependencyps moduleps exerootmoduleaddimportps ps  zig const std  importstd const ps  importps pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator const stat psprocstat  try psgetallocator stdoslinuxgetpid stddebugprintpid d vsize d n  statpid statvsize    ","hejsil/fmtbuf":"buffered formatting that figures out the buffer size for you  readmemd is autogenerated please edit examplereadmemdtemplate instead   fmtbuf an alternative to stdfmtbufprintz which can  automatically figure out the buffer size at compile time  can be partially formatted allowing for a prefix to be formatted and reused zig const fmtbuf  importfmtbuffmtbuf const std  importstd test  var buf  fmtbuf   stdmetatuple usize u8  try stdtestingexpectequalstrings0  0 bufformat 0 0  try stdtestingexpectequalstrings12  3 bufformat 12 3  var partial  bufpartialformat1 500 try stdtestingexpectequalstrings500  0 partialformat0 try stdtestingexpectequalstrings500  1 partialformat1 try stdtestingexpectequalstrings500  2 partialformat2   ","agagniere/unitz":"for when you don't want your probe crashing in mars' atmosphere  unitz achieve compiletime unit correctness and avoid runtime surprises  showcase use units as types to document your functions and convert to units of the same dimension zig const units  importunitzquantitiesf32 const m  unitsmeter const s  unitssecond const kt  unitsknot const kmh  unitzevalquantityf32 km  h  fn aircraftspeeddistance m duration s kt  const speed  distancedivduration  value is in ms const result  speedtokt stddebugprintspeed  ms   kt   kmhn  speedval resultval speedtovalkmh  return result   a compilation error occurs when trying to perform an invalid conversion zig const j  unitsjoule const hp  unitsimperialhorsepower const enginepower  hpinit130 const energy  enginepowertoj  will result in the compilation error zig srcrootzig23361 error units are only interconvertible if they measure the same kind of dimension comptime if unitfromiscompatibleunitto compileerrorunits are only interconvertible if they measure the same kind of dimension  foozig2935 note called from here const energy  enginepowertoj   no conversion is done implicitly the value stored in memory is exactly the one provided to the constructor  defining your own units this library does not provide all variations of standard units meter and hour are provided but kilometer and kilometer per hour is not instead you can define any unit you want from its definition using prefixes if needed zig const nanosecond  unitzevalquantityf32 ns  const kgm3  unitzevalquantityf32 kg  m3  const kilowatthour  unitzevalquantityf32 kw  h  const cal  unitzevalquantityf32 kcal   large calorie   simple example zig const std  importstd const unitz  importunitz const q  unitzquantitiesf32 const m  qmeter const kg  qkilogram const lb  qpound const cm  unitzevalquantityf32 cm  const kgm  unitzevalquantityf32 kg  m2  fn bodymassindexheight m weight kg kgm  return weightdivheightpow2  pub fn main void  const height  cminit162 const weight  lbinit124 const bmi  bodymassindexheighttom weighttokg stddebugprintbmi  bmival    advanced example zig const unitz  importunitz const slug  unitzevalunit32174049  lb  const lbf  unitzevalquantityf32 ft  slug  s2  slug  slug  const lbfs  unitzevalquantityf32 lbf  s  lbf  lbfunit  const ns  unitzevalquantityf32 n  s  const s  unitzevalquantityf32 us  fn computeimpulseforce lbf delta s lbfs  return forcemuldeltatolbfs  we need to convert from lbfus to lbfs if we forget a  compilation error occurs  fn computetrajectoryimpulse ns void     pub fn main void  const force  lbfinit1230 const delta  sinit450 computetrajectorycomputeimpulseforce delta  compilation error  adding tons will  fix it   and just like that you can avoid crashing into the atmospherehttpsenwikipediaorgwikimarsclimateorbitercauseoffailure  use in your project add the dependency in your buildzigzon by running the following command shell zig fetch save githttpsgithubcomagagniereunitzmaster  add it to your exe in your buildzig zig exerootmoduleaddimportunitz bdependencyunitz  target  target optimize  optimize moduleunitz  then you can import it from your code zig const unitz  importunitz   generate documentation shell zig build docs  then serve locally for example python m httpserver 8000 d zigoutdocs open httplocalhost8000   bump dependencies shell zig fetch save githttpsgithubcominkryptioncomathmain  ","bcrist/zig-deephashmap":"zig std.hashmaps with deep keys 404 not found","lordmzte/confgen":"mirror of https://mzte.de/git/lordmzte/confgen  confgen confgen is a tool to generate config files using a custom template language the system is backed by a lua runtime that is used to configure the tool  installation you can find binaries built on a debian box in the releases tab or build yourself like any other zig project  nix this project includes a nix flake you can depend on additionally the confgen derivation as well as derivations of other projects of mine are automatically built and pushed to an attic cache at httpsnixmztedemzte on every commit  usage start by creating confgenlua in your dotfiles it should look something like this lua  add your config files cgaddstringmyconfigcfg config template here cgaddfilemyotherconfigcfg cgaddfilemyotherconfigcfg outcfg  with output path cgaddpathconfig  add a whole path recursively  set options to be used in config files cgopttestoption  42  next add some templates confgen will detect if a file is a template by its extension and copy it otherwise this is what a template looks like cfg im a confgen template  if somecondition then   any lua statement some option  opttestoption   a lua expression  end   close the if block more config stuff  template files end with the cgt extension if a file that has been added has this extension confgen will evaluate the template and put that into the output directory without the cgt extension otherwise it will be copied for example if you want to add a file called stuffcfg to the output as a template youd call the template file stuffcfgcgt with the above confgenlua this template   for i  05 do  i  end   opttestoption   would result in this output  12345 42  lastly run confgen providing the output directory as an argument bash confgen confgenlua outdir   confgenfs confgenfs provides an alternative to the confgen cli tool it takes a path to a confgen file as well as a mountpoint bash  mount config at confgenfs confgenfs pathtoconfgenlua confgenfs  this mounts a fuse3 filesystem containing all the config files the advantage of this is that the templates will be generated when the file is opened and not ahead of time additionally the filesystem will contain metafiles inside cgfs currently only cgfseval and cgfsoptsjson you can write some lua code to the former file and it will be evaluated in the global lua context this allows for dynamic configurations heres a practical example configwaybarconfigcgt json  modulesleft   if optcompositor  river then  rivertags riverwindow  elseif optcompositor  hyprland then  hyprlandworkspaces hyprlandwindow  end     your hyprland and river configs could set the compositor option on startup bash  for river echo cgoptcompositor  river confgenfscgfseval  for hyprland echo cgoptcompositor  hyprland confgenfscgfseval  and when waybar is started afterwards it would work without manual configuration changes assuming a symlink confgenfsconfigwaybar  configwaybar after starting river we can see the final config bash  cat confgenfsconfigwaybarconfig  modulesleft  rivertags riverwindow     building  linux  install the luajit and fuse3 library and the 012 version of zig  zig build dreleasefast p local  mac this is untested but it should work theoretically  windows no lol ","kassane/lvgl":"lvgl using zig build (v0.11.0) important note the next major version v900 is developed in the master branch the last stable version is available in the releasev83httpsgithubcomlvgllvgltreereleasev83 branch  a hrefhttpsgithubcomsponsorslvgl targetblankimg alignleft srchttpslvglioassetsimagessponsorpng height32pxa p alignright benglishb  a hrefdocsreadmezhmda  a hrefdocsreadmeptbrmdportugus do brasila  a hrefdocsreadmejpmda p br p aligncenter  img srchttpslvglioassetsimageslogolvglpng p  h1 aligncenterlight and versatile graphics libraryh1  br div aligncenter img srchttpsgithubcomkisvegabortestrawmastersmartwatchdemogif nbsp  img border1px srchttpslvglioassetsimageslvglwidgetsdemogif div br p aligncenter a hrefhttpslvglio titlehomepage of lvglwebsite a  a hrefhttpsdocslvglio titledetailed documentation with 100 examplesdocsa  a hrefhttpsforumlvglio titleget help and help othersforuma  a hrefhttpslvgliodemos titledemos running in your browserdemosa  a hrefhttpslvglioservices titlegraphics design ui implementation and consultingservicesa  a hrefhttpssquarelineio titleui editor for lvglsquareline studioa p br  ledger overview mature and wellknownbr lvgl is the most popular free and open source embedded graphics library to create beautiful uis for any mcu mpu and display type its supported by industry leading vendors and projects like arm stm32 nxp espressif nuvoton arduino rtthread zephyr nuttx adafruit and many more feature richbr it has all the features to create modern and beautiful guis 30 builtin widgets a powerful style system web inspired layout managers and a typography system supporting many languages to integrate lvgl into your platform all you need is at least 32kb ram and 128 kb flash a c compiler a frame buffer and at least an 110 screen sized buffer for rendering ui editorbr squareline studio is a professional yet affordable drag and drop ui editor for lvgl it runs on windows linux and macos too and you can try it out even without registering to the website servicesbr our team is ready to help you with graphics design ui implementation and consulting services contact us if you need some support during the development of your next gui project  rocket features free and portable  a fully portable c c compatible library with no external dependencies  can be compiled to any mcu or mpu with any rtos  supports monochrome epaper oled or tft displays or even monitors porting guidehttpsdocslvgliomasterportingprojecthtml  distributed under the mit license so you can easily use it in commercial projects too  needs only 32kb ram and 128 kb flash a frame buffer and at least an 110 screen sized buffer for rendering  os external memory and gpu are supported but not required widgets styles layouts and more  30 builtin widgetshttpsdocslvgliomasterwidgetsindexhtml button label slider chart keyboard meter arc table and many more  flexible style systemhttpsdocslvgliomasteroverviewstylehtml with 100 style properties to customize any part of the widgets in any state  flexboxhttpsdocslvgliomasterlayoutsflexhtml and gridhttpsdocslvgliomasterlayoutsgridhtmllike layouts engines to automatically size and position the widgets in a responsive way  texts are rendered with utf8 encoding supporting cjk thai hindi arabic persian writing systems  word wrapping kerning text scrolling subpixel rendering pinyinime chinese input emojis in texts  rendering engine supporting animations antialiasing opacity smooth scrolling shadows image transformation etc   supports mouse touchpad keypad keyboard external buttons encoder input deviceshttpsdocslvgliomasterportingindevhtml  multiple displayhttpsdocslvgliomasteroverviewdisphtmlmultipledisplaysupport support binding and build support  micropython bindinghttpsbloglvglio20190220micropythonbindings exposes lvgl api  pikascript bindinghttpsbloglvglio20220824pikascriptandlvgl python on mcu lighter and easier  no custom build system is used you can build lvgl as you build the other files of your project  support for make and cmakehttpsdocslvgliomastergetstartedplatformscmakehtml is included out of the box  develop on pchttpsdocslvgliomastergetstartedplatformspcsimulatorhtml and use the same ui code on embedded hardware  convert the c ui code to html file with our emscripten porthttpsgithubcomlvgllvwebemscripten docs tools and services  detailed documentationhttpsdocslvglio with 100 simple exampleshttpsdocslvgliomasterindexhtml  squareline studiohttpssquarelineio  a professional and easytouse ui editor software to speed up and simplify the ui development  serviceshttpslvglioservices such as user interface design implementation and consulting to make ui development simpler and faster  heart sponsor if lvgl saved you a lot of time and money or you just had fun using it consider supporting its developmenthttpsgithubcomsponsorslvgl how do we spend the donationsbr our goal is to provide financial compensation for people who do the most for lvgl it means not only the maintainers but anyone who implements a great feature should get a payment from the accumulated money we use the donations to cover our operational costs like servers and related services how to donatebr we use github sponsorshttpsgithubcomsponsorslvgl where you can easily send one time or recurring donations you can also see all of our expenses in a transparent way how to get paid for your contributionbr if someone implements or fixes an issue labeled as sponsoredhttpsgithubcomlvgllvgllabelssponsored he or she will get a payment for that work we estimate the required time complexity and importance of the issue and set a price accordingly to jump in just comment on a sponsoredhttpsgithubcomlvgllvgllabelssponsored issue saying hi id like to deal with it this is how im planning to fiximplement it a work is considered ready when its approved and merged by a maintainer after that you can submit and expense at opencollectivecomhttpsopencollectivecomlvgl and you will receive the payment in a few days organizations supporting lvglbr sponsors of lvglhttpsopencollectivecomlvglorganizationssvgwidth600httpsopencollecti","tiawl/wayland.zig":"wayland headers packaged for @ziglang  waylandzig this is a fork of hexopswaylandheaders1 which itself gather various wayland2 headers glfw3 needs  why this forkception  the intention under this fork is the same as hexops13 had when they opened their repository gather wayland2 headers and package them to compile glfw3 with zig4 however this repository has subtle differences for maintainability tasks  no shell scripting  a cron runs every day to check wayland2 repositories then it updates this repository if a new release is available  how to use it the current usage of this repository is centered around tiawlglfwzig3 compilation but you could use it for your own projects headers are here and there are no planned evolution to modify them see tiawlglfwzig3 to see how you can use it maybe for your own need some headers are missing if it happens open an issue this repository is open to potential usage evolution  dependencies the zig4 part of this package is relying on the latest zig4 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  waylandwaylandhttpsgithubcomtiawlwaylandzigblobtrunkreferenceswayland  waylandwaylandprotocolshttpsgithubcomtiawlwaylandzigblobtrunkreferenceswaylandprotocols  cicd reminder these repositories are automatically updated when a new release is available  tiawlglfwzig5 this repository is automatically updated when a new release is available from these repositories  waylandwayland6  waylandwaylandprotocols7  tiawltoolbox8  tiawlspacepornactionbot9  tiawlspacepornactionci10  tiawlspacepornactioncdping11  tiawlspacepornactioncdpong12  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomhexopswaylandheaders 2httpsgitlabfreedesktoporgwayland 3httpsgithubcomglfwglfw 4httpsgithubcomziglangzig 5httpsgithubcomtiawlglfwzig 6httpsgitlabfreedesktoporgwaylandwayland 7httpsgitlabfreedesktoporgwaylandwaylandprotocols 8httpsgithubcomtiawltoolbox 9httpsgithubcomtiawlspacepornactionbot 10httpsgithubcomtiawlspacepornactionci 11httpsgithubcomtiawlspacepornactioncdping 12httpsgithubcomtiawlspacepornactioncdpong 13httpsgithubcomhexops ","kassane/beast":"http and websocket built on boost.asio in c++11 (uses zig build) img width880 height  80 alt  boostbeast title srchttpsrawgithubusercontentcomboostorgbeastmasterdocimagesreadme2png  http and websocket built on boostasio in c11 branch  linux  windows  coverage  documentation  matrix   masterhttpsgithubcomboostorgbeasttreemaster  build statushttpsdronecppalapibadgesboostorgbeaststatussvgrefrefsheadsmasterhttpsdronecppalboostorgbeast  codecovhttpsimgshieldsiocodecovcgithubboostorgbeastmastersvghttpscodecovioghboostorgbeastbranchmaster  documentationhttpsimgshieldsiobadgedocumentationmasterbrightgreensvghttpwwwboostorgdoclibsmasterlibsbeastdochtmlindexhtml  matrixhttpsimgshieldsiobadgematrixmasterbrightgreensvghttpwwwboostorgdevelopmenttestsmasterdeveloperbeasthtml  develophttpsgithubcomboostorgbeasttreedevelop  build statushttpsdronecppalapibadgesboostorgbeaststatussvgrefrefsheadsdevelophttpsdronecppalboostorgbeast  codecovhttpsimgshieldsiocodecovcgithubboostorgbeastdevelopsvghttpscodecovioghboostorgbeastbranchdevelop  documentationhttpsimgshieldsiobadgedocumentationdevelopbrightgreensvghttpswwwboostorgdoclibsdeveloplibsbeastindexhtml  matrixhttpsimgshieldsiobadgematrixdevelopbrightgreensvghttpswwwboostorgdevelopmenttestsdevelopdeveloperbeasthtml   contents  introductionintroduction  appearancesappearances  descriptiondescription  requirementsrequirements  git branchesbranches  buildingbuilding  usageusage  licenselicense  contactcontact  contributingcontributingweneedyourhelp  introduction beast is a c headeronly library serving as a foundation for writing interoperable networking libraries by providing lowlevel http1 websocket and networking protocol vocabulary types and algorithms using the consistent asynchronous model of boostasio this library is designed for  symmetry algorithms are roleagnostic build clients servers or both  ease of use boostasio users will immediately understand beast  flexibility users make the important decisions such as buffer or thread management  performance build applications handling thousands of connections or more  basis for further abstraction components are wellsuited for building upon  appearances  a hrefhttpsgithubcomvinniefalcocppcon2018cppcon 2018a  a hrefhttpswwwbishopfoxcomcasestudysecuringbeastbishop fox 2018a        a hrefhttpswwwyoutubecomwatchv7fqwajelmekimg width320 height  180 altbeast srchttpsrawgithubusercontentcomvinniefalcocppcon2018mastercppcon2018pnga  a hrefhttpsyoutube4ttyybgdaj0img width320 height  180 altbeast security review srchttpsrawgithubusercontentcomvinniefalcobeastassetsmasterbishopfox2018pnga   a hrefhttpsgithubcomvinniefalcocppcon2018cppcon 2017a  a hrefhttpcppcastcom201701vinniefalcocppcast 2017a  a hrefhttpsrawgithubusercontentcomvinniefalcobeastassetsmastercppcon2016pdfcppcon 2016a          a hrefhttpswwwyoutubecomwatchvwsunnyekpniimg width320 height  180 altbeast srchttpsrawgithubusercontentcomvinniefalcocppcon2017mastercppcon2017pnga  a hrefhttpcppcastcom201701vinniefalcoimg width180 height180 altvinnie falco srchttpsavatars1githubusercontentcomu1503976v3u76c56d989ef4c09625256662eca2775df78a16ads180a  a hrefhttpswwwyoutubecomwatchvujzgrcvpfwiimg width320 height  180 altbeast srchttpsrawgithubusercontentcomvinniefalcobeastassetsmastercppcon2016pnga   description this software is in its first official release interfaces may change in response to user feedback for recent changes see the changelogchangelogmd  official sitehttpsgithubcomboostorgbeast  documentationhttpswwwboostorgdoclibsmasterlibsbeast master branch  autobahntestsuite websocket resultshttpsvinniefalcogithubioboostbeastreportsautobahnindexhtml  requirements this library is for programmers familiar with boostasio users who wish to use asynchronous interfaces should already know how to create concurrent network programs using callbacks or coroutines  c11 robust support for most language features  boost boostasio and some other parts of boost  openssl required for using tlssecure sockets and examplestests when using microsoft visual c visual studio 2017 or later is required one of these components is required in order to build the tests and examples  properly configured bjamb2  cmake 351 or later windows only  building beast is headeronly to use it just add the necessary include line to your source files like this c include boostbeasthpp  if you use coroutines youll need to link with the boostcoroutine library please visit the boost documentation for instructions on how to do this for your particular build system  github to use the latest official release of beast simply obtain the latest boost distribution and follow the instructions for integrating it into your development environment if you wish to build the examples and tests or if you wish to preview upcoming changes and features it is suggested to clone the boost superproject and work with beast ","vemahk/zig-ulid":"a binary, zero-allocation ulid implementation written in zig.  zigulid a binary zeroalloc zighttpsziglangorg implementation of ulidhttpsgithubcomulidspec tested with zig 0120 and 0130 if not for bpath it would probably work for 0110  features  x no allocations  x tofrom string  x monotonicity  examples zig  default usage const ulid  importulid const id  ulidnew const str  idtostring  eg 01j0j510yn2kzv7apee1bq8byp const copy  try ulidparsestringstr   id const epochms u48  ulidtimestamp const randomdata 10u8  uliddata  monotonic var monotonic  ulidmonotonicfactory const ulid1  try monotonicnext  eg 01j0jby3exavvz227ve93qjd2m const ulid2  try monotonicnext  eg 01j0jby3exavvz227ve93qjd2n  or using the global factory not recommended but available const ulid3  try ulidnewmonotonic  eg 01j0jc10bfe2cjb7m2szxx98nh const ulid4  try ulidnewmonotonic  eg 01j0jc10bfe2cjb7m2szxx98nj   use buildzigzon  ulid   url  httpsgithubcomvemahkzigulidarchivegitcommithashtargz   buildzig zig const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const root  bpathsrcmainzig const exe  baddexecutable name  yourproject rootsourcefile  root target  target optimize  optimize  const depopts   target  target optimize  optimize  const ulidmod  bdependencyulid depoptsmoduleulid exerootmoduleaddimportulid ulidmod binstallartifactexe  ","kassane/hana":"your standard library for metaprogramming (uses zig build-system)  boosthana a targetblank hrefhttpsemverorgversionbadgeversiona a targetblank hrefhttpstravisciorgboostorghanatravis statusbadgetravisa a targetblank hrefhttpsciappveyorcomprojectldionnehanaappveyor statusbadgeappveyora a targetblank hrefhttpsgodboltorgz36mvzmb7ntry it onlinebadgetryita a targetblank hrefhttpsgitterimboostorghanagitter chatbadgegittera  your standard library for metaprogramming  overview  important keep this in sync with exampleoverviewcpp  cpp include boosthanahpp include cassert include string namespace hana  boosthana using namespace hanaliterals struct fish  stdstring name  struct cat  stdstring name  struct dog  stdstring name  int main   sequences capable of holding heterogeneous objects and algorithms  to manipulate them auto animals  hanamaketuplefishnemo catgarfield dogsnoopy auto names  hanatransformanimals auto a  return aname  asserthanareversenames  hanamaketuplesnoopy garfield nemo  no compiletime information is lost even if animals cant be a  constant expression because it contains strings its length is constexpr staticasserthanalengthanimals  3u   computations on types can be performed with the same syntax as that of  normal c believe it or not everything is done at compiletime auto animaltypes  hanamaketuplehanatypecfish hanatypeccat hanatypecdog auto animalptrs  hanafilteranimaltypes auto a  return hanatraitsispointera  staticassertanimalptrs  hanamaketuplehanatypecfish hanatypecdog   and many other goodies to make your life easier including  1 access to elements in a tuple with a sane syntax staticassertanimalptrs0c  hanatypecfish  staticassertanimalptrs1c  hanatypecdog   2 unroll loops at compiletime without hassle stdstring s hanaintc10times s  x   equivalent to s  x s  x  s  x  3 easily check whether an expression is valid  this is usually achieved with complex sfinaebased tricks auto hasname  hanaisvalidauto x  decltypevoidxname   staticasserthasnameanimals0c  staticasserthasname1     documentation you can browse the documentation online at httpboostorggithubiohana the documentation covers everything you should need including installing the library a tutorial explaining what hana is and how to use it and an extensive reference section with examples the remainder of this readme is mostly for people that wish to work on the library itself not for its users an offline copy of the documentation can be obtained by checking out the ghpages branch to avoid overwriting the current directory you can clone the ghpages branch into a subdirectory like dochtml shell git clone httpgithubcomboostorghana branchghpages depth1 dochtml  after issuing this dochtml will contain exactly the same static website that is available onlinehanadocs note that dochtml is automatically ignored by git so updating the documentation wont pollute your index  hacking on hana setting yourself up to work on hana is easy first you will need an installation of cmake once this is done you can cd to the root of the project and setup the build directory shell mkdir build cmake s  b build  sometimes youll want to specify a custom compiler because the systems compiler is too old shell cmake s  b build dcmakecxxcompilerpathtocompiler  usually this will work just fine however on some older systems the standard library andor compiler provided by default does not support c14 if this is your case the wikihanawiki has more information about setting you up on different systems normally hana tries to find boost headers if you have them on your system its also fine if you dont have them a few tests requiring the boost headers will be disabled in that case however if youd like hana to use a custom installation of boost you can specify the path to this custom installation shell cmake s  b build dcmakecxxcompilerpathtocompiler dboostrootpathtoboost  you can now build and run the unit tests and the examples shell cmake build build target check  you should be aware that compiling the unit tests is pretty time and ram consuming especially the tests for external adapters this is due to the fact that hanas unit tests are very thorough and also that heterogeneous sequences in other libraries tend to have horrible compiletime performance there are also optional targets which are enabled only when the required software is available on your computer for example generating the documentation requires doxygen to be installed an informative message will be printed during the cmake generation step whenever an optional target is disabled you can install any missing software and then rerun the cmake generation to update the list of available targets   tip  you can use the help target to get a list of all the available targets if you want to add unit tests or examples just add a source file in test or example and then rerun the cmake generation step so the new source file is known to the build system lets suppose the relative path from the root of the project to the new source file is pathtofilecpp when you rerun the cmake generation step a new target named pathtofile will be created and a test of the same name will also be created hence shell cmake build build target pathtofile  builds the program associated to pathtofilecpp ctest testdir build r pathtofile  runs the program as a test    tip for sublime text users  if you use the provided hanasublimeprojecthanasublimeproject file  you can select the hana build current file build system when viewing a  file to which a target is associated like a test or an example you can  then compile it by pressing b or compile and then run it using b  project organization the project is organized in a couple of subdirectories  the benchmarkbenchmark directory contains compiletime and runtime benchmarks to make sure the library is as fast as advertised the benchmark code is written mostly in the form of eruby templates the templates are used to generate c files which are then compiled while gathering compilation and execution statistics  the cmakecmake directory contains various cmake modules and other scripts needed by the build system  the docdoc directory contains confi","voidstar240/zig-wayland-client":"a zig native wayland client library  zig wayland client a zig native wayland client library this library is not designed to identically replicate the functionality of the libwaylandclient library from the mainline wayland project this is instead a new take on interfacing with wayland by focusing on the primitives of the wayland protocol for in depth usage information see windowapp in the examples directory the core wayland protocol isnt particularly useful on its own so the windowapp example uses the xdg shell and xdg decoration protocol extensions to create a proper desktop style window for the example to work your compositor will have to support at least xdg shell if your compositor doesnt support xdg decoration the content will still show but the window wont have decorations this is the case with gnomemutter  installation  zig fetch save githttpsgithubcomvoidstar240zigwaylandclient   contribution this project is by no means complete however it is usable if you encounter any bugs or have any suggestions please create an issue if you are a developer and want to improve the project feel free to create a pull request with your changes ","ahmdhusam/zexpress":"an http/1.1 server library for the zig programming language  zexpress web server an http11 server library for the zig programming language designed with a focus on simplicity and efficiency zexpress uses the chain of responsibility design pattern allowing for a dynamic chain of handlers to process requests  installation the zig build system has the concept of modules which are other source files written in zig lets make use of a module 1 create a new zig project shell zig init  2 add zexpress as a dependency in your buildzigzon file shell zig fetch save githttpsgithubcomahmdhusamzexpressgit  3 update your buildzig file to include zexpress zig pub fn buildb stdbuild void    existing code  const exe  baddexecutable name  yourprojectname rootsourcefile   path  srcmainzig  target  target optimize  optimize   add zexpress as a module const zexpressmodule  bdependencyzexpress  target  target optimize  optimize modulezexpress exerootmoduleaddimportzexpress zexpressmodule binstallartifactexe   existing code     usage example heres a simple example demonstrating how to use zexpress zig const std  importstd const zexpress  importzexpress var storage stdautohashmapu64 u8  undefined pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator storage  stdautohashmapu64 u8initallocator const app  try zexpressserverinitallocator  reuseport  true  defer appdeinit try appuseusers zexpresshandlerinitgetmiddleware gethandler  todo name it set until the implementation of methods routers try appuseusersset  middlewares  setmiddleware handlerfn  sethandler   new route with named parameter try appuseusersuserid  middlewares   handlerfn  getuserhandler  try applisten8080 errorhandler  const usermodel  struct  userid u64 health u8  fn errorhandlererr anyerror req zexpressreq res zexpressres void    req  has the responsibility to handle all errors switch err  else  errvalue  const errname  errornameerrvalue const message  stdmemreplaceownedu8 resallocator errname    catch unreachable   resjson status  resstatustonumber message  message  catch unreachable    fn setmiddlewarereq zexpressreq res zexpressres void  if reqmethod  post    resstatusnotfound return errornotfound  const body  try reqbodyasconst usermodel if bodyhealth  100    resstatusbadrequest return errorhealthshouldbelessthanoreql100   fn sethandlerreq zexpressreq res zexpressres void  const body  try reqbodyasconst usermodel try storageputbodyuserid bodyhealth   try resstatusokjson message  the health was successfully stored   fn getmiddlewarereq zexpressreq res zexpressres void  if reqmethod  get    resstatusnotfound return errornotfound   fn gethandlerreq zexpressreq res zexpressres void   its optional to run the deinit method var list  stdarraylistusermodelinitreqallocator var usersiter  storageiterator while usersiternext user  try listappend userid  userkeyptr health  uservalueptr     try resstatusokjson data  try listtoownedslice   fn getuserhandlerreq zexpressreq res zexpressres void  const userid  try stdfmtparseintu64 reqparamsgetuserid 10 if storagegetuserid health    try resstatusokjson data   userid  userid health  health    else    resstatusnotfound return errorusernotfound    this example sets up a simple server with three routes  get users retrieves all users and their health  post usersset sets a users health  get usersuserid retrieves a specific users health using a named parameter to run the example 1 save the code in srcmainzig 2 run zig build run the server will start on port 8080 you can test it using curl or any http client example requests shell  get all users curl httplocalhost8080users  set a users health curl x post h contenttype applicationjson d userid 1 health 100 httplocalhost8080usersset  get a specific users health curl httplocalhost8080users1  in the last example 1 is the userid parameter which can be accessed in the handler using reqparamsgetuserid  features  simple and efficient http11 server  middleware support  json request and response handling  error handling  contributing contributions are welcome please feel free to submit a pull request  license this project is licensed under the mit license ","burlindw/zig-build-utils":"a collection of common utilities for zig build scripts inspired by the build scripts used by zig and zls.  zigbuildutils a collection of common utilities for zig build scripts inspired by the build scripts used by zighttpsgithubcomziglangzig and zlshttpsgithubcomzigtoolszls  how to use run the following command from a projects root to add zigbuildutils as as dependency sh zig fetch save githttpsgithubcomburlindwzigbuildutilsgit  import buildutils in buildzig it is not necessary to call stdbuilddependency as there are no exported modules or artifacts zig const std  importstd const utils  importbuildutils pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption  get the project version using a combination of the buildzigzon  manifest file the git history and git tags const version  utilsgetbuildversionb const exe  baddexecutable name  example target  target optimize  optimize version  version rootsourcefile  bpathsrcmainzig  binstallartifactexe  compress the binary and any associated pdb h or lib files into  a zip file or tarball depending on the target and install it in the  prefix directory the subdirectory within the prefix directory and  the layout within the archive are both configurable utilsinstallarchivedartifactexe    ","thekorn/minijinja.zig":"zig bindings for minijinja  minijinjazig ci workflowhttpsgithubcomthekornminijinjazigactionsworkflowsciyamlbadgesvg zig bindings for the amazing minijinjahttpsgithubcommitsuhikominijinja templating engine its a thin wrapper around the c abi of minijinja note this is a work in progress and mac only at the moment  requirements  zig  014  rustup for building minijinjacapi or  a nix environment and then use nix develop to get a shell with all dependencies  usage add this package to your zig project bash  zig fetch save githttpsgithubcomthekornminijinjazigmain  add dependency and import to the buildzig file zig  const minijinja  bdependencyminijinja  target  target optimize  optimize   exerootmoduleaddimportminijinja minijinjamoduleminijinja  and then just use it in the code zig const std  importstd const minijinja  importminijinja const environment  minijinjaenvironment const context  minijinjacontext pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator const templ  ul  for user in users   li username li  endfor  ul  var env  try environmentinit defer envdeinit envsetdebugtrue try envaddtemplatelist templ const user  struct  name const u8  const users  user  name  hans   name  wurst   const t  try envrendertemplatestructallocator list  users  users  defer allocatorfreet stddebugprintsn t   which results in  ul lihansli liwurstli ul   tests using nix tests can be run like bash  nix develop c zig build test summary all  ","footearth/zig-js":"access the js host environment from zig compiled to webassembly.  zigjs zigjs is a zig library and accompanying js glue that enables zig running in a webassembly environment to interact with a javascriptbased host note this makes it particularly easy for zig to call into js this doesnt help for js calling into zig this is more akin to gos syscalljs package and not like rusts wasmbindgen note the main branch of this repository attempts to remain compatible with the latest nightly release of zig and therefore may not be compatible with official zig releases  example zig  get and set objects and properties const document  try jsglobalgetjsobject document defer documentdeinit const title  try documentgetallocjsstring alloc title defer allocfreetitle stdloginfothe title is s str try documentsettitle jsstringa new title  call functions jsglobalcallvoid alert jsstringhello from zig  the code is a bit verbose with the error handling but since js is a dynamic language there are potential invalid types at every step of the way additionally deinit calls are necessary to dereference garbagecollected values on the host side under the covers this is hiding a lot of complexity since the jswasm abi only allows passing numeric types and sharing memory  usage to use this library you must integrate a component in both the zig and js environment for zig vendor this repository and add the package for example in your buildzig zig const js  importzigjs pub fn buildb stdbuildbuilder void    other stuff exeaddpackagejspkg   from js install and import the package in the js directory in the future this will be published to npm a typescript example is shown below but js could just as easily be used typescript import  zigjs  from zigjsglue  initialize the stateful zigjs class you should use one per wasm instance const zigjs  new zigjs fetchmywasmfilewasmthenresponse  responsearraybuffer thenbytes   when creating your wasm instance pass along the zigjs import  object you can merge this import object with your own since zigjs  uses its own namespace webassemblyinstantiatebytes zigjsimportobject thenresults   const  memory myfunc   resultsinstanceexports  set the memory since zigjs interfaces with memory zigjsmemory  memory  run any of your exported functions myfunc   warning the zigjs version used in your zig code and js code must match im not promising any protocol stability right now so pin your versions appropriately to determine what version is compatible look up the tagged version in this repository and the corresponding commits  internals the fundamental idea in this is based on the go syscalljshttpspkggodevsyscalljs package the implementation is relatively diverged since zig doesnt have a runtime or garbage collection but the fundamental idea of sharing refs and the format of those refs is based on gos implementation the main idea is that zig communicates to js what values it would like to request such as the global object js generates a ref for this object a unique 64bit numeric value and sends that to zig this ref now uniquely identifies the value for future calls such as give me the document property on this ref the ref itself is a 64bit value for numeric types the ref is the value we take advantage of the fact that all numbers in javascript are ieee 754 encoded 64bit floats and use nan as a way to send nonnumeric values to zig nanboxing nan in ieee 754 encoding is 011111111111anything but all 0s in binary we use a common nan value of 01111111111110000000 so that we can use the bottom leastsignificant 49 bits to store type information and a 32bit id the 32bit id is just an index into an array on the js side a simple scheme is used to reuse ids after theyre dereferenced  performance usage of this package causes the wasmjs boundary to be crossed a lot and this is generally not very fast and not an optimal way to use wasm the optimal way to use wasm is more like a gpu have the host or wasm module preload a bunch of work into a byte buffer and send it over in one single call however this approach is pretty painful this packge makes interfacing with js very very easy consider the tradeoffs and choose what is best for you ","nickelca/x-client":"x11 client library for zig inspired by marler8997s zigx at httpsgithubcommarler8997zigx ","hendriknielaender/glaze":"🍩 cli kit  warning  still work in progress h1 aligncenter img srcglazelogopng width20 height20 altglaze logo titleglaze logo h1 div aligncenterterminal string stylingdiv div aligncenter mit licensehttpsimgshieldsiobadgelicensemitbluesvghttpsgithubcomhendriknielaenderglazeblobheadlicense github code size in byteshttpsimgshieldsiogithublanguagescodesizehendriknielaenderglaze prs welcomehttpsimgshieldsiobadgeprswelcomebrightgreensvghttpsgithubcomhendriknielaenderglazeblobheadcontributingmd div ","interactivebin/bx":"base library used across multiple projects bx  base xplatform library github actionshttpsgithubcombkaradzicbxactionsworkflowsmainymlbadgesvghttpsgithubcombkaradzicbxactions licensehttpsimgshieldsiobadgelicensebsd220clausebluesvghttpsbkaradzicgithubiobgfxlicensehtml join the chat at httpsdiscordgg9embv7jhttpsimgshieldsiodiscord712512073522872352color237289dalabelbxlogodiscordlogocolorwhitehttpsdiscordgg9embv7j goals  provide osruntimecompiler independent core functionality to be able to write crossplatform applications  compile without c runtime crt and without c standard library stl contact  bkaradzichttpstwittercombkaradzic project page httpsgithubcombkaradzicbx license bsd 2clausehttpsgithubcombkaradzicbxblobmasterlicense  a hrefhttpopensourceorglicensesbsd2clause targetblank img alignright srchttpsopensourceorgwpcontentuploads202210osibadgedarksvg width100 height137 a copyright 20102025 branimir karadzic  redistribution and use in source and binary forms with or without modification are permitted provided that the following conditions are met   1 redistributions of source code must retain the above copyright notice this  list of conditions and the following disclaimer   2 redistributions in binary form must reproduce the above copyright notice  this list of conditions and the following disclaimer in the documentation  andor other materials provided with the distribution  this software is provided by the copyright holders and contributors as is and any express or implied warranties including but not limited to the implied warranties of merchantability and fitness for a particular purpose are disclaimed in no event shall the copyright holder or contributors be liable for any direct indirect incidental special exemplary or consequential damages including but not limited to procurement of substitute goods or services loss of use data or profits or business interruption however caused and on any theory of liability whether in contract strict liability or tort including negligence or otherwise arising in any way out of the use of this software even if advised of the possibility of such damage ","bcrist/zbox":"svg block diagram generator 404 not found","griush/corex":"corex framework  corex corex framework ","interactivebin/bimg":"image library. bimg  image library licensehttpsimgshieldsiobadgelicensebsd220clausebluesvghttpsbkaradzicgithubiobgfxlicensehtml join the chat at httpsdiscordgg9embv7jhttpsimgshieldsiodiscord712512073522872352color237289dalabelbimglogodiscordlogocolorwhitehttpsdiscordgg9embv7j contact  bkaradzichttpstwittercombkaradzic project page httpsgithubcombkaradzicbimg license bsd 2clausehttpsgithubcombkaradzicbimgblobmasterlicense  a hrefhttpopensourceorglicensesbsd2clause targetblank img alignright srchttpsopensourceorgwpcontentuploads202210osibadgedarksvg width100 height137 a copyright 20102025 branimir karadzic  redistribution and use in source and binary forms with or without modification are permitted provided that the following conditions are met   1 redistributions of source code must retain the above copyright notice this  list of conditions and the following disclaimer   2 redistributions in binary form must reproduce the above copyright notice  this list of conditions and the following disclaimer in the documentation  andor other materials provided with the distribution  this software is provided by the copyright holders and contributors as is and any express or implied warranties including but not limited to the implied warranties of merchantability and fitness for a particular purpose are disclaimed in no event shall the copyright holder or contributors be liable for any direct indirect incidental special exemplary or consequential damages including but not limited to procurement of substitute goods or services loss of use data or profits or business interruption however caused and on any theory of liability whether in contract strict liability or tort including negligence or otherwise arising in any way out of the use of this software even if advised of the possibility of such damage ","nuiipointerexception/lifetch":"a hyperfast system fetching utility 🏃 💨  lifetch the fastest way to fetch your system info bash  zig build releasefast  hyperfine warmup 10 runs 1000 zigoutbinlifetch benchmark 1 zigoutbinlifetch time mean   2644 s  1443 s user 2537 s system 4921 s range min  max 00 s  9066 s 1000 runs   tested on  archlinux more to come  config generated inside your home directory at configlifetchconfigini default config can also be found hereconfigini  installing from package managers aur bash paru s lifetchgit   building from src  prerequisites  zig masterhttpsziglangorg i recommend installing zignightlybin from the aur if you are on archlinux  building bash zig build releasefast   running bash zig build run releasefast  ","theseyan/mimalloc.zig":"simple zig allocator interface over mimalloc.  mimalloczig a simple implementation of zigs stdmemallocator interface over the excellent mimallochttpsgithubcommicrosoftmimalloc by microsoft  usage  const mimalloc  importmimallocallocator const allocator  mimallocallocator  use allocator here   tests run the tests  zig build test ","peterhellberg/ff":"a small zig ⚡ module meant for making firefly zero games 🎮  ff zap a small zighttpsziglangorg  module meant for making firefly zerohttpsfireflyzerocom games  initially based on fireflyzighttpsgithubcomfireflyzerofireflyzig  important  you might want to install the ffinithttpsgithubcompeterhellbergffinit tool and use that instead of manually creating the files for your game  usage you can have fetch the module by using zig fetch save url to ziptarball  documentation the generated documentation for ff is located at httpspeterhellberggithubioff  ","sorairolake/abcrypt-zig":"a simple, modern and secure file encryption library for zig  spdxfilecopyrighttext 2024 shun sakai spdxlicenseidentifier apache20 or mit   abcryptzig cicibadgeciurl abcryptzig is an implementation of the abcrypt encrypted data format this package supports version 1 of the abcrypt format  usage add this package to your buildzigzon sh zig fetch save githttpsgithubcomsorairolakeabcryptziggit  add the following to your buildzig zig const abcrypt  bdependencyabcrypt  exerootmoduleaddimportabcrypt abcryptmoduleabcrypt   documentation to build the documentation sh zig build doc  the result is generated in zigoutdocabcrypt if you want to preview this run a http server locally for example sh python m httpserver d zigoutdocabcrypt  then open httplocalhost8000 in your browser  zig version this library is compatible with zig version 0140  source code the upstream repository is available at httpsgithubcomsorairolakeabcryptziggit the source code is also available at  httpsgitlabcomsorairolakeabcryptziggit  httpscodebergorgsorairolakeabcryptziggit  changelog please see changelogadoc  contributing please see contributingadoc  license copyright c 2024 shun sakai see authorsadoc this library is distributed under the terms of either the apache license 20 or the mit license this project is compliant with version 32 of the reuse specification see copyright notices of individual files for more details on copyright and licensing information cibadge httpsimgshieldsiogithubactionsworkflowstatussorairolakeabcryptzigciyamlbranchdevelopstyleforthebadgelogogithublabelci ciurl httpsgithubcomsorairolakeabcryptzigactionsquerybranch3adevelopworkflow3aci abcrypt encrypted data format httpssorairolakegithubioabcryptbookformathtml changelogadoc changelogadoc contributingadoc contributingadoc authorsadoc authorsadoc reuse specification httpsreusesoftwarespec ","vspefs/ayc-jsoncpp":"jsoncpp c++ library (not a binding!) as a fetch-able zig package.  i build jsoncpp with zig build system you fetch it and use it in your zig build system doesnt support using amalgamated source it can easily be done by exposing a function at buildzig level but im lazy if you want an object library get the public module sources and build it yourself should be not working on osx and some other platforms maybe i dont have a mac sorry even if i have i would be too lazy to test as you could possibly guess i mean to get this into all your codebasehttpsgithubcomallyourcodebase but this is not decent enough yet so","bogwi/pieq":"priority queue for zig  priority queue in zig  foreword how fast is pieq on the apple m1 cpu inserting in random order and removing 100000000 unsigned 32bit integer pairs in releasefast mode takes 15 seconds for insert and about 20 seconds for remove the cumulative time stayed within 22 seconds for many attempts which pushes pieq a bit into hashmap territory and pieq does not warp under heavy load because there are no recursive calls addremove time compared to zigs standard priorityqueue library shows that pieq is twice as fast the api is designed to be as literal and selfexplanatory as possible pieq uses an implicit data structure so there is no memory allocation routine the possible error interface is reduced to a bare minimum like warning you if the queue is empty and you still want to pull something from it that must be an error every public method has a comprehensive doc string where needed and the full api is used in the test section interesting uncommon features like changing the root or locking the root are also implemented pieq has two modes of operation minoriented and maxoriented which are turned on by passing min or max parameters during initiation this is along with the general idea of a priority queue however keys can also be complex types pieq gives you the ability to define what is min and what is max and is designed to handle any key anything you know how to compare if not invent how for example pieq can be easily used as a data filter sorting multivalued elements together such as enums literals or you can filter items with certain keys you are interested in and put them strictly in front of the queue to pop them earlier than the rest maybe you want to queue vectors as keys or functions that call other functions you can do that there could be many dozens of possible use cases i cant mention them all but the testing section is a good place to start applications that come to mind are heavy load balancers stock market or large financial tasks  schedulers medical solutions then graphs dijkstra of course statistics and anywhere you need scheduled event processing  benchmark if you are interested in how well pieq runs on your system try bench step run this zig zig build bench  12345678  and you will get stats for your machine  pieq 12345678 items action push pop sum  timesec01563 20006 21569  nsitem 126578 16205101747088  running zig build bench without arguments tests on the default 1mil with modern cpus it makes sense to test harder at least above 10mils or if you know in advance the amount of data you intend to run it is great to do such a test or against other priority queue implementations to find the best option for your code  usage 1 add pieq as a dependency in your buildzigzon  details   summarycodebuildzigzoncode example summary  zig  name  nameofyourpackage version  versionofyourpackage dependencies   pieq   url  httpsgithubcombogwipieqarchivemastertargz hash  1220dbe03c05ad89578e9522d3f2ff1fa611495f770773c711979ac00e48fd2825e9     if the hash has changed you will get a gentle error hash mismatch where in the field found zig brings you the correct value  details  2 add pieq as a module in your buildzig  details   summarycodebuildzigcode example summary  zig const pieq  bdependencypieq  exeaddmodulepieq pieqmodulepieq  using the module in test scopes requires one more declaration with the same constant if you need the module in tests of course zig unittestsaddmodulepieq pieqmodulepieq   details  3 import the module zig const pieq  importpieqpieq  4 this is your comparison function if you want numbers zig fn compareu32ismin bool a u32 b u32 bool  while ismin return a  b return a  b   5 and this this how you initiate the queue zig var minqueue  piequ32 u32 min compareu32inityourallocator defer minqueuedeinit  to find out more see the testing section file pieqzig tests and code are placed together so you can explore the implementation better hovering over the functions and all thanks ","bstrdlord/ja3-spoof":"http client for zig that spoofs tls/ssl ja3  ttlssl ja3 spoof img srchttpsrawgithubusercontentcomziglanglogo9d06c090ca39ef66019a639241ea2d7e448b9fe1ziggysvg width300 a curlbased zig http client that can spoof tlsssl ja3httpsgithubcomsalesforceja3   installing  1 install ja3spoof  zig fetch save httpsgithubcomblockkworkja3spoofarchiverefstagslatest tagtargz  example  zig fetch save httpsgithubcomblockkworkja3spoofarchiverefstags001targz   2 add ja3spoof to buildzig add to buildzig zig const ja3spoof  bdependencyja3spoof moduleja3spoof exerootmoduleaddimportja3spoof ja3spoof    examples example in examples folder run with command  make example  zig const client  ja3spoofinit allocator  allocator customcookies  cookie customuseragent  ja3 spoof customciphers  aes256sha  catch err  stddebugprinterror n err return  const response  clientsendhttpstoolsscrapflyioapitls catch err  stddebugprinterror n err return  stddebugprintstatuscode nresponse sn  responsestatuscode responseresponse     spoofing to spoof ja3 you need to change customciphers to any other in client options ","dgv/clipboard":"multiplatform clipboard for zig  clipboard zig versionhttpsimgshieldsiobadge0130orangestyleflatlogoziglabelzigcolor23eba742httpsziglangorgdownload reference zighttpsimgshieldsiobadgezigdoc20pagesorangecolor23eba742httpsdgvdevbrclipboard reference zighttpsimgshieldsiobadgedeps200orangecolor23eba742httpsgithubcomdgvclipboardblobmainbuildzigzon 0 dependencieshttps0dependenciesdev0dependenciessvghttps0dependenciesdev buildhttpsgithubcomdgvclipboardactionsworkflowsbuildymlbadgesvghttpsgithubcomdgvclipboardactionsworkflowsbuildyml license mithttpsimgshieldsiobadgelicensemityellowsvghttpsopensourceorglicensesmit provide copying and pasting text utf8 to the clipboard for zig  platform support  macos  linux unix requires xclip or xsel command to be installed  windows  usage  install  zig fetch save httpsgithubcomdgvclipboardarchiverefsheadsmainzip   import buildzig zig  exerootmoduleaddimportclipboard bdependencyclipboard moduleclipboard binstallartifactexe   sample zig const clipboard  importclipboard const std  importstd pub fn main void  try clipboardwritezig  stddebugprintsn clipboardread catch    ","zigzedd/zrm":"[mirror] zig relational mapper. p aligncenter a hrefhttpscodezeptotechnetzeddzrm picture img altzrm logo width150 srchttpscodezeptotechnetzeddzrmrawbranchmainlogosvg  picture a p h1 aligncenter zrm h1 h4 aligncenter a hrefhttpszeddzeptotechnetzrmdocumentationa  a hrefhttpszeddzeptotechnetzrmapiapia h4 p aligncenter zig relational mapper p zrm is part of zeddhttpscodezeptotechnetzedd a collection of useful libraries for zig  zrm zrm provides a simple interface to relational databases in zig define your repositories and easily write queries to retrieve and save complex zig structures  versions zrm 031 is made and tested with zig 0130  work in progress zrm aims to handle a lot for you but it takes time to make have a look to the issueshttpscodezeptotechnetzeddzrmissues to see what is currently planned or being worked on  how to use  install in your project directory shell  zig fetch save httpscodezeptotechnetzeddzrmarchivev031targz  in buildzig zig  add zrm dependency const zrm  bdependencyzrm  target  target optimize  optimize  exerootmoduleaddimportzrm zrmmodulezrm   documentation a full documentation can be found on zeddzeptotechnetzrmhttpszeddzeptotechnetzrm  examples some examples can be found in tests directory  testsexamplezighttpscodezeptotechnetzeddzrmsrcbranchmaintestsexamplezig  testsrepositoryzighttpscodezeptotechnetzeddzrmsrcbranchmaintestsrepositoryzig  testscompositezighttpscodezeptotechnetzeddzrmsrcbranchmaintestscompositezig ","4zv4l/zig_colored_logger":"simple colored logger for the std.log.logfn  zigcoloredlogger simple colored logger for the stdloglogfn  usage to add the project in your buildzigzon zig fetch save githttpsgithubcom4zv4lzigcoloredlogger then and this in buildzig rs const coloredlogger  bdependencycoloredlogger  projectname  exename  exerootmoduleaddimportcoloredlogger coloredloggermodulecoloredlogger   this library depends on chameleon httpsgithubcomtr1ckydevchameleon  how it looks like img width625 altimage srchttpsgithubcomuserattachmentsassetsb74ac911fead46f5a4ee1b2eb3890918 ","zigzedd/zouter":"[mirror] zig http router library. p aligncenter a hrefhttpscodezeptotechnetzeddzouter picture img altzouter logo width150 srchttpscodezeptotechnetzeddzouterrawbranchmainlogosvg  picture a p h1 aligncenter zouter h1 h4 aligncenter a hrefhttpscodezeptotechnetzeddzouterdocumentationa  a hrefhttpszeddzeptotechnetzouterapiapia h4 p aligncenter zig http router library p zouter is part of zeddhttpscodezeptotechnetzedd a collection of useful libraries for zig  zouter for zap zouter is an http router library for zig zap http server its made to ease the use of zap to build rest apis  versions zouter 011 is made for zig 0130 and tested with zap 080  how to use  install in your project directory shell  zig fetch save httpscodezeptotechnetzeddzouterarchivev011targz  in buildzig zig  add zouter dependency const zouter  bdependencyzouter  target  target optimize  optimize  exerootmoduleaddimportzouter zoutermodulezouter   example here is a quick example of how to set up a router it is an extract from the full test code at examplezighttpscodezeptotechnetzeddzoutersrcbranchmaintestsexamplezig you may want to have a look to simplerouteszighttpscodezeptotechnetzeddzoutersrcbranchmaintestssimplerouteszig which shows more advanced features zig  get fooargbar request handler fn getroute zoutermatchedroute request zaprequest void  var bodybuffer 512u8  undefined const body  try stdfmtbufprintbodybuffer get s routeparamsgetarg try requestsendbodybody   post fooargbar request handler fn postroute zoutermatchedroute request zaprequest void  var bodybuffer 512u8  undefined const body  try stdfmtbufprintbodybuffer post s routeparamsgetarg try requestsendbodybody   setup an example router fn setupexamplerouterallocator stdmemallocator zouterrouter   initialize an example router var examplerouter  try zouterrouterinitallocator   add a route to the example router try examplerouterroute path  foo children  zouterroutedefinition  path  arg children  zouterroutedefinition  path  bar handle   get  get post  post       return examplerouter    route definition a route only has one mandatory field its path if any part of a path starts with a  the value is taken as a dynamic variable retrievable later with routeparams hashmap a route can have  children subroutes definitions with a  between the parent and the child its useful to prefix a list of routes with the same path  variable  handle object you can define a handle function for each http basic request method if you dont care about the request method there is an any field which will be used for all undefined request methods  handle not found  error you can define a custom functions to handle errors or not found pages inside this path  prehandle  posthandle these functions are started before and after the request handling in this path it looks like middlewares and can assume the same role as most of them eg a prehandle function to check for authentication under a specific path full details about route definition fields can be found in the api referencehttpszeddzeptotechnetzouterapi ","nektro/zig-fmt-valueliteral":"print a value to a writer as it would be written in zig syntax as a (x) literal.  zigfmtvalueliteral print a value to a writer as it would be written in zig syntax as a x literal  api  pub fn fmtvalueliteralw stdiowriter value anytype comptime printtypename bool void  w is an anytype for any value that implements stdiowriter it will then print the respective syntax literal to it  value is anything youd like it to print should it fail to print a value you feel it should be able to please open an issue  printtypename is a bool for whether or not youd like it to print typenamet or  when printing structs enums and unions  license mit ","nektro/zig-licenses":"generated data from https://spdx.org/licenses/.  ziglicenses generated data from httpsspdxorglicenses includes extra declarations for osi approved licenses includes extra declarations for httpsblueoakcouncilorglist classes  license mit ","dgv/s3db.zig":"zig wrapper of sqlite/go extension that stores tables in an s3-compatible object store  s3dbzig zig versionhttpsimgshieldsiobadge0140orangestyleflatlogoziglabelzigcolor23eba742httpsziglangorgdownload reference zighttpsimgshieldsiobadgedeps201orangecolor23eba742httpsgithubcomdgvs3dbzigblobmainbuildzigzon buildhttpsgithubcomdgvs3dbzigactionsworkflowsbuildymlbadgesvghttpsgithubcomdgvs3dbzigactionsworkflowsbuildyml license mithttpsimgshieldsiobadgelicensemityellowsvghttpsopensourceorglicensesmit zig wrapper libsample for sqlitego extension that stores tables in an s3compatible object store  usage buildzig zig  exerootmoduleaddimports3db bdependencys3db modules3db binstallartifactexe  import zig const s3db  imports3db  var db  try s3dbinit mode  s3dbdbmode memory    openflags   write  true   defer dbdeinit try dbexeccreate virtual table user using s3db columnsid integer primary key age integer name text     ","ryoga-exe/proconio-zig":"proconio for the zig programming language. useful and easy io library for programming contests.  proconiozig proconio for the zig programming language useful and easy io library for programming contests  usage zig const std  importstd const proconio  importproconio pub fn main void  const allocator  stdheappageallocator var io  try proconioinitallocator defer iodeinit const in  try ioinputstruct  n u8 m u32 l i32  stddebugprint  n inn inm inl   ","cascadeos/zig-devicetree":"a read-only flattened device tree (dtb) api.  zigdevicetree a readonly flattened devicetree dtb api compatible with devicetree specification v04httpsgithubcomdevicetreeorgdevicetreespecificationreleasestagv04 autogenerated docshttpscascadeosgithubiozigdevicetree this started as a wrapper around libfdthttpsgithubcomdgibsondtctreemainlibfdt but is now a fresh implementation  installation add the dependency to buildzigzon sh zig fetch save githttpsgithubcomcascadeoszigdevicetree  then add the following to buildzig zig const devicetreedep  bdependencydevicetree  exerootmoduleaddimportdevicetree devicetreedepmoduledevicetree  ","bogwi/musubi":"all purpose graph in zig  all purpose graph in zig  description an implementation of an adjacency map graph where all edges incident on a vertex are collected into a map using the adjacent vertex as a key  the graph can be initiated as one of four variants subjects of graph type directedundirected and mode weighted unweighted zig const graph  musubivertexid edgeid edgewt undirected unweighted var graph graph   graphinitallocator defer graphdeinit  vertexid a vertex type can be anything that can be hashed such as numeric types structs arrays snippets of code or anything except floats and untagged enums  edgeid an edge type can be anything  edgewt the weight type of the edge if the graph was initiated as weighted any numeric type if the graph is unweighted the type is void here is the full api at the moment general api  a set of standard procedures typically found in graph adts  vertex id vertexid init void edge origin vertex destination vertex id edgeid weight edgewt init void endpoints pairv origin destination opposite vertex init void deinit void clearandfree void clearretainingcapacity void ensuretotalcapacity void cloneintoself void cloneintoselfwithallocator void mergeintoself void makevertex vertex insertvertex vertex insertvertexifvertex void removevertex bool gotvertex bool vertexcount u64 vertices vertex adjacentvertices vertex verticesintoset allvertices allvertices vertices arrayhashmap deinit void list vertex count usize gotvertex bool deletevertex bool makeedge edge insertedge edge insertedgeifedge void removeedge bool gotedge bool gotedgeifedge bool getedge edge edgecount usize degree usize incidentedges edge edgesintoset alledges alledges edges arrayhashmap deinit void list edge count usize gotedge bool deleteedge bool  special api tree traversing  traversetree arraylist traversetreeiftarget arraylist  the tree traversing procedure supports four algorithms by passing a corresponding enum to the above function treetraversealg bfs breadthfirst iterative  pre preorder recursive  post postorder recursive  ino inorder recursive graph traversing  connectiontree connections connectiontreeexcept connections connectiontreethrough connections connectiontreeiftarget connection connectiontreeiftargetexcept connection connectiontreeiftargetthroughconnection  the graph traversing procedure supports four  1 algorithm by passing a corresponding enum to the above functions searchalg bfs breadthfirst search iterative  dfsa depthfirst search iterative  dfsb depthfirst search iterative true recursion emulation  dfsc depthfirst search pure recursive  dij  dijkstra shortest path iterative which algorithm is better that depends bfs and dij are both shortest path algorithms the only difference between them is that bfs gives the shortest path based on how many edges it needs to travel to reach the goal while dij considers the weights of the edges treating them like distances between vertices if all edges have the same weight then dij will give the same result as bfsd  the depthfirst group of algorithms is different and graphdependent if the graph is undirected where all vertices are randomly connected they will not necessarily produce the shortest paths from origin to destination they explore the graph as a whole and are useful for finding the longest possible paths if we have such an undirected tangly graph with 1m randomly connected vertices and if it is possible to travel from the first vertex to the last vertex and visit all the nodes the recursive dfsc algorithm will find this path from 1m  1 vertex  dfsb is the authors iterative algorithm which emulates true recursion to a large extent in some scenarios the paths it produces are identical to true recursion with an identical stack trace but may differ in branches it is only designed for undirected graphs as a dfsc replacement  dfsa is a lazy iterative algorithm often found in books and used worldwide it is an inversion of bfs where the queue is substituted for the stack in the case of an undirected randomly connected graph the paths it produces will be much shorter than those of the recursive dfsc additional parameters are  knockout a set of vertices to remove from the traversal or to traverse only  target the target of the traversal the traversal will stop when the target is reached  depth the depth of the traversal which has slightly different goals depending on the algorithm the traversal process computes a connection tree from the given starting vertex to all other vertices in the map  the connection tree has its own documented api for working with the result  connection found bool explore connections deinit void connections origin vertex path arrayhashmap discovered arrayhashmap lastlookup vertex deinit void connectedto bool getallconnected vertex getdistanceto edgewt getpathto vertex walkpathto walkpath walkpath cnt connections idx u64 next vertex reset void poppathto ","interactivebin/imgui":"dear imgui: bloat-free graphical user interface for c++ with minimal dependencies 404 not found","nektro/zig-unicode-uca":"zig bindings for the contributory data files for the unicode collation algorithm.  zigunicodeuca zig bindings for the unicode collation algorithm last updated as of unicode 1600 httpswwwunicodeorgreportstr10  this report is the specification of the unicode collation algorithm uca which details how to compare two unicode strings while remaining conformant to the requirements of the unicode standard the uca also supplies the default unicode collation element table ducet as the data specifying the default collation order for all unicode characters httpswwwunicodeorgpublicucalatest  installation  zigmod aq add 1nektrounicodeuca   usage this package provides allkeys and decomps namespaces  license mit ","thechampagne/cutenet-zig":"zig binding for cutenet a networking library for games requiring an optional reliability layer over udp with a baked in security scheme.  cutenetzig httpsimgshieldsiogithubvtagthechampagnecutenetziglabelversionhttpsgithubcomthechampagnecutenetzigreleaseslatest httpsimgshieldsiogithublicensethechampagnecutenetzighttpsgithubcomthechampagnecutenetzigblobmainlicense zig binding for cutenet a networking library for games requiring an optional reliability layer over udp with a baked in security scheme  references  cutenethttpsgithubcomrandygaulcuteheadersblobmastercuteneth  103  license this repo is released under the zlib licensehttpsgithubcomthechampagnecutenetzigblobmainlicense ","vspefs/ayc-libuv":"libuv c library (not a binding!) as a fetch-able zig package. i build libuv with zig build system you fetch it and use it in your zig build system sanitizers not usable im lazy and im sorry should fix that later should be working on linux and windows take care of the platformspecific macros yourself like gnusource on linux as you could possibly guess i mean to get this into all your codebasehttpsgithubcomallyourcodebase but i should really provide support for all available platforms first before try to get this to anywhere else","tensorush/zig-cookie":"zig port of cookie-rs library for http cookie storage.  zigcookie  zig port of cookiers libraryhttpsgithubcomrwf2cookiers for http cookie storage  usage  add cookie dependency to buildzigzon sh zig fetch save githttpsgithubcomtensorushzigcookie   use cookie dependency in buildzig zig const cookiedep  bdependencycookie  target  target optimize  optimize  const cookiemod  cookiedepmodulecookie compilerootmoduleaddimportcookie cookiemod  ","tiawl/glslang.zig":"glslang packaged for @ziglang  glslangzig this is a fork of khronosgroupglslang1 packaged for zig2  why this fork  the intention under this fork is to package khronosgroupglslang1 for zig2 so  unnecessary files have been deleted  the build system has been replaced with buildzig  a cron runs every day to check khronosgroupglslang1 then it updates this repository if a new release is available  how to use it the goal of this repository is not to provide a zig2 binding for khronosgroupglslang1 there are at least as many legit ways as possible to make a binding as there are active accounts on github so you are not going to find an answer for this question here the point of this repository is to abstract the khronosgroupglslang1 compilation process with zig2 which is not new comers friendly and not easy to maintain to let you focus on your application so you can use glslangzig  as raw no available example open an issue if you are interested in we will be happy to help you  as a daily updated interface for your zig2 binding of khronosgroupglslang1 again no available example  important note the current usage of this repository is centered around tiawlshaderczig3 compilation so for your usage it could break because some files have been filtered in the process if it happens open an issue this repository is open to potential usage evolution  dependencies the zig2 part of this package is relying on the latest zig2 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  khronosgroupglslanghttpsgithubcomtiawlglslangzigblobtrunkreferencesglslang  cicd reminder these repositories are automatically updated when a new release is available  tiawlshaderczig3 this repository is automatically updated when a new release is available from these repositories  khronosgroupglslang1  tiawltoolbox4  tiawlspacepornactionbot5  tiawlspacepornactionci6  tiawlspacepornactioncdping7  tiawlspacepornactioncdpong8  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomkhronosgroupglslang 2httpsgithubcomziglangzig 3httpsgithubcomtiawlshaderczig 4httpsgithubcomtiawltoolbox 5httpsgithubcomtiawlspacepornactionbot 6httpsgithubcomtiawlspacepornactionci 7httpsgithubcomtiawlspacepornactioncdping 8httpsgithubcomtiawlspacepornactioncdpong ","johan0a/vulkanmemoryallocator":"vulkanmemoryallocator packaged for the zig build system   vulkanmemoryallocator this is vulkanmemoryallocatorhttpsgpuopencomvulkanmemoryallocator packaged for the zighttpsziglangorg build system  how to use 1 add zclay to the dependency list in buildzigzon sh zig fetch save githttpsgithubcomjohan0avulkanmemoryallocatorv321  2 config buildzig zig  const vmadep  bdependencyvulkanmemoryallocator  target  target optimize  optimize  yourcompilationlinklibraryvma zclaydepartifactvulkanmemoryallocator  ","tiawl/spirv.zig":"spirv-tools packaged for @ziglang   spirvzig this is a fork of hexopsspirvtools1 which itself is a fork of khronosgroupspirvtools2  why this forkception  the intention under this fork is the same as hexops11 had when they forked khronosgroupspirvtools2 package the headers for zig4 so  unnecessary files have been deleted  the build system has been replaced with buildzig however this repository has subtle differences for maintainability tasks  no shell scripting  a cron runs every day to check khronosgroupspirvtools2 and khronosgroupspirvheaders3 then it updates this repository if a new release is available  how to use it the current usage of this repository is centered around tiawlshaderczig3 compilation but you could use it for your own projects headers are here and there are no planned evolution to modify them see tiawlshaderczig3 to see how you can use it maybe for your own need some headers are missing if it happens open an issue this repository is open to potential usage evolution  dependencies the zig4 part of this package is relying on the latest zig4 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  khronosgroupspirvtoolshttpsgithubcomtiawlspirvzigblobtrunkreferencesspirvtools  khronosgroupspirvheadershttpsgithubcomtiawlspirvzigblobtrunkreferencesspirv  cicd reminder these repositories are automatically updated when a new release is available  tiawlshaderczig5 this repository is automatically updated when a new release is available from these repositories  khronosgroupspirvtools2  khronosgroupspirvheaders3  tiawltoolbox6  tiawlspacepornactionbot7  tiawlspacepornactionci8  tiawlspacepornactioncdping9  tiawlspacepornactioncdpong10  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomhexopsspirvtools 2httpsgithubcomkhronosgroupspirvtools 3httpsgithubcomkhronosgroupspirvheaders 4httpsgithubcomziglangzig 5httpsgithubcomtiawlshaderczig 6httpsgithubcomtiawltoolbox 7httpsgithubcomtiawlspacepornactionbot 8httpsgithubcomtiawlspacepornactionci 9httpsgithubcomtiawlspacepornactioncdping 10httpsgithubcomtiawlspacepornactioncdpong 11httpsgithubcomhexops ","kassane/json":"json for modern c++ (uses zig build-system) json for modern cdocsjsongifhttpsgithubcomnlohmannjsonreleases build statushttpsciappveyorcomapiprojectsstatus1acb366xfyg3qybkbranchdevelopsvgtruehttpsciappveyorcomprojectnlohmannjson ubuntuhttpsgithubcomnlohmannjsonworkflowsubuntubadgesvghttpsgithubcomnlohmannjsonactionsqueryworkflow3aubuntu macoshttpsgithubcomnlohmannjsonworkflowsmacosbadgesvghttpsgithubcomnlohmannjsonactionsqueryworkflow3amacos windowshttpsgithubcomnlohmannjsonworkflowswindowsbadgesvghttpsgithubcomnlohmannjsonactionsqueryworkflow3awindows coverage statushttpscoverallsioreposgithubnlohmannjsonbadgesvgbranchdevelophttpscoverallsiogithubnlohmannjsonbranchdevelop coverity scan build statushttpsscancoveritycomprojects5550badgesvghttpsscancoveritycomprojectsnlohmannjson codacy badgehttpsappcodacycomprojectbadgegradee0d1a9d5d6fd46fcb655c4cb930bb3e8httpswwwcodacycomghnlohmannjsondashboardutmsourcegithubcomamputmmediumreferralamputmcontentnlohmannjsonamputmcampaignbadgegrade cirrus cihttpsapicirruscicomgithubnlohmannjsonsvghttpscirruscicomgithubnlohmannjson fuzzing statushttpsossfuzzbuildlogsstoragegoogleapiscombadgesjsonsvghttpsbugschromiumorgpossfuzzissueslistsortopenedcan1qprojjson try onlinehttpsimgshieldsiobadgetryonlinebluesvghttpswandboxorgpermlink1mp10jbaano6fuc7 documentationhttpsimgshieldsiobadgedocsmkdocsbluesvghttpsjsonnlohmannme github licensehttpsimgshieldsiobadgelicensemitbluesvghttpsrawgithubusercontentcomnlohmannjsonmasterlicensemit github releaseshttpsimgshieldsiogithubreleasenlohmannjsonsvghttpsgithubcomnlohmannjsonreleases vcpkg versionhttpsimgshieldsiovcpkgvnlohmannjsonhttpsvcpkglinkportsnlohmannjson packaging statushttpsrepologyorgbadgetinyreposnlohmannjsonsvghttpsrepologyorgprojectnlohmannjsonversions github downloadshttpsimgshieldsiogithubdownloadsnlohmannjsontotalhttpsgithubcomnlohmannjsonreleases github issueshttpsimgshieldsiogithubissuesnlohmannjsonsvghttpsgithubcomnlohmannjsonissues average time to resolve an issuehttpsisitmaintainedcombadgeresolutionnlohmannjsonsvghttpsisitmaintainedcomprojectnlohmannjson average time to resolve an issue cii best practiceshttpsbestpracticescoreinfrastructureorgprojects289badgehttpsbestpracticescoreinfrastructureorgprojects289 github sponsorshttpsimgshieldsiobadgegithubsponsorsff69b4httpsgithubcomsponsorsnlohmann reuse statushttpsapireusesoftwarebadgegithubcomnlohmannjsonhttpsapireusesoftwareinfogithubcomnlohmannjson discordhttpsimgshieldsiodiscord1003743314341793913httpsdiscordgg6mrgxkvx7y  design goalsdesigngoals  sponsorssponsors  supportsupport documentationhttpsjsonnlohmannme faqhttpsjsonnlohmannmehomefaq discussionshttpsgithubcomnlohmannjsondiscussions apihttpsjsonnlohmannmeapibasicjson bug issueshttpsgithubcomnlohmannjsonissues  examplesexamples  read json from a filereadjsonfromafile  creating json objects from json literalscreatingjsonobjectsfromjsonliterals  json as firstclass data typejsonasfirstclassdatatype  serialization  deserializationserializationdeserialization  stllike accessstllikeaccess  conversion from stl containersconversionfromstlcontainers  json pointer and json patchjsonpointerandjsonpatch  json merge patchjsonmergepatch  implicit conversionsimplicitconversions  conversions tofrom arbitrary typesarbitrarytypesconversions  specializing enum conversionspecializingenumconversion  binary formats bson cbor messagepack ubjson and bjdatabinaryformatsbsoncbormessagepackubjsonandbjdata  supported compilerssupportedcompilers  integrationintegration  cmakecmake  package managerspackagemanagers  pkgconfigpkgconfig  licenselicense  contactcontact  thanksthanks  used thirdparty toolsusedthirdpartytools  projects using json for modern cprojectsusingjsonformodernc  notesnotes  execute unit testsexecuteunittests  design goals there are myriads of jsonhttpsjsonorg libraries out there and each may even have its reason to exist our class had these design goals  intuitive syntax in languages such as python json feels like a first class data type we used all the operator magic of modern c to achieve the same feeling in your code check out the examples belowexamples and youll know what i mean  trivial integration our whole code consists of a single header file jsonhpphttpsgithubcomnlohmannjsonblobdevelopsingleincludenlohmannjsonhpp thats it no library no subproject no dependencies no complex build system the class is written in vanilla c11 all in all everything should require no adjustment of your compiler flags or project settings  serious testing our code is heavily unittestedhttpsgithubcomnlohmannjsontreedeveloptestssrc and covers 100httpscoverallsiornlohmannjson of the code including all exceptional behavior furthermore we checked with valgrindhttpsvalgrindorg and the clang sanitizershttpsclangllvmorgdocsindexhtml that there are no memory leaks google ossfuzzhttpsgithubcomgoogleossfuzztreemasterprojectsjson additionally runs fuzz tests against all parsers 247 effectively executing billions of tests so far to maintain high quality the project is following the core infrastructure initiative cii best practiceshttpsbestpracticescoreinfrastructureorgprojects289 other aspects were not so important to us  memory efficiency each json object has an overhead of one pointer the maximal size of a union and one enumeration element 1 byte the default generalization uses the following c data types stdstring for strings int64t uint64t or double for numbers stdmap for objects stdvector for arrays and bool for booleans however you can template the generalized class basicjson to your needs  speed there are certainly faster json librarieshttpsgithubcommiloyipnativejsonbenchmarkparsingtime out there however if your goal is to speed up your development by adding json support with a single header then this library is the way to go if you know how to use a stdvector or std","frostium-project/spinlock":"a simple spinlock in zig  spinlock a simple spinlock in zig with the same api as stdthreadmutexhttpsziglangorgdocumentationmasterstdstdthreadmutex use this only if you need a spinlock use a proper mutex with os blessings otherwise  usage first add the package to your buildzigzon zig fetch savespinlock httpsgithubcomfrostiumprojectspinlockarchivev003targz then add the following to your buildzig zig const spinlock  bdependencyspinlock  target  target optimize  optimize  exerootmoduleaddimportspinlock spinlockmodulespinlock  ","r4gus/zigenity":"like zenity but in zig  zigenity like zenityhttpsgitlabgnomeorggnomezenity but in zighttpsziglangorg and only for linux question dialogstaticexample01png  dialog types  type  supported    calendar    entry    error    info    fileselection     list    notification    progress    question     warning    scale    textinfo    colorselection    password     forms    dependency  gtk30  getting started to build this application you need zig 0110httpsziglangorgdownload after installing zig run the following commands to build the application  git clone httpsgithubcomr4guszigenitygit cd zigenity zig build doptimizereleasesmall  run zigenity help for a list of options this application uses the same return codes and options as zenityhttpsgitlabgnomeorggnomezenity including  0  ok button was pressed  1  cancel button was pressed  5  timeout this is only returned when using the timeout option  255  some other error eg no dialog type has been selected ","kassane/outcome":"provides very lightweight outcome<t> and result<t> (non-boost edition) (uses zig build-system) 404 not found","squeek502/zig-unidecode":"very approximate utf-8 to ascii transliterator (a zig implementation of the text::unidecode perl module)  zigunidecode a zighttpsziglangorg implementation of the textunidecode perl modulehttpsmetacpanorgpodtextunidecode to convert utf8 text into a very approximate asciionly transliteration that is this is meant to be a transliterator of last resort for a more detailed description including motivation caveats etc see httpsmetacpanorgpodtextunidecode  examples  utf8  transliterated ascii        h  yeah     bei jing      slavsia     50    50   some things worth noting  the returned output will only contain ascii characters 0x000x7f  any ascii characters in the input will be unconverted in the output  utf8 codepoints may be transliterated to a variable number of ascii characters including 0  utf8 codepoints  0x7f will never be transliterated to include any ascii control characters except n  unknown utf8 codepoints may be transliterated to   the different functions provided  unidecodealloc takes an allocator in order to handle any input size safely this should be used for most usecases  unidecodebuf takes a dest slice that must be large enough to handle the transliterated ascii because the output size can vary greatly depending on the input this is unsafe unless it can be known aheadoftime that the transliterated output will fit ie comptime  unidecodestringliteral a way to transliterate a utf8 string literal into ascii at compile time ","ratakor/skip":"zig and c99 implementation of skip lists  skip  a c99 and zig implementation of skip listshttpswikipediaorgwikiskiplist usage  define skipdoubly to use doubly skip lists instead of singly skip lists change skipkey and skipval types in skiph according to your keyval types include skipc and skiph to your project thats it ","robbielyman/embedfile.zig":"an extension to the zig build system to programmatically collect assets 404 not found","interactivebin/sdl":"simple directmedia layer (using zig as build system)  simple directmedia layer  note  cmake replaced with zig build system run zig build  only tested on linux though windows should work too simple directmedia layer sdl for short is a crossplatform library designed to make it easy to write multimedia software such as games and emulators you can find the latest release and additional documentation at httpswwwlibsdlorg installation instructions and a quick introduction is available in installmdinstallmd this library is distributed under the terms of the zlib license available in licensetxtlicensetxt enjoy sam lantinga sloukenlibsdlorg ","interactivebin/joltphysics":"a multi core friendly rigid body physics and collision detection library. written in c++. suitable for games and vr applications. used by horizon forbidden west. cla assistanthttpsclaassistantioreadmebadgejrouwejoltphysicshttpsclaassistantiojrouwejoltphysics build statushttpsgithubcomjrouwejoltphysicsactionsworkflowsbuildymlbadgesvghttpsgithubcomjrouwejoltphysicsactions quality gate statushttpssonarcloudioapiprojectbadgesmeasureprojectjrouwejoltphysicsmetricalertstatushttpssonarcloudiodashboardidjrouwejoltphysics bugshttpssonarcloudioapiprojectbadgesmeasureprojectjrouwejoltphysicsmetricbugshttpssonarcloudiodashboardidjrouwejoltphysics code smellshttpssonarcloudioapiprojectbadgesmeasureprojectjrouwejoltphysicsmetriccodesmellshttpssonarcloudiodashboardidjrouwejoltphysics coveragehttpssonarcloudioapiprojectbadgesmeasureprojectjrouwejoltphysicsmetriccoveragehttpssonarcloudiodashboardidjrouwejoltphysics  jolt physics a multi core friendly rigid body physics and collision detection library suitable for games and vr applications used by horizon forbidden west horizon forbidden west cover arthttpsjrouwenljolthorizonforbiddenwestpnghttpswwwplaystationcomenusgameshorizonforbiddenwest ragdoll pilehttpsimgyoutubecomvipwycw0ynkmahqdefaultjpghttpswwwyoutubecomwatchvpwycw0ynkma  a youtube video showing a ragdoll pile simulated with jolt physics for more demos and videoshttpswwwyoutubecomwatchvpwycw0ynkmalistplyxvwtor1cbxba50jvg2dkuqvhw5ooom go to the samplesdocssamplesmd section  design considerations why create yet another physics engine firstly it has been a personal learning project secondly i wanted to address some issues that i had with existing physics engines  games do more than simulating physics these things happen across multiple threads we emphasize on concurrently accessing physics data outside of the main simulation update  sections of the simulation can be loaded  unloaded in the background we prepare a batch of physics bodies on a background thread without locking or affecting the simulation we insert the batch into the simulation with a minimal impact on performance  collision queries can run parallel to adding  removing or updating a body if a change to a body happened on the same thread the change will be immediately visible if the change happened on another thread the query will see a consistent before or after state an alternative would be to have a read and write version of the world this prevents changes from being visible immediately so we avoid this  collision queries can run parallel to the main physics simulation we do a coarse check broad phase query before the simulation step and do fine checks narrow phase query in the background this way long running processes like navigation mesh generation can be spread out across multiple frames  accidental wake up of bodies cause performance problems when loading  unloading content therefore bodies will not automatically wake up when created neighboring bodies will not be woken up when bodies are removed this can be triggered manually if desired  the simulation runs deterministically you can replicate a simulation to a remote client by merely replicating the inputs to the simulation read the deterministic simulationhttpsjrouwegithubiojoltphysicsdeterministicsimulation section to understand the limits  we try to simulate behavior of rigid bodies in the real world but make approximations therefore this library should mainly be used for games or vr simulations  features  simulation of rigid bodies of various shapes using continuous collision detection  sphere  box  capsule  taperedcapsule  cylinder  taperedcylinder  convex hull  plane  compound  mesh triangle  terrain height field  simulation of constraints between bodies  fixed  point  distance including springs  hinge  slider also called prismatic  cone  rack and pinion  gear  pulley  smooth spline paths  swingtwist for humanoid shoulders  6 dof  motors to drive the constraints  collision detection  casting rays  testing shapes vs shapes  casting a shape vs another shape  broadphase only tests to quickly determine which objects may intersect  sensors trigger volumes  animated ragdolls  hard keying kinematic only rigid bodies  soft keying setting velocities on dynamic rigid bodies  driving constraint motors to an animated pose  mapping a high detail animation skeleton onto a low detail ragdoll skeleton and vice versa  game character simulation capsule  rigid body character moves during the physics simulation cheapest option and most accurate collision response between character and dynamic bodies  virtual character does not have a rigid body in the simulation but simulates one using collision checks updated outside of the physics update for more control less accurate interaction with dynamic bodies  vehicles  wheeled vehicles  tracked vehicles  motorcycles  soft body simulation eg a soft ball or piece of cloth  edge constraints  dihedral bend constraints  tetrahedron volume constraints  long range attachment constraints also called tethers  limiting the simulation to stay within a certain range of a skinned vertex  internal pressure  collision with simulated rigid bodies  collision tests against soft bodies  water buoyancy calculations  an optional double precision mode that allows large worlds  supported platforms  windows desktop or uwp x86x64arm32arm64  linux tested on ubuntu x86x64arm32arm64riscv64loongarch64powerpc64le  freebsd  android x86x64arm32arm64  platform blue a popular game console x64  macos x64arm64  ios x64arm64  msys2 mingw64  webassembly see thishttpsgithubcomjrouwejoltphysicsjs separate project  required cpu features  on x86x64 the minimal requirements are sse2 the library can be compiled using sse41 sse42 avx avx2 or avx512  on arm64 the library uses neon and fp16 on arm32 it can be compiled without any special cpu instructions  documentation to learn more about jolt go to the latest architecture and api documentationhttpsjrouwegithubiojoltphysics documentation for a specific release is also availablehttpsjrouwegithubiojoltphysicsdocs to get started look at the helloworldhelloworldhelloworldcpp example a helloworld example using cmake fetchcontenthttpsgithubcomjrouwejoltphysicshelloworld is also available to show how you can integrate jolt physics in a cmake project some algorithms used by jolt are described in detail in my gdc 2022 talk architecting jolt physics for horizon forbidden west slideshttpsgdcvaultcomplay1027560architectingjoltphysicsforhorizon slides with spe","nektro/zig-bencode":"bencode parser for zig.  zigbencode lochttpsslocxyzgithubnektrozigbencode bencode parser for zig uses the zigmodhttpsgithubcomnektrozigmod package manager httpsenwikipediaorgwikibencode httpswwwbittorrentorgbepsbep0003htmlbencoding  usage add the following to the bottom of your zigmod yml dependencies  src git httpsgithubcomnektrozigbencode  in your code zig const bencode  importbencode pub fn main void  var gpa  stdheapgeneralpurposeallocator const alloc  gpaallocator const file  embedfilesomepathtotorrent var buf  stdiofixedbufferstreamfile const r  bufreader const ben  try bencodeparser alloc  do something with ben    license mit ","nektro/zig-detect-license":"given an input text guess which spdx license it most likely is an instance of  zigdetectlicense given an input text guess which spdx license it most likely is an instance of  built with  httpsgithubcomziglangzig master  httpsgithubcomnektrozigmod package manager  httpsgithubcomnektroziglicensestext  httpsgithubcomnektrozigleven  httpsgithubcomnektrozigfscheck  install  zigmod aq add 1nektrodetectlicense   usage  pub fn detectalloc stdmemallocator licensesrc const u8 const u8  given an input string will return the spdx licence identifier for the closest guess to which one it might be  pub fn detectindiralloc stdmemallocator dir stdfsdir const u8  given a directory will search for a license file and return the guess for which one it is will return null if the license file can not be found if this returns null when you do indeed have a license file please help expand the search examples by submitting a bug report  license mit ","jafagervik/zybel":"ai/ml library in the making, all written in zig  warning  zybel is still wip breaking changes may occur  zinyn  ml and ai made possible for fun  goal create a framework for training dnns in zig using hardware accelerators and compare results  why to quote a wise man for the joy of programming  features  x generic tensor using comptime  x binops such as add sub mul div  x general tensor ops clamp reshape sum min max  x sgd optimizer  x common loss functions such as mse and mae  3 more    activation functions    simple layers    autograd    computational graph    hardware acceleration support  install per 014 beta run this command in the parent directory of your project sh zig fetch save githttpsgithubcomjafagervikzybelgit  then add these lines to buildzig before binstallartifactexe zig const zybel  bdependencyzybel  exerootmoduleaddimportzybel zybelmodulezybel   example zig const std  importstd const zb  importzybel const tensor  zbtensor const tf32  tensorf32 pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator defer   gpadeinit  creates a f32 tensor of shape 1 3 3 var t tf32  try tf32onesallocator u32 1 3 3  defer tdeinit stddebugprintfirst value is d2n tgetfirst bonsetval0 20 stddebugprintfirst value is now d2n tgetfirst  prints input about the tensor tprint stddebugprintsum is d2n tsum    contribute hell yea feel free to add suggestionscorrections i am a mere mortal not a god ","retrodev256/falloc":"a temporary-file backed allocator for zig ever wanted a zig allocator that could allocate all the free space of your hdd look no further really though dont unless you have a specific need for this you likely dont need it  i created this allocator posix systems only right now for the purpose of single very large allocations think lots and lots of math with hundreds of gigabytes in each array it is advised that you use releasefastreleasesmall when using this library this is because the allocated memory is set to undefined by the allocator interface which may take a while for large allocations zig const std  importstd const allocator  stdmemallocator const falloc  importfalloc pub fn main void  const gpa allocator  fallocallocator  256 gib of memory to work with const mem  try gpaallocu8 1  38 defer gpafreemem  in a realworld use case scenario this would be better utilized const hello  hello worldn memcpymem0hellolen hello stddebugprints mem0hellolen   ","allyourcodebase/libxml2":"libxml2 ported to the zig build system  cihttpsgithubcomallyourcodebaselibxml2actionsworkflowsciyamlbadgesvghttpsgithubcomallyourcodebaselibxml2actions  libxml2 this is libxml2httpsgitlabgnomeorggnomelibxml2 packaged for zighttpsziglangorg  installation first update your buildzigzon   initialize a zig build project if you havent already zig init zig fetch save githttpsgithubcomallyourcodebaselibxml2git21351  you can then import libxml2 in your buildzig with zig const libxml2dependency  bdependencylibxml2  target  target optimize  optimize iconv  false  this would link to libiconv otherwise  yourexelinklibrarylibxml2dependencyartifactlibxml2  ","jdknezek/zobench":"simple zig benchmarking  zobench zobench is a simple benchmark library for zig its inspired by gos testingbhttpsgolangorgpkgtestingb  example zig fn benchmarkassignb state void   expensive setup bresettimer var i usize  0 while i  bn  i  1  i  i   test runn  const result  try runnbenchmarkassign 10 try stdtestingexpectresultn  10 stddebugprintn ops   ns  d3 nsopn  resultn resultns resultnsperop   test runns  const result  try runnsbenchmarkassign stdtimenspers try stdtestingexpectresultns  stdtimenspers stddebugprintn ops   ns  d3 nsopn  resultn resultns resultnsperop   fn benchmarkallocb state void  var allocator  ballocator  expensive setup bresettimer var i usize  0 while i  bn  i  1  const p  try allocatorcreateu64 if i  2  0  allocatordestroyp    test leak  const result  try runnbenchmarkalloc 10 stddebugprintnd3 allocsop d3 bytesopn  resultallocsperop resultallocmemperop  if resultmem  0  stddebugprintleaked  bytesn resultmem    output  test 13 testrunn 10 ops  200 ns  20000 nsop test 23 testrunns 927815920 ops  1154363300 ns  1244 nsop test 33 testalloc 1000 allocsop 8000 bytesop leaked 40 bytes  ","reokodoku/sap":"a simple argument parser library for zig  sap sap is a simple argument parser library for zig that uses a tuple of flags to create a struct containing the value of the arguments  how to add the library 1 run in the terminal sh zig fetch save githttpsgithubcomreokodokusap  2 add in your buildzig zig const sap  bdependencysap  exerootmoduleaddimportsap sapmodulesap   examples minimal example zig const sap  importsap var argparser  sapparser sapflagconst u8 hello h world initallocator defer argparserdeinit const args  try argparserparseargs stddebugprintexecutable name sn argsexecutablename var positionalsiter  argspositionalsiterator stddebugprintpositionalsn  while positionalsiternext str stddebugprint sn str stddebugprinthelloh flag value sn argshello  you can find more examples in the examples folder for more information see the source code or documentation zig build docs  features  short arguments  long arguments  pass values after an equal foobar or a space foo bar  flags can be specified multiple times  flags that call a function  supported types  booleans  strings  ints signed and unsigned  floats  enums  and all optional variants of the above bool const u8   zig version sap targets the master branch of zig in the buildzigzon file there is the minimumzigversion field which specifies the latest version of zig in which sap compiles when the zig master branch breaks the compilation a commit will be merged to  fix the compilation errors  update the minimumzigversion field with the new zig version ","joachimschmidt557/zig-walkdir":"provides functions for walking directories recursively  zigwalkdir a zig package providing functions for recursively traversing directories works with zig 0140  todo  x breadthfirst search  x depthfirst search    tests    following symlinks    correct error handling ","falsepattern/koishi":"the koishi c coroutine library ported to the zig build system  koishi this is koishihttpsgithubcomtaiseiprojectkoishi a portable c coroutine library packaged for zighttpsziglangorg if youre looking for ziggified bindings check out satorihttpsgithubcomfalsepatternsatori  how to use it first update your buildzigzon shell zig fetch save githttpsgithubcomfalsepatternkoishimaster  next add this snippet to your buildzig script zig const koishidep  bdependencykoishi  target  target optimize  optimize  yourcompilationlinklibrarykoishidepartifactkoishi  this will provide koishi as a static library to yourcompilation if you want to use it inside a translatec step you can do the following zig const translatec  baddtranslatec rootsourcefile  bpath target  target optimize  optimize  translatecaddincludepathkoishidepnamedlazypathkoishiinclude   additional options  verbose  bool verbose logging for configure phase default false impl  enum which implementation to use leave empty to autodetect supported values emscripten fcontext ucontext ucontexte2k ucontextsjlj win32fiber threadsafe  bool whether multiple coroutines can be ran on different threads at once needs compiler support default true valgrind  bool enable support for running under valgrind for debugging default false linkage  enum whether the koishi library should be statically or dynamically linked default static supported values static dynamic  using the emscripten implementation requires s asyncify in your emscripten linker args  todo libboost is currently not supported ","ikskuh/navmesh":"a navmesh implementation in zig 404 not found","bogwi/sortedmap":"map for fast storing key-value pairs sorted by key  sortedmap in zig  description sorted map is a fast keyvalue table an advance version of skiplist adthttpsenwikipediaorgwikiskiplist as proposed by wpugh in 1989 for ordered mapping of keys to values  features  takes any numeric key except the maximum possible value for the given type  takes any literal key of type const u8 and of any length but lexicographically smaller than  ascii 255  values are arbitrary values  works in set or list mode the latter allows duplicate keys  has forward and backward iteration  has min max median key query  supports queries by key or index similar to pythons list class including reverse indexing  basic operations like get remove work on a range as well  updating the values by giving the startidx  stopidx range is o1 each update yes the whole map can be updated in on  updating the values by giving the startkey  stopkey range is o1 each update  performance the benchmark is a set of standard stress routines to measure the throughput for the given task the machine is an apple m1 with 32gb ram optimization flag releasefast there are five tests in total all of which are run on the random data with intermediate shuffling during the test stages read heavy read 98 insert 1 remove 1 update 0  models caching of data in places such as web servers and disk page caches exchange read 10 insert 40 remove 40 update 10 replicates a scenario where the map is used to exchange data exchange heavy read 1 insert 98 remove 98 update 1 this test is an inverse of rh test hard for any map rapid grow read 5 insert 80 remove 5 update 10 a scenario where the map is used to collect large amounts of data in a short burst clone clone the map that is rebuild the map anew yet from the sorted data  u64 arbitrary feed  sortedmap u64 benchmark 10000000 opseach test name tp mopssec rt sec  rh  5147 0194274 arena size 13804 cache len 131 ex  2325 0430069 arena size 13804 cache len 121 exh  2020 0494928 arena size 13804 cache len 135 rg  053 18996072 arena size 595966060 cache len 5 clone  586 1279128   8const u8 arbitrary literal arbitrary feed  sortedmap str benchmark 10000000 opseach test name tp mopssec rt sec  rh  2549 0392336 arena size 13564 cache len 133 ex  1702 0587408 arena size 13564 cache len 123 exh  1449 0690115 arena size 13564 cache len 137 rg  037 26855707 arena size 894236804 cache len 5 clone  312 2400613   how to run the benchmark  zig build bench  by default it runs 100000 rounds each test on the u64 type give it a larger number to stress the map more  zig build bench  1000000  prepend with str to test on the arbitrary 8u8 word  zig build bench  1000000 str   how to use it copy sortedmapzig and cachezig into your project or make a fork and work from there or you can import it as a dependency declare in your file zig const sortedmap  importsortedmapzigsortedmap  initiate for numeric keys zig const map  sortedmapu64 yourvaluetype listinityourallocator defer mapdeinit  initiate for string literal keys zig const map  sortedmapconst u8 yourvaluetype setinityourallocator defer mapdeinit   zig version  0120dev1830779b8e259  ","ahmdhusam/concurrent-channel":"a thread-safe communication channel for concurrent programming in zig. 404 not found","syndica/zstd.zig":"zig binding of z standard  zstdzig zig binding of z standard based on v152  how to import in your buildzig zig pub fn buildb stdbuild void    const zstddep  bdependencyzstd opts const zstdmod  zstddepmodulezstd const zstdclib  zstddepartifactzstd const exec    link it execaddmodulezstd zstdmod execlinklibraryzstdclib      usage zig const zstdreader  importzstdreader  pub fn main  const path   const file  try stdfscwdopenfilepath  defer fileclose const filestat  try filestat const filesize u64  intcastfilestatsize var memory  try stdosmmap null filesize stdosprotread stdosmapprivate filehandle 0  var decompressedstream  try zstdreaderinitmemory var reader  decompressedstreamreader    ","games-by-mason/tracy_zig":"tracy bindings for zig.  tracy zig tracyhttpsgithubcomwolfpldtracy client bindings for marking up your zig projects this library aims to expose all features available in tracys c api including features like gpu zones for the list of features that have yet to be implemented see the issue tracker  integration you can integrate tracy into your library without forcing it on your downstream users this allows library developers to use tracy without inconveniencing an application developer who may not be using it this section walks you through the integration there are plans to simplify thishttpsgithubcomgamesbymasontracyzigissues8  libraries to integrate tracy with your library just add the tracy module in your buildzig all configuration including whether tracy is enabled or disabled is inherited from the executable if the executable does not specify a preference tracy is disabled this means that you can use tracy in your library without forcing it on your downstream users buildzig zig const tracy  bdependencytracy  target  target optimize  optimize  libaddimporttracy tracymoduletracy  foozig  const tracy  importfoo   executables executables need to advertise whether or not tracy should be enabled or it will be implicitly disabled heres the recommended approach buildzig zig  allow the user to enable or disable tracy support with a build flag const tracyenabled  boption bool tracy build with tracy support  orelse false  get the tracy dependency const tracy  bdependencytracy  target  target optimize  optimize     make tracy available as an import exerootmoduleaddimporttracy tracymoduletracy  pick an implementation based on the build flags  dont build both we dont want to link with tracy at all unless we intend to enable it if tracyenabled   the user asked to enable tracy use the real implementation exerootmoduleaddimporttracyimpl tracymoduletracyimplenabled  else   the user asked to disable tracy use the dummy implementation exerootmoduleaddimporttracyimpl tracymoduletracyimpldisabled   mainzig zig  if tracyimpl is not set in your root file tracy integration will be disabled pub const tracyimpl  importtracyimpl  you can optionally configure tracy by setting tracyoptions in your root file pub const tracy  importtracy pub const tracyoptions tracyoptions  ondemand  false nobroadcast  false onlylocalhost  false onlyipv4  false delayedinit  false manuallifetime  false verbose  false dataport  null broadcastport  null    mark up you can mark cpu zones with the following code see the source for more options zig fn foo void  const zone  zonebegin name  do some work src  src color  tomato  defer zoneend  do some work   you may also wrap your zig allocators with an allocator that reports allocations to tracy zig var tracyallocator tracyallocator   parent  gpaallocator  const allocator  tracyallocatorallocator  you can write your logs to tracy with zig tracymessage text  hello world color  lightgreen   for more advanced use cases including gpu zones and frame images see srcrootzig and tracys documentation pdfhttpsgithubcomwolfpldtracyreleaseslatestdownloadtracypdf  where do i get the actual profiler this package builds the client for integrating the tracyhttpsgithubcomwolfpldtracy profiler into your application it does not build the profiler gui that you run as a separate process to get the profiler first check which version these bindings are targeting in buildzigzon then either download downloadhttpsgithubcomwolfpldtracyreleases that build of the profiler or build it yourself via the official build instructions tips on building the profiler  read tracys manualhttpsgithubcomwolfpldtracyreleaseslatestdownloadtracypdf  if the wayland build fails use dlegacy1 to use x11 instead  if llvm lto fails try gccg  upgrading tracy to upgrade tracy just update the version listed in buildzigzon ","allyourcodebase/libexpat":"libexpat ported to the zig build system  cihttpsgithubcomallyourcodebaselibexpatactionsworkflowsciyamlbadgesvghttpsgithubcomallyourcodebaselibexpatactions  expat this is expathttpsgithubcomlibexpatlibexpat packaged for zighttpsziglangorg  installation first update your buildzigzon   initialize a zig build project if you havent already zig init zig fetch save githttpsgithubcomallyourcodebaselibexpatgit2641  you can then import expat in your buildzig with zig const expatdependency  bdependencyexpat  target  target optimize  optimize  yourexelinklibraryexpatdependencyartifactexpat  ","beldmian/kuznechik.zig":"kuznechik cipher implementation in pure zig  kuznechikzig a fast implementation of the kuznechik gost r 34122015 block cipher in zig kuznechik is a symmetric block cipher with a block size of 128 bits and a key length of 256 bits standardized as gost r 34122015  features  pure zig implementation  optimized using precomputed lookup tables  includes both encryption and decryption  performance benchmarks  usage  basic example zig const kuznechik  importkuznechik  initialize cipher with 256bit key var key  kuznechikkey 0x88 0x99 0xaa 0xbb 0xcc 0xdd 0xee 0xff 0x00 0x11 0x22 0x33 0x44 0x55 0x66 0x77 0xfe 0xdc 0xba 0x98 0x76 0x54 0x32 0x10 0x01 0x23 0x45 0x67 0x89 0xab 0xcd 0xef  var cipher  kuznechikcipherinitkey  create a 128bit block var block  kuznechikblock 0x11 0x22 0x33 0x44 0x55 0x66 0x77 0x00 0xff 0xee 0xdd 0xcc 0xbb 0xaa 0x99 0x88   encrypt cipherencryptblock  decrypt cipherdecryptblock   building bash zig build  to achieve better performance compile with doptimizereleasefast  running tests bash zig build test   running benchmarks bash zig build benchmark   performance the implementation is optimized using precomputed lookup tables for the sbox inverse sbox and linear transformations benchmark results on apple m2  benchmark runs total time timerun avg   min  max p75 p99 p995  encrypt benchmark 65535 4688ms 71ns  18ns 0ns  209ns 83ns 84ns 84ns decrypt benchmark 65535 5504ms 84ns  65ns 41ns  13084us 84ns 125ns 125ns   algorithm details kuznechik is a symmetric block cipher that operates on 128bit blocks using a 256bit key the encryption process consists of  10 rounds of transformations  key schedule generating 10 round keys  each round applies  key addition xor  substitution layer sbox  linear transformation l  references  rfc 7801  gost r 34122015httpswwwrfceditororgrfcrfc7801html  implementation of kuznyechik cipher using vector instructionshttpswwwresearchgatenetpublication346964920implementationofkuznyechikcipherusingvectorinstructions  license mit license  see the licenselicense file for details  contributing contributions are welcome please feel free to submit a pull request  future plans    add fuzzing tests    improve performance further    add cipher operation modes  author beldmianhttpsgithubcombeldmian ","bcrist/tempora":"simple zig dates/times/timezones 404 not found","thevilledev/zig-nn":"a lightweight neural network library implemented in zig  neural network in zig work in progresshttpsimgshieldsiobadgestatuswork20in20progressyellowhttpsgithubcomthevilledevzignn a minimalistic neural network implementation in zig for learning purposes this project focuses on understanding the fundamentals of neural networks including hidden layers activation functions and basic training processes  features  matrix operations from scratch  common activation functions sigmoid linear relu tanh  advanced activation functions swish glu swiglu  basic feedforward neural network architecture  support for gated architectures used in modern transformer models see examplesexamples  documentation detailed documentation is available in the docs directory  neural network architecturedocsarchitecturemd  design principles and implementation details  advanced activation functionsdocsactivationfunctionsmd  detailed information about activation functions  building make sure you have zig installed on your system this project is developed with the latest stable version of zig for convenience a makefile is provided with common operations bash  build and run everything build test examples make  run specific examples for example make examplesimplexor  build with different optimization modes make buildmodereleasefast make release  build with releasesafe mode  see all available commands make help   testing the project includes a comprehensive test suite to verify the functionality of all components the build system is configured to run tests for each module sequentially making it easy to identify which component has issues bash  run all tests make test  run tests for specific components for example zig build testmatrix  run matrix operation tests zig build testactivation  run activation function tests zig build testlayer  run neural network layer tests zig build testnetwork  run full network tests   learning goals this project serves as a learning exercise for  understanding neural network fundamentals  implementing mathematical operations in zig  working with zigs memory management and error handling  license mit license ","softprops/zig-jsonlog":"format zig std logs as structured json h1 aligncenter jsonlog h1 div aligncenter a zeroallocation json formatting logging library for zig div  cihttpsgithubcomsoftpropszigjsonlogactionsworkflowsciymlbadgesvghttpsgithubcomsoftpropszigjsonlogactionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropszigjsonlog releaseshttpsimgshieldsiogithubvreleasesoftpropszigjsonlog zig supporthttpsimgshieldsiobadgezig0130blacklogozighttpsziglangorgdocumentation0130   features  make your logs easy to query with tools like aws cloud watch insights  zeroallocation  append arbitrary metadata to your logs  automatic newline insertion coming soon  configurable writers currently jsonlog writes to stderr as the default std log fn does wed like to make the writer user configurable  examples zig const std  importstd const jsonlog  importjsonlog const log  stdlogscopeddemo pub const stdoptions stdoptions    configure the std lib log api fn to use jsonlog formatting logfn  jsonloglogfn  pub fn main void   std log interface logdebugdebug  loginfoinfo  logwarnwarn  logerrerr   jsonlog interface for provoding arbitrary structured metadata jsonloginfothings are happening   endpoint  home method  get   create a custom scope for doing the same jsonlogscopeddemowarnthings could be better   endpoint  home method  get    json ts20240320t150715363zleveldebugmsgdebugscopedemo ts20240320t150715364zlevelinfomsginfoscopedemo ts20240320t150715364zlevelwarningmsgwarnscopedemo ts20240320t150715364zlevelerrormsgerrscopedemo ts20240320t150715364zlevelinfomsgthings are happeningscopedefaultmetaendpointhomemethodget ts20240320t150715364zlevelwarningmsgthings could be betterscopedemometaendpointhomemethodget    installing create a new exec project with zig initexe copy the echo handler example above into srcmainzig create a buildzigzon file to declare a dependency  zon short for zig object notation files are essentially zig structs buildzigzon is zigs native package manager convention for where to declare dependencies starting in zig 0120 you can use and should prefer sh zig fetch save httpsgithubcomsoftpropszigjsonlogarchiverefstagsv021targz  otherwise to manually add it do so as follows diff  name  myapp version  010 dependencies      declare dep properties  jsonlog      uri to download  url  httpsgithubcomsoftpropszigjsonlogarchiverefstagsv021targz    hash verification  hash         the hash below may vary you can also depend any tag with httpsgithubcomsoftpropszigjsonlogarchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropszigjsonlogarchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference jsonlog dep from buildzigzon  const jsonlog  bdependencyjsonlog   target  target  optimize  optimize  modulejsonlog var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the jsonlog module to executable  exerootmodeaddimportjsonlog jsonlog binstallartifactexe     for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024 ","nitrogenez/zig-river-config":"river configuration with the power of a programming language. 404 not found","weskoerber/escalator":"a library for privelege-escalation written in zig.  escalator a library for privelegeescalation written in zig  requirements  zighttpsgithubcomziglangzig compiler 0120 or newer  install first add the dependency to your buildzigzon using zig fetch console zig fetch save githttpsgithubcomweskoerberescalatormain  then import escalator into your buildzig zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const escalator  bdependencyescalator  target  target optimize  optimize moduleescalator const myexe  baddexecutable name  myexe rootsourcefile  bpathsrcmainzig target  target optimize  optimize  myexerootmoduleaddimportescalator    usage documentation can be found at httpsweskoerbergithubioescalator the docs are generated by zigs autodoc feature and deployed via github actions also see the examples directory for example usage example executables can be built by setting the examples option to true zig const macaddress  bdependencyescalator  target  target optimize  optimize examples  true moduleescalator   acknowlegments  dns2utf8sudorshttpsgitlabcomdns2utf8sudors ","peterhellberg/tic":"a small zig :zap: module primarily meant for my own experiments with tic-80 :video_game:  tic zap a small zighttpsziglangorg  module primarily meant for my own experiments with tic80httpstic80com  based on the tic80zig templatehttpsgithubcomnesboxtic80blobmaintemplateszigsrctic80zig with a few small fixes here and there bug  important  you might want to install the ticinithttpsgithubcompeterhellbergticinit tool and use that instead of manually creating the files for your cart  usage you can have zig build retrieve the tic module if you specify it as a dependency  create a buildzigzon that looks something like this zig  name  tic80ziggame version  000 paths   dependencies   tic   url  httpsgithubcompeterhellbergticarchiverefstagsv006targz      note  if you leave out the hash then zig build will tell you that it is missing the hash and what it is  another way to get the hash is to use zig fetch this is probably how you should do it   then you can add the module in your buildzig like this zig  add the tic module to the executable exeaddmoduletic bdependencytic moduletic   in your srcmainzig you should now be able to zig const tic  importtic const std  importstd export fn bdrrow i32 void  const v  tictime  99  asf32 floatfromintrow  2 ticpoke0x3ff9 intfromfloat2  stdmathsinv  12  export fn tic void  ticrect0 13 92 57 4 ticrect107 13 50 11 12 ticrect107 60 49 11 12 ticrect164 14 12 56 12 ticelli214 42 32 30 12 ticelli214 42 18 18 0 tictri223 40 240 19 240 40 0 tictri209 40 236 40 236 56 12 ticrect236 40 4 25 0 ticrect226 48 4 9 12 tictri141 22 107 61 124 60 12 tictri124 60 139 22 157 24 12 tictri18 27 28 13 22 28 0 tictri28 13 22 28 33 13 0 tictri19 57 8 70 13 70 0 tictri19 57 13 70 24 57 0 ticrect15 27 66 31 0 tictri3 83 49 26 43 56 4 tictri43 56 51 16 87 0 4 tictri73 27 84 13 77 13 0 tictri77 13 64 31 73 27 0 tictri76 57 64 72 70 57 0 tictri70 57 65 70 60 70 0 if ticbtn4 ticexit   hopefully with a result like this tic80 zig examplehttpsiimgurcomtaqvuvegif  examples  example buildzig  important  make sure that you exeexportsymbolnames the tic80 callbackshttpsgithubcomnesboxtic80wikiapicallbacks you are using zig const std  importstd pub fn buildb stdbuild void  const exe  baddexecutable name  cart rootsourcefile  bpathsrcmainzig target  bresolvetargetquery cpuarch  wasm32 ostag  wasi  optimize  releasesmall   add the tic module to the executable exerootmoduleaddimporttic bdependencytic moduletic  no entry point in the wasm exeentry  disabled  all the memory below 96kb is reserved for tic  and memory mapped io so our own usage must  start above the 96kb mark exeglobalbase  96  1024 exestacksize  8192  four wasm memory pages const memory u64  65536  4 exeinitialmemory  memory exemaxmemory  memory exeimportmemory  true  export symbols for use by tic exerootmoduleexportsymbolnames  const u8tic  run command that requires you to have a tic80pro binary const runcmd  baddsystemcommandconst u8 tic80pro skip fullscreen fs  cmd load cartwasmp    import binary zigoutbincartwasm    save    run  runcmdstepdependonbgetinstallstep const runstep  bsteprun run the cart in tic80 pro runstepdependonruncmdstep const spycmd  baddsystemcommandconst u8 spy exc zigcache inc zig q clearzig build  const spystep  bstepspy run spy watching for file changes spystepdependonspycmdstep binstallartifactexe    example cartwasmp  important  you can only use the wasmp format if you run the tic80 pro versionhttpsgithubcomnesboxtic80proversion lua  desc tic80 zig example  script wasm  code is compiled from srcmainzig into zigoutbincartwasm load it like this import binary zigoutbincartwasm run   waves  00000000000ffffffff00000000ffffffff  0010123456789abcdeffedcba9876543210  0020123456789abcdef0123456789abcdef  waves  palette  0001a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57  palette   example file structure img width60 srchttpsgithubcompeterhellbergticassets565124eadbdf7c18ed426b8438813be3a99aee   links  httpsgithubcomnesboxtic80blobmaintemplateszigsrctic80zig  httpsgithubcomnesboxtic80  httpstic80com  httpsziglangorg  license mit since tic80 itself is licensed under mithttpsgithubcomnesboxtic80blobmainlicense it almost goes without saying that this project should be so as well clipboard  tic80 license  copyright c 2017 vadim grigoruk permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the software to deal in the software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense andor sell copies of the software and to permit persons to whom the software is furnished to do so subject to the following conditions the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software the software is provided as is without warranty of any kind express or implied including but not limited to the warranties of merchantability fitness for a particular purpose and noninfringement in no event shall the authors or copyright holders be liable for any claim damages or other liability whether in an action of contract tort or otherwise arising from out of or in connection with the software or the use or other dealings in the software  ","eldesh/basis_concept-zig":"a collection of basis concept and their operations  basis concept zig basisconceptzig is a collection library of basis concept and some operations on them some basic concepts such as copyable are provided  concept concept are named constraints on types such as clonable in the zig language polymorphic functions are sometimes typed fn anytype t often however functions with such types implicitly require some properties for their types the concept allows such implicit constraints to be named naming such implicit constraint allows us to deal explicitly with constraints on types further some associated polymorphic functions are able to be implemented to each concept such like cloneableclone  examples  equivalence of generic data type to compare equivalence of data of various types   a type constructed from various iseq types const s  struct  valint u32 valopt u8 valeit errormyerror5u8  const s1 s   const s2 s   if eqeqs1 s2      check for cloneability when you want to implement clone on a container type only for types that are clonable  pub fn containercomptime t type type  return struct  pub const self type  this pub const cloneerror type  stdmemallocatorerror  pub usingnamespace if isclonablet struct  pub fn cloneself const self cloneerrorself   tclone    else struct   empty    for a clonable type c var c  containerc var d  try cclone  clonable  for a not clonable type n var n  containern    try nclone  compilation error   comparison by total order when you want to pass an ordering function for a key type of a mapping container  var map mapkey value  makekeyvaluemapkey value ordonkey mapinsertkey1 value1 mapinsertkey2 value2    support this library is developped with  debian x8664 104  zig 091 with zigmod r79  zig 0100 with zigmod r80  build to build executing the following commands sh zigmod fetch zig build   unit test to performs unit tests sh zig build test   generate docs to generate documents sh zig build doc  a html documents would be generated under the docs directory  provided concept  trivialeq concept for types that trivially comparable value with  this concept is defined for checking the type is comparable with  then any extra method is not provided  trivialdestroy concept for types that trivially destroyable implicitly then any extra method is not provided  copyable trivially copyable values with  copy means to duplicate a value that has no resources shared with the original one in other words it must not contain a pointer  clonable duplicable values using clone method if exists similar to copyable clonable means that the value can be duplicated however the concept can be satisfied if the clone method is implemented even if the value cannot be copied in the trivial way in other words if a type is copyable it is automatically clonable as well  partialeq partialeq concept means that a partial equivalence relation is defined for the type the partiality comes from the fact that the relation does not require reflexivity that is the relation must satisfy the following properties for all x y and z  partialeqeqx y  partialeqeqy x  partialeqeqx y  partialeqeqy z  partialeqeqx z  eq eq concept means that a full equivalence relation is defined for the type addition to partialeq this concept requires relations to have reflexivity  eqeqx y  eqeqy x  eqeqx y and eqeqy z implies eqeqx z  eqeqx x furthermore this concept also contains ne method which must be consistent with eq  partialord partialord concept means parial ordering relation such relations require the type satisfies properties and have consistensy to partialeq  partialordpartialcmpx ycompareeq implies partialeqeqx y  partialordpartialcmpx ycomparele implies partialordpartialcmpx ycomparelt or partialeqeqx y  partialordpartialcmpx ycomparege implies partialordpartialcmpx ycomparelt or partialeqeqx y  ord concept for types that forms total order implementations must be consistent with partialord  ordcmpx y  partialordpartialcmpx y  destroy the destroy concept provides an interface for destroying values values of types implementing this concept can be destroyed by destroythis or destroythis stdmemallocator  module hierarchy  basisconcept the root module  copy  iscopyable  clone  isclonable  clone  partialord  ispartialord  partialord  ord  isord  ord  trivialeq  istrivialeq  partialeq  ispartialeq  partialeq  eq  iseq  eq  trivialdestroy  istrivialdestroy  destroy  destroy  prelude  clone  partialeq  partialord  ord  eq  destroy  concept convention implementations of concept on types are follows some conventions for any concept c implc isc and c maybe implemented  fn implccomptime ttype bool determine if the type t satisfies concept c directly  fn isccomptime ttype bool determine if the type t satisfies concept c  const c  struct    namespace c that implements generic functions that depend on the concept c  fn deriveccomptime ttype type derive functions that depend on c ","kassane/druntime-zigbuild":"d runtime build using zig-build  druntime  phobos standalone for zigbuild abs  note  a standalone runtime  stdlib for easy crosscompile using abs is the goal of this project more info issue6 crosscompile with druntime  phobos2httpsgithubcomkassaneanotherbuildstepissues6 bash projectspecific options dtargetstring the cpu architecture os and abi to build for dcpustring target cpu features to add or subtract ddynamiclinkerstring path to interpreter on the target system doptimizeenum prioritize performance safety or binary size supported values debug releasesafe releasefast releasesmall dlinkageenum change linking mode default static supported values static dynamic dphobosbool build phobos library default false ","takuma-shishido/otimorm":"library for postgresql orm written in zig 🔥  otimorm  important  this project is still under development and there are bugs  if you find a bug please open an issue i will fix it as soon as possible otimorm is an easytouse orm for postgresql that works with the latest version of zig tested with 0140dev  code example see thishttpsgithubcomtakumashishidootimormblobdevelopexamplemainzig  todo  support for more complex queries  credit this project was inspired by zigormhttpsgithubcomaeronaveryzigorm ","interactivebin/bgfx":"cross-platform, graphics api agnostic, 'bring your own engine/framework' style rendering library. p aligncenter img srchttpsrepositoryimagesgithubusercontentcom3925242a4566200912a11ea984fc387546a3126 p bgfxhttpsgithubcombkaradzicbgfx  crossplatform rendering library  p aligncenter a hrefwhatisitwhat is ita  a hrefhttpsbkaradzicgithubiobgfxbuildhtmlbuildinga  a hrefhttpsbkaradzicgithubiobgfxoverviewhtmlgettinginvolvedgetting involveda  a hrefhttpsbkaradzicgithubiobgfxexampleshtmlexamplesa  a hrefhttpsbkaradzicgithubiobgfxbgfxhtmlapi referencea  a hrefhttpsbkaradzicgithubiobgfxtoolshtmltoolsa  a hrefwhoisusingitmadewithbgfxwho is using ita  a hreflicensebsd2clauselicensea p github actionshttpsgithubcombkaradzicbgfxactionsworkflowsmainymlbadgesvghttpsgithubcombkaradzicbgfxactions licensehttpsimgshieldsiobadgelicensebsd220clausebluesvghttpsbkaradzicgithubiobgfxlicensehtml join the chat at httpsdiscordgg9embv7jhttpsimgshieldsiodiscord712512073522872352color237289dalabelbgfxlogodiscordlogocolorwhitehttpsdiscordgg9embv7j  github discussionshttpsgithubcombkaradzicbgfxdiscussions  discord chathttpsdiscordggg99uprc9pf  github actionshttpsgithubcombkaradzicbgfxactions what is ithttpsbkaradzicgithubiobgfxoverviewhtml  crossplatform graphics api agnostic bring your own engineframework style rendering library supported rendering backends  direct3d 11  direct3d 12  gnm only for licensed ps4 developers search devnet forums for source  metal  opengl 21  opengl 31  opengl es 2  opengl es 31  vulkan  webgl 10  webgl 20 supported platforms  android 14  iosipadostvos 160  linux  macos 130  playstation 4  raspberrypi  uwp universal windows xbox one  wasmemscripten  windows 7 supported compilers  clang 11 and above  gcc 11 and above  vs2019 and above  apple clang 12 and above languages  cc api documentationhttpsbkaradzicgithubiobgfxbgfxhtml  beef api bindingshttpsgithubcombkaradzicbgfxtreemasterbindingsbf  c language api bindings 1httpsgithubcombkaradzicbgfxtreemasterbindingscs  d language api bindingshttpsgithubcombindbcbindbcbgfx  go language api bindingshttpsgithubcomjames4kgobgfx  haskell language api bindingshttpsgithubcomhaskellgamebgfx  lightweight java game library 3 bindingshttpsgithubcomlwjgllwjgl3  lua language api bindingshttpsgithubcomcloudwuluabgfx  nim language api bindingshttpsgithubcomhalsysnimbgfx  pascal language api bindingshttpsgithubcomakira13641pasbgfx  python language api bindings 1httpsgithubcomfbertolabgfxpythonbgfxpython  python language api bindings 2httpsgithubcomjnadropybgfxpybgfx  rust language api bindings newhttpsgithubcomemoonbgfxrs  swift language api bindingshttpsgithubcomstuartcarnieswiftbgfx  zig language api bindingshttpsgithubcombkaradzicbgfxtreemasterbindingszig who is using it madewithbgfxhttpstwittercomsearchq23madewithbgfxsrctypedqueryflive   airmech httpswwwcarbongamescomairmechstrike  airmech is a freetoplay futuristic action realtime strategy video game developed and published by carbon games airmech screenshothttpswwwmobygamescomimagesshotsl830630airmechplaystation4screenshotbluebaronyourmechindicatesjpg  cmftstudio httpsgithubcomdariomaneskucmftstudio  cmftstudio  cubemap filtering tool cmftstudio screenshothttpsgithubcomdariomaneskucmftstudiorawmasterscreenshotscmftstudiosmalljpg  crown httpsgithubcomdbartolinicrown  crown is a general purpose datadriven game engine written from scratch with a minimalistic and dataoriented design philosophy in mind crown screenshothttpsrawgithubusercontentcomdbartolinicrownmasterdocsshotsleveleditorpng  offroad legends 2 httpwwwdogbytegamescom  dogbyte games is an indie mobile developer studio focusing on racing games offroad legends 2httpwwwdogbytegamescombgfxoffroadlegends2bgfxipad2jpg  torque6 httpsgithubcomandr3wmactorque6  torque 6 is an mit licensed 3d engine loosely based on torque2d being neither torque2d or torque3d it is the 6th derivative of the original torque engine a hrefhttpwwwyoutubecomwatchfeatureplayerembeddedvp4ltmqgk34 targetblankimg srchttpimgyoutubecomvip4ltmqgk340jpg alttorque 6 material editor width640 height480 border0 a  kepler orbits httpsgithubcompodgorskiykeplerorbits  keplerorbits  tool that calculates positions of celestial bodies using their orbital elements  cetech httpsgithubcomcyberegoorgcetech  cetech is a datadriven game engine and toolbox inspired by bitsquidstingray engine cetech screenshothttpsgithubcomcyberegoorgcetechrawmasterdocsimgprototyppng  ioquake3 httpsgithubcomjpcyioq3rendererbgfx  a renderer for ioquake3 written in c and using bgfx to support multiple rendering apis ioq3rendererbgfx screenshothttpscamogithubusercontentcom052aa40c05120e56306294d3a1bb5f99f97de8c8687474703a2f2f692e696d6775722e636f6d2f64364f6856594b2e6a7067  dls httpmakingartstudiositchiodls  dls the digital logic simulator game a hrefhttpwwwyoutubecomwatchfeatureplayerembeddedv6o1sqrnqca  targetblankimg srchttpimgyoutubecomvi6o1sqrnqca0jpg altdls  creating a 4bit register  width640 height480 border0 a httpdlsmakingartstudioscomsandbox  dls the sandbox dls the sandbox screenshothttpspbstwimgcommediadbafwokwaaeq0mpjpglarge  mame httpsgithubcommamedevmame  mame  multiple arcade machine emulator mame screenshothttpsrawgithubusercontentcommamedevwwwmamedevorgd8d716dbb63919a11964b5d47b9b7f6cfa006b56bgfxraidenpng  blackshift httpsblackshiftitchioblackshift  blackshift is a gridbased spacethemed action puzzle game which isnt afraid of complexity  think chips challenge on crack a hrefhttpwwwyoutubecomwatchfeatureplayerembeddedvpul8612yds targetblankimg srchttpimgyoutubecomvipul8612yds0jpg altblackshift trailer may 2016 width640 height480 border0 a  realtime polygonallight shading with linearly transformed cosines http","freref/fancy-cat-nix":"nix package for fancy-cat  fancycatnix  note  this is a fork you can find the original repo by aaronverdow herehttpsgithubcomaaronverdownixtreemainpkgsfancycat package fancycathttpsgithubcomfrereffancycat for use in nix this directory can be included in a nix config as a package using callpackage the flake is used for building the package in a local shell and can be tested with nix shell buildzigzonnix is created by running nix run githubcloudefzig2nixzon2nix  buildzigzon in the source repo ","kassane/whisper.cpp":"port of openai's whisper model in c/c++ (uses zig build)  whispercpp whispercpphttpsuserimagesgithubusercontentcom199129623523834805d0f6a4da444900a1ded0707e75b763jpeg actions statushttpsgithubcomggerganovwhispercppworkflowscibadgesvghttpsgithubcomggerganovwhispercppactions license mithttpsimgshieldsiobadgelicensemitbluesvghttpsopensourceorglicensesmit npmhttpsimgshieldsionpmvwhispercppsvghttpswwwnpmjscompackagewhispercpp stable v154httpsgithubcomggerganovwhispercppreleasestagv154  roadmap  faqhttpsgithubcomggerganovwhispercppdiscussions126 highperformance inference of openais whisperhttpsgithubcomopenaiwhisper automatic speech recognition asr model  plain cc implementation without dependencies  apple silicon firstclass citizen  optimized via arm neon accelerate framework metal and core mlhttpsgithubcomggerganovwhispercppcoremlsupport  avx intrinsics support for x86 architectures  vsx intrinsics support for power architectures  mixed f16  f32 precision  4bit and 5bit integer quantization supporthttpsgithubcomggerganovwhispercppquantization  zero memory allocations at runtime  support for cpuonly inference  efficient gpu support for nvidiahttpsgithubcomggerganovwhispercppnvidiagpusupportviacublas  partial opencl gpu support via clblasthttpsgithubcomggerganovwhispercppopenclgpusupportviaclblast  openvino supporthttpsgithubcomggerganovwhispercppopenvinosupport  cstyle apihttpsgithubcomggerganovwhispercppblobmasterwhisperh supported platforms  x mac os intel and arm  x iosexampleswhisperobjc  x androidexampleswhisperandroid  x javabindingsjavareadmemd  x linux  freebsdhttpsgithubcomggerganovwhispercppissues56issuecomment1350920264  x webassemblyexampleswhisperwasm  x windows msvchttpsgithubcomggerganovwhispercppblobmastergithubworkflowsbuildymll117l144 and mingwhttpsgithubcomggerganovwhispercppissues168  x raspberry pihttpsgithubcomggerganovwhispercppdiscussions166  x dockerhttpsgithubcomggerganovwhispercpppkgscontainerwhispercpp the entire highlevel implementation of the model is contained in whisperhwhisperh and whispercppwhispercpp the rest of the code is part of the ggmlhttpsgithubcomggerganovggml machine learning library having such a lightweight implementation of the model allows to easily integrate it in different platforms and applications as an example here is a video of running the model on an iphone 13 device  fully offline ondevice whisperobjcexampleswhisperobjc httpsuserimagesgithubusercontentcom1991296197385372962a6deabca14d50bf961d8c27b98c81mp4 you can also easily make your own offline voice assistant application commandexamplescommand httpsuserimagesgithubusercontentcom19912962040383932f846eaec2554099a76d5735c25c49damp4 on apple silicon the inference runs fully on the gpu via metal httpsgithubcomggerganovwhispercppassets1991296c82e8f8660dc49f2b048d2fdbd6b5225 or you can even run it straight in the browser talkwasmexamplestalkwasm  implementation details  the core tensor operations are implemented in c ggmlhggmlh  ggmlcggmlc  the transformer model and the highlevel cstyle api are implemented in c whisperhwhisperh  whispercppwhispercpp  sample usage is demonstrated in maincppexamplesmain  sample realtime audio transcription from the microphone is demonstrated in streamcppexamplesstream  various other examples are available in the examplesexamples folder the tensor operators are optimized heavily for apple silicon cpus depending on the computation size arm neon simd intrinsics or cblas accelerate framework routines are used the latter are especially effective for bigger sizes since the accelerate framework utilizes the specialpurpose amx coprocessor available in modern apple products  quick start first clone the repository then download one of the whisper models converted in ggml formatmodels for example bash bash modelsdownloadggmlmodelsh baseen  if you wish to convert the whisper models to ggml format yourself instructions are in modelsreadmemdmodelsreadmemd now build the mainexamplesmain example and transcribe an audio file like this bash  build the main example make  transcribe an audio file main f samplesjfkwav   for a quick demo simply run make baseen java  make baseen cc i o3 stdc11 pthread dggmluseaccelerate c ggmlc o ggmlo c i iexamples o3 stdc11 pthread c whispercpp o whispero c i iexamples o3 stdc11 pthread examplesmainmaincpp whispero ggmlo o main framework accelerate main h usage main options file0wav file1wav  options h help default show this help message and exit t n threads n 4  number of threads to use during computation p n processors n 1  number of processors to use during computation ot n offsett n 0  time offset in milliseconds on n offsetn n 0  segment index offset d n duration n 0  duration of audio to process in milliseconds mc n maxcontext n 1  maximum number of text context tokens to store ml n maxlen n 0  maximum segment length in characters sow splitonword false  split on word rather than on token bo n bestof n 5  number of best candidates to keep bs n beamsize n 5  beam size for beam search wt n wordthold n 001  word timestamp probability threshold et n entropythold n 240  entropy threshold for decoder fail lpt n logprobthold n 100  log probability threshold for decoder fail debug debugmode false  enable debug mode eg dump logmel tr translate false  translate from source language to english di diarize false  stereo audio diarization tdrz tinydiarize false  enable tinydiarize requires a tdrz model nf nofallback false  do not use temperature fallback while decoding otxt outputtxt false  output result in a text file ovtt outputvtt false  output result in a vtt file osrt outputsrt false  output result in a srt file olrc outputlrc false  output result in a lrc file owts outputwords false  output script for generating karaoke video ","allyourcodebase/cfitsio":"zig build of cfitsio library.  cfitsio cicishdciurl lclcshdlcurl  zig build of cfitsio libraryhttpsgithubcomheasarccfitsio  rocket usage  add cfitsio dependency to buildzigzon sh zig fetch save httpsgithubcomallyourcodebasecfitsioarchivegittagorcommithashtargz   use cfitsio dependency in buildzig zig const cfitsiodep  bdependencycfitsio  target  target optimize  optimize  const cfitsiomod  cfitsiodepmodulecfitsio compilerootmoduleaddimportcfitsio cfitsiomod   markdown links  cishd httpsimgshieldsiogithubactionsworkflowstatusallyourcodebasecfitsiociyamlbranchmainstyleforthebadgelogogithublabelcilabelcolorblack ciurl httpsgithubcomallyourcodebasecfitsioblobmaingithubworkflowsciyaml lcshd httpsimgshieldsiogithublicenseallyourcodebasecfitsiosvgstyleforthebadgelabelcolorblack lcurl httpsgithubcomallyourcodebasecfitsioblobmainlicense ","jnordwick/zstats":"this repository has no description. 404 not found","johan0a/zig-linear-algebra":"this package is a simple linear algebra library writen entirely in zig. ziglinearalgebra a basic linear algebra library for zig  this package is a simple linear algebra library writen entirely in zig this library was written for my own use and will be extended and optimized as i need it it is suitable for operations on small matrices and vectors this library is not ready for use  todo in this order  x rework how precision of output types is handled for vectors  x rework how vectors handle integer types  x add doc comments for vector operations  x add more operations to vectors  x rework how precision of output types is handled for vectors again    decide how to handle undefined behavior eg overflows    add install guide    add usage guide    rework how precision of output types is handle for matrices    rework how matrices handle integer types    add even more operations to vectors    add more operations to matrices    compare performance to openblas ","zigzedd/anyascii.zig":"[mirror] zig port of c implementation of anyascii.  anyasciizig this repository allows to use anyascii c implementation from zig with a helper function utf8toascii to easily convert any utf8 encoded string in an asciionly string current version of anyascii 20230801  how to use  anyascii zig const std  importstd const anyascii  importanyasciianyascii  a single utf8 codepoint to its ascii equivalent const ascii  try anyasciiallocator try stdunicodeutf8decode defer allocatorfreeascii stddebugprints ascii  output f   utf8toascii zig const std  importstd const utf8toascii  importanyasciiutf8toascii  a full string of utf8 characters to ascii characters const ascii  try utf8toasciiallocator ble defer allocatorfreeascii stddebugprints ascii  output blosse   install in your project directory shell zig fetch save httpscodezeptotechnetzeddanyasciizigarchivev110targz  in buildzig zig  add anyasciizig dependency const anyascii  bdependencyanyasciizig  target  target optimize  optimize  exerootmoduleaddimportanyascii anyasciimoduleanyascii   what is anyascii taken from official anyascii descriptionhttpsgithubcomanyasciianyasciitreemasterdescription anyascii provides asciionly replacement strings for practically all unicode characters text is converted characterbycharacter without considering the context the mappings for each script are based on popular existing romanization systems symbolic characters are converted based on their meaning or appearance all ascii characters in the input are left unchanged every other character is replaced with printable ascii characters ","jafagervik/zdsa":"data structures in zig  zdsa  zig data structures and algorithms  goal to create a simple collection of dsas for further use all should be generic  usage zig const std  importstd const zdsa  importzdsa const stack  zdsastack pub fn main void  var gpa  stdheapgeneralpurposeallocator defer   gpadeinit const allocator  gpaallocator var stack  stacki32initallocator defer stackdeinit try stackpush1 try stackpush2 try stackpush3 const popped  try stackpop stackclear   for more see tests or example folders  road to 10  x stack  x queue    priority queue  x dequeue  x singly linked list  x lru cache  x doubly linked list    binary tree  install per 014 beta run this command in the parent directory of your project sh zig fetch save httpsgithubcomjafagervikzdsatarballv060  or alternatively use master or another version then add these lines to buildzig before binstallartifactexe zig const zdsa  bdependencyzdsa  exerootmoduleaddimportzdsa zdsamodulezdsa  ","allyourcodebase/rabbitmq-c":"rabbitmq c client (zig build)  rabbitmq c amqp client library build statushttpsgithubcomalanxzrabbitmqcactionsworkflowsciymlbadgesvg coverage statushttpscoverallsioreposgithubalanxzrabbitmqcbadgesvgbranchmasterhttpscoverallsiogithubalanxzrabbitmqcbranchmaster fuzzing statushttpsossfuzzbuildlogsstoragegoogleapiscombadgesrabbitmqcsvghttpsossfuzzbuildlogsstoragegoogleapiscomindexhtmlrabbitmqc openssf best practiceshttpswwwbestpracticesdevprojects7001badgehttpswwwbestpracticesdevprojects7001  introduction this is a clanguage amqp client library for use with v20 of the rabbitmqhttpwwwrabbitmqcom broker  httpgithubcomalanxzrabbitmqc announcements regarding the library are periodically made on the rabbitmqcusers and crossposted to rabbitmqusers  httpsgroupsgooglecomforumforumrabbitmqcusers  httpsgroupsgooglecomforumforumrabbitmqusers  latest stable version the latest stable release of rabbitmqc can be found at  httpsgithubcomalanxzrabbitmqcreleaseslatest  documentation api documentation for v080 can viewed from httpalanxzgithubiorabbitmqcdocs080  getting started  building and installing  prereqs  cmake v322 or betterhttpwwwcmakeorg  a c compiler gcc 44 clang and msvc are test other compilers may also work  optionally opensslhttpwwwopensslorg v111 to enable support for connecting to rabbitmq over ssltls  optionally popthttpfreecodecomprojectspopt to build some handy commandline tools  optionally xmltohttpsfedorahostedorgxmlto to build man pages for the handy commandline tools  optionally doxygenhttpwwwstacknldimitridoxygen to build developer api documentation after downloading and extracting the source from a tarball to a directory see abovelateststableversion the commands to build rabbitmqc on most systems are mkdir build  cd build cmake  cmake build  config release the config release flag should be used in multiconfiguration generators eg visual studio or xcode it is also possible to point the cmake gui tool at the cmakeliststxt in the root of the source tree and generate build projects or ide workspace installing the library and optionally specifying a prefix can be done with cmake dcmakeinstallprefixusrlocal  cmake build  config release target install more information on cmake can be found on its faq httpwwwcmakeorgwikicmakefaq other interesting flags that can be passed to cmake  buildexamplesonoff toggles building the examples off by default  buildsharedlibsonoff toggles building rabbitmqc as a shared library on by default  buildstaticlibsonoff toggles building rabbitmqc as a static library on by default  buildtestingonoff toggles building test code on by default  buildtoolsonoff toggles building the command line tools by default this is on if the build system can find the popt header and library  buildtoolsdocsonoff toggles building the man pages for the command line tools by default this is on if buildtools is on and the build system can find the xmlto utility  enablesslsupportonoff toggles building rabbitmqc with ssl support by default this is on if the openssl headers and library can be found  buildapidocsonoff  toggles building the doxygen api documentation by default this is off  runsystemtestsonoff toggles building the system tests ie tests requiring an accessible rabbitmq server instance on localhost by default this is off  building rabbitmq  using vcpkg you can download and install rabbitmq using the vcpkghttpsgithubcommicrosoftvcpkg dependency manager git clone httpsgithubcommicrosoftvcpkggit cd vcpkg bootstrapvcpkgsh vcpkg integrate install vcpkg install librabbitmq the rabbitmq port in vcpkg is kept up to date by microsoft team members and community contributors if the version is out of date please create an issue or pull requesthttpsgithubcommicrosoftvcpkg on the vcpkg repository  running the examples arrange for a rabbitmq or other amqp server to be running on localhost at tcp port number 5672 in one terminal run examplesamqplisten localhost 5672 amqdirect test in another terminal examplesamqpsendstring localhost 5672 amqdirect test hello world you should see output similar to the following in the listeners terminal window delivery 1 exchange amqdirect routingkey test contenttype textplain  00000000 68 65 6c 6c 6f 20 77 6f  72 6c 64 hello world 0000000b  writing applications using librabbitmq please see the examples directory for short examples of the use of the librabbitmq library  threading you cannot share a socket an amqpconnectionstatet or a channel between threads using librabbitmq the librabbitmq library is built with eventdriven singlethreaded applications in mind and does not yet cater to any of the requirements of pthreaded applications your applications instead should open an amqp connection and an associated socket of course per thread if your program needs to access an amqp connection or any of its channels from more than one thread it is entirely responsible for designing and implementing an appropriate locking scheme it will generally be much simpler to have a connection exclusive to each thread that needs amqp service  license  copyright portions created by alan antonuk are copyright c 20122021 alan antonuk all rights reserved portions created by vmware are copyright c 20072012 vmware inc all rights reserved portions created by tony garnockjones are copyright c 20092010 vmware inc and tony garnockjones all rights reserved permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the software to deal in the software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense andor sell copies of the software and to permit persons to whom the software is furnished to do so subject to the following conditions the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software the software is provided as is without warranty of any kind express or implied including but not limited to the warranties of merchantability fitness for a particular purpose and noninfringement in no event shall the authors or copyright holders be liable for any claim damages or other liability whether in an action of contract tort or otherwise aris","wllfaria/quix":"cross platform terminal manipulation library written in zig.  quix quix is a terminal manipulation library written in zig  table of contents  quixquix  table of contentstableofcontents  getting startedgettingstarted  licenselicense  getting started add quix as a dependency using zig fetch sh zig fetch save githttpsgithubcomwllfariaquixgit  update your buildzig to include quix zig const quix  bdependencyquix  target  target optimize  optimize   details summaryexample buildzigsummary zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const quix  bdependencyquix  target  target optimize  optimize  const appmod  bcreatemodule rootsourcefile  bpathsrcmainzig target  target optimize  optimize  appmodaddimportquix quixmodulequix const app  baddexecutable name  myapp rootmodule  appmod  binstallartifactapp const runcmd  baddrunartifactapp runcmdstepdependonbgetinstallstep if bargs args  runcmdaddargsargs  const runstep  bsteprun run the app runstepdependonruncmdstep const exeunittests  baddtest rootmodule  appmod  const runexeunittests  baddrunartifactexeunittests const teststep  bsteptest run unit tests teststepdependonrunexeunittestsstep   details modify your srcmainzig to look like this zig const std  importstd const quix  importquix pub fn main void  const fd  stdposixstdoutfileno const styled  quixstylenewhello from quixn foregroundwhite backgrounddarkred bold try quixstyleprintstyledfd styled   you can also check the examplesexamples directory for different and more advanced examples  license this project quix and all its sublibraries are licensed under the mit license  see the licensehttpsgithubcomwllfariaquixblobmainlicense file for details ","distreat/zig-argtic":"zig argument parser  zigargtic a library for parsing commandline options arguments and subcommands build using zig version 0120  how does it compare to the posix and gnu conventions  an option requires a long name gnu compatible eg longoption  an option may have a single char name and start with one hyphen similar to posix  an option may have a value gnu compliant  directly following as the next index inside the argument vector eg o filetxt  but may not follow directly after the option name incompatible gnuincompatible posix eg ofiletxt  options may be grouped in any order posix compliant eg o v  ov  options may appear multiple times posix  options precede required arguments posix  options may be supplied in any order gnu  options may be separated into option name and value through the use of an equal sign gnu complicant eg namevalue source posix conventionshttpwwwiitkacinesc10105augtutorialessentialattributesposixhtml source gnu conventionsadditionshttpswwwgnuorgsoftwarelibcmanualhtmlnodeargumentsyntaxhtml  example zig  simple example  reduced to a minimum const specification  argticargumentspecification name  exe positionals  argticpositional  name  value    const argumentvector  try stdprocessargsallocallocator defer stdprocessargsfreeallocator argumentvector const arguments  try argticargumentprocessorparseallocator specification argumentvector1 defer argumentsdeinit stdloginfos argumentsgetargumentvalue  for more thorough examples visit examples and srctestszig required argumentshttpsgithubcomdistreatzigargticblobmasterexamplespositionalszig optional argumentshttpsgithubcomdistreatzigargticblobmasterexamplesoptionalszig optional positionalshttpsgithubcomdistreatzigargticblobmasterexamplesextrapositionalszig subcommandshttpsgithubcomdistreatzigargticblobmasterexamplessubcommandszig  documentation the documentation is created in the directory docs when running zig build documentationhttpsdistreatgithubiozigargtic  appendix this project was likely one of the most challenging projects i have written especially because i struggle with parsers in general nonetheless i did realize this project in the end and am more or less content although not happy there is a lot of missing work but i assume its usable to the point where i could use it in future projects to put it in perspective this is probably already the 10th iteration i have written and i finally got a decent structure down that i assume to be scalable and maintainable anyway dont underestimate the project of writing a cli argument parser that supports subcommands flags with multiple value syntax compound flags and positional arguments this project tested my limits again and agian and even made me consider using a peg or regular expression parser  also  its not like i started programming yesterday notably the api took me some time to figure out which is funny considering its simplicity every single stage of this project tested me and my idealistic bedofroseloving ass considering all ive just said id recommend writing an argument parser once in your life  it just makes you feel cured of all previous projects or sad about your life choices  because i hated it especially in the final halfassed stages now that i succeeded more or less you may consider this my magnum opus of yak shaving ","zigcc/zig-todo-web-app":"a single-page todo app in zig! 404 not found","rohanvashisht1234/zorsig":"this repository has no description.  zorsig a better morse library for zig programming language features  minimum version of zig 0130  memory safe  no allocators used  high performance library  how to use zig const std  importstd const zorsig  importzorsig const print  stddebugprint pub fn main void  const res1  zorsigchartomorsea printsn res1 const res2  zorsigmorsetochar printcn res2  no allocator var res3  zorsigmorsetostring             while res3next nextelement  printc nextelement  printn  var res4  zorsigstringtomorsehello world while res4next nextelement  prints  nextelement     output img width1055 altscreenshot 20241113 at 3 26 46pm srchttpsgithubcomuserattachmentsassets13efa6c4c07347edbfe105cb10fbfc9f  get started run the following command in your terminal sh zig fetch save httpsgithubcomrohanvashisht1234zorsigarchiverefstagsv001targz  add the following to your buildzig just above the line binstallartifactexe  zig const zorsig  bdependencyzorsig  target  target optimize  optimize  exerootmoduleaddimportzorsig zorsigmodulezorsig   thats it now use the zorsig ","didas-git/tasai-zig":"a set of tools for dealing with the terminal.  tasai tasai is a zig library that provides multiple comptime utilities to colorize your terminal messages logs and much more if it supports ansi escape codeshttpsenwikipediaorgwikiansiescapecode then tasai will work lets make our terminals more colorful   if you are looking for the javascripttypescript version it can be found herehttpsgithubcomdidasgittasai  installation tasai is available using the zig fetch command sh zig fetch save githttpsgithubcomdidasgittasaizig  to add it yo your project after running the command above add the following to your build file zig const tasai  bdependencytasai  target  target optimize  optimize  exerootmoduleaddimporttasai tasaimoduletasai   usage tasai provides 2 different comptime apis  string api the available tags are documented on the function itself zig const print  importstddebugprint const sgr  importtasaisgr  print hello in pink with a hex code and world in bold blue the blue comes from the 8bit ansi codes printsgrparsestringfff00efhellor f33bworldrrn   escaping  printsgrparsestringthis will print fredr in redn    verbose api while this api is rather overkill it can be rather useful given it includes all the sgr codes and is not limited to a few set of them   all the ones documented herehttpsenwikipediaorgwikiansiescapecodeselectgraphicrenditionparameters zig const print  importstddebugprint const sgr  importtasaisgr   print hello in pink with a hex code and world in bold blue prints sn  sgrverboseformathello   color   foreground   24bit   r  255 g  0 b  239        attribute  defaultforegroundcolor   sgrverboseformatworld   attribute  bold   color   foreground   8bit  33       attribute  notboldordim   attribute  defaultforegroundcolor    ","bcrist/zig-sx":"s-expression [de]serialization in zig 404 not found","bandithedoge/zigplug":"this repository has no description. super wip audio plugin framework in zig currently not useful for anything check out examples to see what little you can do right now see 1httpsgithubcombandithedogezigplugissues1 for a release roadmap ","theonlysilverclaw/zig-umka":" zig bindings for the umka scripting language zig bindings for the umkahttpsgithubcomvtereshkovumkalang scripting language tested against a build from commit 127e678  usage there are two modules avaiable  binding is as close to the c api as possible  wrapper is a more opinionated api on top which should be easier for zig users you can add either one as an import like this zig const umkadependency  bdependencyumka  exemoduleaddimportumka umkadependencymodulebinding  or exemoduleaddimportumka umkadependencymodulewrapper  this project only provides the bindings you have to build and link umka as a static libary build configuration and further examples can be found under examplesexamples  what works so far  call a script with a main function  call an umka function from zig  pass parameters to umka functions  get results from a funtion call  call zig functions from umka  add umka modules to current instance  to run the examples  install zig at least version 0140  get an umka libary build via make the downloaded release currently does not work  drop it into examplelibumkaa  run zig build run","games-by-mason/slotmap":"a high performance associative container with persistent keys.  slotmap a high performance associative container returns a unique persistent key for each added item useful for managing objects with runtime known lifetimes such as entities in a video game since keys are never dangling persistent keys are implemented as indices paired with bit generation counters saturated generation counters are not reused which means that after creating and destroying capacity  intfromenumgenerationinvalid entries the slot map will run out of unique keys and return erroroverflow on put inspired by sergeymakeevslotmaphttpsgithubcomsergeymakeevslotmap  example zig var slots slotmapu8 const u8  try initgpa 100 defer slotsdeinitgpa const key  slotsputhello world const value  slotsgetkey slotsremovekey assertslotsexistskey  ","joachimschmidt557/vpkz":"zig library and command-line application for working with valve vpk files  vpkz a zig library and cli application for handling valve vpk files works with zig 0140  x reading vpk headers  x extracting complete archives    selectively readingextracting files    creatingupdating vpk files ","voidstar240/zig-wayland-xdg_decoration-client":"xdg decoration protocol extension for zig-wayland-client  wayland xdg decoration client this is the xdg decoration protocol extension for the zigwaylandclienthttpsgithubcomvoidstar240zigwaylandclient library ","retrodev256/instinct":"this repository has no description.  instinct an ultra simple set of distinct integer types  use cases  you dont want to mix up array index types  you want safety checks on an integer that must have a range  you want the above but with a value that represents null  types zig pub fn optionalrangedint comptime t type comptime typeid u32 comptime range ranget comptime nullvalue t  type    pub fn optionalint comptime t type comptime typeid u32 comptime nullvalue t  type    pub fn rangedint comptime t type comptime typeid u32 comptime range ranget  type    pub fn int comptime t type comptime typeid u32  type      methods each type provides the following methods  init creates a new distinct type  set changes the value of the distinct type  val fetches the value of the distinct type  cast converts the distinct type to another distinct type limitation you cant directly cast from an optional to nonoptional type","twilkinson3421/zlshm":"a simple shared library for reading from shared memory on windows  zlshm a simple shared library for reading from shared memory on windows support for linux is planned in the future  usage use the provided dll library which can be found in the releases seciton this library was originally written for use with denos ffi functionality but can be used with any language that supports loading shared lirbaries  symbols  open opens a shared memory file returns a windows handle to the file  argument  type  description          name  string  the name of the shared memory file to open this must be nullterminated utf16le   logerr  bool  whether to log errors to stderr   close closes a shared memory file returns the return code of closehandle  argument  type  description          handle  handle  the handle of the shared memory file to close   read reads data from a shared memory file returns 1 if mapviewoffile fails otherwise the return code of unmapviewoffile  argument  type  description          handle  handle  the handle of the shared memory file to read from   buf  pointer  the buffer to read the data into   len  usize  the number of bytes to map must be less than or equal to the length of the buffer   logerr  bool  whether to log errors to stderr   building this library is written and built using zig version 0140dev2577271452d22 2024110mach run zig build to build the library locally requires zig to be installed if you are not using windows you should add dtargetx8664windows to the build command obviously you will require windows to use the library ","scripturial/bibleparsing":"zig library to read greek parsing codes commonly used in annotated koine greek text.  bible parsing this library converts a bible parsingtagging code into a compressed u32 value and allows writing a u32 value back to a string tested using the parsing codes found in the byzantine text data files zig  convert code adsn to u32 value const in  try parseadsn  convert u32 value back to code var out  stdarraylistu8initallocator try byzstringin out try stdtestingexpectequalstringscode outitems  incomplete or invalidparsing errors may be returned try stdtestingexpectequalerrorincomplete parse try stdtestingexpectequalerrorinvalidparsing parsez  there is no promise this code will work for you it works for me for my personal use cases feel free to use at your own risk released into the public domain under the mit license sponsored by scripturial  learn biblical greekhttpsscripturialcom ","games-by-mason/geom":"geometric math functionality for game dev.  geom geometry for game development  status im going to be fleshing this out into a more cohesive library as i require more functionality currently its still missing basic functionalitymany 3d types projection matrices etc  for game development this library has features you wouldnt expect out of a linear algebra library and lacks features you would furthermore it prioritizes speed over both precision and determinism across cpus you shouldnt use this library for scientific computing or for something like rollback netcode you should use it when you wanna go fast this library runs much faster in release mode its recommended that you build it in release mode even when the rest of your app is in debug mode ","nektro/zig-errno":"this repository has no description. 404 not found","andrewrk/libebur128":"libebur128 with the build system replaced by zig this is a fork of libebur128httpsgithubcomjiixyjlibebur128 packaged for zig unnecessary files have been deleted and the build system has been replaced with buildzig original readme follows  libebur128  libebur128 is a library that implements the ebu r 128 standard for loudness normalisation all source code is licensed under the mit license see copying file for details see also loudnessscanner toolhttpsgithubcomjiixyjloudnessscanner news  v126 released  fix dynamic linking on windows v125 released  remove buildstaticlibs build option instead the cmakesupported buildsharedlibs option is now honored as expected  various code cleanups warning fixes and documentation improvements  fix issue related to filter state indexing with high channel enums 77  introduce limits for number of channels and maximum supported samplerate to avoid integer overflows  fix error return code of ebur128setchannel the actual behavior is now aligned to the documentation 90 v124 released  fix broken ebur128loudnessglobalmultiple function since v110 it calculated the relative threshold just from the last state given to it resulting in wrong values  more tests  fix some minor build issues  fix uninitialized memory in ebur128init possibly resulting in wrong values v123 released  fix uninitialized memory access during true peak scanning bug 72 v122 released v121 was mistagged  fix a null pointer dereference when doing true peak scanning of 192khz data v120 released  new functions for real time loudnesspeak monitoring  ebur128loudnesswindow  ebur128setmaxwindow  ebur128setmaxhistory  ebur128prevsamplepeak  ebur128prevtruepeak  new fir resampler for true peak calculation removing speex dependency  add true peak conformance tests  bug fixes v110 released  add ebur128relativethreshold  add channel definitions from itu rrecbs 17704 to channel enum  fix some minor build issues v103 released  fix build with recent speexdsp  correct license file name  cmake option to disable static library  minimalexamplec do not hard code program name in usage features   portable ansi c code  implements m s and i modes  implements loudness range measurement ebu  tech 3342  true peak scanning  supports all samplerates by recalculation of the filter coefficients installation  in the root folder type mkdir build cd build cmake  make if you want the git version run simply git clone gitgithubcomjiixyjlibebur128git usage  library usage should be pretty straightforward all exported symbols are documented in the ebur128h header file for a usage example see minimalexamplec in the tests folder on some operating systems static libraries should be compiled as position independent code you can enable that by turning on withstaticpic ","thechampagne/sfdir-zig":"zig binding for single-file dir a directory listing functions.  sfdirzig httpsimgshieldsiogithubvtagthechampagnesfdirziglabelversionhttpsgithubcomthechampagnesfdirzigreleaseslatest httpsimgshieldsiogithublicensethechampagnesfdirzighttpsgithubcomthechampagnesfdirzigblobmainlicense zig binding for singlefile dir a directory listing functions  references  sfdirhttpsgithubcommattiasgustavssonlibsblobmaindirh  license this repo is released under the apache license 20httpsgithubcomthechampagnesfdirzigblobmainlicense ","jkoop/zig-extras":"an assortment of random utility functions that aren't in std and don't need to be their own pacakge.  zigextras an assortment of random utility functions that arent in std and dont deserve their own package  license mit ","esporttoys/clippad":"a barebones plaintext scratch pad. 404 not found","travisstaloch/fixed-point":"a fixed point arithmetic package in zig  fixedpoint ","dan149/zarginator":"easy-to-use argument-parser for zig.  zarginator  easytouse command line args management library for zig  how to add zarginator package to your zig project first add zarginator to your buildzigzon dependencies zig fetch save githttpsgithubcomdan149zarginatorhead then add the dependency to your buildzig file   const zarginatorpackage  bdependencyzarginator  target  target optimize  optimize  const zarginatormodule  zarginatorpackagemodulezarginator exerootmoduleaddimportzarginator zarginatormodule   how to use zarginator import const zarg  importzarginator see mainzigsrcmainzig file and flag struct in rootzigsrcrootzigl3c1l6c3 file ","vinymeuh/zig-build-libgpiod":"the libgpiod library packaged for the zig build system  zigbuildlibgpiod the libgpiodhttpsgitkernelorgpubscmlibslibgpiodlibgpiodgit library packaged for the zig build system ","twilkinson3421/zbinutils":"a simple standalone library for reading and writing byte arrays in zig  zbinutils a simple standalone library for reading and writing byte arrays in zig supports both little and big endian supports writing known and unknown length arrays supports reading and writing floats supports reading and writing byte arrays and reading byte arrays prefixed with a length of a specified type  installation to get started first fetch the library replace the commithash with the commit hash for the version you wish to use sh zig fetch save githubcomtwilkinson3421zbinutilsarchivecommithashtargz  then add the library to your buildzig file zig const binutils  bdependencybinutils  exerootmoduleaddimportbinutils binutilsmodulebinutils   license this project is licensed under the unlicensehttpsunlicenseorg ","tensorush/zig-exhaustigen":"zig port of exhaustigen-rs library for exhaustive testing.  zigexhaustigen  zig port of exhaustigenrs libraryhttpsgithubcomgraydonexhaustigenrs for exhaustive testing  usage  add exhaustigen dependency to buildzigzon sh zig fetch save githttpsgithubcomtensorushzigexhaustigen   use exhaustigen dependency in buildzig zig const exhaustigendep  bdependencyexhaustigen  target  target optimize  optimize  const exhaustigenmod  exhaustigendepmodulegen compilerootmoduleaddimportgen exhaustigenmod  ","peterhellberg/w4":"a small zig ⚡ module, primarily meant for my own experiments with wasm-4  w4 zap a small zighttpsziglangorg  module primarily meant for my own experiments with wasm4httpswasm4org  based on the wasm4zig templatehttpsgithubcomaduroswasm4blobmaincliassetstemplateszigsrcwasm4zig  important  you might want to install the w4inithttpsgithubcompeterhellbergw4init tool and use that instead of manually creating the files for your cart  usage you can have zig build retrieve the w4 module if you specify it as a dependency  create a buildzigzon that looks something like this zig  name  w4game fingerprint  0x9364c2ea98294635 version  000 paths   dependencies   w4   url  httpsgithubcompeterhellbergw4archiverefstagsv006targz      note  if you leave out the hash then zig build will tell you that it is missing the hash and what it is  another way to get the hash is to use zig fetch this is probably how you should do it   then you can add the module in your buildzig like this zig  add the w4 module to the executable exeaddmodulew4 bdependencyw4 modulew4   in your srcmainzig you should now be able to zig const w4  importw4 export fn start void  export fn update void  const hello  hello from zig w4color2 w4texthello 15 11 w4color3 w4texthello 16 10   ","allyourcodebase/libxkbcommon":"libxkbcommon ported to the zig build system cihttpsgithubcomallyourcodebaselibxkbcommonactionsworkflowsciyamlbadgesvghttpsgithubcomallyourcodebaselibxkbcommonactions  libxkbcommon this is libxkbcommonhttpsgithubcomxkbcommonlibxkbcommon packaged for zighttpsziglangorg  installation first update your buildzigzon   initialize a zig build project if you havent already zig init zig fetch save githttpsgithubcomallyourcodebaselibxkbcommongit1701  you can then import libxkbcommon in your buildzig with zig const libxkbcommondependency  bdependencylibxkbcommon  target  target optimize  optimize  set the xkb config root  will default to installprefixsharex11xkb ie zigoutsharex11xkb  most distributions will use usrsharex11xkb   the value  will not set a default config root directory  to configure the config root at runtime use the xkbconfigroot environment variable   this example will assume that the config root of the host system is in usr  this does not work on distributions that dont follow the filesystem hierarchy standard fhs like nixos xkbconfigroot  usrsharex11xkb  the x locale root  will default to installprefixsharex11locale ie zigoutsharex11locale  most distributions will use usrsharex11locale   to configure the config root at runtime use the xlocaledir environment variable   this example will assume that the config root of the host system is in usr  this does not work on distributions that dont follow the filesystem hierarchy standard fhs like nixos xlocaleroot  usrsharex11locale  yourexelinklibrarylibxkbcommondependencyartifactlibxkbcommon  for more information please refer to the userconfigurationhttpsgithubcomxkbcommonlibxkbcommonblobmasterdocuserconfigurationmd docs of libxkbcommon ","tensorush/zig-quickphf":"zig port of quickphf library for static hash map generation.  zigquickphf  zig port of quickphf libraryhttpsgithubcomdtrifunoquickphf for static hash map generation  usage  add quickphf dependency to buildzigzon sh zig fetch save githttpsgithubcomtensorushzigquickphf   use quickphf dependency in buildzig zig const quickphfdep  bdependencyquickphf  target  target optimize  optimize  const quickphfmod  quickphfdepmodulequickphf compilerootmoduleaddimportquickphf quickphfmod  ","jafagervik/zdist":"string distance library in zig  zdist string distance library written in zig  algorithms  x hamming distance    levenshtein distance    longest common subsequence lcs distance    jarowinkler distance  usage zig const std  importstd const zdist  importzdist pub fn main void  const astr  abcdef const bstr  cdefgh const distance  zdistlcsdistanceastr bstr stddebugprintlndistance between s and s is dn astr bstr distance    install per 014 beta run this command in the parent directory of your project sh zig fetch save httpsgithubcomjafagervikzdisttarballv010  or alternatively use master or another version then add these lines to buildzig before binstallartifactexe zig const zdist  bdependencyzdist  exerootmoduleaddimportzdist zdistmodulezdist  ","bcrist/zig-consolehelper":"console helpers for command line applications 404 not found","falsepattern/satori":"ziggified bindings for the koishi c coroutine library  satori ziggified bindings for the koishihttpsgithubcomtaiseiprojectkoishi c coroutine library  how to use it first update your buildzigzon shell zig fetch save githttpsgithubcomfalsepatternsatorimaster  next add this snippet to your buildzig script zig const satoridep  bdependencysatori  target  target optimize  optimize  yourmoduleaddimportsatori satoridepmodulesatori  this will provide satori as an importable module to yourmodule and links it against koishi the module source code itself contains plenty of documentation and you can also check testzig for a few examples  additional options  verbose  bool verbose logging for configure phase default false impl  enum which implementation to use leave empty to autodetect supported values emscripten fcontext ucontext ucontexte2k ucontextsjlj win32fiber threadsafe  bool whether multiple coroutines can be ran on different threads at once needs compiler support default true valgrind  bool enable support for running under valgrind for debugging default false linkage  enum whether the koishi library should be statically or dynamically linked default static supported values static dynamic  using the emscripten implementation requires s asyncify in your emscripten linker args","bcrist/dizzy":"zig comptime dependency injection  dizzy  function parameter dependency injection for zig see testzig for example usage ","bcrist/zkittle":"a little zig template engine 404 not found","lvmalware/zig-flags":"a command line flag parser for zig  zig flags a command line flags parser for zig works only with zig 0140 example zig const std  importstd const flag  importflagzig pub fn main void  var gpa  stdheapgeneralpurposeallocator const allocator  gpaallocator const flags  try flagparseflags  help bool false   filename u8   allocator stddebugprintfilename sn  flagsfilename  if flagshelp  stddebugprinthelp messagen       ","theonlysilverclaw/zig-wgpu-native":"zig bindings for the wgpu-native graphics api zig bindings for the wgpunativehttpsgithubcomgfxrswgpunative graphics api","srjilarious/zargunaught":"zig argument parsing library, based on my c++ argunaught library 404 not found","kassane/duckdb":"duckdb is an in-process sql olap database management system div aligncenter img srchttpsduckdborgimagesduckdblogodlpng height50 div pnbspp p aligncenter a hrefhttpsgithubcomduckdbduckdbactions img srchttpsgithubcomduckdbduckdbactionsworkflowsmainymlbadgesvgbranchmain altgithub actions badge a a hrefhttpsappcodecovioghduckdbduckdb img srchttpscodecovioghduckdbduckdbbranchmaingraphbadgesvgtokenfaxjcffghn altcodecov a a hrefhttpsdiscordggtcvwpjfnzx img srchttpsshieldsiodiscord909674491309850675 altdiscord  a a hrefhttpsgithubcomduckdbduckdbreleases img srchttpsimgshieldsiogithubvreleaseduckdbduckdbcolorbrightgreendisplaynametaglogoduckdblogocolorwhite altlatest release a p  duckdb duckdb is a highperformance analytical database system it is designed to be fast reliable and easy to use duckdb provides a rich sql dialect with support far beyond basic sql duckdb supports arbitrary and nested correlated subqueries window functions collations complex types arrays structs and more for more information on the goals of duckdb please refer to the why duckdb page on our websitehttpsduckdborgwhyduckdb  installation if you want to install and use duckdb please see our websitehttpswwwduckdborg for installation and usage instructions  data import for csv files and parquet files data import is as simple as referencing the file in the from clause sql select  from myfilecsv select  from myfileparquet  refer to our data importhttpsduckdborgdocsdataoverview section for more information  sql reference the websitehttpsduckdborgdocssqlintroduction contains a reference of functions and sql constructs available in duckdb  development for development duckdb requires cmakehttpscmakeorg python3 and a c11 compliant compiler run make in the root directory to compile the sources for development use make debug to build a nonoptimized debug version you should run make unit and make allunit to verify that your version works properly after making changes to test performance you can run buildbenchmark1 buildtpch1 make and then perform several standard benchmarks from the root directory by executing buildreleasebenchmarkbenchmarkrunner the detail of benchmarks is in our benchmark guidebenchmarkreadmemd please also refer to our contribution guidecontributingmd ","jkoop/zig-time":"zig-time but with zig packaging  zigtime this is a fork of zigtimehttpsgithubcomnektrozigtime thats uses zigs native packaging instead of zigmodhttpsgithubcomnektrozigmod  usage add this repository to your buildzigzon eg zon  buildzigzon  name  awesomeproject version  010 minimumzigversion  0120 paths     dependencies   zigtime   url  githttpsgithubcomprotonullzigtimecommit hash hash  hash  comment this out zig will automatically tell you what has to use     after that add the dependency to your build script eg zig  buildzig const std  importstd pub fn build b stdbuild  void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const exe  baddexecutable name  awesomeproject rootsourcefile   path  srcmainzig  target  target optimize  optimize   zigtime dependency goes here exerootmoduleaddimportzigtime bdependencyzigtime moduletime binstallartifactexe   you may notice theres zigtime zigtime and time  zigtime is what youd use as the import like so const time  importzigtime  zigtime is the key to match in buildzigzon which doesnt like dashes  time is the name of the exported module from zigtime the library itself ","kassane/ffi-flang-zig":"ffi flang-new runtime with zig  ffiflangzig ffi between fortran runtime and zig llvmflang v1817httpsgithubcomllvmllvmprojecttreellvmorg1817flang files are included in this repository inspired by sourceryinstituteisofortranbindinghttpsgithubcomsourceryinstituteisofortranbinding however for llvmbased only  requires  zighttpsziglangorgdownload v0130 or master  flangnewhttpsgithubcomllvmllvmprojecttreellvmorg1817flang  how to use build docker and run image bash  docker build t flangzig f devcontainerdockerfile  docker run it rm v pwdapp w app flangzig bash   build help bash projectspecific options doptimizeenum prioritize performance safety or binary size supported values debug releasesafe releasefast releasesmall dtargetstring the cpu architecture os and abi to build for dcpustring target cpu features to add or subtract ddynamiclinkerstring path to interpreter on the target system dsharedbool build as shared library default false damalgamationbool build as amalgamation default false denabletestsbool build tests default false ","ziglana/zig13-metal":"zig 0.13 bindings for apple's metal api.  zigmetal  zig bindings to the metal api this library is currently in alpha stage dont use it in any serious projects bindings are automatically generated using zig and libclang but there are still some issues with the code generation the source code for the generator can be found here httpsgithubcomdmbfmzigmetalgen in the examples folder you can find a few samples which were directly translated from apples metalcpp samples  usage copy or clone zigmetal to a subdirectory of your project for instance if you copy it to libszigmetal you should add this to your buildzig zig const zigmetal  importlibszigmetalbuildzig pub fn buildb stdbuild void   const zigmetalpkg  zigmetalpackageb zigmetalpkglinkexe exelinkframeworkfoundation exelinkframeworkmetal exelinkframeworkappkit  if on macos exelinkframeworkmetalkit  if using mtkview     what is included all of the metal api and parts of the foundation api which metal depends on can are directly imported in the root zigmetal namespace so you can access them via importzigmetalmtldevice importzigmetalnsstring etc additionally some basic appkit bindings can be found in the extrasappkit namespace and basic metalkit bindings in the extrasmetalkit namespace  examples you can find some usage examples in the examples folder these are translations from apples samples for metalcpp 1 window sample zig build runwindow img srcexamples01windowscreenshotpng width320 2 primitive sample zig build runprimitive img srcexamples02primitivescreenshotpng width320 3 argument buffer sample zig build runargbuffers img srcexamples03argbuffersscreenshotpng width320 4 animation sample zig build runanimation img srcexamples04animationscreenshotpng width320 5 instancing sample zig build runinstancing img srcexamples05instancingscreenshotpng width320 6 perspective sample zig build runperspective img srcexamples06perspectivescreenshotpng width320 7 lighting sample zig build runlighting img srcexamples07lightingscreenshotpng width320 8 texturing sample zig build runtexturing img srcexamples08texturingscreenshotpng width320 9 compute sample zig build runcompute img srcexamples09computescreenshotpng width320 10 compute to render sample zig build runcomputetorender img srcexamples10computetorenderscreenshotpng width320 ","ang3lerr404/zig-utilities":"utilities for zig, in a smol, convenient file  utilszig a smol utility library before skill issues were found d  in the entire standard library for zig   w h y  a r e  y o u  l i k e  t h i s","sea-grass/zig-present":"a command-line tool for running interactive tui presentations.  zigpresent zigpresent is a commandline tool for creating interactive tui presentations div stylemaxwidth 100 margin 0 auto width 800px demo video of running the zigpresent software in a terminal sessiondocdemogif div  example presentations are expressed in a simple text format heres an example presentation txt zigpresent  coffee brewing how to brew coffee with a french press nextslide  what youll need  french press  ground coffee beans  boiling water nextslide  steps 1 add ground coffee beans to the french press 2 add 1 cup of boiling water to the french press per 7g of coffee beans 3 cover the french press with the lid 4 wait 8 minutes 5 push the plunger down slowly 6 pour and enjoy   requirements  officially supported zig zig 0130dev35164ef45eb0 you can get it from the zig releases pagehttpsziglangorgdownload  installation use zig to build the application binary with a shell open in this projects directory  zig build doptimizereleasesafe  the binary will be available at zigoutbinzigpresent  usage see the exampleexample for a sample presentation file or the presentationpresentation section for info on the available presentation commands store this in a file with the txt extension like presentationtxt then you can start the presentation like this   zigpresent presentationtxt   presentation every zigpresent file must start with the line zigpresent lines starting with a  denote a command all other lines are interpreted as text to print empty lines and whitespace are preserved the most important command is nextslide which effectively creates a new slide within the presentation see commandscommands for all of the commands  commands a presentation file can contain predefined commands see the following table for a glossary  command  description  example usage    nextslide  adds a pause in the presentation waiting for the user to press enter then will clear the screen and continue the presentation you may optionally provide a prompt to be displayed beside the cursor  nextslide go to next slide   docker  run the docker command for example to provide the user with an interactive shell  docker run it busybox sh   stdout  run the shell command and print the result  stdout date   pause  adds a pause in the presentation waiting for the user to press enter does not clear the screen when the user hits enter you may optionally provide a prompt to be displayed beside the cursor  pause hit enter when you know the answer  ","bcrist/zig-lc4k":"generate ispmach4000 cpld bitstreams directly from zig code 404 not found","bcrist/zig-fmthelper":"some std.fmt helpers for zig programs 404 not found","falsepattern/zig-tracy":"easy to use bindings for the tracy client c api. now with gpu, lock, and fiber support!  zig tracy client easy to use bindings for the tracy client c api  dependencies  zig 0140dev3219bffbc918e  tracy 0111 only for viewing the profiling session this repository is only concerned with client matters  features  designed to integrate well with buildzig  builds and statically links the tracy client  perfect for crosscompilation  uses zig comptime to nullify the tracy markup when building with tracy disabled  provides zig friendly bindings for  zone markup  frame markup  plotting  message printing  gpu tracing  memory tracing via custom allocator  lock tracing both manually and via wrappers  fiber tracing  usage see example for how to set up zigtracy with a zig project in summary  declare zigtracy as a dependency in the buildzigzon  configure zigtracy dependency in buildzig  instrument the code using the provided zig module  use tracy uiserver to connect to the instrumented zig application and explore the profiler data  building as a shared library if your project needs to call tracy functions from multiple dlls then you need to build the tracy client as a shared library this is accomplished by passing the shared option and if youre using windows installing the resulting shared library next to your exe zig const tracy  bdependencytracy  target  target optimize  optimize shared  true  const installdir  stdbuildstepinstallartifactoptionsdir override   bin     const installtracy  baddinstallartifacttracyartifacttracy  destdir  installdir pdbdir  installdir  bgetinstallstepdependoninstalltracystep  for additional context see section 215 of the tracy manual setup for multidll projects  todo  ideas  figure out why system sampling is broken  tracy fibers support would make sense paired with zig async  gpu zone markup support  test callstack support ","andoni-hazaiah/baogao":"baogao (bàogào) is a flexible and extensible logging library for the zig programming language. baogao bogo is a flexible and extensible logging library for the zig programming language usage todo ","allyourcodebase/catch2":"catch 2 ported to the zig build system  buildzig for catch2 provides a package to be used by the zig package manager for c programs  status  refname  catch2 version  zig 012x  zig 013x  zig 014x  zig 0150dev    3801  v380           380  v380           3711  v371           use add the dependency in your buildzigzon by running the following command bash zig fetch save githttpsgithubcomallyourcodebasecatch23801  then in your buildzig zig const catch2dep  bdependencycatch2  target  target optimize  optimize  const catch2lib  catch2departifactcatch2 const catch2main  catch2departifactcatch2withmain  wherever needed exelinklibrarycatch2lib exelinklibrarycatch2main  a complete usage demonstration is provided in the exampleexample directory ","ciathefed/coroutines-zig":"zig bindings for tsoding's coroutines library  coroutineszig zig bindings for tsodings coroutineshttpsgithubcomtsodingcoroutines library  install shell zig fetch save githttpsgithubcomciathefedcoroutineszigv010  add the following to buildzig zig const coroutines  bdependencycoroutines  target  target optimize  optimize  exemodaddimportcoroutines coroutinesmodulecoroutines   example zig const std  importstd const coroutines  importcoroutines fn counterarg anyopaque callconvc void  const n  asusize intcastintfromptrarg for 0n i  stddebugprint n  coroutinesid i  coroutinesyield   pub fn main void  coroutinesinit coroutinesgocounter ptrfromint5 coroutinesgocounter ptrfromint10 while coroutinesalive  1  coroutinesyield    you can find more examples herehttpsgithubcomciathefedcoroutinestreemainexamples ","thekorn/snowballstem.zig":"zig wrapper for the snowball stemmer  zig wrapper for the snowball stemmer ci workflowhttpsgithubcomthekornsnowballstemzigactionsworkflowsciyamlbadgesvg note this is a work in progress and not yet ready for use  requirements  zig  014  how to use add this package to your zig project bash  zig fetch savesnowballstem githttpsgithubcomthekornsnowballstemziggitmain  add dependency and import to the buildzig file zig  const snowballstem  bdependencysnowballstem  target  target optimize  optimize   exerootmoduleaddimportsnowballstem snowballstemmodulesnowballstem  and then just use it in the code zig const std  importstd const stemmer  importsnowballstem pub fn main void  var gpa  stdheapgeneralpurposeallocator defer stddebugassertgpadeinit  ok const alloc  gpaallocator const stemmer  try stemmerlistalloc defer allocfreestemmer stddebugprint sn stemmer    tests using nix tests can be run like bash  nix develop c zig build test summary all   todos    the build is not correct first build sometimes fails  x implement the stemmer    make wasm buildable    how to handle german umlauts  x write test for german stemmer to check against the upstream test suitehttpsgithubcomsnowballstemsnowballdatablobmastergermanvoctxt    add other languages to tests esp english  reference  snowball stemmerhttpsgithubcomsnowballstemsnowball ","nektro/zig-zlib":"this repository has no description.  zigzlib zlib wrapper for zig httpswwwzlibnet zlib version 1211  license mit ","kassane/zig-bearssl":"a bearssl binding for zig  zigbearssl a bearsslhttpsbearsslorg binding for zig providing primitive and probably unsafe im no ssl expert bindings for ssl and tls connections to generic zig code ","distreat/projavu":"a program for on-disk storing and managing of project ideas.  projavu a program for ondisk storing and managing of project ideas build using zig version 0101 screenshotdocsscreenshotpng  features  display ideas similar to taskwarriorhttpstaskwarriororg  filter ideas to only show relevant entries  categorize projects based on development progress  assign tags to projects  editorfocused workflow  backend  all noted ideas are stored ondisk via a hashcalculated path  a csv table is used to reference ideas store tags and progress  ondisk content is only deleted when not referenced anymore and the garbage collector is manually run  the underlying library is undergoing decent integrationtesting  binaries binaries and checksums are provided with every release releaseshttpsgithubcomdistreatprojavureleases  documentation this repository contains both a cli and library interface the documentation for the library is created in the directory docs when running zig build documentationhttpsdistreatgithubioprojavu ","bcrist/zig-s-records":"motorola s-record library in zig 404 not found","lcp5y3/unity-zig":"unity build with zig build system 404 not found","xxhertz/zig-vmt-hook":"a vmt hook implementation in zig. works on x64 and x86 architectures. windows only.  to get started zig  fetch the library via zig fetch savevmthook githttpsgithubcomxxhertzzigvmthookmain  buildzig const vmthookdep  bdependencyvmthook   for dlllib librootmoduleaddimportvmthook vmthookdepmodulehooking  for exe exeaddimportvmthook vmthookdepmodulehooking  for modules exeaddimportvmthook vmthookdepmodulehooking  zig  import the library const hooking  importvmthook  zig  initialize the library at runtime hookinginitallocator  zig  hook a function originalfunc  ptrcasthookingvirtualhookvtable 10 hook  zig  release all hooks hookingdeinit  this works for both x86 and x64 you can see examples in my recent projects  zigcssinternalhttpsgithubcomxxhertzzigcssinternal for x86  ziggmodinternalhttpsgithubcomxxhertzziggmodinternalblobmainsrcrootzig for x64","zigzedd/zollections":"[mirror] zig collections library. p aligncenter a hrefhttpscodezeptotechnetzeddzollections picture img altzollections logo width150 srchttpscodezeptotechnetzeddzollectionsrawbranchmainlogosvg  picture a p h1 aligncenter zollections h1 h4 aligncenter a hrefhttpscodezeptotechnetzeddzollectionsdocumentationa  a hrefhttpszeddzeptotechnetzollectionsapiapia h4 p aligncenter zig collections library p zollections is part of zeddhttpscodezeptotechnetzedd a collection of useful libraries for zig  zollections zollections is a collections library for zig its made to ease memory management of dynamically allocated slices and elements  versions zollections 011 is made and tested with zig 0130  how to use  install in your project directory shell  zig fetch save httpscodezeptotechnetzeddzollectionsarchivev011targz  in buildzig zig  add zollections dependency const zollections  bdependencyzollections  target  target optimize  optimize  exerootmoduleaddimportzollections zollectionsmodulezollections   examples these examples are taken from tests in testscollectionzighttpscodezeptotechnetzeddzollectionssrcbranchmaintestscollectionzig  simple collection zig  allocate your slice const slice  try allocatorallocu8 3  create your slice elements slice0  try allocatorcreateu8 slice1  try allocatorcreateu8 slice2  try allocatorcreateu8  create a collection with your slice of elements const collection  try zollectionscollectionu8initallocator slice  free your collection your slice and all your elements will be freed defer collectiondeinit   recursive free zig  create a pointer to a slice const slicepointer  try allocatorcreateu8  allocate your slice in the pointed slice slicepointer  try allocatorallocu8 3  create slice elements slicepointer0  try allocatorcreateu8 slicepointer1  try allocatorcreateu8 slicepointer2  try allocatorcreateu8  allocate your slice or pointers to slices const slice  try allocatorallocu8 1 slice0  slicepointer  create a collection with your slice of elements const collection  try zollectionscollectionu8initallocator slice  free your collection your slice and all your slices and their elements will be freed defer collectiondeinit   custom structure deinitialization zig  an example structure const examplestruct  struct  const self  this allocator stdmemallocator buffer u8  initialize a new example struct pub fn initbufsiz usize self  const allocator  stdtestingallocator return  allocator  allocator buffer  try allocatorallocu8 bufsiz    deinitialize the example struct pub fn deinitself self void  selfallocatorfreeselfbuffer    allocate your slice const slice  try allocatorallocexamplestruct 3  create your slice elements with custom structs and their inner init  deinit slice0  try allocatorcreateexamplestruct slice0  try examplestructinit4 slice1  try allocatorcreateexamplestruct slice1  try examplestructinit8 slice2  try allocatorcreateexamplestruct slice2  try examplestructinit16  create a collection with your slice of elements const collection  try zollectionscollectionexamplestructinitallocator slice  free your collection your slice and all your elements will be deinitialized and freed defer collectiondeinit  ","zigzedd/zlugify":"[mirror] generate ascii slugs from unicode strings. h1 aligncenter zlugify h1 p aligncenter generate ascii slugs from unicode strings p zlugify is part of zeddhttpscodezeptotechnetzedd a collection of useful libraries for zig  zlugify zlugify is a library to generate slugs from all types of utf8 encoded strings it uses anyasciizighttpscodezeptotechnetzeddanyasciizig to convert utf8 encoded strings into asciionly strings  versions zlugify 101 is made and tested with zig 0130  how to use  install in your project directory shell  zig fetch save httpscodezeptotechnetzeddzlugifyarchivev101targz  in buildzig zig  add zlugify dependency const zlugify  bdependencyzlugify  target  target optimize  optimize  exerootmoduleaddimportzlugify zlugifymodulezlugify   examples these examples are highly inspired from the test cases that you can find at the end of libzighttpscodezeptotechnetzeddzlugifysrcbranchmainsrclibzig  trim and normalize zig const slugify  importzlugifyslugify const slug  try slugifyallocator  this is a testtn defer allocatorfreeslug try stdtestingexpectequalstringsthisisatest slug   remove diacritics and unnecessary spaces zig const slugify  importzlugifyslugify const slug  try slugifyallocator smthing t ls defer allocatorfreeslug try stdtestingexpectequalstringssomethingelse slug   convert nonlatin characters zig const slugify  importzlugifyslugify const slug  try slugifyallocator   defer allocatorfreeslug try stdtestingexpectequalstringsqiyuxian slug   convert asciilike characters zig const slugify  importzlugifyslugify const slug  try slugifyallocator    defer allocatorfreeslug try stdtestingexpectequalstringsslugifyastring slug   convert emojis zig const slugify  importzlugifyslugify const slug  try slugifyallocator hello  defer allocatorfreeslug try stdtestingexpectequalstringshellofox slug   customized separator zig const slugifyseparator  importzlugifyslugify const slug  try slugifyseparatorallocator ti yu nhng ch k ln  defer allocatorfreeslug try stdtestingexpectequalstringstoiyeunhungchukylan slug  ","sweetbbak/espeak-ng-zig":"rhasspy phonemize fork of espeak-ng built using the zig build system the rhasspyespeaknghttpsgithubcomrhasspyespeakng library packaged for the zig build system this build doesnt compile any of the async audio or ucd tools and features it is mainly used for phonemizing text  changes in fork add espeaktexttophonemeswithterminator function that allows getting phonemes with punctuation type back see pythontestpy add to your project sh zig fetch save httpsgithubcomsweetbbakespeakngzigarchiverefsheadsmainzip  zig const espeak  bdependencyespeak  target  target optimize  optimize strip  true pie  true   link with the output artifact exelinklibraryespeakartifactespeakng  allow the headers to be included in your project const espeakinclude  espeakpathinclude exeaddincludepathespeakinclude  import in your executable zig  provides  encodingh  espeakngh  speaklibh const c  cimport cincludespeaklibh   ","nektro/zig-fs-check":"various utilities for testing certain conditions in the local files  zigfscheck various utilities for testing certain conditions in the local files  built with  zig master  httpsgithubcomziglangzig  zigmod package manager  httpsgithubcomnektrozigmod  install  zigmod aq add 1nektrofscheck   usage  pub fn doesfileexistdir stdfsdir fpath const u8 bool  pub fn doesdirexistdir stdfsdir fpath const u8 bool  license mit ","bcrist/zig-rom-compress":"simple compression scheme for sparse rom data 404 not found","jinzhongjia/ztroy":"a zig library  ztroy a versatile libary the goal of this library is to create a general library of basic functional functions  now this library is developing  feature ini parse  install zig version 0120 or higher 1 add to buildzigzon sh  it is recommended to replace the following branch with commit id zig fetch save httpsgithubcomjinzhongjiaztroyarchivemaintargz  of course you can also use githttps to fetch this package  2 config buildzig add this zig  to standardize development maybe you should use lazydependency instead of dependency  more info to see httpsziglangorgdownload0120releasenoteshtmltoclazydependencies const ztroy  bdependencyztroy  target  target optimize  optimize   add module exerootmoduleaddimporttory ztroymoduletroy   document waiting to be added","orolia2s/json-c":"json-c ported to the zig build system  buildzig for jsonc provides a package to be used by the zig package manager for c programs  use add the dependency in your buildzigzon by running the following command bash zig fetch save githttpsgithubcomorolia2sjsonc017  then in your buildzig zig const jsonc  bdependencyjsonc  target  target optimize  optimize  const libjsonc  jsoncartifactjsonc  wherever needed exelinklibrarylibjsonc  ","softprops/uri-template":"a zig uri template (rfc6570) implementation h1 aligncenter zig uri template h1 div aligncenter zig library for a hrefhttpsdatatrackerietforgdochtmlrfc6570uri templatinga div  mainhttpsgithubcomsoftpropsuritemplateactionsworkflowsciymlbadgesvghttpsgithubcomsoftpropsuritemplateactionsworkflowsciyml license infohttpsimgshieldsiogithublicensesoftpropsuritemplate releasehttpsimgshieldsiogithubvreleasesoftpropsuritemplate zig supporthttpsimgshieldsiobadgezig0130blacklogozighttpsziglangorgdocumentation0130  examples see examples directory   installing create a new exec project with zig init then update buildzigzon by running sh zig fetch save httpsgithubcomsoftpropsuritemplatearchiverefstagsv011targz   you can also depend any tag with httpsgithubcomsoftpropsuritemplatearchiverefstagsvversiontargz or current main with httpsgithubcomsoftpropsuritemplatearchiverefsheadsmainmaintargz to resolve a hash omit it and let zig tell you the expected value add the following in your buildzig file diff const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption   dereference dep from buildzigzon  const uritemplate  bdependencyuritemplate   target  target  optimize  optimize  moduleuritemplate var exe  baddexecutable name  yourexe rootsourcefile   path  srcmainzig  target  target optimize  optimize    add the module to executable  exerootmodeaddimporturitemplate uritemplate binstallartifactexe     for budding ziglings does this look interesting but youre new to zig and feel left out no problem zig is young so most us of our new are as well here are some resources to help get you up to speed on zig  the official zig websitehttpsziglangorg  zigs onepage language documentationhttpsziglangorgdocumentation0130  ziglearnhttpsziglearnorg  ziglings exerciseshttpsgithubcomratfactorziglings  softprops 2024 ","kallebalik/poopie":"a benchmarking library.  performance optimizer observation platform inside executable bench imassetsbmpngrawtrue  usage zig var poopie poopie   config   storeresult  true comparemode  slowest   var sampler  try poopiecreatesamplerallocator  warmups  100 samples  1000  defer samplerdeinit samplerstart while samplersample  samplerstore    some code to test     try poopiecollectallocator sampler  name  mybench   you can overwrite poopie settings in each collection if you want zig   try poopiecollectallocator sampler  name  mybench comparemode  fastest   or compare against a specific file zig   try poopiecollectallocator sampler  name  mybench comparemode  file comparefile  mybench1010007022311726867407409043json   stores benchmarks in benchmark folder if storeresult  true false by default  prev work this shitty library is just crappy code slapped on top of andrews and contributors awesome poophttpsgithubcomandrewrkpoop code ","allyourcodebase/gifsicle":"gifsicle using the zig build system  gifsicle this is gifsiclehttpsgithubcomkohlergifsicle packaged using zig build system  options you can set these options when importing as a dependency with bdependencygifsicle  optionvalue  or when building directly with zig build doptionvalue option namedefaultdescription    dynamic  false  build lib as shared dynamic library   tools  true  build cli tools gifsicle gifview gifdiff   terminal  true  output gif to terminal   thanks to andrews fork of ffmpeghttpsgithubcomandrewrkffmpeg for the knowhow ","kassane/benchmark":"a microbenchmark support library (uses zig build)  benchmark buildandtesthttpsgithubcomgooglebenchmarkworkflowsbuildandtestbadgesvghttpsgithubcomgooglebenchmarkactionsqueryworkflow3abuildandtest bazelhttpsgithubcomgooglebenchmarkactionsworkflowsbazelymlbadgesvghttpsgithubcomgooglebenchmarkactionsworkflowsbazelyml pylinthttpsgithubcomgooglebenchmarkworkflowspylintbadgesvghttpsgithubcomgooglebenchmarkactionsqueryworkflow3apylint testbindingshttpsgithubcomgooglebenchmarkworkflowstestbindingsbadgesvghttpsgithubcomgooglebenchmarkactionsqueryworkflow3atestbindings coverage statushttpscoverallsioreposgooglebenchmarkbadgesvghttpscoverallsiorgooglebenchmark discordhttpsdiscordappcomapiguilds1125694995928719494widgetpngstyleshieldhttpsdiscordggcz7ux7wkc2 a library to benchmark code snippets similar to unit tests example c include benchmarkbenchmarkh static void bmsomefunctionbenchmarkstate state   perform setup here for auto   state   this code gets timed somefunction    register the function as a benchmark benchmarkbmsomefunction  run the benchmark benchmarkmain   getting started to get started see requirementsrequirements and installationinstallation see usageusage for a full example and the user guidedocsuserguidemd for a more comprehensive feature overview it may also help to read the google test documentationhttpsgithubcomgooglegoogletestblobmaindocsprimermd as some of the structural aspects of the apis are similar  resources discussion grouphttpsgroupsgooglecomdforumbenchmarkdiscuss irc channels  liberahttpsliberachat benchmark additional tooling documentationdocstoolsmd assembly testing documentationdocsassemblytestsmd building and installing python bindingsdocspythonbindingsmd  requirements the library can be used with c03 however it requires c11 to build including compiler and standard library support the following minimum versions are required to build the library  gcc 48  clang 34  visual studio 14 2015  intel 2015 update 1 see platformspecific build instructionsdocsplatformspecificbuildinstructionsmd  installation this describes the installation process using cmake as prerequisites youll need git and cmake installed see dependenciesmddocsdependenciesmd for more details regarding supported versions of build tools bash  check out the library  git clone httpsgithubcomgooglebenchmarkgit  go to the library root directory  cd benchmark  make a build directory to place the build output  cmake e makedirectory build  generate build system files with cmake and download any dependencies  cmake e chdir build cmake dbenchmarkdownloaddependencieson dcmakebuildtyperelease   or starting with cmake 313 use a simpler form  cmake dcmakebuildtyperelease s  b build  build the library  cmake build build config release  this builds the benchmark and benchmarkmain libraries and tests on a unix system the build directory should now look something like this  benchmark build src libbenchmarka libbenchmarkmaina test   next you can run the tests to check the build bash  cmake e chdir build ctest buildconfig release  if you want to install the library globally also run  sudo cmake build build config release target install  note that google benchmark requires google test to build and run the tests this dependency can be provided two ways  checkout the google test sources into benchmarkgoogletest  otherwise if dbenchmarkdownloaddependencieson is specified during configuration as above the library will automatically download and build any required dependencies if you do not wish to build and run the tests add dbenchmarkenablegtesttestsoff to cmakeargs  debug vs release by default benchmark builds as a debug library you will see a warning in the output when this is the case to build it as a release library instead add dcmakebuildtyperelease when generating the build system files as shown above the use of config release in build commands is needed to properly support multiconfiguration tools like visual studio for example and can be skipped for other build systems like makefile to enable linktime optimisation also add dbenchmarkenableltotrue when generating the build system files if you are using gcc you might need to set gccar and gccranlib cmake cache variables if autodetection fails if you are using clang you may need to set llvmarexecutable llvmnmexecutable and llvmranlibexecutable cmake cache variables to enable sanitizer checks eg asan and tsan add  dcmakecflagsg o2 fnoomitframepointer fsanitizeaddress fsanitizethread fnosanitizerecoverall dcmakecxxflagsg o2 fnoomitframepointer fsanitizeaddress fsanitizethread fnosanitizerecoverall    stable and experimental library versions the main branch contains the latest stable version of the benchmarking library the api of which can be considered largely stable with source breaking changes being made only upon the release of a new major version newer experimental features are implemented and tested on the v2 branchhttpsgithubcomgooglebenchmarktreev2 users who wish to use test and provide feedback on the new features are encouraged to try this branch however this branch provides no stability guarantees and reserves the right to change and break the api at any time  usage  basic usage define a function that executes the code to measure register it as a benchmark function using the benchmark macro and ensure an appropriate main function is available c include benchmarkbenchmarkh static void bmstringcreationbenchmarkstate state  for auto   state stdstring emptystring   register the function as a benchmark benchmarkbmstringcreation  define another benchmark static void bmstringcopybenchmarkstate state  stdstring x  hello for auto   state stdstring copyx  benchmarkbmstringcopy benchmarkmain  to run the benchmark compile and link against the benchmark library libbenchmarkaso if you followed the build steps above this library will be under the build directory you created bash  example on linux after running the build steps above assumes the  benchmark and build directories are under the current directory  g mybenchmarkcc stdc11 isystem benchmarkinclude  lbenchmarkbuildsrc lbenchmark lpthread o mybenchmark  alternatively link against the","lumi-engine/lumi":"the main lumi engine repo p aligncenter img srchttpscodebergorglumienginelumidesignrawbranchmain2023lumicodebergbannersvg  p lumi engine is a 2d game engine which aims to provide a performant flexible and easy game development environment ","kassane/tlsf":"two-level segregated fit memory allocator implementation.  tlsf twolevel segregated fit memory allocator implementation written by matthew conte mattbaisokuorg released under the bsd license features   o1 cost for malloc free realloc memalign  extremely low overhead per allocation 4 bytes  low overhead per tlsf management of pools 3kb  low fragmentation  compiles to only a few kb of code and data  support for adding and removing memory pool regions on the fly caveats   currently assumes architecture can make 4byte aligned accesses  not designed to be thread safe the user must provide this notes  this code was based on the tlsf 14 spec and documentation found at httpwwwgiiupvestlsfmaindocs it also leverages the tlsf 20 improvement to shrink the perblock overhead from 8 to 4 bytes history  20160410  v31  code moved to github  tlsfbitsh rolled into tlsfc  license changed to bsd 20140208  v30  this version is based on improvements from 3dinteractive gmbh  interface changed to allow more than one memory pool  separated pool handling from control structure adding removing debugging  control structure and pools can still be constructed in the same memory block  memory blocks for control structure and pools are checked for alignment  added functions to retrieve control structure size alignment size min and max block size overhead of pool structure and overhead of a single allocation  minimal pool size is tlsfblocksizemin  tlsfpooloverhead  pool must be empty when it is removed in order to allow o1 removal 20111020  v20  64bit support  more compiler intrinsics for ffsfls  ffsfls verification during tlsf creation in debug builds 20080404  v19  add tlsfheapcheck a heap integrity check  support a predefined tlsfassert macro  fix realloc case where block should shrink if adjacent block is in use execution would go down the slow path 20070208  v18  fix for unnecessary reallocation in tlsfrealloc 20070203  v17  tlsfheapwalk takes a callback  tlsfrealloc now returns null on failure  tlsfmemalign optimization for 4byte alignment  usage of sizet where appropriate 20061121  v16  ffsfls broken out into tlsfbitsh  tlsfoverhead queries perpool overhead 20061107  v15  smart realloc implementation  smart memalign implementation 20061011  v14  add some ffsfls implementations  minor code footprint reduction 20060914  v13  profiling indicates heavy use of blocks of size 1128 so implement small block handling  reduce pool overhead by about 1kb  reduce minimum block size from 32 to 12 bytes  realloc bug fix 20060909  v12  add tlsfblocksize  static assertion mechanism for invariants  minor bugfixes 20060901  v11  add tlsfrealloc  add tlsfwalkheap 20060825  v10  first release ","travisstaloch/combinato":"parser combinators in zig 404 not found","thechampagne/cnbt-zig":"zig binding for cnbt an nbt file parser and manipulator library.  cnbtzig httpsimgshieldsiogithubvtagthechampagnecnbtziglabelversionhttpsgithubcomthechampagnecnbtzigreleaseslatest httpsimgshieldsiogithublicensethechampagnecnbtzighttpsgithubcomthechampagnecnbtzigblobmainlicense zig binding for cnbt an nbt file parser and manipulator library  references  cnbthttpsgithubcomchmod222cnbt  license this repo is released under the apache license 20httpsgithubcomthechampagnecnbtzigblobmainlicense ","kassane/vswhom-zig":"pure zig-ffi to jon blow's vs discovery script  vswhomzig pure zigffi to jon blows vs discovery script based on vswhomsysrshttpsgithubcomnabijaczlewelivswhomsysrs need zig 011 or higherhttpsziglangorgdownload ","bcrist/zig-intel-hex":"intel hex format library in zig 404 not found","kassane/cobalt":"coroutines for c++20 & asio (uses zig build for testing) 404 not found","dasimmet/zig-libxml2":"libxml2 built using zig build system  libxml2 built with zig this repository contains zig code for building libxml2 using zig this allows other projects that use the zig build system to easily consume this library crosscompile it etc why using the zig build system makes it much easier to crosscompile a library even if you arent using the zig programming language see maintain it with zighttpskristoffitblogmaintainitwithzig for some more information this library currently hardcodes the libxml2 version latest as of writing this but unlikely to remain that way for long in the future id like to allow users to pass in a custom libxml2 directory and itd be really cool to setup some sort of github action to check for new versions and try to pull it in maybe one day  usage while we all eagerly await the zig package managerhttpsgithubcomziglangzigissues943 the recommended way to use this is via git submodules or just embedding this into your repository zig const libxml2  importpathtolibxml2zig pub fn buildb stdbuild void    const lib  try libxml2createb target mode   these are the minimal options to not depend on any other libraries  if you ave these libraries just set these to true iconv  false lzma  false zlib  false  const exe  baddexecutablemyprogram srcmainzig liblinkexe   this package does not provide any zignative apis to access the underlying c library this is by design the focus of this repository is only to enable building the underlying library using the zig build system therefore to use the library import the headers and use the c api zig const c  cimport cincludelibxmlxmlreaderh    do stuff with c   other dependencies some features require other libraries in the example above we disabled those features for example if you set zlib  true then zlib must be available in this scenario you can find and use a zlib build such as zigzlibhttpsgithubcommattnitezigzlib as normal when that library is also added to the project it adds its include paths and linking information to the build so libxml2 can be built with zlib support ","scottredig/zig-demo-webserver":"a webserver which hosts a zig build path  zigdemowebserver a webserver which hosts the install directory where the contents of running zig build goes of a zig project see the example folders buildzig for usage intentionally made without bells and wistles focused on serving the result of a zig build as simply as possible ","ziglana/zig-zip":"🦕 zig.zip - immutable zig package registry 404 not found","jacobcrabill/doczy":"doczy: markdown documentation browser  doczy markdown documentation browser  instantly view your markdown docs in the browser looking for a better way to browse your markdown docs quickly and easily without jumping through the hoops of setting up mdbookhttpsrustlanggithubiomdbook sphinxhttpswwwsphinxdocorgenmaster or some other toolchain use doczy navigate to the test documentation indexdocsindexmd for an example powered by zig zigzerodocsimgszigzeropng  usage example bash zig build doptimizereleasesmall zigoutbindoczy f readmemd  ","laohanlinux/zoroutine-zig":"this repository has no description.  zoroutinezig","johmaru/jzlog":"no dependent simple zig logging library  jzlog no dependent simple zig logging library library v 003 on zig version 0130 version 003 linux supported  how to install zig fetch save httpsgithubcomjohmarujzlogarchiverefstagsv003zip edit buildzig zig const jzlogdep  bdependencyjzlog  const jzlogmodule  jzlogdepmodulejzlog under const exe  baddexecutable  name  testlog  rootsourcefile  bpathsrcmainzig  target  target  optimize  optimize   exerootmoduleaddimportjzlog jzlogmodule  mainzig zig const jzlog  importjzlog   how to use zig const jzlog  importjzlog  all default try jzloginitnull  if you want to choose time format ymd or ymdhms you can use logtime enum types try loggerinitymd  include hsms try loggerinitincludehsms  also you can chose any settings your like try loggerinitnull minlevel  loggerloglevelwarning   this is log write function try jzlogloghello jzlogloglevelinfo  this library supports various loglevel types  this library have async function try loggerasynclogasync loggerloglevelinfo defer loggershutdown  ","tensorush/gitnews":"hacker news feed of top git links.  gitnews  hacker news feed of top git links  usage sh git clone httpsgithubcomtensorushgitnews cd gitnews zig build exe  ","kassane/intrusive":"boost.org intrusive module (uses zig build) boostintrusive  boostintrusive part of collection of the boost c librarieshttpgithubcomboostorg is a library presenting intrusive containers to the world of c intrusive containers are special containers that offer better performance and exception safety guarantees than nonintrusive containers like stl containers the performance benefits of intrusive containers makes them ideal as a building block to efficiently construct complex data structures like multiindex containers or to design high performance code like memory allocation algorithms while intrusive containers were and are widely used in c they became more and more forgotten in c due to the presence of the standard containers which dont support intrusive techniquesboostintrusive wants to push intrusive containers usage encapsulating the implementation in stllike interfaces hence anyone familiar with standard containers can easily use boostintrusive  license distributed under the boost software license version 10httpwwwboostorglicense10txt  properties  c03  headeronly  build status branch  travis  appveyor  coverity scan  codecovio  deps  docs  tests                  masterhttpsgithubcomboostorgintrusivetreemaster  build statushttpstravisciorgboostorgintrusivesvgbranchmasterhttpstravisciorgboostorgintrusive  build statushttpsciappveyorcomapiprojectsstatus9ckrveolxsonxfnbbranchmastersvgtruehttpsciappveyorcomprojectjeking3intrusive0k1xgbranchmaster  coverity scan build statushttpsscancoveritycomprojects16048badgesvghttpsscancoveritycomprojectsboostorgintrusive  codecovhttpscodecovioghboostorgintrusivebranchmastergraphbadgesvghttpscodecovioghboostorgintrusivebranchmaster depshttpsimgshieldsiobadgedepsmasterbrightgreensvghttpspdimovgithubioboostdepreportmasterintrusivehtml  documentationhttpsimgshieldsiobadgedocsmasterbrightgreensvghttpwwwboostorgdoclibsmasterdochtmlintrusivehtml  enter the matrixhttpsimgshieldsiobadgematrixmasterbrightgreensvghttpwwwboostorgdevelopmenttestsmasterdeveloperintrusivehtml develophttpsgithubcomboostorgintrusivetreedevelop  build statushttpstravisciorgboostorgintrusivesvgbranchdevelophttpstravisciorgboostorgintrusive  build statushttpsciappveyorcomapiprojectsstatus9ckrveolxsonxfnbbranchdevelopsvgtruehttpsciappveyorcomprojectjeking3intrusive0k1xgbranchdevelop  coverity scan build statushttpsscancoveritycomprojects16048badgesvghttpsscancoveritycomprojectsboostorgintrusive  codecovhttpscodecovioghboostorgintrusivebranchdevelopgraphbadgesvghttpscodecovioghboostorgintrusivebranchdevelop  depshttpsimgshieldsiobadgedepsdevelopbrightgreensvghttpspdimovgithubioboostdepreportdevelopintrusivehtml  documentationhttpsimgshieldsiobadgedocsdevelopbrightgreensvghttpwwwboostorgdoclibsdevelopdochtmlintrusivehtml  enter the matrixhttpsimgshieldsiobadgematrixdevelopbrightgreensvghttpwwwboostorgdevelopmenttestsdevelopdeveloperintrusivehtml  directories  name  purpose        doc  documentation   example  examples   include  headers   proj  ide projects   test  unit tests   more information  ask questionshttpstackoverflowcomquestionsasktagsc2b2bboostboostintrusive  report bugshttpsgithubcomboostorgintrusiveissues be sure to mention boost version platform and compiler youre using a small compilable code sample to reproduce the problem is always good as well  submit your patches as pull requests against develop branch note that by submitting patches you agree to license your modifications under the boost software license version 10httpwwwboostorglicense10txt  discussions about the library are held on the boost developers mailing listhttpwwwboostorgcommunitygroupshtmlmain be sure to read the discussion policyhttpwwwboostorgcommunitypolicyhtml before posting and add the intrusive tag at the beginning of the subject line ","kassane/zig-scudo":"scudo allocator for zig  scudozig scudo allocator for zig  requires  zighttpsziglangorgdownload v0130 or master  how to use bash  create a project  mkdir projectname  cd projectname  zig init  get zigscudo add on zon file  overwrited zig fetch savescudo githttpsgithubcomkassanezigscudo  in buildzig add zig  pkg name same in zon file const scudodep  bdependencyscudotarget  target optimize  optimize  const scudomodule  scudodepmodulescudoallocator  get lib  zig bindings  my project executable exerootmoduleaddimportscudoallocator scudomodule   references  llvmdoc scudo allocatorhttpsllvmorgdocsscudohardenedallocatorhtml  scudo hardened allocator  unofficial internalshttpswwwl3harriscomnewsroomeditorial202310scudohardenedallocatorunofficialinternalsdocumentation authored by rodrigo rubirahttpsgithubcomrrbranco  high level overview of scudohttpsexpertmiamiblogspotcom201905highleveloverviewofscudohtml by kostya  what is the scudo hardened allocatorhttpsexpertmiamiblogspotcom201905whatisscudohardenedallocator10html by kostya  googlerustscudohttpsgithubcomgooglerustscudo","deevus/zig-squarified":"this repository has no description.  zigsquarified  a library for generating squarified treemap layouts in zig   demo  zig build run  runs a basic raylib demo that displays a treemap  imageassetsdemopng   install as a zig package  zig fetch githttpsgithubcomdeevuszigsquarifiedgit savesquarified  import as a dependency in your buildzig zig const libsquarified  bdependencysquarified  const modulesquarified  libsquarifiedmodulesquarified  exerootmoduleaddimportsquarified modulesquarified    usage zig const squarify  importsquarified const squarify  squarifysquarifyf32   create your root node const root  node value  100 data  0 children  node node value  50 data  1  node value  30 data  2  node value  20 data  3      define your container const container  squarifyrect x  0 y  0 width  800 height  600    squarify const treemap  try squarifyinitallocatorsquarifycontainer root defer treemapdeinit    contributing pull requests and issues are welcome  enjoy creating fast squarified treemaps with zig ","kassane/unordered":"boost.org unordered module (uses zig build)  boostunordered branchhttpsimgshieldsiobadgebranchmasterbrightgreensvghttpsgithubcomboostorgunorderedtreemaster cihttpsgithubcomboostorgunorderedactionsworkflowsciymlbadgesvgbranchmasterhttpsgithubcomboostorgunorderedactionsworkflowsciyml drone statushttpsimgshieldsiodronebuildboostorgunorderedmasterserverhttps3a2f2fdronecppallogodronelogocolor23cccccclabelcihttpsdronecppalboostorgunordered build statushttpsimgshieldsioappveyorbuildcppallianceunorderedmasterlogoappveyorlabelcihttpsciappveyorcomprojectcppallianceunorderedbranchmaster codecovhttpscodecovioghboostorgunorderedbranchmastergraphbadgesvghttpscodecovioghboostorgunorderedbranchmaster depshttpsimgshieldsiobadgedepsmasterbrightgreensvghttpspdimovgithubioboostdepreportmasterunorderedhtml documentationhttpsimgshieldsiobadgedocsmasterbrightgreensvghttpswwwboostorgdoclibsmasterlibsunordereddochtmlunorderedhtml enter the matrixhttpsimgshieldsiobadgematrixmasterbrightgreensvghttpwwwboostorgdevelopmenttestsmasterdeveloperunorderedhtmlbr branchhttpsimgshieldsiobadgebranchdevelopbrightgreensvghttpsgithubcomboostorgunorderedtreedevelop cihttpsgithubcomboostorgunorderedactionsworkflowsciymlbadgesvgbranchdevelophttpsgithubcomboostorgunorderedactionsworkflowsciyml drone statushttpsimgshieldsiodronebuildboostorgunordereddevelopserverhttps3a2f2fdronecppallogodronelogocolor23cccccclabelcihttpsdronecppalboostorgunordered build statushttpsimgshieldsioappveyorbuildcppallianceunorderedmasterlogoappveyorlabelcihttpsciappveyorcomprojectcppallianceunorderedbranchdevelop codecovhttpscodecovioghboostorgunorderedbranchdevelopgraphbadgesvghttpscodecovioghboostorgunorderedbranchdevelop depshttpsimgshieldsiobadgedepsdevelopbrightgreensvghttpspdimovgithubioboostdepreportdevelopunorderedhtml documentationhttpsimgshieldsiobadgedocsdevelopbrightgreensvghttpswwwboostorgdoclibsdeveloplibsunordereddochtmlunorderedhtml enter the matrixhttpsimgshieldsiobadgematrixdevelopbrightgreensvghttpwwwboostorgdevelopmenttestsdevelopdeveloperunorderedhtmlbr bsl 10httpsimgshieldsiobadgelicensebsl10bluesvghttpswwwboostorguserslicensehtml img altc11 required srchttpsimgshieldsiobadgestandardc2b2b11bluesvg img altheaderonly library srchttpsimgshieldsiobadgebuildheaderonlybluesvg boostunordered offers a catalog of hash containers with different standards compliance levels performances and intented usage scenarios boostunorderedset boostunorderedmap boostunorderedmultiset boostunorderedmultimap ulfully conformant implementations of codestdunorderedmultisetmapcode but faster and up to the latest revisions of the standard even if youre working in an older version of c heterogeneous lookup codetryemplacecode codecontainscode etcul boostunorderedflatset boostunorderedflatmap ulthe fastest of the lot based on open addressing these containers slightly deviate from the standard in exchange for top performanceul boostunorderednodeset boostunorderednodemap ulvariations of codeboostunorderedflatsetmapcode providing pointer stabilityul boostconcurrentflatset boostconcurrentflatmap ulhigh performance for multithreaded scenarios introducing a new nonstandard iteratorfree apiul  learn about boostunordered  online documentationhttpsboostorglibsunordered  some benchmarkshttpsgithubcomboostorgboostunorderedbenchmarks  technical articles on boostunordered internal design  advancing the state of the art for stdunorderedmap implementationshttpsbannaliablogspotcom202206advancingstateofartforhtml  inside boostunorderedflatmaphttpsbannaliablogspotcom202211insideboostunorderedflatmaphtml  inside boostconcurrentflatmaphttpsbannaliablogspotcom202307insideboostconcurrentflatmaphtml  bulk visitation in boostconcurrentflatmaphttpsbannaliablogspotcom202310bulkvisitationinboostconcurrentflatmhtml  get the library boostunordered can be installed in a number of ways  download boosthttpswwwboostorgusersdownload and youre ready to go this is a headeronly library requiring no building  using conan 2 in case you dont have it yet add an entry for boost in your conanfiletxt the example requires at least boost 183  requires boost1830  ulif youre not using any compiled boost library the following will skip building altogetherul  options boostheaderonlytrue   using vcpkg execute the command  vcpkg install boostunordered   using cmake boost cmake support infrastructurehttpsgithubcomboostorgcmake allows you to use cmake directly to download build and consume all of boost or some specific libraries  support  join the boostunordered discussion group at cpplangslackcomhttpscpplangslackcom ask for an invitehttpscppallianceorgslack if youre not a member of this workspace yet  ask in the boost users mailing listhttpslistsboostorgmailmanlistinfocgiboostusers add the unordered tag at the beginning of the subject line  file an issuehttpsgithubcomboostorgunorderedissues  contribute  pull requestshttpsgithubcomboostorgunorderedpulls against develop branch are most welcome note that by submitting patches you agree to license your modifications under the boost software license version 10httpwwwboostorglicense10txt ","kassane/context":"`boost.context` library using zig build boostcontext  boostcontext is a foundational library that provides a sort of cooperative multitasking on a single thread by providing an abstraction of the current execution state in the current thread including the stack with local variables and stack pointer all registers and cpu flags and the instruction pointer a executioncontext instance represents a specific point in the applications execution path this is useful for building higherlevel abstractions like coroutines cooperative threads userland threads or an equivalent to c keyword yield in c a fiber provides the means to suspend the current execution path and to transfer execution control thereby permitting another fiber to run on the current thread this state full transfer mechanism enables a fiber to suspend execution from within nested functions and later to resume from where it was suspended while the execution path represented by a fiber only runs on a single thread it can be migrated to another thread at any given time a context switch between threads requires system calls involving the os kernel which can cost more than thousand cpu cycles on x86 cpus by contrast transferring control among fibers requires only fewer than hundred cpu cycles because it does not involve system calls as it is done within a single thread boostcontext requires c11 ","retrodev256/jitter_rng":"this repository has no description.  say hello to easypeasy true random this library exposes a stdrandom interface and jitter function  both will use cpu timing jitter to generate random numbers we make the following assumptions  your system has a cpu that supports high resolution timers  your system runs other processes at the same time as this one  your system has a nondeterministic cpu scheduler  your cpu is not some esoteric architecture while all of these assumptions must be held to ensure current theory in many cases not all of them are necessary to gain true randomness these assumptions mean that the cpus internal timer is not tied to the current execution of the program external variables such as cpu heat the cpu frequency the cpu scheduler and even cache misses will further add entropy to the timings of when instructions occur we harvest this entropy simply by sampling the high resolution cpu timer  ramenretrodevreposzigjitterrng zig build run doptimizereleasefast  rngtest stdin rngtest using practrand version 095 rng  rngstdin seed  unknown test set  core folding  standardunknown format rngrngstdin seedunknown length 2 megabytes 221 bytes time 21 seconds no anomalies in 111 test results rngrngstdin seedunknown length 4 megabytes 222 bytes time 62 seconds no anomalies in 127 test results rngrngstdin seedunknown length 8 megabytes 223 bytes time 125 seconds no anomalies in 139 test results rngrngstdin seedunknown length 16 megabytes 224 bytes time 244 seconds no anomalies in 153 test results rngrngstdin seedunknown length 32 megabytes 225 bytes time 436 seconds no anomalies in 169 test results rngrngstdin seedunknown length 64 megabytes 226 bytes time 825 seconds no anomalies in 182 test results rngrngstdin seedunknown length 128 megabytes 227 bytes time 160 seconds no anomalies in 199 test results rngrngstdin seedunknown length 256 megabytes 228 bytes time 313 seconds no anomalies in 217 test results rngrngstdin seedunknown length 512 megabytes 229 bytes time 547 seconds no anomalies in 232 test results  and so on    disclaimer please use battletested software i provide no guaruntees whatsoever in the case that your computer doesnt support this high resolution timer the rng may simply return 0 at all times beware ","dasimmet/zig-meta-allyourcode":"this repository has no description.  metaallyourcode lazy dependencies for zig build this repository is for writing buildzig configurations for other cc projects  cmake using the zig build system this repository bootstraps cmake 3301 without any system cmake or the usual shellscript method it takes a while and is only tested on x64 linux but can be used to build your cc dependency libraries the package also has a custom cmakestep that will configure and build and install a cmake project and providdes a installb name function to get the artifacts  zig fetch save httpsgithubcomdasimmetzigmetaallyourcodearchiverefsheadsmastertargz  buildzig from exampleexamplebuildzig  pub fn build void  const metaimport  blazyimportthis metaallyourcode if metaimport metaallyourcode  const cmakestep  metaallyourcodeaddcmakestepb  target  bstandardtargetoptions name  cmake sourcedir  bpath defines    cmakebuildtype if optimize  debug debug else release    cmakestepaddcmakedefine const installstep  cmakestepinstallb  bgetinstallstepdependoninstallstepstep    integrated builds  cmake including custom build step   stage1 linux   running bootstrap cmake to reconfigure itself with cczig cc   use zig built make to rebuild cmake   stage1 windows   stage1 macos  test building other cmake projects  try to link cmake fully static  test other architectures  libgit2   build for wasm32wasi  wabt   compile libwabt and wasm2wat   add buildzig include code ","vkensou/zgpu":"render hardware interface for zig  zgpu  abstract this is a render hardware interfacerhi for zig  platform support  api  windows  android  web    vulkan  heavycheckmark  heavycheckmark    webgpu    calendar  examples zig build rundemo dwantdemotrue","fogti/esvc2":"esvc, but flattened  event sourcing version control see the esvc v1 repo for an intro  related literature  partially commutative inverse monoidshttpswwwetiunisiegendetiveroeffentlichungen06mfcsinvpdf ","kassane/range-v3":"range library for c++14/17/20, basis for c++20's std::ranges (uses zig build-system) rangev3  range library for c141720 this code was the basis of a formal proposalhttpsericnieblergithubiostdwg21d4128html to add range support to the c standard library that proposal evolved through a technical specification and finally into p0896r4 the one ranges proposalhttpswg21linkp0896r4 which was merged into the c20 working drafts in november 2018 about  ranges are an extension of the standard template library that makes its iterators and algorithms more powerful by making them composable unlike other rangelike solutions which seek to do away with iterators in rangev3 ranges are an abstraction layer on top of iterators rangev3 is built on three pillars views actions and algorithms the algorithms are the same as those with which you are already familiar in the stl except that in rangev3 all the algorithms have overloads that take ranges in addition to the overloads that take iterators views are composable adaptations of ranges where the adaptation happens lazily as the view is iterated and an action is an eager application of an algorithm to a container that mutates the container inplace and returns it for further processing views and actions use the pipe syntax eg rng  adapt1  adapt2   so your code is terse and readable from left to right documentation  check out the woefully incomplete documentation herehttpsericnieblergithubiorangev3 other resources mind the dates the library probably has changed since then  usage  talk cppcon 2015 eric niebler ranges for the standard libraryhttpswwwyoutubecomwatchvmfuxnmfacie 2015  a slice of python in chttpericnieblercom20141207asliceofpythoninc 07122014  actions back then called container algorithmshttpericnieblercom20141123containeralgorithms 23112014  range comprehensionshttpericnieblercom20140427rangecomprehensions 27042014  input iterators vs input rangeshttpericnieblercom20131107inputiteratorsvsinputranges 07112013  design  implementation  rationale behind rangev3 n4128 ranges for the standard library revision 1httpwwwopenstdorgjtc1sc22wg21docspapers2014n4128html 2014  ranges ts n4560 c extensions for rangeshttpwwwopenstdorgjtc1sc22wg21docspapers2015n4560pdf 2015  implementation of customization points in rangev3  n4381 suggested design for customization pointshttpwwwopenstdorgjtc1sc22wg21docspapers2015n4381html 2015  p0386 inline variableshttpwwwopenstdorgjtc1sc22wg21docspapers2016p0386r0pdf 2016  customization point design in c11 and beyondhttpericnieblercom20141021customizationpointdesigninc11andbeyond 2014  proxy iterators in rangev3  d0022 proxy iterators for the ranges extensionshttpsericnieblergithubiostdwg21d0022html  to be or not to be an iteratorhttpericnieblercom20150128tobeornottobeaniterator 2015  iterators part1httpericnieblercom20150203iteratorspluspluspart1 2015  iterators part2httpericnieblercom20150213iteratorspluspluspart2 2015  iterators part3httpericnieblercom20150303iteratorspluspluspart3 2015  metaprogramming utilities  see the meta documentationhttpsericnieblergithubiometaindexhtml the library has changed significantly since the 2014 blog posthttpericnieblercom20141113tinymetaprogramminglibrary  concept emulation layer concept checking in c11httpericnieblercom20131123conceptcheckinginc11 2013  cnow 2014 eric niebler c11 library designhttpswwwyoutubecomwatchvzgof4nrqllo 2014 license  most of the source code in this project are mine and those are under the boost software license parts are taken from alex stepanovs elements of programming howard hinnants libc and from the sgi stl please see the attached license file and the credits file for the licensing and acknowledgments supported compilers  the code is known to work on the following compilers  clang 50 or later  gcc 65 or later  clangllvm 6 or later on windows older versions may work  we havent tested  visual studio 2019 or later on windows with some caveats due to rangev3s strict conformance requirements  rangev3 needs permissive and either stdclatest stdc20 or stdc17 development status this code is fairly stable welltested and suitable for casual use although currently lacking documentation in general no promise is made about support or longterm stability this code will evolve without regard to backwards compatibility a notable exception is anything found within the rangescpp20 namespace those components will change rarely or preferably never at all build status  on github actions github actions statushttpsgithubcomericnieblerrangev3workflowsrangev320cibadgesvgbranchmasterhttpsgithubcomericnieblerrangev3actions building rangev3  using vcpkg  you can download and install rangev3 using the vcpkghttpsgithubcommicrosoftvcpkg dependency manager sh git clone httpsgithubcommicrosoftvcpkggit cd vcpkg bootstrapvcpkgsh vcpkg integrate install vcpkg install rangev3  the rangev3 port in vcpkg is kept up to date by microsoft team members and community contributors if the version is out of date please create an issue or pull requesthttpsgithubcommicrosoftvcpkg on the vcpkg repository building rangev3  using conan  you can download and install rangev3 using the conanhttpsgithubcomconanioconan dependency manager setup your cmakeliststxt see conan documentationhttpsdocsconanioenlatestintegrationsbuildsystemhtml on how to use msbuild meson and others cmake projectmyproject cxx addexecutableprojectname maincpp includecmakebinarydirconanbuildinfocmake  include conangenerated file conanbasicsetuptargets  introduce conangenerated targets targetlinklibrariesprojectname conanpkgrangev3  create conanfiletxt in your source dir sh requires rangev30120 generators cmake  install and run conan then build your project as always sh pip install conan mkdir build cd build conan install  buildmissing cmake  cmake build   building rangev3  using build2  you can use build2httpsbuild2org a dependency manager and buildsystem combined to use rangev3 or work on it currently this package is available in these package repositories ","zon-dev/mime":"support mime (http media types) types parse in zig.  mime support mime http media types types parse in zig  usage zig var mime  mimeparsestdheappageallocator textplain charsetutf8 foobar try stdtestingexpectmime  null try stdtestingexpectstdmemeqlu8 mimeessence textplain charsetutf8 foobar try stdtestingexpectstdmemeqlu8 mimebasetype text try stdtestingexpectstdmemeqlu8 mimesubtype plain const charset  mimegetparamcharset try testingexpectequalstringsutf8 charset const foo  mimegetparamfoo try testingexpectequalstringsbar foo const bar  mimegetparambar try testingexpectbar  null  ","kassane/cpu_features":"a cross platform c99 library to get cpu features at runtime.  cpufeatures a crossplatform c library to retrieve cpu features such as available instructions at runtime  githubci status comment  the following lines are generated by scriptsgeneratebadgesd that you can run online httpsrundlangio   linux  freebsd  macos  windows              amd64  cmakei1a0l1a0brbazeli1a1l1a1  cmakei2a0l2a0brbazeld1  cmakei3a0l3a0brbazeli3a1l3a1  cmakei4a0l4a0brbazeld1   aarch64  cmakei1b0l1b0brbazeli1b1l1b1  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1   arm  cmakei1c0l1c0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1   mips  cmakei1d0l1d0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1   power  cmakei1e0l1e0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1   riscv  cmakei1f0l1f0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1   loongarch  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1   s390x  cmakei1h0l1h0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1  cmaked0brbazeld1  d0 httpsimgshieldsiobadgen2falightgreylogocmake d1 httpsimgshieldsiobadgen2falightgreylogodataimagesvg2bxmlbase64phn2zybyb2xlpsjpbwciihzpzxdcb3g9ijagmcayncayncigeg1sbnm9imh0dha6ly93d3cudzmub3jnlziwmdavc3znij48cgf0acbkpsjnniaumtzsns43odygns43odzmniaxms43mziumje0iduuotq2idyglje2mxpnmca2ljixnfyxmmw1ljc4nia1ljc4nlyxmkwwidyumje0ek0xocaumtzsns43odygns43odzmmtggmteunzmybc01ljc4ni01ljc4nkwxocaumtyxek0ynca2ljixnfyxmmwtns43odygns43odzwmtjmmjqgni4ymtr6tteyidyumtzsns43odygns43odzmmtigmtcunzmybc01ljc4ni01ljc4nkwxmia2lje2mxpnmteuodqgmtgumdu0djuunzg1bc01ljc4ni01ljc4nxytns43odzsns43odugns43odz6tteylje2ide4lja1ngw1ljc4ni01ljc4nny1ljc4nmwtns43odugns43odv2ltuunzg1eiigc3ryb2tlpsj0cmfuc3bhcmvudcigzmlsbd0id2hpdguilz48l3n2zz4 i1a0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesamd64linuxcmakeymlbranchmaineventpushlabellogocmake i1a1 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesamd64linuxbazelymlbranchmaineventpushlabellogodataimagesvg2bxmlbase64phn2zybyb2xlpsjpbwciihzpzxdcb3g9ijagmcayncayncigeg1sbnm9imh0dha6ly93d3cudzmub3jnlziwmdavc3znij48cgf0acbkpsjnniaumtzsns43odygns43odzmniaxms43mziumje0iduuotq2idyglje2mxpnmca2ljixnfyxmmw1ljc4nia1ljc4nlyxmkwwidyumje0ek0xocaumtzsns43odygns43odzmmtggmteunzmybc01ljc4ni01ljc4nkwxocaumtyxek0ynca2ljixnfyxmmwtns43odygns43odzwmtjmmjqgni4ymtr6tteyidyumtzsns43odygns43odzmmtigmtcunzmybc01ljc4ni01ljc4nkwxmia2lje2mxpnmteuodqgmtgumdu0djuunzg1bc01ljc4ni01ljc4nxytns43odzsns43odugns43odz6tteylje2ide4lja1ngw1ljc4ni01ljc4nny1ljc4nmwtns43odugns43odv2ltuunzg1eiigc3ryb2tlpsj0cmfuc3bhcmvudcigzmlsbd0id2hpdguilz48l3n2zz4 i1b0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesaarch64linuxcmakeymlbranchmaineventpushlabellogocmake i1b1 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesaarch64linuxbazelymlbranchmaineventpushlabellogodataimagesvg2bxmlbase64phn2zybyb2xlpsjpbwciihzpzxdcb3g9ijagmcayncayncigeg1sbnm9imh0dha6ly93d3cudzmub3jnlziwmdavc3znij48cgf0acbkpsjnniaumtzsns43odygns43odzmniaxms43mziumje0iduuotq2idyglje2mxpnmca2ljixnfyxmmw1ljc4nia1ljc4nlyxmkwwidyumje0ek0xocaumtzsns43odygns43odzmmtggmteunzmybc01ljc4ni01ljc4nkwxocaumtyxek0ynca2ljixnfyxmmwtns43odygns43odzwmtjmmjqgni4ymtr6tteyidyumtzsns43odygns43odzmmtigmtcunzmybc01ljc4ni01ljc4nkwxmia2lje2mxpnmteuodqgmtgumdu0djuunzg1bc01ljc4ni01ljc4nxytns43odzsns43odugns43odz6tteylje2ide4lja1ngw1ljc4ni01ljc4nny1ljc4nmwtns43odugns43odv2ltuunzg1eiigc3ryb2tlpsj0cmfuc3bhcmvudcigzmlsbd0id2hpdguilz48l3n2zz4 i1c0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesarmlinuxcmakeymlbranchmaineventpushlabellogocmake i1d0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesmipslinuxcmakeymlbranchmaineventpushlabellogocmake i1e0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturespowerlinuxcmakeymlbranchmaineventpushlabellogocmake i1f0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesriscvlinuxcmakeymlbranchmaineventpushlabellogocmake i1h0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturess390xlinuxcmakeymlbranchmaineventpushlabellogocmake i2a0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesamd64freebsdcmakeymlbranchmaineventpushlabellogocmake i3a0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesamd64macoscmakeymlbranchmaineventpushlabellogocmake i3a1 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesamd64macosbazelymlbranchmaineventpushlabellogodataimagesvg2bxmlbase64phn2zybyb2xlpsjpbwciihzpzxdcb3g9ijagmcayncayncigeg1sbnm9imh0dha6ly93d3cudzmub3jnlziwmdavc3znij48cgf0acbkpsjnniaumtzsns43odygns43odzmniaxms43mziumje0iduuotq2idyglje2mxpnmca2ljixnfyxmmw1ljc4nia1ljc4nlyxmkwwidyumje0ek0xocaumtzsns43odygns43odzmmtggmteunzmybc01ljc4ni01ljc4nkwxocaumtyxek0ynca2ljixnfyxmmwtns43odygns43odzwmtjmmjqgni4ymtr6tteyidyumtzsns43odygns43odzmmtigmtcunzmybc01ljc4ni01ljc4nkwxmia2lje2mxpnmteuodqgmtgumdu0djuunzg1bc01ljc4ni01ljc4nxytns43odzsns43odugns43odz6tteylje2ide4lja1ngw1ljc4ni01ljc4nny1ljc4nmwtns43odugns43odv2ltuunzg1eiigc3ryb2tlpsj0cmfuc3bhcmvudcigzmlsbd0id2hpdguilz48l3n2zz4 i4a0 httpsimgshieldsiogithubactionsworkflowstatusgooglecpufeaturesamd64windowscmakeymlbranchmaineventpushlabellogocmake l1a0 httpsgithubcomgooglecpufeaturesactionsworkflowsamd64linuxcmakeyml l1a1 httpsgithubcomgooglecpufeaturesactionsworkflowsamd64linuxbazelyml l1b0 httpsgithubcomgooglecpufeaturesactionsworkflowsaarch64linuxcmakeyml l1b1 httpsgithubcomgooglecpufeaturesactionsworkflowsaarch64linuxbazelyml l1c0 httpsgithubcomgooglecpufeaturesactionsworkflowsarmlinuxcmakeyml l1d0 httpsgithubcomgooglecpufeaturesactionsworkflowsmipslinuxcmakeyml l1e0 httpsgithubcomgooglecpufeaturesactionsworkflowspowerlinuxcmakeyml l1f0 httpsgithubcomgooglecpufeaturesactionsworkflowsriscvlinuxcmakeyml l1h0 httpsgithubcomgooglecpufeaturesactionsworkflowss390xlinuxcmakeyml l2a0 httpsgithubcomgooglecpufeaturesactionsworkflowsamd64freebsdcmakeyml l3a0 httpsgithubcomgooglecpufeatures","kassane/fmt":"a modern formatting library (uses zig build-system) img srchttpsuserimagesgithubusercontentcom576385156254208f5b743a988cf439db0c0923d53e8d551png altfmt width25 imagehttpsgithubcomfmtlibfmtworkflowslinuxbadgesvghttpsgithubcomfmtlibfmtactionsqueryworkflow3alinux imagehttpsgithubcomfmtlibfmtworkflowsmacosbadgesvghttpsgithubcomfmtlibfmtactionsqueryworkflow3amacos imagehttpsgithubcomfmtlibfmtworkflowswindowsbadgesvghttpsgithubcomfmtlibfmtactionsqueryworkflow3awindows fmt is continuously fuzzed at ossfuzzhttpsossfuzzbuildlogsstoragegoogleapiscombadgesfmtsvghttpsbugschromiumorgpossfuzzissueslist0acolspecid20type20component20status20proj20reported20owner200asummaryqproj3dfmtcan1 ask questions at stackoverflow with the tag fmthttpsimgshieldsiobadgestackoverflowfmtbluesvghttpsstackoverflowcomquestionstaggedfmt imagehttpsapisecurityscorecardsdevprojectsgithubcomfmtlibfmtbadgehttpssecurityscorecardsdevviewerurigithubcomfmtlibfmt fmt is an opensource formatting library providing a fast and safe alternative to c stdio and c iostreams if you like this project please consider donating to one of the funds that help victims of the war in ukraine httpswwwstopputinnet documentationhttpsfmtdev cheat sheetshttpshackingcppcomcpplibsfmthtml qa ask questions on stackoverflow with the tag fmthttpsstackoverflowcomquestionstaggedfmt try fmt in compiler explorerhttpsgodboltorgz8mx1ew73v  features  simple format apihttpsfmtdevlatestapi with positional arguments for localization  implementation of c20 stdformathttpsencppreferencecomwcpputilityformat and c23 stdprinthttpsencppreferencecomwcppioprint  format string syntaxhttpsfmtdevlatestsyntax similar to pythons formathttpsdocspythonorg3librarystdtypeshtmlstrformat  fast ieee 754 floatingpoint formatter with correct rounding shortness and roundtrip guarantees using the dragonboxhttpsgithubcomjkjeondragonbox algorithm  portable unicode support  safe printf implementationhttpsfmtdevlatestapiprintfformatting including the posix extension for positional arguments  extensibility support for userdefined typeshttpsfmtdevlatestapiformattinguserdefinedtypes  high performance faster than common standard library implementations of sprintf iostreams tostring and tochars see speed testsspeedtests and converting a hundred million integers to strings per secondhttpwwwzverovichnet20200613fastinttostringrevisitedhtml  small code size both in terms of source code with the minimum configuration consisting of just three files coreh formath and formatinlh and compiled code see compile time and code bloatcompiletimeandcodebloat  reliability the library has an extensive set of testshttpsgithubcomfmtlibfmttreemastertest and is continuously fuzzedhttpsbugschromiumorgpossfuzzissueslistcolspecid20type20component20status20proj20reported20owner20summaryqproj3dfmtcan1  safety the library is fully typesafe errors in format strings can be reported at compile time automatic memory management prevents buffer overflow errors  ease of use small selfcontained code base no external dependencies permissive mit licensehttpsgithubcomfmtlibfmtblobmasterlicense  portabilityhttpsfmtdevlatestportability with consistent output across platforms and support for older compilers  clean warningfree codebase even on high warning levels such as wall wextra pedantic  locale independence by default  optional headeronly configuration enabled with the fmtheaderonly macro see the documentationhttpsfmtdev for more details  examples print to stdout runhttpsgodboltorgztevcjh  c include fmtcoreh int main  fmtprinthello worldn   format a string runhttpsgodboltorgzok8h33  c stdstring s  fmtformatthe answer is  42  s  the answer is 42  format a string using positional arguments runhttpsgodboltorgzyn7txe  c stdstring s  fmtformatid rather be 1 than 0 right happy  s  id rather be happy than right  print dates and times runhttpsgodboltorgzc31exdy3w  c include fmtchronoh int main  auto now  stdchronosystemclocknow fmtprintdate and time n now fmtprinttime hmn now   output date and time 20231226 191031557195597 time 1910 print a container runhttpsgodboltorgzmxm1yqje7  c include vector include fmtrangesh int main  stdvectorint v  1 2 3 fmtprintn v   output 1 2 3 check a format string at compile time  c stdstring s  fmtformatd i am not a number  this gives a compiletime error in c20 because d is an invalid format specifier for a string write a file from a single thread  c include fmtosh int main  auto out  fmtoutputfileguidetxt outprintdont  panic   this can be 5 to 9 times faster than fprintfhttpwwwzverovichnet20200804optimalfilebuffersizehtml print with colors and text styles  c include fmtcolorh int main  fmtprintfgfmtcolorcrimson  fmtemphasisbold hello n world fmtprintfgfmtcolorfloralwhite  bgfmtcolorslategray  fmtemphasisunderline ol n mundo fmtprintfgfmtcolorsteelblue  fmtemphasisitalic n    output on a modern terminal with unicode support imagehttpsgithubcomfmtlibfmtassets0a5763852a93c904d6fa4aa6b4532618e1c327d7  benchmarks  speed tests  library  method  run time s    libc  printf  091   libc  stdostream  249   fmt 91  fmtprint  074   boost format 180  boostformat  626   folly format  follyformat  187  fmt is the fastest of the benchmarked methods 20 faster than printf the above results were generated by building tinyformattestcpp on macos 1261 with clang o3 dndebug dspeedtest dhaveformat and taking the best of three runs in the test the format string 010f04dgspcn or equivalent is filled 2000000 times with output sent to devnull for further details refer to the ","rohanvashisht1234/simplelinearregression.zig":"a simple linear regression model built from scratch in zig programming language.  simplelinearregression library for zig programming language  how to use  run the fetch command zig zig fetch save httpsgithubcomrohanvashisht1234simplelinearregressionzigarchiverefstagsv000targz   add the following to your buildzig file just above binstallartifactexe zig const simplelinearregression  bdependencysimplelinearregression  target  target optimize  optimize  exerootmoduleaddimportsimplelinearregression simplelinearregressionmodulesimplelinearregression   now you can add the following code to srcmainzig zig const std  importstd const simplelinearregression  importsimplelinearregression pub fn main void  const data    x  y  12 393440   14 462060     var slr  simplelinearregressioninitdata const y  slrpredict110 stddebugprinty dn y stddebugprintm dn slrm stddebugprintc dn slrc    you can check the examples folder for better examples ","speed2exe/subcommander":"this repository has no description.  subcommander  command line parser with sub commands  features  no heap allocation  declarative  add as dependency to your zig project  buildzigzon   dependencies   subcommander    use a commit hash url  httpsgithubcomspeed2exesubcommanderarchive52c42f27cc888d3a9a0fbda6889b8a931ca673betargz  upon compilation you will get an error with the correct hash  replace the following hash with the correct hash hash  1220cea02c171a09873b197687c80a0e1a632e58ab99b779d2d5b0090c116efe5348      buildzig zig  const subcommanderdep  bdependencysubcommander  const subcommander  subcommanderdepmodulesubcommander exeaddmodulesubcommander subcommander    compatibility  not compatible with windows yet  usage zig const std  importstd const subcommander  importsubcommander fn main void   build your commands and flags here  define what flags to parse const mycommands subcommandercommand    if not specified will parse the flags then subcommands if any  this will be the name of the program  eg greet nameworld  usually you would want to skip this dont specify since the name of executable will not be consistent  for majority of use cases   match  greet  fn to execute when the command is matched execute  greethandler  flags are local to the command greet flags    short  n long  name description  name to greet   short  h long  help description  print help    subcommands are command that follows after match subcommands    match  tom execute  greettomhandler flags    addition flags after tom  eg args greet tom tomflag5        run commands with args from the command line  flag value type 0const u8  success  mygreet nameworld  flag value for name world  mygreet name  flag value for name   mygreet name  flag value for name null  mygreet   we are skipping the first argument since it is the name of the program  therefore flags are parsed first then subcommands try mycommandsrunstdosargv1   function signature for greethandler fn greethandlerinput const subcommanderinputcommand void   get the command that was matched stddebugprints inputname  prints greet  iterate over the flags for greet var flagiter  inputflagiterrec while flagiternext flag  const value 0const u8  flagvalue  do something with the flag   call next to get the subcommand if any if inputnext nextinput   nextinput is same type as input    ","tiawl/libjq.zig":"@jqlang c api packaged for @ziglang  libjqzig this is a fork of jqlangjq1 to package the libjq c api for zig2  why this fork  the intention under this fork is to package jqlangjq1 for zig2 so  unnecessary files have been deleted  the build system has been replaced with buildzig  a cron runs every day to check jqlangjq1 then it updates this repository if a new release is available  how to use it the goal of this repository is not to provide a zig2 binding for jqlangjq1 there are at least as many legit ways as possible to make a binding as there are active accounts on github so you are not going to find an answer for this question here the point of this repository is to abstract the jqlangjq1 compilation process with zig2 which is not new comers friendly and not easy to maintain to let you focus on your application so you can use libjqzig  as raw see the examples directoryhttpsgithubcomtiawllibjqzigblobtrunkexamples  as a daily updated interface for your zig2 binding of jqlangjq1 an available exemple is coming soon  dependencies the zig2 part of this package is relying on the latest zig2 release 0130 and will only be updated for the next one so for the 0140 here the repositories version used by this fork  jqlangjqhttpsgithubcomtiawllibjqzigblobtrunkreferencesjq  cicd reminder these repositories are automatically updated when a new release is available  coming soon this repository is automatically updated when a new release is available from these repositories  jqlangjq1  tiawltoolbox3  tiawlonigurumazig9  tiawlspacepornactionenv8  tiawlspacepornactionbot4  tiawlspacepornactionci5 todo  tiawlspacepornactioncdping6 todo  tiawlspacepornactioncdpong7  zig build options these additional options have been implemented for maintainability tasks  dfetch update references folder and buildzigzon then stop execution dupdate update binding   license this repository is not subject to a unique license the parts of this repository originated from this repository are dedicated to the public domain see the license file for more details for other parts it is subject to the license restrictions their respective owners choosed by design the public domain code is incompatible with the license notion in this case the license prevails so if you have any doubt about a file property open an issue 1httpsgithubcomjqlangjq 2httpsgithubcomziglangzig 3httpsgithubcomtiawltoolbox 4httpsgithubcomtiawlspacepornactionbot 5httpsgithubcomtiawlspacepornactionci 6httpsgithubcomtiawlspacepornactioncdping 7httpsgithubcomtiawlspacepornactioncdpong 8httpsgithubcomtiawlspacepornactionenv 9httpsgithubcomtiawlonigurumazig ","zenolith-ui/zenolith-sdl2":"mirror of https://git.mzte.de/zenolith/zenolith-sdl2  zenolithsdl2 an experimental sdl2 backend for zenolithhttpsgitmztedezenolithzenolith this backend mostly exists as an early prototype for early development  todo  x implementation of the painter api  x font rendering freetypebased    word wrap    character wrap    font discovery    multiwindow    window property api ","matthew12o/zig-finance-calendar":"financial calendar library is built natively in zig and handles basic date, datetime, and calendar functions 404 not found","allyourcodebase/cpputest":"package for cpputest 404 not found","bcrist/shittip":"another shitty http server  shittip  a shitty http server ","mrtowers/zig-rc":"reference counting module for zig  warning  zigrc is still wip im still doing breaking changes  reference counting smart pointer for zig a simple and efficient implementation of a reference counting smart pointer for zig this library helps manage the lifetime of heapallocated objects by automatically tracking references and freeing memory when no references remain  features  automatic memory management simplifies memory handling by automatically freeing unused resources  threadsafe optional includes optional support for atomic reference counting for multithreaded applications  lightweight designed to be minimal and efficient  installation  adding to your project bash zig fetch save githttpsgithubcommrtowerszigrc  in buildzig zig const rc  bdependencyzigrc  target  target optimize  optimize  yourapprootmoduleaddimportrc rcmodulerc   usage  basic example zig const std  importstd const rc  importrcgeneratei32  pub fn main void  var allocator  stdheappageallocator  create a new referencecounted object var ptr  try rcinitallocator 1234  access the value stddebugprintvalue n ptrvalue  clone the pointer increments the reference count var ptrclone  ptrref  both pointers are valid stddebugprintcloned value n ptrclonevalue  release references automatically decrements the count   ptrderef   ptrclonederef    license this project is licensed under the mit license see the licenselicense file for details  contributing contributions are welcome feel free to open issues or submit pull requests also you can donate me herehttpsbuymeacoffeecommrtowers this helps alot mainly becouse i drink a lot of coffee happy coding  ","vibrantrida/mruby-zig":"mruby 3.3.0 bindings for zig 0.13.0  mrubyzig mrubyhttpsmrubyorg bindings for zighttpsziglangorg mruby is the lightweight implementation of the ruby language complying with part of the iso standard mruby documentation can be found herehttpsmrubyorgdocsapi  environment variables i encountered some quirks when building on windows powershell so i had to remove the setting of environment variables from buildzig now you have to set it manually so before anything else be sure to set the following environment variables temporarily sh  windows  powershell envcc  zig cc envcxx  zig c envar  zig ar  nix cc  zig cc cxx  zig c ar  zig ar  if that doesnt work use absolute path  embedding to embed mruby into another zig project you just need to recursively clone this repository and add a couple of lines to your buildzig  add the following lines to buildzig with the paths changed to match the correct location zig const addmruby  importmrubyzigbuildzigaddmruby pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const exe  baddexecutable name  example rootsourcefile   path  srcmainzig  target  target optimize  optimize  binstallartifactexe addmrubytarget b exe      import mruby and start a new interpreter zig const std  importstd const mruby  importmruby pub fn main anyerrorvoid   opening a state var mrb  try mrubyopen defer mrbclose  loading a program from a string   mrbloadstringputs hello from ruby    example see examplesmainzig ","ajkachnic/fasthttpparser":"a moderately fast http 1.1 parser written in zig.  fasthttpparser note this is unstable and the api is likely to change use at your own risk a http 11 parser written in zig currently competes with httparsehttpshttpsgithubcomseanmonstarhttparse and is beaten by picohttpparserhttpsgithubcomh20picohttpparser  benchmarks  parser  onelong  oneshort  smaller  bigger    fasthttpparser  108gbs  98754mbs  98680mbs  98449mbs   picohttpparser  304gbs  299gbs  306gbs  306gbs  you can run these yourself with zig build bench ill eventually extend the benchmark suite to include httparse but i dont feel like dealing with rustzig interop test harness is written in zig at the moment  installation since the parser ships as a single file fasthttpparserzig you can just drop that into your project then you could add it to your buildzig file as a package or just import it directly ","andy5995/zigpokerhands":"a program that uses zigdeck to evaluate five cards to determine if it matches a poker hand linux cihttpsgithubcomandy5995zigpokerhandsactionsworkflowslinuxymlbadgesvghttpsgithubcomandy5995zigpokerhandsactionsworkflowslinuxyml  zigpokerhands a program that uses zigdeckhttpsgithubcomandy5995zigdeck to evaluate five cards to determine if it matches a poker hand  output examples  evaluating 1000000 hands pair 421692 twopair 47047 threeofakind 20578 straight 4090 flush 2514 fullhouse 1450 fourofakind 244 straightflush 18 royalflush 1   evaluating 1000000 hands pair 421887 twopair 47001 threeofakind 20558 straight 4168 flush 2511 fullhouse 1378 fourofakind 225 straightflush 21 royalflush 0   evaluating 1000000 hands pair 420623 twopair 47240 threeofakind 20832 straight 4136 flush 2587 fullhouse 1391 fourofakind 252 straightflush 19 royalflush 2  ","kassane/observable_unique_ptr":"unique-ownership smart pointers with observable lifetime. (uses zig build)  observableuniqueptr observablesealedptr observerptr build statushttpsgithubcomcschreibobservableuniqueptractionsworkflowscmakeymlbadgesvg docs build statushttpsgithubcomcschreibobservableuniqueptractionsworkflowsdocymlbadgesvg codecovhttpscodecovioghcschreibobservableuniqueptrbranchmaingraphbadgesvgtoken8c11d2u94dhttpscodecovioghcschreibobservableuniqueptr built and tested on  linux gccclang  windows msvc 3264  macos clang  webassembly emscripten table of content  markdowntoc autolinktrue   introductionintroduction  usageusage  enableobserverfromthisenableobserverfromthis  policiespolicies  limitationslimitations  thread safetythreadsafety  comparison spreadsheetcomparisonspreadsheet  speed benchmarksspeedbenchmarks  alternative implementationalternativeimplementation  markdowntoc   introduction this is a small headeronly library providing the uniqueownership smart pointers observableuniqueptr and observablesealedptr that can be observed with nonowning pointers observerptr this is a mixture of stduniqueptr and stdsharedptr it borrows the uniqueownership semantic of stduniqueptr movable noncopiable but allows creating observerptr to monitor the lifetime of the pointed object like stdweakptr for stdsharedptr the only difference between observableuniqueptr and observablesealedptr is that the former can release ownership while the latter cannot disallowing release of ownership enables allocation optimizations therefore the recommendation is to use observablesealedptr unless release of ownership is required these pointers are useful for cases where the sharedownership of stdsharedptr is not desirable eg when lifetime must be carefully controlled and not be allowed to extend yet nonowningweakobserver references to the object may exist after the object has been deleted note because of the unique ownership model observer pointers cannot extend the lifetime of the pointed object hence this library provides less safety compared to stdsharedptrstdweakptr see the thread safetythreadsafety section this is also true of stduniqueptr and is a fundamental limitation of unique ownership if this is an issue simply use stdsharedptrstdweakptr  usage this is a headeronly library requiring a c17compliant compiler you have multiple ways to set it up  just include this repository as a submodule in your own git repository and use cmake addsubdirectory or use cmake fetchcontent then link with targetlinklibrariesyourtarget public oupoup  download the header and include it in your own sources from there include the single header oupobservableuniqueptrhpp and directly use the smart pointer in your own code c include oupobservableuniqueptrhpp include string include iostream include cassert int main   nonowning pointer that will outlive the object oupobserverptrstdstring obsptr   sealed unique pointer that owns the object auto ownerptr  oupmakeobservablesealedstdstringhello  a sealed pointer cannot be copied but it can be moved  auto tmpcopied  ownerptr  error  auto tmpmoved  stdmoveownerptr  ok  make the observer pointer point to the object obsptr  ownerptr  the observer pointer is now valid assertobsptrexpired  it can be used like a regular raw pointer assertobsptr  nullptr stdcout  obsptr  stdendl  an observer pointer can be copied and moved  auto tmpcopied  obsptr  ok  auto tmpmoved  stdmoveobsptr  ok   the sealed pointer has gone out of scope the object is deleted  the observer pointer is now null assertobsptrexpired assertobsptr  nullptr return 0    enableobserverfromthis as with stdsharedptrstdweakptr if you need to obtain an observer pointer to an object when you only have this ie from a member function you can inherit from oupenableobserverfromthisuniquet or oupenableobserverfromthissealedt depending on the type of the owner pointer to gain access to the observerfromthis member function contrary to stdenablesharedfromthist this function is noexcept and is able to return a valid observer pointer at all times even if the object is being constructed or is not owned by a unique or sealed pointer also contrary to stdenablesharedfromthist this feature naturally supports multiple inheritance to achieve this the price to pay is that oupenableobserverfromthisuniquet uses virtual inheritance while oupenableobserverfromthissealedt requires ts constructor to take a control block as input thereby preventing t from being defaultconstructible copiable or movable if needed these tradeoffs can be controlled by policies see below  policies similarly to stdstring and stdbasicstring this library provides both convenience types oupobservableuniqueptrtdeleter oupobservablesealedptrt oupobserverptrt oupenableobservablefromthisuniquet oupenableobservablefromthissealedt and generic types oupbasicobservableptrtdeleterpolicy oupbasicobserverptrtobspolicy oupbasicenableobservablefromthistpolicy if the tradeoffs chosen to defined the convenience types are not appropriate for your use cases they can be finetuned using the generic classes and providing your own choice of policies please refer to the documentation for more information on policies in particular policies will control most of the api and behavior of the enableobservablefromthis feature as well as allowing you to tune the size of the reference counting object speedmemory tradeoff  limitations the following limitations are features that were not implemented simply because of lack of motivation  this library is not threadsafe contrary to stdsharedptr see the thread safetythreadsafety section for more info  this library does not support pointers to arrays but stduniqueptr and stdsharedptr both do  this library does not support custom allocators but stdsharedptr does  thread safety this library uses reference counting to handle observable and observer pointers the current implementation does not use any synchronization mechanism mutex lock etc to wrap operations on the reference counter therefore it is unsafe to have an observable pointer on one thread being observed by obs","liyu1981/translate_c_extract":"a simple tool to clean zig translate-c result with annotation.  translatecextract a simple tool to clean zig translatec result with annotation  see it by example example helloh c ifndef helloh define helloh include stddefh include stdinth  translatec providebegin definestkss define consta a define constone 1  translatec provideend definestkss  translatec provide regexmatchresult typedef struct  sizet start sizet len  loc  translatec provide getlasterrormessage void getlasterrormessageloc loc  translatec provide mycreateahellostring int mycreateahellostringchar buf endif  if zig build run  testshelloh will produce zig  generated by  zigcacheob211bd45d7e3d2d5cee3d2849990c1b8translatecextract testshelloh   timestamp 1706073955549678 pub extern fn getlasterrormessageloc cloc void pub extern fn mycreateahellostringbuf ccu8 cint pub const consta  a pub const constone  ascint 1   annotation syntax if use  translatec provide name the name then will be looked up in zig translatec result for filtering if use  translatec providebegin then follow a pcre2 regex and must with a name group called tk the matched names will be searched in zig translatec result for filtering the  translatec provideend part must match previous regex  and mit license  ","voidstar240/zig-wayland-xdg_shell-client":"xdg shell protocol extension for zig-wayland-client  wayland xdg shell client this is the xdg shell protocol extension for the zigwaylandclienthttpsgithubcomvoidstar240zigwaylandclient library ","nitrogenez/resfs":"file system abstraction layer for zig games and apps  resfs resource file system or resfs is a file system abstraction layer made specifically for games and applications in zig it includes file type detection resource lookup etc to use it just add it to your dependency tree in buildzigzon todo better readme ","boubl/sdl_ttf":"sdl_ttf but with the zig build system  sdlttf but with the zig build system this is a port of sdlttfhttpsgithubcomlibsdlorgsdlttf to the zig build system to use it with the zig package manager this is not a wrapper  usage requires zig version 0140 higher versions not tested fetch it with bash zig fetch save githttpsgithubcomboublsdlttfgit  and link it in your buildzig zig   sdlttf dependency const sdlttfdep  bdependencysdlttf  target  target optimize  optimize  const sdlttflib  sdlttfdepartifactsdlttf exemodlinklibrarysdlttflib    note  this was only tested on macos with 0140 for my personal use pr are welcome if this does not work on other platforms ","kassane/libvlcpp":"c++ bindings for libvlc  libvlcpp join the chat at httpsdiscordgg3h3k3jfhttpsimgshieldsiodiscord716939396464508958labeldiscordhttpsdiscordgg3h3k3jf libvlcpphttpscodevideolanorgvideolanlibvlcpp is a headeronly c bindings for the libvlc crossplatform multimedia api it is an official binding over the videolan libvlc library and can be used on many platforms  documentation since libvlcpp is a close wrapper over libvlc your documentation needs will be best served by either checking the libvlcpp source code or the libvlc documentationhttpswwwvideolanorgdevelopersvlcdocdoxygenhtmlgrouplibvlchtml  issues libvlcpp tickets are located on our gitlabhttpscodevideolanorgvideolanlibvlcppissues  contribution contribution are always welcome feel free to open a merge request on our gitlabhttpscodevideolanorgvideolanlibvlcppmergerequests  examples for usage examples head over to the examples folder where you will find several code samples such as helloworldexampleshelloworldmaincpp and more  used by libvlcpp is being used and tested extensively in various projects such as the videolan medialibraryhttpscodevideolanorgvideolanmedialibrary the previous vlc for uwphttpscodevideolanorgvideolanvlcwinrt app and more","kassane/catch2":"a modern, c++-native, test framework for unit-tests, tdd and bdd - using c++14, c++17 and later (c++11 support is in v2.x branch, and c++03 on the catch1.x branch) - uses zig build-system a idtopa catch2 logodataartworkcatch2logosmallwithbackgroundpng github releaseshttpsimgshieldsiogithubreleasecatchorgcatch2svghttpsgithubcomcatchorgcatch2releases linux build statushttpsgithubcomcatchorgcatch2actionsworkflowslinuxsimplebuildsymlbadgesvghttpsgithubcomcatchorgcatch2actionsworkflowslinuxsimplebuildsyml linux build statushttpsgithubcomcatchorgcatch2actionsworkflowslinuxotherbuildsymlbadgesvghttpsgithubcomcatchorgcatch2actionsworkflowslinuxotherbuildsyml macos build statushttpsgithubcomcatchorgcatch2actionsworkflowsmacbuildsymlbadgesvghttpsgithubcomcatchorgcatch2actionsworkflowsmacbuildsyml build statushttpsciappveyorcomapiprojectsstatusgithubcatchorgcatch2svgtruebranchdevelhttpsciappveyorcomprojectcatchorgcatch2 code coveragehttpscodecovioghcatchorgcatch2branchdevelgraphbadgesvghttpscodecovioghcatchorgcatch2 try onlinehttpsimgshieldsiobadgetryonlinebluesvghttpsgodboltorgzedoy15q9g join the chat in discord httpsdiscordgg4cws9zdhttpsimgshieldsiobadgediscordchatbrightgreensvghttpsdiscordgg4cws9zd  what is catch2 catch2 is mainly a unit testing framework for c but it also provides basic microbenchmarking features and simple bdd macros catch2s main advantage is that using it is both simple and natural test names do not have to be valid identifiers assertions look like normal c boolean expressions and sections provide a nice and local way to share setup and teardown code in tests example unit test cpp include catch2catchtestmacroshpp include cstdint uint32t factorial uint32t number   return number  1  number  factorialnumber1  number  testcase factorials are computed factorial   require factorial 1  1  require factorial 2  2  require factorial 3  6  require factorial10  3628800    example microbenchmark cpp include catch2catchtestmacroshpp include catch2benchmarkcatchbenchmarkhpp include cstdint uint64t fibonacciuint64t number  return number  2  number  fibonaccinumber  1  fibonaccinumber  2  testcasebenchmark fibonacci benchmark  requirefibonacci5  5 requirefibonacci20  6765 benchmarkfibonacci 20  return fibonacci20  requirefibonacci25  75025 benchmarkfibonacci 25  return fibonacci25    note that benchmarks are not run by default so you need to run it explicitly with the benchmark tag  catch2 v3 has been released you are on the devel branch where the v3 version is being developed v3 brings a bunch of significant changes the big one being that catch2 is no longer a singleheader library catch2 now behaves as a normal library with multiple headers and separately compiled implementation the documentation is slowly being updated to take these changes into account but this work is currently still ongoing for migrating from the v2 releases to v3 you should look at our documentationdocsmigratev2tov3mdtop it provides a simple guidelines on getting started and collects most common migration problems for the previous major version of catch2 look into the v2x branch here on githubhttpsgithubcomcatchorgcatch2treev2x  how to use it this documentation comprises these three parts  why do we need yet another c test frameworkdocswhycatchmdtop  tutorialdocstutorialmdtop  getting started  reference sectiondocsreadmemdtop  all the details  more  issues and bugs can be raised on the issue tracker on githubhttpsgithubcomcatchorgcatch2issues  for discussion or questions please use our discordhttpsdiscordgg4cws9zd  see who else is using catch2 in open source softwaredocsopensourceusersmdtop or commerciallydocscommercialusersmdtop ","ikavalio/zig-netip":"a simple ip address library for zig  zignetip this is mostly an educational project to implement a library similar to gos netiphttpspkggodevnetnetip using zig idioms and comptime features the library targets the latest stable release which is currently 013  definitions  ip4addr ip6addr ip6addrscoped and an addr union address types thatre small value types they can be converted to stdnetip4address or stdnetip6address all types have a bunch of comptime friendly methods eg parse get toarray and flexibleish format specifiers  ip4prefix ip6prefix and a prefix union address types thatre built on top of ip4addr and ip6addr abstractions  examples check the netip testsmainsrcnetipzig for more zig test addr example   ipv4 create const v4addr1  comptime try ip4addrparse192021 const v4addr2  try addrparse192021 const v4addr3  ip4addrfromarrayu8 u8 192 0 2 2  const v4addr4  ip4addrfromarrayu16 u16 0xc000 0x0202  const v4addr5  addrinit4ip4addrinit0xc0000203 const v4addr6  ip4addrfromnetaddresstry stdnetip4addressparse192023 1  ipv6 create const v6addr1  comptime try ip6addrparse2001db81 const v6addr2  try addrparse2001db81 const v6addr3  ip6addrfromarrayu8 u8 0x20 0x1 0xd 0xb8 0 0 0 0 0 0 0 0 0 0 0 0x2  const v6addr4  ip6addrfromarrayu16 u16 0x2001 0xdb8 0 0 0 0 0 0x2  const v6addr5  addrinit6ip6addrinit0x20010db8000000000000000000000003 const v6addr6  ip6addrfromnetaddresstry stdnetip6addressparse2001db83 1  ipv6 scoped const v6scoped1  comptime try ip6addrscopedparse2001db81eth2 const v6scoped2  try addrparse2001db824  handle parsing errors try testingexpectip4addrparse  ip4addrparseerrorinvalidcharacter try testingexpectaddrparse0  addrparseerrorinvalidcharacter try testingexpectip6addrparse  ip6addrparseerrorinvalidcharacter try testingexpectaddrparse  addrparseerrorinvalidcharacter  copy const v4addr7  v4addr5 const v6addr8  v6addr3   v4addr7 v4addr4 v4addr6 v6scoped1 v6scoped2 v6addr4 v6addr6  compare via values try testingexpectequalmathordereq orderv4addr1 v4addr2v4 try testingexpectequalmathorderlt orderv6addr1 v6addr8 try testingexpectequalmathordergt orderv6addr8 v6addr1 try testingexpectequalmathordergt orderv6addr2 v4addr2  cross af comparison  print try testingexpectfmt192021  v4addr1 try testingexpectfmtc0000202 x v4addr3 try testingexpectfmt1100000001011 b v4addr5 try testingexpectfmt2001db81  v6addr1 try testingexpectfmt2001db8000002 xe v6addr3 try testingexpectfmt20010db80003 x v6addr5 try testingexpectfmt20010db8000000000000000000000001 xe v6addr2  test prefix example   create a ipv6 prefix const v6prefix1  try ip6prefixinittry ip6addrparse2001db885a31 48 const v6prefix2  try prefixparse2001db885a348  create a prefix const v4prefix1  try ip4prefixinittry ip4addrparse192021 24 const v4prefix2  try prefixparse19202124  compare mask bits try testingexpectequalv6prefix1maskbits v6prefix2v6maskbits try testingexpectequalv4prefix1maskbits v4prefix2v4maskbits  handle parsing errors try testingexpecterrorprefixparseerroroverflow prefixparse2001db8256 try testingexpecterrorprefixparseerroroverflow prefixparse111133  print try testingexpectfmt2001db885a3148  v6prefix1 try testingexpectfmt20010db885a3000148 x v6prefix1 try testingexpectfmt2001db885a32001db885a3ffffffffffffffffffff r v6prefix1 try testingexpectfmt19202024  v4prefix1canonical try testingexpectfmt19202019202255 r v4prefix1  contains address try testingexpectv6prefix2containsaddrtry addrparse2001db885a3cafeefac try testingexpectv4prefix2containsaddrtry addrparse1920242  inclusion and overlap test try testingexpectequalprefixinclusionsub v6prefix1testinclusiontry ip6prefixparse2001db832 try testingexpectv6prefix2overlapstry prefixparse2001db832 try testingexpectequalprefixinclusionsub v4prefix1testinclusiontry ip4prefixparse19202016 try testingexpectv4prefix2overlapstry prefixparse19202016   ","madeorsk/s2s":"a zig binary serialization format.  struct to stream  stream to struct a zig binary serialization format and library project logodesignlogopng  features  convert nearly any zig runtime datatype to binary data and back  computes a stream signature that prevents deserialization of invalid data  no support for graph like structures everything is considered to be tree data unsupported types  all comptime only types  unbound pointers c pointers pointer to many  volatile pointers  untagged or external unions  opaque types  function pointers  frames  madeorsks fork this is a fork from ziglibss2shttpsgithubcomziglibss2s which provides more features for realworld usage  usable with zigs dependency manager  support u8 with sentinels  support hash maps  api the library itself provides only some apis as most of the serialization process is not configurable zig  serializes the given value t into the stream   stream is a instance of stdiowriter   t is the type to serialize   value is the instance to serialize fn serializestream anytype comptime t type value t streamerrorvoid  deserializes a value of type t from the stream   stream is a instance of stdioreader   t is the type to deserialize fn deserializestream anytype comptime t type streamerror  errorunexpecteddataendofstreamt  deserializes a value of type t from the stream   stream is a instance of stdioreader   t is the type to deserialize   allocator is an allocator require to allocate slices and pointers  result must be freed by using free fn deserializeallocstream anytype comptime t type allocator stdmemallocator streamerror  error unexpecteddata outofmemoryendofstream t  releases all memory allocated by deserializealloc   allocator is the allocator passed to deserializealloc   t is the type that was passed to deserializealloc   value is the value that was returned by deserializealloc fn freeallocator stdmemallocator comptime t type value t void   usage and development  adding the library the current latest version is 030 for zig 0130 shsession userhost s2s zig fetch save githttpsgithubcommadeorsks2sv030  in buildzig zig  add s2s dependency const s2s  bdependencys2s  target  target optimize  optimize  exerootmoduleaddimports2s s2smodules2s   project status most of the serializationdeserialization is implemented for the trivial case pointersslices with nonstandard alignment arent properly supported yet ","4zv4l/zbencode":"zig bencode library  zbencode zig bencode library  example of usage zig const std  importstd const bencode  importbencode const sizefmt  stdfmtfmtintsizebin pub fn main void   setup  args const allocator  stdheappageallocator const args  try stdprocessargsallocallocator defer stdprocessargsfreeallocator args if argslen  2  printusage s filetorrentn args0 return   read file  decoding const data  try stdfscwdreadfilealloctally debiantorrent 1  1024  1024 defer tallyfreedata var arena  stdheaparenaallocatorinittally var bencode  try parsearena data defer bencodedeinitarena  pretty print const root  bencodedictionnary const info  rootgetinfodictionnary stddebugprintname  n infogetname stddebugprintlength  n sizefmtintcastinfogetlengthinteger stddebugprinttracker n rootgetannounce stddebugprintcreator n rootgetcreated by stddebugprintcreated n rootgetcreation date    btest debiantorrent name  debian1290amd64netinstiso length  632mib tracker httpbttrackerdebianorg6969announce creator mktorrent 11 created 1736599700  ","quentin-k/zig-hc256":"hc256 cipher in zig  zig hc256 an implementation of the hc256 cipher in zig  license apache 20  usage 1 initialize the cipher with a key and iv 2 use the applystream method on a slice of u8s to encryptdecrypt the data the test vectors file teststestvectorszig shows examples on how to use the library","nektro/zig-ci-detect":"detect what kind of ci environment the program is running in  zigcidetect detect what kind of ci environment the program is in adapted from httpsgithubcomnpmcidetect  usage  pub fn detect ci the main function of this package if it detects that the program is running in one of the registered environments it will return an enum value of the type ci with the tag in accordance with the system  ci an enum of all the detectable cicd systems  license mit ","kassane/libsigcplusplus":"libsigc++ implements a typesafe callback system for standard c++. (uses zig build)  libsigc typesafe callback framework for c  introduction libsigc aka libsigcplusplus implements a typesafe callback system for standard c it allows you to define signals and to connect those signals to any callback function either global or a member function regardless of whether it is static or virtual libsigc is used by gtkmm to wrap the gtk signal system it does not depend on gtk or gtkmm sigc20 and sigc30 are different parallelinstallable abis this file describes sigc30  license distribution of library and components is under the lgpl as listed in the file copying examples and tests are public domain  compatibility compatible compilers must support c17 such as the decltypeauto specifier from c14 and stdinvoke  general information web site  httpslibsigcplusplusgithubiolibsigcplusplus download location  httpsdownloadgnomeorgsourceslibsigc  httpsgithubcomlibsigcpluspluslibsigcplusplusreleases reference documentation  httpslibsigcplusplusgithubiolibsigcplusplusreferencehtml tarballs contain reference documentation in tarballs generated with meson see the untrackeddocsdocsreferencehtml directory discussion on gnomes discourse forum  httpsdiscoursegnomeorgtagcplusplus  httpsdiscoursegnomeorgcplatform git repository  httpsgithubcomlibsigcpluspluslibsigcplusplus bugs can be reported to  httpsgithubcomlibsigcpluspluslibsigcplusplusissues patches can be submitted to  httpsgithubcomlibsigcpluspluslibsigcpluspluspulls  building whenever possible you should use the official binary packages approved by the supplier of your operating system such as your linux distribution for instance ubuntu linux debian linux and fedora linux have official libsigc packages  building from a release tarball building from a release tarball is easier than building from git its easiest to build with meson if the tarball was made with meson and to build with autotools if the tarball was made with autotools then you dont have to use maintainermode how do you know how the tarball was made if it was made with meson it contains files in untrackedbuildscripts untrackeddocs and possibly other subdirectories of untracked  building from a tarball with meson dont call the builddir build there is a directory called build with files used by autotools for instance sh  if the tarball was made with autotools and you want to rebuild the reference  documentation you must enable maintainermode  meson setup prefixsomedirectory libdirlib dmaintainermodetrue yourbuilddir   if the tarball was made with meson or you dont want to rebuild the docs  meson setup prefixsomedirectory libdirlib yourbuilddir   then  cd yourbuilddir  ninja  ninja install  you can run the tests like so  ninja test   building from a tarball with autotools for instance sh  if the tarball was made with autotools  configure prefixsomedirectory  if the tarball was made with meson you must enable maintainermode  autogensh prefixsomedirectory  then  make  make install  you can build the examples and tests and run the tests like so  make check   building from git building from git can be difficult so you should prefer building from a release tarball unless you need to work on the libsigc code itself jhbuild can be a good help see the jhbuild repohttpsgitlabgnomeorggnomejhbuild the jhbuild wikihttpswikignomeorgprojectsjhbuild and the jhbuild manualhttpsgnomepagesgitlabgnomeorgjhbuild  building from git with meson you must have meson properly installed meson ninja etc and you will also need mmcommonhttpsgitlabgnomeorggnomemmcommon version 100 or higher maintainermode is enabled by default when you build from a git clone dont call the builddir build there is a directory called build with files used by autotools sh  meson setup prefixsomedirectory libdirlib yourbuilddir   cd yourbuilddir  ninja  ninja install  you can run the tests like so  ninja test  you can create a tarball like so  ninja dist   building from git with autotools you must have autotools properly installed autoconf automake etc and you will also need mmcommonhttpsgitlabgnomeorggnomemmcommon sh  autogensh prefixsomedirectory  make  make install  you can build the examples and tests and run the tests like so  make check  you can create a tarball like so  make distcheck  or  make dist   building from git with cmake the cmake build is not used very often by the libsigc developers but it should work and we would welcome improvements for instance sh  mkdir libsigcplusplusbuild  cd libsigcplusplusbuild  cmake pathtolibsigcplusplus  make   building with microsoft visual c see msvcbuildsmdmsvcnmakemsvcbuildsmd ","weskoerber/inez":"inez - a fast ini parser testhttpsgithubcomweskoerberinezactionsworkflowstestyamlbadgesvghttpsgithubcomweskoerberinezactionsworkflowstestyaml docshttpsgithubcomweskoerberinezactionsworkflowsdocsyamlbadgesvghttpsgithubcomweskoerberinezactionsworkflowsdocsyaml  inez  a fast ini parser  quickstart 1 fetch inez using zigs package manager shell zig fetch save githttpsgithubcomweskoerberinezmain  2 add inez to your artifacts in buildzig zig const std  importstd pub fn buildb stdbuild void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const inez  bdependencyinez  target  target optimize  optimize moduleinez const myexe  baddexecutable name  myexe rootsourcefile  bpathsrcmainzig target  target optimize  optimize  myexerootmoduleaddimportinez    usage to use inez there are 4 main steps 1 initialize inez 2 load a document 3 parse the document 4 use parsed document see the examples directory for some examples you can run them by using the example step where name is the name of the example shell zig build example dexamplename  ","protonull/zig-time":"zig-time but with zig packaging  zigtime this is a fork of zigtimehttpsgithubcomnektrozigtime thats uses zigs native packaging instead of zigmodhttpsgithubcomnektrozigmod  usage add this repository to your buildzigzon eg zon  buildzigzon  name  awesomeproject version  010 minimumzigversion  0120 paths     dependencies   zigtime   url  githttpsgithubcomprotonullzigtimecommit hash hash  hash  comment this out zig will automatically tell you what has to use     after that add the dependency to your build script eg zig  buildzig const std  importstd pub fn build b stdbuild  void  const target  bstandardtargetoptions const optimize  bstandardoptimizeoption const exe  baddexecutable name  awesomeproject rootsourcefile   path  srcmainzig  target  target optimize  optimize   zigtime dependency goes here exerootmoduleaddimportzigtime bdependencyzigtime moduletime binstallartifactexe   you may notice theres zigtime zigtime and time  zigtime is what youd use as the import like so const time  importzigtime  zigtime is the key to match in buildzigzon which doesnt like dashes  time is the name of the exported module from zigtime the library itself "}